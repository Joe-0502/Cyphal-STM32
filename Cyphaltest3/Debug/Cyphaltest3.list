
Cyphaltest3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006b08  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015b0  08006c98  08006c98  00007c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008248  08008248  0000a06c  2**0
                  CONTENTS
  4 .ARM          00000008  08008248  08008248  00009248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008250  08008250  0000a06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008250  08008250  00009250  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008254  08008254  00009254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08008258  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000006c  080082c4  0000a06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  080082c4  0000a248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009815  00000000  00000000  0000a09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019ac  00000000  00000000  000138b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00015260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000751  00000000  00000000  00015ba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020832  00000000  00000000  000162f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d47  00000000  00000000  00036b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c0991  00000000  00000000  00040872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101203  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ec8  00000000  00000000  00101248  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  00104110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006c80 	.word	0x08006c80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08006c80 	.word	0x08006c80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8000270:	b480      	push	{r7}
 8000272:	b085      	sub	sp, #20
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	460b      	mov	r3, r1
 800027a:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8000280:	687b      	ldr	r3, [r7, #4]
 8000282:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000284:	e007      	b.n	8000296 <cavlFindExtremum+0x26>
    {
        result = c;
 8000286:	68bb      	ldr	r3, [r7, #8]
 8000288:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800028a:	78fb      	ldrb	r3, [r7, #3]
 800028c:	68ba      	ldr	r2, [r7, #8]
 800028e:	009b      	lsls	r3, r3, #2
 8000290:	4413      	add	r3, r2
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d1f4      	bne.n	8000286 <cavlFindExtremum+0x16>
    }
    return result;
 800029c:	68fb      	ldr	r3, [r7, #12]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr
	...

080002ac <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b084      	sub	sp, #16
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	460b      	mov	r3, r1
 80002b6:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d014      	beq.n	80002e8 <cavlPrivateRotate+0x3c>
 80002be:	78fb      	ldrb	r3, [r7, #3]
 80002c0:	f083 0301 	eor.w	r3, r3, #1
 80002c4:	b2db      	uxtb	r3, r3
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	009b      	lsls	r3, r3, #2
 80002ca:	4413      	add	r3, r2
 80002cc:	685b      	ldr	r3, [r3, #4]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d00a      	beq.n	80002e8 <cavlPrivateRotate+0x3c>
 80002d2:	687b      	ldr	r3, [r7, #4]
 80002d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80002d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002dc:	db04      	blt.n	80002e8 <cavlPrivateRotate+0x3c>
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80002e4:	2b01      	cmp	r3, #1
 80002e6:	dd05      	ble.n	80002f4 <cavlPrivateRotate+0x48>
 80002e8:	4b2a      	ldr	r3, [pc, #168]	@ (8000394 <cavlPrivateRotate+0xe8>)
 80002ea:	4a2b      	ldr	r2, [pc, #172]	@ (8000398 <cavlPrivateRotate+0xec>)
 80002ec:	2162      	movs	r1, #98	@ 0x62
 80002ee:	482b      	ldr	r0, [pc, #172]	@ (800039c <cavlPrivateRotate+0xf0>)
 80002f0:	f005 fcf6 	bl	8005ce0 <__assert_func>
    Cavl* const z = x->lr[!r];
 80002f4:	78fb      	ldrb	r3, [r7, #3]
 80002f6:	f083 0301 	eor.w	r3, r3, #1
 80002fa:	b2db      	uxtb	r3, r3
 80002fc:	687a      	ldr	r2, [r7, #4]
 80002fe:	009b      	lsls	r3, r3, #2
 8000300:	4413      	add	r3, r2
 8000302:	685b      	ldr	r3, [r3, #4]
 8000304:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d00e      	beq.n	800032c <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	681a      	ldr	r2, [r3, #0]
 8000312:	687b      	ldr	r3, [r7, #4]
 8000314:	681b      	ldr	r3, [r3, #0]
 8000316:	689b      	ldr	r3, [r3, #8]
 8000318:	6879      	ldr	r1, [r7, #4]
 800031a:	4299      	cmp	r1, r3
 800031c:	bf0c      	ite	eq
 800031e:	2301      	moveq	r3, #1
 8000320:	2300      	movne	r3, #0
 8000322:	b2db      	uxtb	r3, r3
 8000324:	009b      	lsls	r3, r3, #2
 8000326:	4413      	add	r3, r2
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68fa      	ldr	r2, [r7, #12]
 8000338:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 800033a:	78fb      	ldrb	r3, [r7, #3]
 800033c:	78fa      	ldrb	r2, [r7, #3]
 800033e:	f082 0201 	eor.w	r2, r2, #1
 8000342:	b2d2      	uxtb	r2, r2
 8000344:	4610      	mov	r0, r2
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	685a      	ldr	r2, [r3, #4]
 800034e:	6879      	ldr	r1, [r7, #4]
 8000350:	0083      	lsls	r3, r0, #2
 8000352:	440b      	add	r3, r1
 8000354:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	f083 0301 	eor.w	r3, r3, #1
 800035c:	b2db      	uxtb	r3, r3
 800035e:	687a      	ldr	r2, [r7, #4]
 8000360:	009b      	lsls	r3, r3, #2
 8000362:	4413      	add	r3, r2
 8000364:	685b      	ldr	r3, [r3, #4]
 8000366:	2b00      	cmp	r3, #0
 8000368:	d009      	beq.n	800037e <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800036a:	78fb      	ldrb	r3, [r7, #3]
 800036c:	f083 0301 	eor.w	r3, r3, #1
 8000370:	b2db      	uxtb	r3, r3
 8000372:	687a      	ldr	r2, [r7, #4]
 8000374:	009b      	lsls	r3, r3, #2
 8000376:	4413      	add	r3, r2
 8000378:	685b      	ldr	r3, [r3, #4]
 800037a:	687a      	ldr	r2, [r7, #4]
 800037c:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800037e:	78fb      	ldrb	r3, [r7, #3]
 8000380:	68fa      	ldr	r2, [r7, #12]
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	687a      	ldr	r2, [r7, #4]
 8000388:	605a      	str	r2, [r3, #4]
}
 800038a:	bf00      	nop
 800038c:	3710      	adds	r7, #16
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
 8000392:	bf00      	nop
 8000394:	08006c98 	.word	0x08006c98
 8000398:	08007f8c 	.word	0x08007f8c
 800039c:	08006ce0 	.word	0x08006ce0

080003a0 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b086      	sub	sp, #24
 80003a4:	af00      	add	r7, sp, #0
 80003a6:	6078      	str	r0, [r7, #4]
 80003a8:	460b      	mov	r3, r1
 80003aa:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d00a      	beq.n	80003c8 <cavlPrivateAdjustBalance+0x28>
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80003b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003bc:	db04      	blt.n	80003c8 <cavlPrivateAdjustBalance+0x28>
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80003c4:	2b01      	cmp	r3, #1
 80003c6:	dd05      	ble.n	80003d4 <cavlPrivateAdjustBalance+0x34>
 80003c8:	4b61      	ldr	r3, [pc, #388]	@ (8000550 <cavlPrivateAdjustBalance+0x1b0>)
 80003ca:	4a62      	ldr	r2, [pc, #392]	@ (8000554 <cavlPrivateAdjustBalance+0x1b4>)
 80003cc:	2177      	movs	r1, #119	@ 0x77
 80003ce:	4862      	ldr	r0, [pc, #392]	@ (8000558 <cavlPrivateAdjustBalance+0x1b8>)
 80003d0:	f005 fc86 	bl	8005ce0 <__assert_func>
    Cavl*        out    = x;
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80003de:	b2db      	uxtb	r3, r3
 80003e0:	78fa      	ldrb	r2, [r7, #3]
 80003e2:	2a00      	cmp	r2, #0
 80003e4:	d001      	beq.n	80003ea <cavlPrivateAdjustBalance+0x4a>
 80003e6:	2201      	movs	r2, #1
 80003e8:	e000      	b.n	80003ec <cavlPrivateAdjustBalance+0x4c>
 80003ea:	22ff      	movs	r2, #255	@ 0xff
 80003ec:	4413      	add	r3, r2
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 80003f2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80003f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80003fa:	db04      	blt.n	8000406 <cavlPrivateAdjustBalance+0x66>
 80003fc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000400:	2b01      	cmp	r3, #1
 8000402:	f340 809c 	ble.w	800053e <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8000406:	7cfb      	ldrb	r3, [r7, #19]
 8000408:	09db      	lsrs	r3, r3, #7
 800040a:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 800040c:	7cbb      	ldrb	r3, [r7, #18]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <cavlPrivateAdjustBalance+0x76>
 8000412:	2301      	movs	r3, #1
 8000414:	e001      	b.n	800041a <cavlPrivateAdjustBalance+0x7a>
 8000416:	f04f 33ff 	mov.w	r3, #4294967295
 800041a:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 800041c:	7cbb      	ldrb	r3, [r7, #18]
 800041e:	f083 0301 	eor.w	r3, r3, #1
 8000422:	b2db      	uxtb	r3, r3
 8000424:	687a      	ldr	r2, [r7, #4]
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	685b      	ldr	r3, [r3, #4]
 800042c:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	2b00      	cmp	r3, #0
 8000432:	d105      	bne.n	8000440 <cavlPrivateAdjustBalance+0xa0>
 8000434:	4b49      	ldr	r3, [pc, #292]	@ (800055c <cavlPrivateAdjustBalance+0x1bc>)
 8000436:	4a47      	ldr	r2, [pc, #284]	@ (8000554 <cavlPrivateAdjustBalance+0x1b4>)
 8000438:	217f      	movs	r1, #127	@ 0x7f
 800043a:	4847      	ldr	r0, [pc, #284]	@ (8000558 <cavlPrivateAdjustBalance+0x1b8>)
 800043c:	f005 fc50 	bl	8005ce0 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8000440:	68fb      	ldr	r3, [r7, #12]
 8000442:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000446:	461a      	mov	r2, r3
 8000448:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800044c:	fb02 f303 	mul.w	r3, r2, r3
 8000450:	2b00      	cmp	r3, #0
 8000452:	dc1c      	bgt.n	800048e <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8000454:	68fb      	ldr	r3, [r7, #12]
 8000456:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8000458:	7cbb      	ldrb	r3, [r7, #18]
 800045a:	4619      	mov	r1, r3
 800045c:	6878      	ldr	r0, [r7, #4]
 800045e:	f7ff ff25 	bl	80002ac <cavlPrivateRotate>
            if (0 == z->bf)
 8000462:	68fb      	ldr	r3, [r7, #12]
 8000464:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d109      	bne.n	8000480 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 800046c:	7c7b      	ldrb	r3, [r7, #17]
 800046e:	425b      	negs	r3, r3
 8000470:	b2db      	uxtb	r3, r3
 8000472:	b25a      	sxtb	r2, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8000478:	68fb      	ldr	r3, [r7, #12]
 800047a:	7c7a      	ldrb	r2, [r7, #17]
 800047c:	731a      	strb	r2, [r3, #12]
    {
 800047e:	e061      	b.n	8000544 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	2200      	movs	r2, #0
 8000484:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	2200      	movs	r2, #0
 800048a:	731a      	strb	r2, [r3, #12]
    {
 800048c:	e05a      	b.n	8000544 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800048e:	7cbb      	ldrb	r3, [r7, #18]
 8000490:	68fa      	ldr	r2, [r7, #12]
 8000492:	009b      	lsls	r3, r3, #2
 8000494:	4413      	add	r3, r2
 8000496:	685b      	ldr	r3, [r3, #4]
 8000498:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d105      	bne.n	80004ac <cavlPrivateAdjustBalance+0x10c>
 80004a0:	4b2f      	ldr	r3, [pc, #188]	@ (8000560 <cavlPrivateAdjustBalance+0x1c0>)
 80004a2:	4a2c      	ldr	r2, [pc, #176]	@ (8000554 <cavlPrivateAdjustBalance+0x1b4>)
 80004a4:	2192      	movs	r1, #146	@ 0x92
 80004a6:	482c      	ldr	r0, [pc, #176]	@ (8000558 <cavlPrivateAdjustBalance+0x1b8>)
 80004a8:	f005 fc1a 	bl	8005ce0 <__assert_func>
            out = y;
 80004ac:	68bb      	ldr	r3, [r7, #8]
 80004ae:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 80004b0:	7cbb      	ldrb	r3, [r7, #18]
 80004b2:	2b00      	cmp	r3, #0
 80004b4:	bf14      	ite	ne
 80004b6:	2301      	movne	r3, #1
 80004b8:	2300      	moveq	r3, #0
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	f083 0301 	eor.w	r3, r3, #1
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	b2db      	uxtb	r3, r3
 80004c8:	4619      	mov	r1, r3
 80004ca:	68f8      	ldr	r0, [r7, #12]
 80004cc:	f7ff feee 	bl	80002ac <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 80004d0:	7cbb      	ldrb	r3, [r7, #18]
 80004d2:	4619      	mov	r1, r3
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff fee9 	bl	80002ac <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80004e0:	461a      	mov	r2, r3
 80004e2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80004e6:	fb02 f303 	mul.w	r3, r2, r3
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	da09      	bge.n	8000502 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	7c7a      	ldrb	r2, [r7, #17]
 80004f2:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	2200      	movs	r2, #0
 80004f8:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	2200      	movs	r2, #0
 80004fe:	731a      	strb	r2, [r3, #12]
    {
 8000500:	e020      	b.n	8000544 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8000502:	68bb      	ldr	r3, [r7, #8]
 8000504:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000508:	461a      	mov	r2, r3
 800050a:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800050e:	fb02 f303 	mul.w	r3, r2, r3
 8000512:	2b00      	cmp	r3, #0
 8000514:	dd0c      	ble.n	8000530 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2200      	movs	r2, #0
 800051a:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	2200      	movs	r2, #0
 8000520:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8000522:	7c7b      	ldrb	r3, [r7, #17]
 8000524:	425b      	negs	r3, r3
 8000526:	b2db      	uxtb	r3, r3
 8000528:	b25a      	sxtb	r2, r3
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	731a      	strb	r2, [r3, #12]
    {
 800052e:	e009      	b.n	8000544 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2200      	movs	r2, #0
 8000534:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2200      	movs	r2, #0
 800053a:	731a      	strb	r2, [r3, #12]
    {
 800053c:	e002      	b.n	8000544 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	7cfa      	ldrb	r2, [r7, #19]
 8000542:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8000544:	697b      	ldr	r3, [r7, #20]
}
 8000546:	4618      	mov	r0, r3
 8000548:	3718      	adds	r7, #24
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	08006d28 	.word	0x08006d28
 8000554:	08007f70 	.word	0x08007f70
 8000558:	08006ce0 	.word	0x08006ce0
 800055c:	08006d58 	.word	0x08006d58
 8000560:	08006d64 	.word	0x08006d64

08000564 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b086      	sub	sp, #24
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	2b00      	cmp	r3, #0
 8000570:	d004      	beq.n	800057c <cavlPrivateRetraceOnGrowth+0x18>
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d005      	beq.n	8000588 <cavlPrivateRetraceOnGrowth+0x24>
 800057c:	4b23      	ldr	r3, [pc, #140]	@ (800060c <cavlPrivateRetraceOnGrowth+0xa8>)
 800057e:	4a24      	ldr	r2, [pc, #144]	@ (8000610 <cavlPrivateRetraceOnGrowth+0xac>)
 8000580:	21b5      	movs	r1, #181	@ 0xb5
 8000582:	4824      	ldr	r0, [pc, #144]	@ (8000614 <cavlPrivateRetraceOnGrowth+0xb0>)
 8000584:	f005 fbac 	bl	8005ce0 <__assert_func>
    Cavl* c = added;      // Child
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8000592:	e023      	b.n	80005dc <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	689b      	ldr	r3, [r3, #8]
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	429a      	cmp	r2, r3
 800059c:	bf0c      	ite	eq
 800059e:	2301      	moveq	r3, #1
 80005a0:	2300      	movne	r3, #0
 80005a2:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	693a      	ldr	r2, [r7, #16]
 80005a8:	009b      	lsls	r3, r3, #2
 80005aa:	4413      	add	r3, r2
 80005ac:	685b      	ldr	r3, [r3, #4]
 80005ae:	697a      	ldr	r2, [r7, #20]
 80005b0:	429a      	cmp	r2, r3
 80005b2:	d005      	beq.n	80005c0 <cavlPrivateRetraceOnGrowth+0x5c>
 80005b4:	4b18      	ldr	r3, [pc, #96]	@ (8000618 <cavlPrivateRetraceOnGrowth+0xb4>)
 80005b6:	4a16      	ldr	r2, [pc, #88]	@ (8000610 <cavlPrivateRetraceOnGrowth+0xac>)
 80005b8:	21bb      	movs	r1, #187	@ 0xbb
 80005ba:	4816      	ldr	r0, [pc, #88]	@ (8000614 <cavlPrivateRetraceOnGrowth+0xb0>)
 80005bc:	f005 fb90 	bl	8005ce0 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 80005c0:	7bfb      	ldrb	r3, [r7, #15]
 80005c2:	4619      	mov	r1, r3
 80005c4:	6938      	ldr	r0, [r7, #16]
 80005c6:	f7ff feeb 	bl	80003a0 <cavlPrivateAdjustBalance>
 80005ca:	6178      	str	r0, [r7, #20]
        p = c->up;
 80005cc:	697b      	ldr	r3, [r7, #20]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 80005d2:	697b      	ldr	r3, [r7, #20]
 80005d4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d003      	beq.n	80005e4 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 80005dc:	693b      	ldr	r3, [r7, #16]
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d1d8      	bne.n	8000594 <cavlPrivateRetraceOnGrowth+0x30>
 80005e2:	e000      	b.n	80005e6 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80005e4:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80005e6:	697b      	ldr	r3, [r7, #20]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d105      	bne.n	80005f8 <cavlPrivateRetraceOnGrowth+0x94>
 80005ec:	4b0b      	ldr	r3, [pc, #44]	@ (800061c <cavlPrivateRetraceOnGrowth+0xb8>)
 80005ee:	4a08      	ldr	r2, [pc, #32]	@ (8000610 <cavlPrivateRetraceOnGrowth+0xac>)
 80005f0:	21c3      	movs	r1, #195	@ 0xc3
 80005f2:	4808      	ldr	r0, [pc, #32]	@ (8000614 <cavlPrivateRetraceOnGrowth+0xb0>)
 80005f4:	f005 fb74 	bl	8005ce0 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d101      	bne.n	8000602 <cavlPrivateRetraceOnGrowth+0x9e>
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	e000      	b.n	8000604 <cavlPrivateRetraceOnGrowth+0xa0>
 8000602:	2300      	movs	r3, #0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3718      	adds	r7, #24
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}
 800060c:	08006d70 	.word	0x08006d70
 8000610:	08007f54 	.word	0x08007f54
 8000614:	08006ce0 	.word	0x08006ce0
 8000618:	08006d94 	.word	0x08006d94
 800061c:	08006da4 	.word	0x08006da4

08000620 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	@ 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	60f8      	str	r0, [r7, #12]
 8000628:	60b9      	str	r1, [r7, #8]
 800062a:	607a      	str	r2, [r7, #4]
 800062c:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d065      	beq.n	8000704 <cavlSearch+0xe4>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d062      	beq.n	8000704 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8000648:	e02f      	b.n	80006aa <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 800064a:	69fb      	ldr	r3, [r7, #28]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	4611      	mov	r1, r2
 8000652:	68b8      	ldr	r0, [r7, #8]
 8000654:	4798      	blx	r3
 8000656:	4603      	mov	r3, r0
 8000658:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 800065a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800065e:	2b00      	cmp	r3, #0
 8000660:	d103      	bne.n	800066a <cavlSearch+0x4a>
            {
                out = *n;
 8000662:	69fb      	ldr	r3, [r7, #28]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8000668:	e023      	b.n	80006b2 <cavlSearch+0x92>
            }
            up = *n;
 800066a:	69fb      	ldr	r3, [r7, #28]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8000670:	69fb      	ldr	r3, [r7, #28]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000678:	2b00      	cmp	r3, #0
 800067a:	bfcc      	ite	gt
 800067c:	2301      	movgt	r3, #1
 800067e:	2300      	movle	r3, #0
 8000680:	b2db      	uxtb	r3, r3
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	4413      	add	r3, r2
 8000686:	3304      	adds	r3, #4
 8000688:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 800068a:	69fb      	ldr	r3, [r7, #28]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d00b      	beq.n	80006aa <cavlSearch+0x8a>
 8000692:	69fb      	ldr	r3, [r7, #28]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	6a3a      	ldr	r2, [r7, #32]
 800069a:	429a      	cmp	r2, r3
 800069c:	d005      	beq.n	80006aa <cavlSearch+0x8a>
 800069e:	4b1c      	ldr	r3, [pc, #112]	@ (8000710 <cavlSearch+0xf0>)
 80006a0:	4a1c      	ldr	r2, [pc, #112]	@ (8000714 <cavlSearch+0xf4>)
 80006a2:	21db      	movs	r1, #219	@ 0xdb
 80006a4:	481c      	ldr	r0, [pc, #112]	@ (8000718 <cavlSearch+0xf8>)
 80006a6:	f005 fb1b 	bl	8005ce0 <__assert_func>
        while (*n != NULL)
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d1cb      	bne.n	800064a <cavlSearch+0x2a>
        }
        if (NULL == out)
 80006b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d125      	bne.n	8000704 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d004      	beq.n	80006c8 <cavlSearch+0xa8>
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	68b8      	ldr	r0, [r7, #8]
 80006c2:	4798      	blx	r3
 80006c4:	4603      	mov	r3, r0
 80006c6:	e000      	b.n	80006ca <cavlSearch+0xaa>
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 80006cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d018      	beq.n	8000704 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80006d6:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 80006d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 80006de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
                out->up        = up;
 80006e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006e6:	6a3a      	ldr	r2, [r7, #32]
 80006e8:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 80006ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ec:	2200      	movs	r2, #0
 80006ee:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 80006f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80006f2:	f7ff ff37 	bl	8000564 <cavlPrivateRetraceOnGrowth>
 80006f6:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d002      	beq.n	8000704 <cavlSearch+0xe4>
                {
                    *root = rt;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8000704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000706:	4618      	mov	r0, r3
 8000708:	3728      	adds	r7, #40	@ 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	08006db0 	.word	0x08006db0
 8000714:	08007f48 	.word	0x08007f48
 8000718:	08006ce0 	.word	0x08006ce0

0800071c <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b088      	sub	sp, #32
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	f000 8116 	beq.w	800095a <cavlRemove+0x23e>
 800072e:	683b      	ldr	r3, [r7, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f000 8112 	beq.w	800095a <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d105      	bne.n	800074a <cavlRemove+0x2e>
 800073e:	4b89      	ldr	r3, [pc, #548]	@ (8000964 <cavlRemove+0x248>)
 8000740:	4a89      	ldr	r2, [pc, #548]	@ (8000968 <cavlRemove+0x24c>)
 8000742:	21f6      	movs	r1, #246	@ 0xf6
 8000744:	4889      	ldr	r0, [pc, #548]	@ (800096c <cavlRemove+0x250>)
 8000746:	f005 facb 	bl	8005ce0 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 800074a:	683b      	ldr	r3, [r7, #0]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d10a      	bne.n	8000768 <cavlRemove+0x4c>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	683a      	ldr	r2, [r7, #0]
 8000758:	429a      	cmp	r2, r3
 800075a:	d005      	beq.n	8000768 <cavlRemove+0x4c>
 800075c:	4b84      	ldr	r3, [pc, #528]	@ (8000970 <cavlRemove+0x254>)
 800075e:	4a82      	ldr	r2, [pc, #520]	@ (8000968 <cavlRemove+0x24c>)
 8000760:	21f7      	movs	r1, #247	@ 0xf7
 8000762:	4882      	ldr	r0, [pc, #520]	@ (800096c <cavlRemove+0x250>)
 8000764:	f005 fabc 	bl	8005ce0 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8000768:	2300      	movs	r3, #0
 800076a:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 800076c:	2300      	movs	r3, #0
 800076e:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8000770:	683b      	ldr	r3, [r7, #0]
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d073      	beq.n	8000860 <cavlRemove+0x144>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	689b      	ldr	r3, [r3, #8]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d06f      	beq.n	8000860 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8000780:	683b      	ldr	r3, [r7, #0]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	2100      	movs	r1, #0
 8000786:	4618      	mov	r0, r3
 8000788:	f7ff fd72 	bl	8000270 <cavlFindExtremum>
 800078c:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d007      	beq.n	80007a4 <cavlRemove+0x88>
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d103      	bne.n	80007a4 <cavlRemove+0x88>
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d105      	bne.n	80007b0 <cavlRemove+0x94>
 80007a4:	4b73      	ldr	r3, [pc, #460]	@ (8000974 <cavlRemove+0x258>)
 80007a6:	4a70      	ldr	r2, [pc, #448]	@ (8000968 <cavlRemove+0x24c>)
 80007a8:	21ff      	movs	r1, #255	@ 0xff
 80007aa:	4870      	ldr	r0, [pc, #448]	@ (800096c <cavlRemove+0x250>)
 80007ac:	f005 fa98 	bl	8005ce0 <__assert_func>
            re->bf        = node->bf;
 80007b0:	683b      	ldr	r3, [r7, #0]
 80007b2:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	685a      	ldr	r2, [r3, #4]
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	697a      	ldr	r2, [r7, #20]
 80007c8:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 80007ca:	697b      	ldr	r3, [r7, #20]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	683a      	ldr	r2, [r7, #0]
 80007d0:	429a      	cmp	r2, r3
 80007d2:	d025      	beq.n	8000820 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 80007da:	69fb      	ldr	r3, [r7, #28]
 80007dc:	685b      	ldr	r3, [r3, #4]
 80007de:	697a      	ldr	r2, [r7, #20]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d006      	beq.n	80007f2 <cavlRemove+0xd6>
 80007e4:	4b64      	ldr	r3, [pc, #400]	@ (8000978 <cavlRemove+0x25c>)
 80007e6:	4a60      	ldr	r2, [pc, #384]	@ (8000968 <cavlRemove+0x24c>)
 80007e8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80007ec:	485f      	ldr	r0, [pc, #380]	@ (800096c <cavlRemove+0x250>)
 80007ee:	f005 fa77 	bl	8005ce0 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 80007f2:	697b      	ldr	r3, [r7, #20]
 80007f4:	689a      	ldr	r2, [r3, #8]
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	685b      	ldr	r3, [r3, #4]
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d003      	beq.n	800080a <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	685b      	ldr	r3, [r3, #4]
 8000806:	69fa      	ldr	r2, [r7, #28]
 8000808:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	689a      	ldr	r2, [r3, #8]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	689b      	ldr	r3, [r3, #8]
 8000816:	697a      	ldr	r2, [r7, #20]
 8000818:	601a      	str	r2, [r3, #0]
                r             = false;
 800081a:	2300      	movs	r3, #0
 800081c:	76fb      	strb	r3, [r7, #27]
 800081e:	e003      	b.n	8000828 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8000824:	2301      	movs	r3, #1
 8000826:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	681a      	ldr	r2, [r3, #0]
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8000830:	697b      	ldr	r3, [r7, #20]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d00f      	beq.n	8000858 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8000838:	697b      	ldr	r3, [r7, #20]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	689b      	ldr	r3, [r3, #8]
 8000842:	6839      	ldr	r1, [r7, #0]
 8000844:	4299      	cmp	r1, r3
 8000846:	bf0c      	ite	eq
 8000848:	2301      	moveq	r3, #1
 800084a:	2300      	movne	r3, #0
 800084c:	b2db      	uxtb	r3, r3
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	4413      	add	r3, r2
 8000852:	697a      	ldr	r2, [r7, #20]
 8000854:	605a      	str	r2, [r3, #4]
        {
 8000856:	e046      	b.n	80008e6 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	697a      	ldr	r2, [r7, #20]
 800085c:	601a      	str	r2, [r3, #0]
        {
 800085e:	e042      	b.n	80008e6 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bf14      	ite	ne
 800086e:	2301      	movne	r3, #1
 8000870:	2300      	moveq	r3, #0
 8000872:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8000874:	7cfb      	ldrb	r3, [r7, #19]
 8000876:	683a      	ldr	r2, [r7, #0]
 8000878:	009b      	lsls	r3, r3, #2
 800087a:	4413      	add	r3, r2
 800087c:	685b      	ldr	r3, [r3, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d006      	beq.n	8000890 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 8000882:	7cfb      	ldrb	r3, [r7, #19]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	4413      	add	r3, r2
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	69fa      	ldr	r2, [r7, #28]
 800088e:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8000890:	69fb      	ldr	r3, [r7, #28]
 8000892:	2b00      	cmp	r3, #0
 8000894:	d020      	beq.n	80008d8 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8000896:	69fb      	ldr	r3, [r7, #28]
 8000898:	689b      	ldr	r3, [r3, #8]
 800089a:	683a      	ldr	r2, [r7, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	bf0c      	ite	eq
 80008a0:	2301      	moveq	r3, #1
 80008a2:	2300      	movne	r3, #0
 80008a4:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 80008a6:	7cfb      	ldrb	r3, [r7, #19]
 80008a8:	7ef8      	ldrb	r0, [r7, #27]
 80008aa:	683a      	ldr	r2, [r7, #0]
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	4413      	add	r3, r2
 80008b0:	685a      	ldr	r2, [r3, #4]
 80008b2:	69f9      	ldr	r1, [r7, #28]
 80008b4:	0083      	lsls	r3, r0, #2
 80008b6:	440b      	add	r3, r1
 80008b8:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 80008ba:	7efb      	ldrb	r3, [r7, #27]
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	4413      	add	r3, r2
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00e      	beq.n	80008e6 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 80008c8:	7efb      	ldrb	r3, [r7, #27]
 80008ca:	69fa      	ldr	r2, [r7, #28]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	685b      	ldr	r3, [r3, #4]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	e006      	b.n	80008e6 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 80008d8:	7cfb      	ldrb	r3, [r7, #19]
 80008da:	683a      	ldr	r2, [r7, #0]
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	4413      	add	r3, r2
 80008e0:	685a      	ldr	r2, [r3, #4]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80008e6:	69fb      	ldr	r3, [r7, #28]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d036      	beq.n	800095a <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 80008f0:	7efb      	ldrb	r3, [r7, #27]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	bf14      	ite	ne
 80008f6:	2301      	movne	r3, #1
 80008f8:	2300      	moveq	r3, #0
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	f083 0301 	eor.w	r3, r3, #1
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	b2db      	uxtb	r3, r3
 8000908:	4619      	mov	r1, r3
 800090a:	69f8      	ldr	r0, [r7, #28]
 800090c:	f7ff fd48 	bl	80003a0 <cavlPrivateAdjustBalance>
 8000910:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d10b      	bne.n	800093a <cavlRemove+0x21e>
 8000922:	69fb      	ldr	r3, [r7, #28]
 8000924:	2b00      	cmp	r3, #0
 8000926:	d008      	beq.n	800093a <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	689b      	ldr	r3, [r3, #8]
 800092c:	68fa      	ldr	r2, [r7, #12]
 800092e:	429a      	cmp	r2, r3
 8000930:	bf0c      	ite	eq
 8000932:	2301      	moveq	r3, #1
 8000934:	2300      	movne	r3, #0
 8000936:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8000938:	e7da      	b.n	80008f0 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 800093a:	69fb      	ldr	r3, [r7, #28]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d10c      	bne.n	800095a <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d106      	bne.n	8000954 <cavlRemove+0x238>
 8000946:	4b0d      	ldr	r3, [pc, #52]	@ (800097c <cavlRemove+0x260>)
 8000948:	4a07      	ldr	r2, [pc, #28]	@ (8000968 <cavlRemove+0x24c>)
 800094a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800094e:	4807      	ldr	r0, [pc, #28]	@ (800096c <cavlRemove+0x250>)
 8000950:	f005 f9c6 	bl	8005ce0 <__assert_func>
                *root = c;
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	68fa      	ldr	r2, [r7, #12]
 8000958:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 800095a:	bf00      	nop
 800095c:	3720      	adds	r7, #32
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08006dd4 	.word	0x08006dd4
 8000968:	08007fd0 	.word	0x08007fd0
 800096c:	08006ce0 	.word	0x08006ce0
 8000970:	08006de4 	.word	0x08006de4
 8000974:	08006e0c 	.word	0x08006e0c
 8000978:	08006e44 	.word	0x08006e44
 800097c:	08006da4 	.word	0x08006da4

08000980 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8000980:	b480      	push	{r7}
 8000982:	b083      	sub	sp, #12
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8000988:	687b      	ldr	r3, [r7, #4]
}
 800098a:	4618      	mov	r0, r3
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
	...

08000998 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	460a      	mov	r2, r1
 80009a2:	80fb      	strh	r3, [r7, #6]
 80009a4:	4613      	mov	r3, r2
 80009a6:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80009a8:	88fb      	ldrh	r3, [r7, #6]
 80009aa:	021b      	lsls	r3, r3, #8
 80009ac:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 80009ae:	88fb      	ldrh	r3, [r7, #6]
 80009b0:	0a1b      	lsrs	r3, r3, #8
 80009b2:	b299      	uxth	r1, r3
 80009b4:	797b      	ldrb	r3, [r7, #5]
 80009b6:	b29b      	uxth	r3, r3
 80009b8:	404b      	eors	r3, r1
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	4905      	ldr	r1, [pc, #20]	@ (80009d4 <crcAddByte+0x3c>)
 80009c0:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80009c4:	4053      	eors	r3, r2
 80009c6:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr
 80009d4:	08007c20 	.word	0x08007c20

080009d8 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b088      	sub	sp, #32
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	60b9      	str	r1, [r7, #8]
 80009e2:	607a      	str	r2, [r7, #4]
 80009e4:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d108      	bne.n	80009fe <crcAdd+0x26>
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d005      	beq.n	80009fe <crcAdd+0x26>
 80009f2:	4b12      	ldr	r3, [pc, #72]	@ (8000a3c <crcAdd+0x64>)
 80009f4:	4a12      	ldr	r2, [pc, #72]	@ (8000a40 <crcAdd+0x68>)
 80009f6:	2185      	movs	r1, #133	@ 0x85
 80009f8:	4812      	ldr	r0, [pc, #72]	@ (8000a44 <crcAdd+0x6c>)
 80009fa:	f005 f971 	bl	8005ce0 <__assert_func>
    TransferCRC    out = crc;
 80009fe:	89fb      	ldrh	r3, [r7, #14]
 8000a00:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8000a06:	2300      	movs	r3, #0
 8000a08:	617b      	str	r3, [r7, #20]
 8000a0a:	e00e      	b.n	8000a2a <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8000a0c:	69bb      	ldr	r3, [r7, #24]
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	8bfb      	ldrh	r3, [r7, #30]
 8000a12:	4611      	mov	r1, r2
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ffbf 	bl	8000998 <crcAddByte>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	83fb      	strh	r3, [r7, #30]
        ++p;
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	3301      	adds	r3, #1
 8000a22:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	3301      	adds	r3, #1
 8000a28:	617b      	str	r3, [r7, #20]
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3ec      	bcc.n	8000a0c <crcAdd+0x34>
    }
    return out;
 8000a32:	8bfb      	ldrh	r3, [r7, #30]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3720      	adds	r7, #32
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08006e54 	.word	0x08006e54
 8000a40:	08007e9c 	.word	0x08007e9c
 8000a44:	08006e7c 	.word	0x08006e7c

08000a48 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b084      	sub	sp, #16
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	4603      	mov	r3, r0
 8000a50:	460a      	mov	r2, r1
 8000a52:	80fb      	strh	r3, [r7, #6]
 8000a54:	4613      	mov	r3, r2
 8000a56:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8000a58:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	da05      	bge.n	8000a6c <txMakeMessageSessionSpecifier+0x24>
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <txMakeMessageSessionSpecifier+0x54>)
 8000a62:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <txMakeMessageSessionSpecifier+0x58>)
 8000a64:	21ac      	movs	r1, #172	@ 0xac
 8000a66:	480f      	ldr	r0, [pc, #60]	@ (8000aa4 <txMakeMessageSessionSpecifier+0x5c>)
 8000a68:	f005 f93a 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8000a6c:	88fb      	ldrh	r3, [r7, #6]
 8000a6e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000a72:	d305      	bcc.n	8000a80 <txMakeMessageSessionSpecifier+0x38>
 8000a74:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <txMakeMessageSessionSpecifier+0x60>)
 8000a76:	4a0a      	ldr	r2, [pc, #40]	@ (8000aa0 <txMakeMessageSessionSpecifier+0x58>)
 8000a78:	21ad      	movs	r1, #173	@ 0xad
 8000a7a:	480a      	ldr	r0, [pc, #40]	@ (8000aa4 <txMakeMessageSessionSpecifier+0x5c>)
 8000a7c:	f005 f930 	bl	8005ce0 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8000a80:	88fb      	ldrh	r3, [r7, #6]
 8000a82:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8000a86:	b29b      	uxth	r3, r3
 8000a88:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8000a8a:	797a      	ldrb	r2, [r7, #5]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	021b      	lsls	r3, r3, #8
 8000a90:	4313      	orrs	r3, r2
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3710      	adds	r7, #16
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	08006ec4 	.word	0x08006ec4
 8000aa0:	08007ea4 	.word	0x08007ea4
 8000aa4:	08006e7c 	.word	0x08006e7c
 8000aa8:	08006ed8 	.word	0x08006ed8

08000aac <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4604      	mov	r4, r0
 8000ab4:	4608      	mov	r0, r1
 8000ab6:	4611      	mov	r1, r2
 8000ab8:	461a      	mov	r2, r3
 8000aba:	4623      	mov	r3, r4
 8000abc:	80fb      	strh	r3, [r7, #6]
 8000abe:	4603      	mov	r3, r0
 8000ac0:	717b      	strb	r3, [r7, #5]
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	713b      	strb	r3, [r7, #4]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8000aca:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	da05      	bge.n	8000ade <txMakeServiceSessionSpecifier+0x32>
 8000ad2:	4b17      	ldr	r3, [pc, #92]	@ (8000b30 <txMakeServiceSessionSpecifier+0x84>)
 8000ad4:	4a17      	ldr	r2, [pc, #92]	@ (8000b34 <txMakeServiceSessionSpecifier+0x88>)
 8000ad6:	21b7      	movs	r1, #183	@ 0xb7
 8000ad8:	4817      	ldr	r0, [pc, #92]	@ (8000b38 <txMakeServiceSessionSpecifier+0x8c>)
 8000ada:	f005 f901 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8000ade:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	da05      	bge.n	8000af2 <txMakeServiceSessionSpecifier+0x46>
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <txMakeServiceSessionSpecifier+0x90>)
 8000ae8:	4a12      	ldr	r2, [pc, #72]	@ (8000b34 <txMakeServiceSessionSpecifier+0x88>)
 8000aea:	21b8      	movs	r1, #184	@ 0xb8
 8000aec:	4812      	ldr	r0, [pc, #72]	@ (8000b38 <txMakeServiceSessionSpecifier+0x8c>)
 8000aee:	f005 f8f7 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000af8:	d305      	bcc.n	8000b06 <txMakeServiceSessionSpecifier+0x5a>
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <txMakeServiceSessionSpecifier+0x94>)
 8000afc:	4a0d      	ldr	r2, [pc, #52]	@ (8000b34 <txMakeServiceSessionSpecifier+0x88>)
 8000afe:	21b9      	movs	r1, #185	@ 0xb9
 8000b00:	480d      	ldr	r0, [pc, #52]	@ (8000b38 <txMakeServiceSessionSpecifier+0x8c>)
 8000b02:	f005 f8ed 	bl	8005ce0 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8000b06:	793a      	ldrb	r2, [r7, #4]
 8000b08:	78fb      	ldrb	r3, [r7, #3]
 8000b0a:	01db      	lsls	r3, r3, #7
 8000b0c:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8000b0e:	88fb      	ldrh	r3, [r7, #6]
 8000b10:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8000b12:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8000b14:	797a      	ldrb	r2, [r7, #5]
 8000b16:	2a00      	cmp	r2, #0
 8000b18:	d002      	beq.n	8000b20 <txMakeServiceSessionSpecifier+0x74>
 8000b1a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000b1e:	e000      	b.n	8000b22 <txMakeServiceSessionSpecifier+0x76>
 8000b20:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8000b22:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8000b24:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd90      	pop	{r4, r7, pc}
 8000b30:	08006ec4 	.word	0x08006ec4
 8000b34:	08007ec4 	.word	0x08007ec4
 8000b38:	08006e7c 	.word	0x08006e7c
 8000b3c:	08006eec 	.word	0x08006eec
 8000b40:	08006f00 	.word	0x08006f00

08000b44 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8000b4c:	2340      	movs	r3, #64	@ 0x40
 8000b4e:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8000b50:	2300      	movs	r3, #0
 8000b52:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2b07      	cmp	r3, #7
 8000b58:	d802      	bhi.n	8000b60 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8000b5a:	2308      	movs	r3, #8
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	e014      	b.n	8000b8a <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8000b60:	687a      	ldr	r2, [r7, #4]
 8000b62:	68bb      	ldr	r3, [r7, #8]
 8000b64:	429a      	cmp	r2, r3
 8000b66:	d808      	bhi.n	8000b7a <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8000b68:	4a0c      	ldr	r2, [pc, #48]	@ (8000b9c <adjustPresentationLayerMTU+0x58>)
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	4413      	add	r3, r2
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	461a      	mov	r2, r3
 8000b72:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba0 <adjustPresentationLayerMTU+0x5c>)
 8000b74:	5c9b      	ldrb	r3, [r3, r2]
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e007      	b.n	8000b8a <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8000b7a:	4a08      	ldr	r2, [pc, #32]	@ (8000b9c <adjustPresentationLayerMTU+0x58>)
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	4413      	add	r3, r2
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	461a      	mov	r2, r3
 8000b84:	4b06      	ldr	r3, [pc, #24]	@ (8000ba0 <adjustPresentationLayerMTU+0x5c>)
 8000b86:	5c9b      	ldrb	r3, [r3, r2]
 8000b88:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	3b01      	subs	r3, #1
}
 8000b8e:	4618      	mov	r0, r3
 8000b90:	3714      	adds	r7, #20
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	08007e30 	.word	0x08007e30
 8000ba0:	08007e20 	.word	0x08007e20

08000ba4 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	@ 0x28
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	60f8      	str	r0, [r7, #12]
 8000bac:	60b9      	str	r1, [r7, #8]
 8000bae:	607a      	str	r2, [r7, #4]
 8000bb0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d105      	bne.n	8000bc4 <txMakeCANID+0x20>
 8000bb8:	4b60      	ldr	r3, [pc, #384]	@ (8000d3c <txMakeCANID+0x198>)
 8000bba:	4a61      	ldr	r2, [pc, #388]	@ (8000d40 <txMakeCANID+0x19c>)
 8000bbc:	21d9      	movs	r1, #217	@ 0xd9
 8000bbe:	4861      	ldr	r0, [pc, #388]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000bc0:	f005 f88e 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8000bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d105      	bne.n	8000bd6 <txMakeCANID+0x32>
 8000bca:	4b5f      	ldr	r3, [pc, #380]	@ (8000d48 <txMakeCANID+0x1a4>)
 8000bcc:	4a5c      	ldr	r2, [pc, #368]	@ (8000d40 <txMakeCANID+0x19c>)
 8000bce:	21da      	movs	r1, #218	@ 0xda
 8000bd0:	485c      	ldr	r0, [pc, #368]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000bd2:	f005 f885 	bl	8005ce0 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8000bd6:	f06f 0301 	mvn.w	r3, #1
 8000bda:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d157      	bne.n	8000c94 <txMakeCANID+0xf0>
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	791b      	ldrb	r3, [r3, #4]
 8000be8:	2bff      	cmp	r3, #255	@ 0xff
 8000bea:	d153      	bne.n	8000c94 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8000bf0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000bf4:	d24e      	bcs.n	8000c94 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	db11      	blt.n	8000c22 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	78fa      	ldrb	r2, [r7, #3]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff1e 	bl	8000a48 <txMakeMessageSessionSpecifier>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8000c10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	da75      	bge.n	8000d02 <txMakeCANID+0x15e>
 8000c16:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <txMakeCANID+0x1a8>)
 8000c18:	4a49      	ldr	r2, [pc, #292]	@ (8000d40 <txMakeCANID+0x19c>)
 8000c1a:	21e2      	movs	r1, #226	@ 0xe2
 8000c1c:	4849      	ldr	r0, [pc, #292]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000c1e:	f005 f85f 	bl	8005ce0 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000c26:	429a      	cmp	r2, r3
 8000c28:	d830      	bhi.n	8000c8c <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d108      	bne.n	8000c42 <txMakeCANID+0x9e>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d005      	beq.n	8000c42 <txMakeCANID+0x9e>
 8000c36:	4b46      	ldr	r3, [pc, #280]	@ (8000d50 <txMakeCANID+0x1ac>)
 8000c38:	4a41      	ldr	r2, [pc, #260]	@ (8000d40 <txMakeCANID+0x19c>)
 8000c3a:	21e6      	movs	r1, #230	@ 0xe6
 8000c3c:	4841      	ldr	r0, [pc, #260]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000c3e:	f005 f84f 	bl	8005ce0 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	68b9      	ldr	r1, [r7, #8]
 8000c46:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c4a:	f7ff fec5 	bl	80009d8 <crcAdd>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	b2db      	uxtb	r3, r3
 8000c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000c56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	885b      	ldrh	r3, [r3, #2]
 8000c5e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8000c62:	4611      	mov	r1, r2
 8000c64:	4618      	mov	r0, r3
 8000c66:	f7ff feef 	bl	8000a48 <txMakeMessageSessionSpecifier>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c70:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8000c72:	69fb      	ldr	r3, [r7, #28]
 8000c74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000c78:	d305      	bcc.n	8000c86 <txMakeCANID+0xe2>
 8000c7a:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <txMakeCANID+0x1b0>)
 8000c7c:	4a30      	ldr	r2, [pc, #192]	@ (8000d40 <txMakeCANID+0x19c>)
 8000c7e:	21e9      	movs	r1, #233	@ 0xe9
 8000c80:	4830      	ldr	r0, [pc, #192]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000c82:	f005 f82d 	bl	8005ce0 <__assert_func>
            out = (int32_t) spec;
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000c8a:	e03a      	b.n	8000d02 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8000c8c:	f06f 0301 	mvn.w	r3, #1
 8000c90:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000c92:	e036      	b.n	8000d02 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	785b      	ldrb	r3, [r3, #1]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d003      	beq.n	8000ca4 <txMakeCANID+0x100>
 8000c9c:	68fb      	ldr	r3, [r7, #12]
 8000c9e:	785b      	ldrb	r3, [r3, #1]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d12a      	bne.n	8000cfa <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	791b      	ldrb	r3, [r3, #4]
 8000ca8:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	db25      	blt.n	8000cfa <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	885b      	ldrh	r3, [r3, #2]
 8000cb2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000cb6:	d220      	bcs.n	8000cfa <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000cb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	db18      	blt.n	8000cf2 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8000cc8:	2b02      	cmp	r3, #2
 8000cca:	bf0c      	ite	eq
 8000ccc:	2301      	moveq	r3, #1
 8000cce:	2300      	movne	r3, #0
 8000cd0:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8000cd6:	78fa      	ldrb	r2, [r7, #3]
 8000cd8:	f7ff fee8 	bl	8000aac <txMakeServiceSessionSpecifier>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	da0f      	bge.n	8000d06 <txMakeCANID+0x162>
 8000ce6:	4b19      	ldr	r3, [pc, #100]	@ (8000d4c <txMakeCANID+0x1a8>)
 8000ce8:	4a15      	ldr	r2, [pc, #84]	@ (8000d40 <txMakeCANID+0x19c>)
 8000cea:	21fa      	movs	r1, #250	@ 0xfa
 8000cec:	4815      	ldr	r0, [pc, #84]	@ (8000d44 <txMakeCANID+0x1a0>)
 8000cee:	f004 fff7 	bl	8005ce0 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 8000cf2:	f06f 0301 	mvn.w	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000cf8:	e005      	b.n	8000d06 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8000cfa:	f06f 0301 	mvn.w	r3, #1
 8000cfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d00:	e002      	b.n	8000d08 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000d02:	bf00      	nop
 8000d04:	e000      	b.n	8000d08 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8000d06:	bf00      	nop
    }

    if (out >= 0)
 8000d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	db10      	blt.n	8000d30 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8000d14:	69bb      	ldr	r3, [r7, #24]
 8000d16:	2b07      	cmp	r3, #7
 8000d18:	d807      	bhi.n	8000d2a <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8000d1a:	69bb      	ldr	r3, [r7, #24]
 8000d1c:	069a      	lsls	r2, r3, #26
 8000d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000d20:	4313      	orrs	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8000d28:	e002      	b.n	8000d30 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8000d2a:	f06f 0301 	mvn.w	r3, #1
 8000d2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8000d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	3728      	adds	r7, #40	@ 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	08006f14 	.word	0x08006f14
 8000d40:	08007e90 	.word	0x08007e90
 8000d44:	08006e7c 	.word	0x08006e7c
 8000d48:	08006f28 	.word	0x08006f28
 8000d4c:	08006f44 	.word	0x08006f44
 8000d50:	08006f50 	.word	0x08006f50
 8000d54:	08006f84 	.word	0x08006f84

08000d58 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	4608      	mov	r0, r1
 8000d62:	4611      	mov	r1, r2
 8000d64:	461a      	mov	r2, r3
 8000d66:	4623      	mov	r3, r4
 8000d68:	71fb      	strb	r3, [r7, #7]
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	71bb      	strb	r3, [r7, #6]
 8000d6e:	460b      	mov	r3, r1
 8000d70:	717b      	strb	r3, [r7, #5]
 8000d72:	4613      	mov	r3, r2
 8000d74:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d009      	beq.n	8000d90 <txMakeTailByte+0x38>
 8000d7c:	797b      	ldrb	r3, [r7, #5]
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d006      	beq.n	8000d90 <txMakeTailByte+0x38>
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <txMakeTailByte+0x78>)
 8000d84:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <txMakeTailByte+0x7c>)
 8000d86:	f240 111b 	movw	r1, #283	@ 0x11b
 8000d8a:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <txMakeTailByte+0x80>)
 8000d8c:	f004 ffa8 	bl	8005ce0 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8000d90:	79fb      	ldrb	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <txMakeTailByte+0x42>
 8000d96:	2280      	movs	r2, #128	@ 0x80
 8000d98:	e000      	b.n	8000d9c <txMakeTailByte+0x44>
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <txMakeTailByte+0x4e>
 8000da2:	2340      	movs	r3, #64	@ 0x40
 8000da4:	e000      	b.n	8000da8 <txMakeTailByte+0x50>
 8000da6:	2300      	movs	r3, #0
 8000da8:	4313      	orrs	r3, r2
 8000daa:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8000dac:	797a      	ldrb	r2, [r7, #5]
 8000dae:	2a00      	cmp	r2, #0
 8000db0:	d001      	beq.n	8000db6 <txMakeTailByte+0x5e>
 8000db2:	2220      	movs	r2, #32
 8000db4:	e000      	b.n	8000db8 <txMakeTailByte+0x60>
 8000db6:	2200      	movs	r2, #0
 8000db8:	4313      	orrs	r3, r2
 8000dba:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8000dbc:	793b      	ldrb	r3, [r7, #4]
 8000dbe:	f003 031f 	and.w	r3, r3, #31
 8000dc2:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	b2db      	uxtb	r3, r3
}
 8000dc8:	4618      	mov	r0, r3
 8000dca:	370c      	adds	r7, #12
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	08006fa0 	.word	0x08006fa0
 8000dd4:	08007f38 	.word	0x08007f38
 8000dd8:	08006e7c 	.word	0x08006e7c

08000ddc <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b084      	sub	sp, #16
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2b40      	cmp	r3, #64	@ 0x40
 8000de8:	d906      	bls.n	8000df8 <txRoundFramePayloadSizeUp+0x1c>
 8000dea:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <txRoundFramePayloadSizeUp+0x4c>)
 8000dec:	4a0f      	ldr	r2, [pc, #60]	@ (8000e2c <txRoundFramePayloadSizeUp+0x50>)
 8000dee:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8000df2:	480f      	ldr	r0, [pc, #60]	@ (8000e30 <txRoundFramePayloadSizeUp+0x54>)
 8000df4:	f004 ff74 	bl	8005ce0 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8000df8:	4a0e      	ldr	r2, [pc, #56]	@ (8000e34 <txRoundFramePayloadSizeUp+0x58>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4413      	add	r3, r2
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2b0f      	cmp	r3, #15
 8000e06:	d906      	bls.n	8000e16 <txRoundFramePayloadSizeUp+0x3a>
 8000e08:	4b0b      	ldr	r3, [pc, #44]	@ (8000e38 <txRoundFramePayloadSizeUp+0x5c>)
 8000e0a:	4a08      	ldr	r2, [pc, #32]	@ (8000e2c <txRoundFramePayloadSizeUp+0x50>)
 8000e0c:	f240 1127 	movw	r1, #295	@ 0x127
 8000e10:	4807      	ldr	r0, [pc, #28]	@ (8000e30 <txRoundFramePayloadSizeUp+0x54>)
 8000e12:	f004 ff65 	bl	8005ce0 <__assert_func>
    return CanardCANDLCToLength[y];
 8000e16:	4a09      	ldr	r2, [pc, #36]	@ (8000e3c <txRoundFramePayloadSizeUp+0x60>)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	781b      	ldrb	r3, [r3, #0]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	08006fc8 	.word	0x08006fc8
 8000e2c:	08007f08 	.word	0x08007f08
 8000e30:	08006e7c 	.word	0x08006e7c
 8000e34:	08007e30 	.word	0x08007e30
 8000e38:	08007010 	.word	0x08007010
 8000e3c:	08007e20 	.word	0x08007e20

08000e40 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	60f8      	str	r0, [r7, #12]
 8000e48:	60b9      	str	r1, [r7, #8]
 8000e4a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d106      	bne.n	8000e62 <txAllocateQueueItem+0x22>
 8000e54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ed4 <txAllocateQueueItem+0x94>)
 8000e56:	4a20      	ldr	r2, [pc, #128]	@ (8000ed8 <txAllocateQueueItem+0x98>)
 8000e58:	f240 1131 	movw	r1, #305	@ 0x131
 8000e5c:	481f      	ldr	r0, [pc, #124]	@ (8000edc <txAllocateQueueItem+0x9c>)
 8000e5e:	f004 ff3f 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8000e62:	6a3b      	ldr	r3, [r7, #32]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d106      	bne.n	8000e76 <txAllocateQueueItem+0x36>
 8000e68:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <txAllocateQueueItem+0xa0>)
 8000e6a:	4a1b      	ldr	r2, [pc, #108]	@ (8000ed8 <txAllocateQueueItem+0x98>)
 8000e6c:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8000e70:	481a      	ldr	r0, [pc, #104]	@ (8000edc <txAllocateQueueItem+0x9c>)
 8000e72:	f004 ff35 	bl	8005ce0 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, sizeof(TxItem) + payload_size);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	689b      	ldr	r3, [r3, #8]
 8000e7a:	6a3a      	ldr	r2, [r7, #32]
 8000e7c:	3230      	adds	r2, #48	@ 0x30
 8000e7e:	4611      	mov	r1, r2
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	4798      	blx	r3
 8000e84:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d01e      	beq.n	8000eca <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8000e8c:	697b      	ldr	r3, [r7, #20]
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	2200      	movs	r2, #0
 8000e96:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8000eaa:	6979      	ldr	r1, [r7, #20]
 8000eac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000eb0:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8000eb4:	697b      	ldr	r3, [r7, #20]
 8000eb6:	6a3a      	ldr	r2, [r7, #32]
 8000eb8:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	68ba      	ldr	r2, [r7, #8]
 8000ec8:	621a      	str	r2, [r3, #32]
    }
    return out;
 8000eca:	697b      	ldr	r3, [r7, #20]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	08007058 	.word	0x08007058
 8000ed8:	08007f24 	.word	0x08007f24
 8000edc:	08006e7c 	.word	0x08006e7c
 8000ee0:	0800706c 	.word	0x0800706c

08000ee4 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b084      	sub	sp, #16
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) node;
 8000ef2:	683b      	ldr	r3, [r7, #0]
 8000ef4:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d002      	beq.n	8000f02 <txAVLPredicate+0x1e>
 8000efc:	68bb      	ldr	r3, [r7, #8]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d106      	bne.n	8000f10 <txAVLPredicate+0x2c>
 8000f02:	4b0a      	ldr	r3, [pc, #40]	@ (8000f2c <txAVLPredicate+0x48>)
 8000f04:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <txAVLPredicate+0x4c>)
 8000f06:	f240 114d 	movw	r1, #333	@ 0x14d
 8000f0a:	480a      	ldr	r0, [pc, #40]	@ (8000f34 <txAVLPredicate+0x50>)
 8000f0c:	f004 fee8 	bl	8005ce0 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8000f10:	68fb      	ldr	r3, [r7, #12]
 8000f12:	6a1a      	ldr	r2, [r3, #32]
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	6a1b      	ldr	r3, [r3, #32]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d301      	bcc.n	8000f20 <txAVLPredicate+0x3c>
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	e001      	b.n	8000f24 <txAVLPredicate+0x40>
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	08007080 	.word	0x08007080
 8000f30:	08007ef8 	.word	0x08007ef8
 8000f34:	08006e7c 	.word	0x08006e7c

08000f38 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8000f38:	b590      	push	{r4, r7, lr}
 8000f3a:	b08d      	sub	sp, #52	@ 0x34
 8000f3c:	af02      	add	r7, sp, #8
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d106      	bne.n	8000f5a <txPushSingleFrame+0x22>
 8000f4c:	4b5c      	ldr	r3, [pc, #368]	@ (80010c0 <txPushSingleFrame+0x188>)
 8000f4e:	4a5d      	ldr	r2, [pc, #372]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8000f50:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8000f54:	485c      	ldr	r0, [pc, #368]	@ (80010c8 <txPushSingleFrame+0x190>)
 8000f56:	f004 fec3 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8000f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d109      	bne.n	8000f74 <txPushSingleFrame+0x3c>
 8000f60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d006      	beq.n	8000f74 <txPushSingleFrame+0x3c>
 8000f66:	4b59      	ldr	r3, [pc, #356]	@ (80010cc <txPushSingleFrame+0x194>)
 8000f68:	4a56      	ldr	r2, [pc, #344]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8000f6a:	f240 115b 	movw	r1, #347	@ 0x15b
 8000f6e:	4856      	ldr	r0, [pc, #344]	@ (80010c8 <txPushSingleFrame+0x190>)
 8000f70:	f004 feb6 	bl	8005ce0 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8000f74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f76:	3301      	adds	r3, #1
 8000f78:	4618      	mov	r0, r3
 8000f7a:	f7ff ff2f 	bl	8000ddc <txRoundFramePayloadSizeUp>
 8000f7e:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8000f80:	6a3a      	ldr	r2, [r7, #32]
 8000f82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d806      	bhi.n	8000f96 <txPushSingleFrame+0x5e>
 8000f88:	4b51      	ldr	r3, [pc, #324]	@ (80010d0 <txPushSingleFrame+0x198>)
 8000f8a:	4a4e      	ldr	r2, [pc, #312]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8000f8c:	f240 115d 	movw	r1, #349	@ 0x15d
 8000f90:	484d      	ldr	r0, [pc, #308]	@ (80010c8 <txPushSingleFrame+0x190>)
 8000f92:	f004 fea5 	bl	8005ce0 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8000f96:	6a3a      	ldr	r2, [r7, #32]
 8000f98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000f9a:	1ad3      	subs	r3, r2, r3
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fa4:	4413      	add	r3, r2
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	6a3a      	ldr	r2, [r7, #32]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d006      	beq.n	8000fbc <txPushSingleFrame+0x84>
 8000fae:	4b49      	ldr	r3, [pc, #292]	@ (80010d4 <txPushSingleFrame+0x19c>)
 8000fb0:	4a44      	ldr	r2, [pc, #272]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8000fb2:	f240 115f 	movw	r1, #351	@ 0x15f
 8000fb6:	4844      	ldr	r0, [pc, #272]	@ (80010c8 <txPushSingleFrame+0x190>)
 8000fb8:	f004 fe92 	bl	8005ce0 <__assert_func>
    int32_t       out = 0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	429a      	cmp	r2, r3
 8000fca:	d209      	bcs.n	8000fe0 <txPushSingleFrame+0xa8>
 8000fcc:	6a3b      	ldr	r3, [r7, #32]
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fd4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000fd6:	68b8      	ldr	r0, [r7, #8]
 8000fd8:	f7ff ff32 	bl	8000e40 <txAllocateQueueItem>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	e000      	b.n	8000fe2 <txPushSingleFrame+0xaa>
 8000fe0:	2300      	movs	r3, #0
    TxItem* const tqi =
 8000fe2:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d054      	beq.n	8001094 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8000fea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d010      	beq.n	8001012 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8000ff0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d106      	bne.n	8001004 <txPushSingleFrame+0xcc>
 8000ff6:	4b38      	ldr	r3, [pc, #224]	@ (80010d8 <txPushSingleFrame+0x1a0>)
 8000ff8:	4a32      	ldr	r2, [pc, #200]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8000ffa:	f240 1167 	movw	r1, #359	@ 0x167
 8000ffe:	4832      	ldr	r0, [pc, #200]	@ (80010c8 <txPushSingleFrame+0x190>)
 8001000:	f004 fe6e 	bl	8005ce0 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	3330      	adds	r3, #48	@ 0x30
 8001008:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800100a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800100c:	4618      	mov	r0, r3
 800100e:	f005 f900 	bl	8006212 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8001012:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001014:	3330      	adds	r3, #48	@ 0x30
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4413      	add	r3, r2
 800101a:	69fa      	ldr	r2, [r7, #28]
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 f86b 	bl	80060fa <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8001024:	6a3b      	ldr	r3, [r7, #32]
 8001026:	1e5c      	subs	r4, r3, #1
 8001028:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800102c:	2201      	movs	r2, #1
 800102e:	2101      	movs	r1, #1
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fe91 	bl	8000d58 <txMakeTailByte>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	69bb      	ldr	r3, [r7, #24]
 800103c:	4423      	add	r3, r4
 800103e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	f103 000c 	add.w	r0, r3, #12
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	4b24      	ldr	r3, [pc, #144]	@ (80010dc <txPushSingleFrame+0x1a4>)
 800104c:	4a24      	ldr	r2, [pc, #144]	@ (80010e0 <txPushSingleFrame+0x1a8>)
 800104e:	f7ff fae7 	bl	8000620 <cavlSearch>
 8001052:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8001054:	69bb      	ldr	r3, [r7, #24]
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	d006      	beq.n	800106a <txPushSingleFrame+0x132>
 800105c:	4b21      	ldr	r3, [pc, #132]	@ (80010e4 <txPushSingleFrame+0x1ac>)
 800105e:	4a19      	ldr	r2, [pc, #100]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8001060:	f240 1173 	movw	r1, #371	@ 0x173
 8001064:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <txPushSingleFrame+0x190>)
 8001066:	f004 fe3b 	bl	8005ce0 <__assert_func>
        que->size++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	1c5a      	adds	r2, r3, #1
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	689a      	ldr	r2, [r3, #8]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	429a      	cmp	r2, r3
 800107e:	d906      	bls.n	800108e <txPushSingleFrame+0x156>
 8001080:	4b19      	ldr	r3, [pc, #100]	@ (80010e8 <txPushSingleFrame+0x1b0>)
 8001082:	4a10      	ldr	r2, [pc, #64]	@ (80010c4 <txPushSingleFrame+0x18c>)
 8001084:	f240 1175 	movw	r1, #373	@ 0x175
 8001088:	480f      	ldr	r0, [pc, #60]	@ (80010c8 <txPushSingleFrame+0x190>)
 800108a:	f004 fe29 	bl	8005ce0 <__assert_func>
        out = 1;  // One frame enqueued.
 800108e:	2301      	movs	r3, #1
 8001090:	627b      	str	r3, [r7, #36]	@ 0x24
 8001092:	e002      	b.n	800109a <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8001094:	f06f 0302 	mvn.w	r3, #2
 8001098:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800109a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800109c:	2b00      	cmp	r3, #0
 800109e:	db09      	blt.n	80010b4 <txPushSingleFrame+0x17c>
 80010a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d006      	beq.n	80010b4 <txPushSingleFrame+0x17c>
 80010a6:	4b11      	ldr	r3, [pc, #68]	@ (80010ec <txPushSingleFrame+0x1b4>)
 80010a8:	4a06      	ldr	r2, [pc, #24]	@ (80010c4 <txPushSingleFrame+0x18c>)
 80010aa:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 80010ae:	4806      	ldr	r0, [pc, #24]	@ (80010c8 <txPushSingleFrame+0x190>)
 80010b0:	f004 fe16 	bl	8005ce0 <__assert_func>
    return out;
 80010b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	372c      	adds	r7, #44	@ 0x2c
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	08007058 	.word	0x08007058
 80010c4:	08007ee4 	.word	0x08007ee4
 80010c8:	08006e7c 	.word	0x08006e7c
 80010cc:	080070b4 	.word	0x080070b4
 80010d0:	080070e4 	.word	0x080070e4
 80010d4:	08007108 	.word	0x08007108
 80010d8:	08007144 	.word	0x08007144
 80010dc:	08000981 	.word	0x08000981
 80010e0:	08000ee5 	.word	0x08000ee5
 80010e4:	0800715c 	.word	0x0800715c
 80010e8:	08007174 	.word	0x08007174
 80010ec:	08007190 	.word	0x08007190

080010f0 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80010f0:	b590      	push	{r4, r7, lr}
 80010f2:	b093      	sub	sp, #76	@ 0x4c
 80010f4:	af02      	add	r7, sp, #8
 80010f6:	60f8      	str	r0, [r7, #12]
 80010f8:	60b9      	str	r1, [r7, #8]
 80010fa:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d106      	bne.n	8001110 <txGenerateMultiFrameChain+0x20>
 8001102:	4b93      	ldr	r3, [pc, #588]	@ (8001350 <txGenerateMultiFrameChain+0x260>)
 8001104:	4a93      	ldr	r2, [pc, #588]	@ (8001354 <txGenerateMultiFrameChain+0x264>)
 8001106:	f240 1189 	movw	r1, #393	@ 0x189
 800110a:	4893      	ldr	r0, [pc, #588]	@ (8001358 <txGenerateMultiFrameChain+0x268>)
 800110c:	f004 fde8 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d106      	bne.n	8001124 <txGenerateMultiFrameChain+0x34>
 8001116:	4b91      	ldr	r3, [pc, #580]	@ (800135c <txGenerateMultiFrameChain+0x26c>)
 8001118:	4a8e      	ldr	r2, [pc, #568]	@ (8001354 <txGenerateMultiFrameChain+0x264>)
 800111a:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 800111e:	488e      	ldr	r0, [pc, #568]	@ (8001358 <txGenerateMultiFrameChain+0x268>)
 8001120:	f004 fdde 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8001124:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	429a      	cmp	r2, r3
 800112a:	d806      	bhi.n	800113a <txGenerateMultiFrameChain+0x4a>
 800112c:	4b8c      	ldr	r3, [pc, #560]	@ (8001360 <txGenerateMultiFrameChain+0x270>)
 800112e:	4a89      	ldr	r2, [pc, #548]	@ (8001354 <txGenerateMultiFrameChain+0x264>)
 8001130:	f240 118b 	movw	r1, #395	@ 0x18b
 8001134:	4888      	ldr	r0, [pc, #544]	@ (8001358 <txGenerateMultiFrameChain+0x268>)
 8001136:	f004 fdd3 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 800113a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800113c:	2b00      	cmp	r3, #0
 800113e:	d106      	bne.n	800114e <txGenerateMultiFrameChain+0x5e>
 8001140:	4b88      	ldr	r3, [pc, #544]	@ (8001364 <txGenerateMultiFrameChain+0x274>)
 8001142:	4a84      	ldr	r2, [pc, #528]	@ (8001354 <txGenerateMultiFrameChain+0x264>)
 8001144:	f44f 71c6 	mov.w	r1, #396	@ 0x18c
 8001148:	4883      	ldr	r0, [pc, #524]	@ (8001358 <txGenerateMultiFrameChain+0x268>)
 800114a:	f004 fdc9 	bl	8005ce0 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	2300      	movs	r3, #0
 8001158:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800115a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800115c:	3302      	adds	r3, #2
 800115e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8001160:	2300      	movs	r3, #0
 8001162:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8001164:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001166:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001168:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800116c:	f7ff fc34 	bl	80009d8 <crcAdd>
 8001170:	4603      	mov	r3, r0
 8001172:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8001174:	2301      	movs	r3, #1
 8001176:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800117a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800117c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800117e:	e0d4      	b.n	800132a <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8001180:	69bb      	ldr	r3, [r7, #24]
 8001182:	3301      	adds	r3, #1
 8001184:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8001186:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001188:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800118a:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800118c:	687a      	ldr	r2, [r7, #4]
 800118e:	429a      	cmp	r2, r3
 8001190:	d908      	bls.n	80011a4 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8001192:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001194:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	3301      	adds	r3, #1
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff fe1e 	bl	8000ddc <txRoundFramePayloadSizeUp>
 80011a0:	4603      	mov	r3, r0
 80011a2:	e001      	b.n	80011a8 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 80011a8:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 80011aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ac:	9300      	str	r3, [sp, #0]
 80011ae:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80011b2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80011b4:	68b8      	ldr	r0, [r7, #8]
 80011b6:	f7ff fe43 	bl	8000e40 <txAllocateQueueItem>
 80011ba:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d102      	bne.n	80011c8 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 80011c2:	6a3b      	ldr	r3, [r7, #32]
 80011c4:	613b      	str	r3, [r7, #16]
 80011c6:	e002      	b.n	80011ce <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            out.tail->base.next_in_transfer = &tqi->base;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	6a3a      	ldr	r2, [r7, #32]
 80011cc:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 80011ce:	6a3b      	ldr	r3, [r7, #32]
 80011d0:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f000 80ae 	beq.w	8001336 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 80011da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011dc:	3b01      	subs	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 80011e0:	2300      	movs	r3, #0
 80011e2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80011e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80011e6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d21c      	bcs.n	8001226 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80011ec:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80011ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80011f0:	1ad3      	subs	r3, r2, r3
 80011f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 80011f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80011f6:	69fb      	ldr	r3, [r7, #28]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d901      	bls.n	8001200 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	3330      	adds	r3, #48	@ 0x30
 8001204:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001206:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8001208:	4618      	mov	r0, r3
 800120a:	f005 f802 	bl	8006212 <memcpy>
            frame_offset = frame_offset + move_size;
 800120e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001210:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001212:	4413      	add	r3, r2
 8001214:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8001216:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121a:	4413      	add	r3, r2
 800121c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 800121e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001220:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001222:	4413      	add	r3, r2
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8001226:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001228:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800122a:	429a      	cmp	r2, r3
 800122c:	d343      	bcc.n	80012b6 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800122e:	e00f      	b.n	8001250 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001234:	4413      	add	r3, r2
 8001236:	3330      	adds	r3, #48	@ 0x30
 8001238:	2200      	movs	r2, #0
 800123a:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800123c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800123e:	3301      	adds	r3, #1
 8001240:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8001242:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8001244:	2100      	movs	r1, #0
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff fba6 	bl	8000998 <crcAddByte>
 800124c:	4603      	mov	r3, r0
 800124e:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8001250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001252:	3302      	adds	r3, #2
 8001254:	69fa      	ldr	r2, [r7, #28]
 8001256:	429a      	cmp	r2, r3
 8001258:	d8ea      	bhi.n	8001230 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800125a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800125c:	69fb      	ldr	r3, [r7, #28]
 800125e:	429a      	cmp	r2, r3
 8001260:	d213      	bcs.n	800128a <txGenerateMultiFrameChain+0x19a>
 8001262:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001264:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001266:	429a      	cmp	r2, r3
 8001268:	d10f      	bne.n	800128a <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800126a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800126c:	0a1b      	lsrs	r3, r3, #8
 800126e:	b29b      	uxth	r3, r3
 8001270:	697a      	ldr	r2, [r7, #20]
 8001272:	b2d9      	uxtb	r1, r3
 8001274:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001276:	4413      	add	r3, r2
 8001278:	3330      	adds	r3, #48	@ 0x30
 800127a:	460a      	mov	r2, r1
 800127c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800127e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001280:	3301      	adds	r3, #1
 8001282:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8001284:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001286:	3301      	adds	r3, #1
 8001288:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800128a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	429a      	cmp	r2, r3
 8001290:	d211      	bcs.n	80012b6 <txGenerateMultiFrameChain+0x1c6>
 8001292:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001294:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001296:	429a      	cmp	r2, r3
 8001298:	d90d      	bls.n	80012b6 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800129a:	697a      	ldr	r2, [r7, #20]
 800129c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800129e:	b2d9      	uxtb	r1, r3
 80012a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012a2:	4413      	add	r3, r2
 80012a4:	3330      	adds	r3, #48	@ 0x30
 80012a6:	460a      	mov	r2, r1
 80012a8:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80012aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012ac:	3301      	adds	r3, #1
 80012ae:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 80012b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012b2:	3301      	adds	r3, #1
 80012b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 80012b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80012b8:	1c5a      	adds	r2, r3, #1
 80012ba:	697b      	ldr	r3, [r7, #20]
 80012bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012be:	429a      	cmp	r2, r3
 80012c0:	d006      	beq.n	80012d0 <txGenerateMultiFrameChain+0x1e0>
 80012c2:	4b29      	ldr	r3, [pc, #164]	@ (8001368 <txGenerateMultiFrameChain+0x278>)
 80012c4:	4a23      	ldr	r2, [pc, #140]	@ (8001354 <txGenerateMultiFrameChain+0x264>)
 80012c6:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80012ca:	4823      	ldr	r0, [pc, #140]	@ (8001358 <txGenerateMultiFrameChain+0x268>)
 80012cc:	f004 fd08 	bl	8005ce0 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80012d0:	693a      	ldr	r2, [r7, #16]
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2d8      	uxtb	r0, r3
 80012de:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80012e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012e2:	429a      	cmp	r2, r3
 80012e4:	bf2c      	ite	cs
 80012e6:	2301      	movcs	r3, #1
 80012e8:	2300      	movcc	r3, #0
 80012ea:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80012ec:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80012ee:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80012f2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80012f6:	f7ff fd2f 	bl	8000d58 <txMakeTailByte>
 80012fa:	4603      	mov	r3, r0
 80012fc:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80012fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001300:	4423      	add	r3, r4
 8001302:	3330      	adds	r3, #48	@ 0x30
 8001304:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8001306:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800130a:	2b00      	cmp	r3, #0
 800130c:	bf14      	ite	ne
 800130e:	2301      	movne	r3, #1
 8001310:	2300      	moveq	r3, #0
 8001312:	b2db      	uxtb	r3, r3
 8001314:	f083 0301 	eor.w	r3, r3, #1
 8001318:	b2db      	uxtb	r3, r3
 800131a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 800131e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001322:	f003 0301 	and.w	r3, r3, #1
 8001326:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 800132a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800132c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800132e:	429a      	cmp	r2, r3
 8001330:	f4ff af26 	bcc.w	8001180 <txGenerateMultiFrameChain+0x90>
 8001334:	e000      	b.n	8001338 <txGenerateMultiFrameChain+0x248>
            break;
 8001336:	bf00      	nop
    }
    return out;
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	461c      	mov	r4, r3
 800133c:	f107 0310 	add.w	r3, r7, #16
 8001340:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001344:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001348:	68f8      	ldr	r0, [r7, #12]
 800134a:	3744      	adds	r7, #68	@ 0x44
 800134c:	46bd      	mov	sp, r7
 800134e:	bd90      	pop	{r4, r7, pc}
 8001350:	08007058 	.word	0x08007058
 8001354:	08007fb4 	.word	0x08007fb4
 8001358:	08006e7c 	.word	0x08006e7c
 800135c:	080071a8 	.word	0x080071a8
 8001360:	080071c4 	.word	0x080071c4
 8001364:	08007144 	.word	0x08007144
 8001368:	080071ec 	.word	0x080071ec

0800136c <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b094      	sub	sp, #80	@ 0x50
 8001370:	af06      	add	r7, sp, #24
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d002      	beq.n	8001384 <txPushMultiFrame+0x18>
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d106      	bne.n	8001392 <txPushMultiFrame+0x26>
 8001384:	4b65      	ldr	r3, [pc, #404]	@ (800151c <txPushMultiFrame+0x1b0>)
 8001386:	4a66      	ldr	r2, [pc, #408]	@ (8001520 <txPushMultiFrame+0x1b4>)
 8001388:	f44f 71f6 	mov.w	r1, #492	@ 0x1ec
 800138c:	4865      	ldr	r0, [pc, #404]	@ (8001524 <txPushMultiFrame+0x1b8>)
 800138e:	f004 fca7 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d106      	bne.n	80013a6 <txPushMultiFrame+0x3a>
 8001398:	4b63      	ldr	r3, [pc, #396]	@ (8001528 <txPushMultiFrame+0x1bc>)
 800139a:	4a61      	ldr	r2, [pc, #388]	@ (8001520 <txPushMultiFrame+0x1b4>)
 800139c:	f240 11ed 	movw	r1, #493	@ 0x1ed
 80013a0:	4860      	ldr	r0, [pc, #384]	@ (8001524 <txPushMultiFrame+0x1b8>)
 80013a2:	f004 fc9d 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80013a6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d806      	bhi.n	80013bc <txPushMultiFrame+0x50>
 80013ae:	4b5f      	ldr	r3, [pc, #380]	@ (800152c <txPushMultiFrame+0x1c0>)
 80013b0:	4a5b      	ldr	r2, [pc, #364]	@ (8001520 <txPushMultiFrame+0x1b4>)
 80013b2:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 80013b6:	485b      	ldr	r0, [pc, #364]	@ (8001524 <txPushMultiFrame+0x1b8>)
 80013b8:	f004 fc92 	bl	8005ce0 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 80013bc:	2300      	movs	r3, #0
 80013be:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 80013c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80013c2:	3302      	adds	r3, #2
 80013c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 80013c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4413      	add	r3, r2
 80013cc:	1e5a      	subs	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 80013d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d806      	bhi.n	80013ea <txPushMultiFrame+0x7e>
 80013dc:	4b54      	ldr	r3, [pc, #336]	@ (8001530 <txPushMultiFrame+0x1c4>)
 80013de:	4a50      	ldr	r2, [pc, #320]	@ (8001520 <txPushMultiFrame+0x1b4>)
 80013e0:	f240 11f3 	movw	r1, #499	@ 0x1f3
 80013e4:	484f      	ldr	r0, [pc, #316]	@ (8001524 <txPushMultiFrame+0x1b8>)
 80013e6:	f004 fc7b 	bl	8005ce0 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	689a      	ldr	r2, [r3, #8]
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	441a      	add	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	429a      	cmp	r2, r3
 80013f8:	d87b      	bhi.n	80014f2 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 80013fa:	f107 0010 	add.w	r0, r7, #16
 80013fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001400:	9305      	str	r3, [sp, #20]
 8001402:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001404:	9304      	str	r3, [sp, #16]
 8001406:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 800140a:	9303      	str	r3, [sp, #12]
 800140c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8001414:	e9cd 2300 	strd	r2, r3, [sp]
 8001418:	687a      	ldr	r2, [r7, #4]
 800141a:	68b9      	ldr	r1, [r7, #8]
 800141c:	f7ff fe68 	bl	80010f0 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d051      	beq.n	80014ca <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f103 000c 	add.w	r0, r3, #12
 8001430:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001432:	4b40      	ldr	r3, [pc, #256]	@ (8001534 <txPushMultiFrame+0x1c8>)
 8001434:	4a40      	ldr	r2, [pc, #256]	@ (8001538 <txPushMultiFrame+0x1cc>)
 8001436:	f7ff f8f3 	bl	8000620 <cavlSearch>
 800143a:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 800143c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800143e:	69fa      	ldr	r2, [r7, #28]
 8001440:	429a      	cmp	r2, r3
 8001442:	d006      	beq.n	8001452 <txPushMultiFrame+0xe6>
 8001444:	4b3d      	ldr	r3, [pc, #244]	@ (800153c <txPushMultiFrame+0x1d0>)
 8001446:	4a36      	ldr	r2, [pc, #216]	@ (8001520 <txPushMultiFrame+0x1b4>)
 8001448:	f240 2105 	movw	r1, #517	@ 0x205
 800144c:	4835      	ldr	r0, [pc, #212]	@ (8001524 <txPushMultiFrame+0x1b8>)
 800144e:	f004 fc47 	bl	8005ce0 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <txPushMultiFrame+0xfc>
 800145a:	4b39      	ldr	r3, [pc, #228]	@ (8001540 <txPushMultiFrame+0x1d4>)
 800145c:	4a30      	ldr	r2, [pc, #192]	@ (8001520 <txPushMultiFrame+0x1b4>)
 800145e:	f240 2106 	movw	r1, #518	@ 0x206
 8001462:	4830      	ldr	r0, [pc, #192]	@ (8001524 <txPushMultiFrame+0x1b8>)
 8001464:	f004 fc3c 	bl	8005ce0 <__assert_func>
                next = next->next_in_transfer;
 8001468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800146a:	691b      	ldr	r3, [r3, #16]
 800146c:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 800146e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1da      	bne.n	800142a <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001478:	429a      	cmp	r2, r3
 800147a:	d006      	beq.n	800148a <txPushMultiFrame+0x11e>
 800147c:	4b31      	ldr	r3, [pc, #196]	@ (8001544 <txPushMultiFrame+0x1d8>)
 800147e:	4a28      	ldr	r2, [pc, #160]	@ (8001520 <txPushMultiFrame+0x1b4>)
 8001480:	f240 2109 	movw	r1, #521	@ 0x209
 8001484:	4827      	ldr	r0, [pc, #156]	@ (8001524 <txPushMultiFrame+0x1b8>)
 8001486:	f004 fc2b 	bl	8005ce0 <__assert_func>
            que->size += sq.size;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	69bb      	ldr	r3, [r7, #24]
 8001490:	441a      	add	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d906      	bls.n	80014b0 <txPushMultiFrame+0x144>
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <txPushMultiFrame+0x1dc>)
 80014a4:	4a1e      	ldr	r2, [pc, #120]	@ (8001520 <txPushMultiFrame+0x1b4>)
 80014a6:	f240 210b 	movw	r1, #523	@ 0x20b
 80014aa:	481e      	ldr	r0, [pc, #120]	@ (8001524 <txPushMultiFrame+0x1b8>)
 80014ac:	f004 fc18 	bl	8005ce0 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	da06      	bge.n	80014c4 <txPushMultiFrame+0x158>
 80014b6:	4b25      	ldr	r3, [pc, #148]	@ (800154c <txPushMultiFrame+0x1e0>)
 80014b8:	4a19      	ldr	r2, [pc, #100]	@ (8001520 <txPushMultiFrame+0x1b4>)
 80014ba:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 80014be:	4819      	ldr	r0, [pc, #100]	@ (8001524 <txPushMultiFrame+0x1b8>)
 80014c0:	f004 fc0e 	bl	8005ce0 <__assert_func>
            out = (int32_t) sq.size;
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80014c8:	e016      	b.n	80014f8 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 80014ca:	f06f 0302 	mvn.w	r3, #2
 80014ce:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80014d4:	e009      	b.n	80014ea <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 80014d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d8:	691b      	ldr	r3, [r3, #16]
 80014da:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014e2:	68b8      	ldr	r0, [r7, #8]
 80014e4:	4798      	blx	r3
                head = next;
 80014e6:	6a3b      	ldr	r3, [r7, #32]
 80014e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80014ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d1f2      	bne.n	80014d6 <txPushMultiFrame+0x16a>
 80014f0:	e002      	b.n	80014f8 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80014f2:	f06f 0302 	mvn.w	r3, #2
 80014f6:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 80014f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	db09      	blt.n	8001512 <txPushMultiFrame+0x1a6>
 80014fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001500:	2b01      	cmp	r3, #1
 8001502:	dc06      	bgt.n	8001512 <txPushMultiFrame+0x1a6>
 8001504:	4b12      	ldr	r3, [pc, #72]	@ (8001550 <txPushMultiFrame+0x1e4>)
 8001506:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <txPushMultiFrame+0x1b4>)
 8001508:	f240 211f 	movw	r1, #543	@ 0x21f
 800150c:	4805      	ldr	r0, [pc, #20]	@ (8001524 <txPushMultiFrame+0x1b8>)
 800150e:	f004 fbe7 	bl	8005ce0 <__assert_func>
    return out;
 8001512:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8001514:	4618      	mov	r0, r3
 8001516:	3738      	adds	r7, #56	@ 0x38
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	08007228 	.word	0x08007228
 8001520:	08007fa0 	.word	0x08007fa0
 8001524:	08006e7c 	.word	0x08006e7c
 8001528:	080071a8 	.word	0x080071a8
 800152c:	080071c4 	.word	0x080071c4
 8001530:	08007258 	.word	0x08007258
 8001534:	08000981 	.word	0x08000981
 8001538:	08000ee5 	.word	0x08000ee5
 800153c:	08007268 	.word	0x08007268
 8001540:	0800727c 	.word	0x0800727c
 8001544:	08007298 	.word	0x08007298
 8001548:	08007174 	.word	0x08007174
 800154c:	080072b0 	.word	0x080072b0
 8001550:	080072d4 	.word	0x080072d4

08001554 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid UAVCAN/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0
 800155a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d106      	bne.n	8001576 <rxTryParseFrame+0x22>
 8001568:	4b96      	ldr	r3, [pc, #600]	@ (80017c4 <rxTryParseFrame+0x270>)
 800156a:	4a97      	ldr	r2, [pc, #604]	@ (80017c8 <rxTryParseFrame+0x274>)
 800156c:	f240 214e 	movw	r1, #590	@ 0x24e
 8001570:	4896      	ldr	r0, [pc, #600]	@ (80017cc <rxTryParseFrame+0x278>)
 8001572:	f004 fbb5 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800157e:	d306      	bcc.n	800158e <rxTryParseFrame+0x3a>
 8001580:	4b93      	ldr	r3, [pc, #588]	@ (80017d0 <rxTryParseFrame+0x27c>)
 8001582:	4a91      	ldr	r2, [pc, #580]	@ (80017c8 <rxTryParseFrame+0x274>)
 8001584:	f240 214f 	movw	r1, #591	@ 0x24f
 8001588:	4890      	ldr	r0, [pc, #576]	@ (80017cc <rxTryParseFrame+0x278>)
 800158a:	f004 fba9 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(out != NULL);
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d106      	bne.n	80015a2 <rxTryParseFrame+0x4e>
 8001594:	4b8f      	ldr	r3, [pc, #572]	@ (80017d4 <rxTryParseFrame+0x280>)
 8001596:	4a8c      	ldr	r2, [pc, #560]	@ (80017c8 <rxTryParseFrame+0x274>)
 8001598:	f44f 7114 	mov.w	r1, #592	@ 0x250
 800159c:	488b      	ldr	r0, [pc, #556]	@ (80017cc <rxTryParseFrame+0x278>)
 800159e:	f004 fb9f 	bl	8005ce0 <__assert_func>
    bool valid = false;
 80015a2:	2300      	movs	r3, #0
 80015a4:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 8105 	beq.w	80017ba <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d106      	bne.n	80015c6 <rxTryParseFrame+0x72>
 80015b8:	4b87      	ldr	r3, [pc, #540]	@ (80017d8 <rxTryParseFrame+0x284>)
 80015ba:	4a83      	ldr	r2, [pc, #524]	@ (80017c8 <rxTryParseFrame+0x274>)
 80015bc:	f44f 7115 	mov.w	r1, #596	@ 0x254
 80015c0:	4882      	ldr	r0, [pc, #520]	@ (80017cc <rxTryParseFrame+0x278>)
 80015c2:	f004 fb8d 	bl	8005ce0 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	0e9b      	lsrs	r3, r3, #26
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 80015f4:	69bb      	ldr	r3, [r7, #24]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d128      	bne.n	8001650 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	2200      	movs	r2, #0
 8001602:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8001604:	69bb      	ldr	r3, [r7, #24]
 8001606:	0a1b      	lsrs	r3, r3, #8
 8001608:	b29b      	uxth	r3, r3
 800160a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800160e:	b29a      	uxth	r2, r3
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8001614:	69bb      	ldr	r3, [r7, #24]
 8001616:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d002      	beq.n	8001624 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	22ff      	movs	r2, #255	@ 0xff
 8001622:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	22ff      	movs	r2, #255	@ 0xff
 8001628:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 800162a:	69bb      	ldr	r3, [r7, #24]
 800162c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001630:	2b00      	cmp	r3, #0
 8001632:	d106      	bne.n	8001642 <rxTryParseFrame+0xee>
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d101      	bne.n	8001642 <rxTryParseFrame+0xee>
 800163e:	2301      	movs	r3, #1
 8001640:	e000      	b.n	8001644 <rxTryParseFrame+0xf0>
 8001642:	2300      	movs	r3, #0
 8001644:	77fb      	strb	r3, [r7, #31]
 8001646:	7ffb      	ldrb	r3, [r7, #31]
 8001648:	f003 0301 	and.w	r3, r3, #1
 800164c:	77fb      	strb	r3, [r7, #31]
 800164e:	e02c      	b.n	80016aa <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <rxTryParseFrame+0x10a>
 800165a:	2202      	movs	r2, #2
 800165c:	e000      	b.n	8001660 <rxTryParseFrame+0x10c>
 800165e:	2201      	movs	r2, #1
            out->transfer_kind =
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0b9b      	lsrs	r3, r3, #14
 8001668:	b29b      	uxth	r3, r3
 800166a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800166e:	b29a      	uxth	r2, r3
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8001674:	69bb      	ldr	r3, [r7, #24]
 8001676:	09db      	lsrs	r3, r3, #7
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800167e:	b2da      	uxtb	r2, r3
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8001684:	69bb      	ldr	r3, [r7, #24]
 8001686:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d107      	bne.n	800169e <rxTryParseFrame+0x14a>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	7b1a      	ldrb	r2, [r3, #12]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	7b5b      	ldrb	r3, [r3, #13]
 8001696:	429a      	cmp	r2, r3
 8001698:	d001      	beq.n	800169e <rxTryParseFrame+0x14a>
 800169a:	2301      	movs	r3, #1
 800169c:	e000      	b.n	80016a0 <rxTryParseFrame+0x14c>
 800169e:	2300      	movs	r3, #0
 80016a0:	77fb      	strb	r3, [r7, #31]
 80016a2:	7ffb      	ldrb	r3, [r7, #31]
 80016a4:	f003 0301 	and.w	r3, r3, #1
 80016a8:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	1e5a      	subs	r2, r3, #1
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	689a      	ldr	r2, [r3, #8]
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	699a      	ldr	r2, [r3, #24]
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	695b      	ldr	r3, [r3, #20]
 80016c4:	4413      	add	r3, r2
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 80016ca:	7dfb      	ldrb	r3, [r7, #23]
 80016cc:	f003 031f 	and.w	r3, r3, #31
 80016d0:	b2da      	uxtb	r2, r3
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 80016d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	09db      	lsrs	r3, r3, #7
 80016de:	b2da      	uxtb	r2, r3
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
 80016fa:	f003 0320 	and.w	r3, r3, #32
 80016fe:	2b00      	cmp	r3, #0
 8001700:	bf14      	ite	ne
 8001702:	2301      	movne	r3, #1
 8001704:	2300      	moveq	r3, #0
 8001706:	b2da      	uxtb	r2, r3
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 800170c:	7ffb      	ldrb	r3, [r7, #31]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00c      	beq.n	800172c <rxTryParseFrame+0x1d8>
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	7bdb      	ldrb	r3, [r3, #15]
 8001716:	f083 0301 	eor.w	r3, r3, #1
 800171a:	b2db      	uxtb	r3, r3
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <rxTryParseFrame+0x1d4>
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	7c5b      	ldrb	r3, [r3, #17]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <rxTryParseFrame+0x1d8>
 8001728:	2301      	movs	r3, #1
 800172a:	e000      	b.n	800172e <rxTryParseFrame+0x1da>
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
 8001730:	7ffb      	ldrb	r3, [r7, #31]
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8001738:	7ffb      	ldrb	r3, [r7, #31]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d00d      	beq.n	800175a <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	7c1b      	ldrb	r3, [r3, #16]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d103      	bne.n	8001756 <rxTryParseFrame+0x202>
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7b1b      	ldrb	r3, [r3, #12]
 8001752:	2bff      	cmp	r3, #255	@ 0xff
 8001754:	d001      	beq.n	800175a <rxTryParseFrame+0x206>
        valid = valid &&
 8001756:	2301      	movs	r3, #1
 8001758:	e000      	b.n	800175c <rxTryParseFrame+0x208>
 800175a:	2300      	movs	r3, #0
 800175c:	77fb      	strb	r3, [r7, #31]
 800175e:	7ffb      	ldrb	r3, [r7, #31]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8001766:	7ffb      	ldrb	r3, [r7, #31]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d009      	beq.n	8001780 <rxTryParseFrame+0x22c>
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	695b      	ldr	r3, [r3, #20]
 8001770:	2b06      	cmp	r3, #6
 8001772:	d803      	bhi.n	800177c <rxTryParseFrame+0x228>
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	7c1b      	ldrb	r3, [r3, #16]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <rxTryParseFrame+0x22c>
 800177c:	2301      	movs	r3, #1
 800177e:	e000      	b.n	8001782 <rxTryParseFrame+0x22e>
 8001780:	2300      	movs	r3, #0
 8001782:	77fb      	strb	r3, [r7, #31]
 8001784:	7ffb      	ldrb	r3, [r7, #31]
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 800178c:	7ffb      	ldrb	r3, [r7, #31]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d00d      	beq.n	80017ae <rxTryParseFrame+0x25a>
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	695b      	ldr	r3, [r3, #20]
 8001796:	2b00      	cmp	r3, #0
 8001798:	d107      	bne.n	80017aa <rxTryParseFrame+0x256>
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	7bdb      	ldrb	r3, [r3, #15]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d005      	beq.n	80017ae <rxTryParseFrame+0x25a>
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	7c1b      	ldrb	r3, [r3, #16]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d001      	beq.n	80017ae <rxTryParseFrame+0x25a>
 80017aa:	2301      	movs	r3, #1
 80017ac:	e000      	b.n	80017b0 <rxTryParseFrame+0x25c>
 80017ae:	2300      	movs	r3, #0
 80017b0:	77fb      	strb	r3, [r7, #31]
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	f003 0301 	and.w	r3, r3, #1
 80017b8:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 80017ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3720      	adds	r7, #32
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	080072ec 	.word	0x080072ec
 80017c8:	08007ff0 	.word	0x08007ff0
 80017cc:	08006e7c 	.word	0x08006e7c
 80017d0:	08007304 	.word	0x08007304
 80017d4:	08007334 	.word	0x08007334
 80017d8:	08007348 	.word	0x08007348

080017dc <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d106      	bne.n	80017fa <rxInitTransferMetadataFromFrame+0x1e>
 80017ec:	4b19      	ldr	r3, [pc, #100]	@ (8001854 <rxInitTransferMetadataFromFrame+0x78>)
 80017ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001858 <rxInitTransferMetadataFromFrame+0x7c>)
 80017f0:	f240 218f 	movw	r1, #655	@ 0x28f
 80017f4:	4819      	ldr	r0, [pc, #100]	@ (800185c <rxInitTransferMetadataFromFrame+0x80>)
 80017f6:	f004 fa73 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d106      	bne.n	8001810 <rxInitTransferMetadataFromFrame+0x34>
 8001802:	4b17      	ldr	r3, [pc, #92]	@ (8001860 <rxInitTransferMetadataFromFrame+0x84>)
 8001804:	4a14      	ldr	r2, [pc, #80]	@ (8001858 <rxInitTransferMetadataFromFrame+0x7c>)
 8001806:	f44f 7124 	mov.w	r1, #656	@ 0x290
 800180a:	4814      	ldr	r0, [pc, #80]	@ (800185c <rxInitTransferMetadataFromFrame+0x80>)
 800180c:	f004 fa68 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d106      	bne.n	8001824 <rxInitTransferMetadataFromFrame+0x48>
 8001816:	4b13      	ldr	r3, [pc, #76]	@ (8001864 <rxInitTransferMetadataFromFrame+0x88>)
 8001818:	4a0f      	ldr	r2, [pc, #60]	@ (8001858 <rxInitTransferMetadataFromFrame+0x7c>)
 800181a:	f240 2191 	movw	r1, #657	@ 0x291
 800181e:	480f      	ldr	r0, [pc, #60]	@ (800185c <rxInitTransferMetadataFromFrame+0x80>)
 8001820:	f004 fa5e 	bl	8005ce0 <__assert_func>
    out_transfer->priority       = frame->priority;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	7a1a      	ldrb	r2, [r3, #8]
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	7a5a      	ldrb	r2, [r3, #9]
 8001830:	683b      	ldr	r3, [r7, #0]
 8001832:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	895a      	ldrh	r2, [r3, #10]
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	7b1a      	ldrb	r2, [r3, #12]
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	7b9a      	ldrb	r2, [r3, #14]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	715a      	strb	r2, [r3, #5]
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	080072ec 	.word	0x080072ec
 8001858:	08008084 	.word	0x08008084
 800185c:	08006e7c 	.word	0x08006e7c
 8001860:	08007348 	.word	0x08007348
 8001864:	08007368 	.word	0x08007368

08001868 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b084      	sub	sp, #16
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	460a      	mov	r2, r1
 8001872:	71fb      	strb	r3, [r7, #7]
 8001874:	4613      	mov	r3, r2
 8001876:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	2b1f      	cmp	r3, #31
 800187c:	d906      	bls.n	800188c <rxComputeTransferIDDifference+0x24>
 800187e:	4b15      	ldr	r3, [pc, #84]	@ (80018d4 <rxComputeTransferIDDifference+0x6c>)
 8001880:	4a15      	ldr	r2, [pc, #84]	@ (80018d8 <rxComputeTransferIDDifference+0x70>)
 8001882:	f44f 7127 	mov.w	r1, #668	@ 0x29c
 8001886:	4815      	ldr	r0, [pc, #84]	@ (80018dc <rxComputeTransferIDDifference+0x74>)
 8001888:	f004 fa2a 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	2b1f      	cmp	r3, #31
 8001890:	d906      	bls.n	80018a0 <rxComputeTransferIDDifference+0x38>
 8001892:	4b13      	ldr	r3, [pc, #76]	@ (80018e0 <rxComputeTransferIDDifference+0x78>)
 8001894:	4a10      	ldr	r2, [pc, #64]	@ (80018d8 <rxComputeTransferIDDifference+0x70>)
 8001896:	f240 219d 	movw	r1, #669	@ 0x29d
 800189a:	4810      	ldr	r0, [pc, #64]	@ (80018dc <rxComputeTransferIDDifference+0x74>)
 800189c:	f004 fa20 	bl	8005ce0 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 80018a0:	79fb      	ldrb	r3, [r7, #7]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	79bb      	ldrb	r3, [r7, #6]
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 80018ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	da07      	bge.n	80018c6 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 80018b6:	2320      	movs	r3, #32
 80018b8:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 80018ba:	7b7b      	ldrb	r3, [r7, #13]
 80018bc:	b29a      	uxth	r2, r3
 80018be:	89fb      	ldrh	r3, [r7, #14]
 80018c0:	4413      	add	r3, r2
 80018c2:	b29b      	uxth	r3, r3
 80018c4:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 80018c6:	89fb      	ldrh	r3, [r7, #14]
 80018c8:	b2db      	uxtb	r3, r3
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	08007384 	.word	0x08007384
 80018d8:	08008020 	.word	0x08008020
 80018dc:	08006e7c 	.word	0x08006e7c
 80018e0:	0800739c 	.word	0x0800739c

080018e4 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
 80018f0:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d106      	bne.n	8001906 <rxSessionWritePayload+0x22>
 80018f8:	4b67      	ldr	r3, [pc, #412]	@ (8001a98 <rxSessionWritePayload+0x1b4>)
 80018fa:	4a68      	ldr	r2, [pc, #416]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 80018fc:	f240 21ad 	movw	r1, #685	@ 0x2ad
 8001900:	4867      	ldr	r0, [pc, #412]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001902:	f004 f9ed 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d106      	bne.n	800191a <rxSessionWritePayload+0x36>
 800190c:	4b65      	ldr	r3, [pc, #404]	@ (8001aa4 <rxSessionWritePayload+0x1c0>)
 800190e:	4a63      	ldr	r2, [pc, #396]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001910:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8001914:	4862      	ldr	r0, [pc, #392]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001916:	f004 f9e3 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 800191a:	6a3b      	ldr	r3, [r7, #32]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d109      	bne.n	8001934 <rxSessionWritePayload+0x50>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d006      	beq.n	8001934 <rxSessionWritePayload+0x50>
 8001926:	4b60      	ldr	r3, [pc, #384]	@ (8001aa8 <rxSessionWritePayload+0x1c4>)
 8001928:	4a5c      	ldr	r2, [pc, #368]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 800192a:	f240 21af 	movw	r1, #687	@ 0x2af
 800192e:	485c      	ldr	r0, [pc, #368]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001930:	f004 f9d6 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	429a      	cmp	r2, r3
 800193c:	d206      	bcs.n	800194c <rxSessionWritePayload+0x68>
 800193e:	4b5b      	ldr	r3, [pc, #364]	@ (8001aac <rxSessionWritePayload+0x1c8>)
 8001940:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001942:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8001946:	4856      	ldr	r0, [pc, #344]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001948:	f004 f9ca 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	429a      	cmp	r2, r3
 8001956:	d906      	bls.n	8001966 <rxSessionWritePayload+0x82>
 8001958:	4b55      	ldr	r3, [pc, #340]	@ (8001ab0 <rxSessionWritePayload+0x1cc>)
 800195a:	4a50      	ldr	r2, [pc, #320]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 800195c:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8001960:	484f      	ldr	r0, [pc, #316]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001962:	f004 f9bd 	bl	8005ce0 <__assert_func>

    rxs->total_payload_size += payload_size;
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	689a      	ldr	r2, [r3, #8]
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	441a      	add	r2, r3
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	691b      	ldr	r3, [r3, #16]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d115      	bne.n	80019a6 <rxSessionWritePayload+0xc2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d012      	beq.n	80019a6 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d006      	beq.n	8001996 <rxSessionWritePayload+0xb2>
 8001988:	4b4a      	ldr	r3, [pc, #296]	@ (8001ab4 <rxSessionWritePayload+0x1d0>)
 800198a:	4a44      	ldr	r2, [pc, #272]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 800198c:	f44f 712e 	mov.w	r1, #696	@ 0x2b8
 8001990:	4843      	ldr	r0, [pc, #268]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001992:	f004 f9a5 	bl	8005ce0 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	6879      	ldr	r1, [r7, #4]
 800199c:	68f8      	ldr	r0, [r7, #12]
 800199e:	4798      	blx	r3
 80019a0:	4602      	mov	r2, r0
 80019a2:	68bb      	ldr	r3, [r7, #8]
 80019a4:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 80019a6:	2300      	movs	r3, #0
 80019a8:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d04e      	beq.n	8001a50 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 80019b6:	68bb      	ldr	r3, [r7, #8]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	4413      	add	r3, r2
 80019be:	687a      	ldr	r2, [r7, #4]
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d229      	bcs.n	8001a18 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d206      	bcs.n	80019dc <rxSessionWritePayload+0xf8>
 80019ce:	4b37      	ldr	r3, [pc, #220]	@ (8001aac <rxSessionWritePayload+0x1c8>)
 80019d0:	4a32      	ldr	r2, [pc, #200]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 80019d2:	f240 21c3 	movw	r1, #707	@ 0x2c3
 80019d6:	4832      	ldr	r0, [pc, #200]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 80019d8:	f004 f982 	bl	8005ce0 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 80019e6:	68bb      	ldr	r3, [r7, #8]
 80019e8:	68da      	ldr	r2, [r3, #12]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4413      	add	r3, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d006      	beq.n	8001a02 <rxSessionWritePayload+0x11e>
 80019f4:	4b30      	ldr	r3, [pc, #192]	@ (8001ab8 <rxSessionWritePayload+0x1d4>)
 80019f6:	4a29      	ldr	r2, [pc, #164]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 80019f8:	f240 21c5 	movw	r1, #709	@ 0x2c5
 80019fc:	4828      	ldr	r0, [pc, #160]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 80019fe:	f004 f96f 	bl	8005ce0 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 8001a02:	693a      	ldr	r2, [r7, #16]
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	429a      	cmp	r2, r3
 8001a08:	d306      	bcc.n	8001a18 <rxSessionWritePayload+0x134>
 8001a0a:	4b2c      	ldr	r3, [pc, #176]	@ (8001abc <rxSessionWritePayload+0x1d8>)
 8001a0c:	4a23      	ldr	r2, [pc, #140]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001a0e:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8001a12:	4823      	ldr	r0, [pc, #140]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001a14:	f004 f964 	bl	8005ce0 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	691a      	ldr	r2, [r3, #16]
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	4413      	add	r3, r2
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	4618      	mov	r0, r3
 8001a28:	f004 fbf3 	bl	8006212 <memcpy>
        rxs->payload_size += bytes_to_copy;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	693b      	ldr	r3, [r7, #16]
 8001a32:	441a      	add	r2, r3
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d219      	bcs.n	8001a76 <rxSessionWritePayload+0x192>
 8001a42:	4b1a      	ldr	r3, [pc, #104]	@ (8001aac <rxSessionWritePayload+0x1c8>)
 8001a44:	4a15      	ldr	r2, [pc, #84]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001a46:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 8001a4a:	4815      	ldr	r0, [pc, #84]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001a4c:	f004 f948 	bl	8005ce0 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	68db      	ldr	r3, [r3, #12]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d006      	beq.n	8001a66 <rxSessionWritePayload+0x182>
 8001a58:	4b16      	ldr	r3, [pc, #88]	@ (8001ab4 <rxSessionWritePayload+0x1d0>)
 8001a5a:	4a10      	ldr	r2, [pc, #64]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001a5c:	f44f 7135 	mov.w	r1, #724	@ 0x2d4
 8001a60:	480f      	ldr	r0, [pc, #60]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001a62:	f004 f93d 	bl	8005ce0 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <rxSessionWritePayload+0x18e>
 8001a6c:	f06f 0302 	mvn.w	r3, #2
 8001a70:	e000      	b.n	8001a74 <rxSessionWritePayload+0x190>
 8001a72:	2300      	movs	r3, #0
 8001a74:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8001a76:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	dd06      	ble.n	8001a8c <rxSessionWritePayload+0x1a8>
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <rxSessionWritePayload+0x1dc>)
 8001a80:	4a06      	ldr	r2, [pc, #24]	@ (8001a9c <rxSessionWritePayload+0x1b8>)
 8001a82:	f240 21d7 	movw	r1, #727	@ 0x2d7
 8001a86:	4806      	ldr	r0, [pc, #24]	@ (8001aa0 <rxSessionWritePayload+0x1bc>)
 8001a88:	f004 f92a 	bl	8005ce0 <__assert_func>
    return out;
 8001a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	08007058 	.word	0x08007058
 8001a9c:	0800806c 	.word	0x0800806c
 8001aa0:	08006e7c 	.word	0x08006e7c
 8001aa4:	080073b4 	.word	0x080073b4
 8001aa8:	08006f50 	.word	0x08006f50
 8001aac:	080073c8 	.word	0x080073c8
 8001ab0:	080073e4 	.word	0x080073e4
 8001ab4:	08007414 	.word	0x08007414
 8001ab8:	0800742c 	.word	0x0800742c
 8001abc:	0800745c 	.word	0x0800745c
 8001ac0:	0800747c 	.word	0x0800747c

08001ac4 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d106      	bne.n	8001ae2 <rxSessionRestart+0x1e>
 8001ad4:	4b1a      	ldr	r3, [pc, #104]	@ (8001b40 <rxSessionRestart+0x7c>)
 8001ad6:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <rxSessionRestart+0x80>)
 8001ad8:	f240 21dd 	movw	r1, #733	@ 0x2dd
 8001adc:	481a      	ldr	r0, [pc, #104]	@ (8001b48 <rxSessionRestart+0x84>)
 8001ade:	f004 f8ff 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d106      	bne.n	8001af6 <rxSessionRestart+0x32>
 8001ae8:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <rxSessionRestart+0x88>)
 8001aea:	4a16      	ldr	r2, [pc, #88]	@ (8001b44 <rxSessionRestart+0x80>)
 8001aec:	f240 21de 	movw	r1, #734	@ 0x2de
 8001af0:	4815      	ldr	r0, [pc, #84]	@ (8001b48 <rxSessionRestart+0x84>)
 8001af2:	f004 f8f5 	bl	8005ce0 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	6912      	ldr	r2, [r2, #16]
 8001afe:	4611      	mov	r1, r2
 8001b00:	6878      	ldr	r0, [r7, #4]
 8001b02:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	2200      	movs	r2, #0
 8001b08:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b1c:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	7d9b      	ldrb	r3, [r3, #22]
 8001b22:	3301      	adds	r3, #1
 8001b24:	b2db      	uxtb	r3, r3
 8001b26:	f003 031f 	and.w	r3, r3, #31
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2201      	movs	r2, #1
 8001b34:	761a      	strb	r2, [r3, #24]
}
 8001b36:	bf00      	nop
 8001b38:	3708      	adds	r7, #8
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	08007058 	.word	0x08007058
 8001b44:	08008040 	.word	0x08008040
 8001b48:	08006e7c 	.word	0x08006e7c
 8001b4c:	080073b4 	.word	0x080073b4

08001b50 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b088      	sub	sp, #32
 8001b54:	af02      	add	r7, sp, #8
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
 8001b5c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d106      	bne.n	8001b72 <rxSessionAcceptFrame+0x22>
 8001b64:	4b81      	ldr	r3, [pc, #516]	@ (8001d6c <rxSessionAcceptFrame+0x21c>)
 8001b66:	4a82      	ldr	r2, [pc, #520]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001b68:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8001b6c:	4881      	ldr	r0, [pc, #516]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001b6e:	f004 f8b7 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d106      	bne.n	8001b86 <rxSessionAcceptFrame+0x36>
 8001b78:	4b7f      	ldr	r3, [pc, #508]	@ (8001d78 <rxSessionAcceptFrame+0x228>)
 8001b7a:	4a7d      	ldr	r2, [pc, #500]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001b7c:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8001b80:	487c      	ldr	r0, [pc, #496]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001b82:	f004 f8ad 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d106      	bne.n	8001b9a <rxSessionAcceptFrame+0x4a>
 8001b8c:	4b7b      	ldr	r3, [pc, #492]	@ (8001d7c <rxSessionAcceptFrame+0x22c>)
 8001b8e:	4a78      	ldr	r2, [pc, #480]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001b90:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8001b94:	4877      	ldr	r0, [pc, #476]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001b96:	f004 f8a3 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	699b      	ldr	r3, [r3, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d106      	bne.n	8001bb0 <rxSessionAcceptFrame+0x60>
 8001ba2:	4b77      	ldr	r3, [pc, #476]	@ (8001d80 <rxSessionAcceptFrame+0x230>)
 8001ba4:	4a72      	ldr	r2, [pc, #456]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001ba6:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8001baa:	4872      	ldr	r0, [pc, #456]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001bac:	f004 f898 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	7b9b      	ldrb	r3, [r3, #14]
 8001bb4:	2b1f      	cmp	r3, #31
 8001bb6:	d906      	bls.n	8001bc6 <rxSessionAcceptFrame+0x76>
 8001bb8:	4b72      	ldr	r3, [pc, #456]	@ (8001d84 <rxSessionAcceptFrame+0x234>)
 8001bba:	4a6d      	ldr	r2, [pc, #436]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001bbc:	f240 21f3 	movw	r1, #755	@ 0x2f3
 8001bc0:	486c      	ldr	r0, [pc, #432]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001bc2:	f004 f88d 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d106      	bne.n	8001bda <rxSessionAcceptFrame+0x8a>
 8001bcc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d88 <rxSessionAcceptFrame+0x238>)
 8001bce:	4a68      	ldr	r2, [pc, #416]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001bd0:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8001bd4:	4867      	ldr	r0, [pc, #412]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001bd6:	f004 f883 	bl	8005ce0 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	7bdb      	ldrb	r3, [r3, #15]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d005      	beq.n	8001bee <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7bdb      	ldrb	r3, [r3, #15]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d005      	beq.n	8001c02 <rxSessionAcceptFrame+0xb2>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	7c1b      	ldrb	r3, [r3, #16]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d001      	beq.n	8001c02 <rxSessionAcceptFrame+0xb2>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e000      	b.n	8001c04 <rxSessionAcceptFrame+0xb4>
 8001c02:	2300      	movs	r3, #0
 8001c04:	75bb      	strb	r3, [r7, #22]
 8001c06:	7dbb      	ldrb	r3, [r7, #22]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8001c0e:	7dbb      	ldrb	r3, [r7, #22]
 8001c10:	f083 0301 	eor.w	r3, r3, #1
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	8a98      	ldrh	r0, [r3, #20]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6959      	ldr	r1, [r3, #20]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	461a      	mov	r2, r3
 8001c28:	f7fe fed6 	bl	80009d8 <crcAdd>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	461a      	mov	r2, r3
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	695a      	ldr	r2, [r3, #20]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	699b      	ldr	r3, [r3, #24]
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fe4d 	bl	80018e4 <rxSessionWritePayload>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8001c4e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	da10      	bge.n	8001c78 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8001c56:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c5a:	f113 0f03 	cmn.w	r3, #3
 8001c5e:	d006      	beq.n	8001c6e <rxSessionAcceptFrame+0x11e>
 8001c60:	4b4a      	ldr	r3, [pc, #296]	@ (8001d8c <rxSessionAcceptFrame+0x23c>)
 8001c62:	4a43      	ldr	r2, [pc, #268]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001c64:	f240 3106 	movw	r1, #774	@ 0x306
 8001c68:	4842      	ldr	r0, [pc, #264]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001c6a:	f004 f839 	bl	8005ce0 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8001c6e:	68b9      	ldr	r1, [r7, #8]
 8001c70:	68f8      	ldr	r0, [r7, #12]
 8001c72:	f7ff ff27 	bl	8001ac4 <rxSessionRestart>
 8001c76:	e072      	b.n	8001d5e <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	7c1b      	ldrb	r3, [r3, #16]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d05f      	beq.n	8001d40 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8001c80:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d006      	beq.n	8001c96 <rxSessionAcceptFrame+0x146>
 8001c88:	4b41      	ldr	r3, [pc, #260]	@ (8001d90 <rxSessionAcceptFrame+0x240>)
 8001c8a:	4a39      	ldr	r2, [pc, #228]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001c8c:	f240 310b 	movw	r1, #779	@ 0x30b
 8001c90:	4838      	ldr	r0, [pc, #224]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001c92:	f004 f825 	bl	8005ce0 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8001c96:	7dbb      	ldrb	r3, [r7, #22]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d103      	bne.n	8001ca4 <rxSessionAcceptFrame+0x154>
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	8a9b      	ldrh	r3, [r3, #20]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d148      	bne.n	8001d36 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8001ca8:	6a3b      	ldr	r3, [r7, #32]
 8001caa:	4619      	mov	r1, r3
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f7ff fd95 	bl	80017dc <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cb8:	6a39      	ldr	r1, [r7, #32]
 8001cba:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	6a3b      	ldr	r3, [r7, #32]
 8001cc4:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	691a      	ldr	r2, [r3, #16]
 8001cca:	6a3b      	ldr	r3, [r7, #32]
 8001ccc:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d206      	bcs.n	8001ce8 <rxSessionAcceptFrame+0x198>
 8001cda:	4b2e      	ldr	r3, [pc, #184]	@ (8001d94 <rxSessionAcceptFrame+0x244>)
 8001cdc:	4a24      	ldr	r2, [pc, #144]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001cde:	f240 3115 	movw	r1, #789	@ 0x315
 8001ce2:	4824      	ldr	r0, [pc, #144]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001ce4:	f003 fffc 	bl	8005ce0 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	689a      	ldr	r2, [r3, #8]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	1ad3      	subs	r3, r2, r3
 8001cf2:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 8001cf4:	7dbb      	ldrb	r3, [r7, #22]
 8001cf6:	f083 0301 	eor.w	r3, r3, #1
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d017      	beq.n	8001d30 <rxSessionAcceptFrame+0x1e0>
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	2b01      	cmp	r3, #1
 8001d04:	d814      	bhi.n	8001d30 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	691a      	ldr	r2, [r3, #16]
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f1c3 0302 	rsb	r3, r3, #2
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d206      	bcs.n	8001d22 <rxSessionAcceptFrame+0x1d2>
 8001d14:	4b20      	ldr	r3, [pc, #128]	@ (8001d98 <rxSessionAcceptFrame+0x248>)
 8001d16:	4a16      	ldr	r2, [pc, #88]	@ (8001d70 <rxSessionAcceptFrame+0x220>)
 8001d18:	f240 3119 	movw	r1, #793	@ 0x319
 8001d1c:	4815      	ldr	r0, [pc, #84]	@ (8001d74 <rxSessionAcceptFrame+0x224>)
 8001d1e:	f003 ffdf 	bl	8005ce0 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 8001d22:	6a3b      	ldr	r3, [r7, #32]
 8001d24:	691a      	ldr	r2, [r3, #16]
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	4413      	add	r3, r2
 8001d2a:	1e9a      	subs	r2, r3, #2
 8001d2c:	6a3b      	ldr	r3, [r7, #32]
 8001d2e:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2200      	movs	r2, #0
 8001d34:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 8001d36:	68b9      	ldr	r1, [r7, #8]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f7ff fec3 	bl	8001ac4 <rxSessionRestart>
 8001d3e:	e00e      	b.n	8001d5e <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	7e1b      	ldrb	r3, [r3, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	bf14      	ite	ne
 8001d48:	2301      	movne	r3, #1
 8001d4a:	2300      	moveq	r3, #0
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	f083 0301 	eor.w	r3, r3, #1
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	b2da      	uxtb	r2, r3
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8001d5e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	08007058 	.word	0x08007058
 8001d70:	08008054 	.word	0x08008054
 8001d74:	08006e7c 	.word	0x08006e7c
 8001d78:	080073b4 	.word	0x080073b4
 8001d7c:	080072ec 	.word	0x080072ec
 8001d80:	08007348 	.word	0x08007348
 8001d84:	08007488 	.word	0x08007488
 8001d88:	08007368 	.word	0x08007368
 8001d8c:	080074b0 	.word	0x080074b0
 8001d90:	080074bc 	.word	0x080074bc
 8001d94:	080074c8 	.word	0x080074c8
 8001d98:	080074f8 	.word	0x080074f8

08001d9c <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_transport_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8001d9c:	b5b0      	push	{r4, r5, r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
 8001da8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d106      	bne.n	8001dbe <rxSessionUpdate+0x22>
 8001db0:	4b6d      	ldr	r3, [pc, #436]	@ (8001f68 <rxSessionUpdate+0x1cc>)
 8001db2:	4a6e      	ldr	r2, [pc, #440]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001db4:	f240 3137 	movw	r1, #823	@ 0x337
 8001db8:	486d      	ldr	r0, [pc, #436]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001dba:	f003 ff91 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d106      	bne.n	8001dd2 <rxSessionUpdate+0x36>
 8001dc4:	4b6b      	ldr	r3, [pc, #428]	@ (8001f74 <rxSessionUpdate+0x1d8>)
 8001dc6:	4a69      	ldr	r2, [pc, #420]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001dc8:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8001dcc:	4868      	ldr	r0, [pc, #416]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001dce:	f003 ff87 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d106      	bne.n	8001de6 <rxSessionUpdate+0x4a>
 8001dd8:	4b67      	ldr	r3, [pc, #412]	@ (8001f78 <rxSessionUpdate+0x1dc>)
 8001dda:	4a64      	ldr	r2, [pc, #400]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001ddc:	f240 3139 	movw	r1, #825	@ 0x339
 8001de0:	4863      	ldr	r0, [pc, #396]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001de2:	f003 ff7d 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8001de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d106      	bne.n	8001dfa <rxSessionUpdate+0x5e>
 8001dec:	4b63      	ldr	r3, [pc, #396]	@ (8001f7c <rxSessionUpdate+0x1e0>)
 8001dee:	4a5f      	ldr	r2, [pc, #380]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001df0:	f240 313a 	movw	r1, #826	@ 0x33a
 8001df4:	485e      	ldr	r0, [pc, #376]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001df6:	f003 ff73 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	7d9b      	ldrb	r3, [r3, #22]
 8001dfe:	2b1f      	cmp	r3, #31
 8001e00:	d906      	bls.n	8001e10 <rxSessionUpdate+0x74>
 8001e02:	4b5f      	ldr	r3, [pc, #380]	@ (8001f80 <rxSessionUpdate+0x1e4>)
 8001e04:	4a59      	ldr	r2, [pc, #356]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001e06:	f240 313b 	movw	r1, #827	@ 0x33b
 8001e0a:	4859      	ldr	r0, [pc, #356]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001e0c:	f003 ff68 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	7b9b      	ldrb	r3, [r3, #14]
 8001e14:	2b1f      	cmp	r3, #31
 8001e16:	d906      	bls.n	8001e26 <rxSessionUpdate+0x8a>
 8001e18:	4b5a      	ldr	r3, [pc, #360]	@ (8001f84 <rxSessionUpdate+0x1e8>)
 8001e1a:	4a54      	ldr	r2, [pc, #336]	@ (8001f6c <rxSessionUpdate+0x1d0>)
 8001e1c:	f44f 714f 	mov.w	r1, #828	@ 0x33c
 8001e20:	4853      	ldr	r0, [pc, #332]	@ (8001f70 <rxSessionUpdate+0x1d4>)
 8001e22:	f003 ff5d 	bl	8005ce0 <__assert_func>

    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2c:	68b9      	ldr	r1, [r7, #8]
 8001e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001e32:	4290      	cmp	r0, r2
 8001e34:	eb71 0303 	sbcs.w	r3, r1, r3
 8001e38:	d20f      	bcs.n	8001e5a <rxSessionUpdate+0xbe>
                               ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e46:	1a84      	subs	r4, r0, r2
 8001e48:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timed_out = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8001e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001e50:	42a2      	cmp	r2, r4
 8001e52:	41ab      	sbcs	r3, r5
 8001e54:	d201      	bcs.n	8001e5a <rxSessionUpdate+0xbe>
 8001e56:	2301      	movs	r3, #1
 8001e58:	e000      	b.n	8001e5c <rxSessionUpdate+0xc0>
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	75bb      	strb	r3, [r7, #22]
 8001e5e:	7dbb      	ldrb	r3, [r7, #22]
 8001e60:	f003 0301 	and.w	r3, r3, #1
 8001e64:	75bb      	strb	r3, [r7, #22]

    const bool not_previous_tid = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	7d9a      	ldrb	r2, [r3, #22]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	7b9b      	ldrb	r3, [r3, #14]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	4610      	mov	r0, r2
 8001e72:	f7ff fcf9 	bl	8001868 <rxComputeTransferIDDifference>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	bf8c      	ite	hi
 8001e7c:	2301      	movhi	r3, #1
 8001e7e:	2300      	movls	r3, #0
 8001e80:	757b      	strb	r3, [r7, #21]

    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8001e82:	7dbb      	ldrb	r3, [r7, #22]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <rxSessionUpdate+0x104>
 8001e88:	68bb      	ldr	r3, [r7, #8]
 8001e8a:	7ddb      	ldrb	r3, [r3, #23]
 8001e8c:	78fa      	ldrb	r2, [r7, #3]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d108      	bne.n	8001ea4 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	7bdb      	ldrb	r3, [r3, #15]
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d004      	beq.n	8001ea4 <rxSessionUpdate+0x108>
                                                frame->start_of_transfer && not_previous_tid);
 8001e9a:	7d7b      	ldrb	r3, [r7, #21]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <rxSessionUpdate+0x108>
    const bool need_restart = tid_timed_out || ((rxs->redundant_transport_index == redundant_transport_index) &&
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <rxSessionUpdate+0x10a>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	753b      	strb	r3, [r7, #20]
 8001ea8:	7d3b      	ldrb	r3, [r7, #20]
 8001eaa:	f003 0301 	and.w	r3, r3, #1
 8001eae:	753b      	strb	r3, [r7, #20]

    if (need_restart)
 8001eb0:	7d3b      	ldrb	r3, [r7, #20]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d013      	beq.n	8001ede <rxSessionUpdate+0x142>
    {
        rxs->total_payload_size        = 0U;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
        rxs->payload_size              = 0U;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc            = CRC_INITIAL;
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ec8:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id               = frame->transfer_id;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7b9a      	ldrb	r2, [r3, #14]
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	759a      	strb	r2, [r3, #22]
        rxs->toggle                    = INITIAL_TOGGLE_STATE;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	761a      	strb	r2, [r3, #24]
        rxs->redundant_transport_index = redundant_transport_index;
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	78fa      	ldrb	r2, [r7, #3]
 8001edc:	75da      	strb	r2, [r3, #23]
    }

    int8_t out = 0;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]
    if (need_restart && (!frame->start_of_transfer))
 8001ee2:	7d3b      	ldrb	r3, [r7, #20]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d00b      	beq.n	8001f00 <rxSessionUpdate+0x164>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	7bdb      	ldrb	r3, [r3, #15]
 8001eec:	f083 0301 	eor.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <rxSessionUpdate+0x164>
    {
        rxSessionRestart(ins, rxs);  // SOT-miss, no point going further.
 8001ef6:	68b9      	ldr	r1, [r7, #8]
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f7ff fde3 	bl	8001ac4 <rxSessionRestart>
 8001efe:	e02c      	b.n	8001f5a <rxSessionUpdate+0x1be>
    }
    else
    {
        const bool correct_transport = (rxs->redundant_transport_index == redundant_transport_index);
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	7ddb      	ldrb	r3, [r3, #23]
 8001f04:	78fa      	ldrb	r2, [r7, #3]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	bf0c      	ite	eq
 8001f0a:	2301      	moveq	r3, #1
 8001f0c:	2300      	movne	r3, #0
 8001f0e:	74fb      	strb	r3, [r7, #19]
        const bool correct_toggle    = (frame->toggle == rxs->toggle);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	7c5a      	ldrb	r2, [r3, #17]
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	7e1b      	ldrb	r3, [r3, #24]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	bf0c      	ite	eq
 8001f1c:	2301      	moveq	r3, #1
 8001f1e:	2300      	movne	r3, #0
 8001f20:	74bb      	strb	r3, [r7, #18]
        const bool correct_tid       = (frame->transfer_id == rxs->transfer_id);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7b9a      	ldrb	r2, [r3, #14]
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	7d9b      	ldrb	r3, [r3, #22]
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	bf0c      	ite	eq
 8001f2e:	2301      	moveq	r3, #1
 8001f30:	2300      	movne	r3, #0
 8001f32:	747b      	strb	r3, [r7, #17]
        if (correct_transport && correct_toggle && correct_tid)
 8001f34:	7cfb      	ldrb	r3, [r7, #19]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00f      	beq.n	8001f5a <rxSessionUpdate+0x1be>
 8001f3a:	7cbb      	ldrb	r3, [r7, #18]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d00c      	beq.n	8001f5a <rxSessionUpdate+0x1be>
 8001f40:	7c7b      	ldrb	r3, [r7, #17]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d009      	beq.n	8001f5a <rxSessionUpdate+0x1be>
        {
            out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8001f46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	68b9      	ldr	r1, [r7, #8]
 8001f50:	68f8      	ldr	r0, [r7, #12]
 8001f52:	f7ff fdfd 	bl	8001b50 <rxSessionAcceptFrame>
 8001f56:	4603      	mov	r3, r0
 8001f58:	75fb      	strb	r3, [r7, #23]
        }
    }
    return out;
 8001f5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3718      	adds	r7, #24
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bdb0      	pop	{r4, r5, r7, pc}
 8001f66:	bf00      	nop
 8001f68:	08007058 	.word	0x08007058
 8001f6c:	08008010 	.word	0x08008010
 8001f70:	08006e7c 	.word	0x08006e7c
 8001f74:	080073b4 	.word	0x080073b4
 8001f78:	080072ec 	.word	0x080072ec
 8001f7c:	08007368 	.word	0x08007368
 8001f80:	08007530 	.word	0x08007530
 8001f84:	08007488 	.word	0x08007488

08001f88 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_transport_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8001f88:	b5b0      	push	{r4, r5, r7, lr}
 8001f8a:	b08c      	sub	sp, #48	@ 0x30
 8001f8c:	af04      	add	r7, sp, #16
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d106      	bne.n	8001faa <rxAcceptFrame+0x22>
 8001f9c:	4b85      	ldr	r3, [pc, #532]	@ (80021b4 <rxAcceptFrame+0x22c>)
 8001f9e:	4a86      	ldr	r2, [pc, #536]	@ (80021b8 <rxAcceptFrame+0x230>)
 8001fa0:	f44f 715a 	mov.w	r1, #872	@ 0x368
 8001fa4:	4885      	ldr	r0, [pc, #532]	@ (80021bc <rxAcceptFrame+0x234>)
 8001fa6:	f003 fe9b 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <rxAcceptFrame+0x36>
 8001fb0:	4b83      	ldr	r3, [pc, #524]	@ (80021c0 <rxAcceptFrame+0x238>)
 8001fb2:	4a81      	ldr	r2, [pc, #516]	@ (80021b8 <rxAcceptFrame+0x230>)
 8001fb4:	f240 3169 	movw	r1, #873	@ 0x369
 8001fb8:	4880      	ldr	r0, [pc, #512]	@ (80021bc <rxAcceptFrame+0x234>)
 8001fba:	f003 fe91 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	8b9a      	ldrh	r2, [r3, #28]
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	895b      	ldrh	r3, [r3, #10]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d006      	beq.n	8001fd8 <rxAcceptFrame+0x50>
 8001fca:	4b7e      	ldr	r3, [pc, #504]	@ (80021c4 <rxAcceptFrame+0x23c>)
 8001fcc:	4a7a      	ldr	r2, [pc, #488]	@ (80021b8 <rxAcceptFrame+0x230>)
 8001fce:	f240 316a 	movw	r1, #874	@ 0x36a
 8001fd2:	487a      	ldr	r0, [pc, #488]	@ (80021bc <rxAcceptFrame+0x234>)
 8001fd4:	f003 fe84 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <rxAcceptFrame+0x64>
 8001fde:	4b7a      	ldr	r3, [pc, #488]	@ (80021c8 <rxAcceptFrame+0x240>)
 8001fe0:	4a75      	ldr	r2, [pc, #468]	@ (80021b8 <rxAcceptFrame+0x230>)
 8001fe2:	f240 316b 	movw	r1, #875	@ 0x36b
 8001fe6:	4875      	ldr	r0, [pc, #468]	@ (80021bc <rxAcceptFrame+0x234>)
 8001fe8:	f003 fe7a 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	699b      	ldr	r3, [r3, #24]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d106      	bne.n	8002002 <rxAcceptFrame+0x7a>
 8001ff4:	4b75      	ldr	r3, [pc, #468]	@ (80021cc <rxAcceptFrame+0x244>)
 8001ff6:	4a70      	ldr	r2, [pc, #448]	@ (80021b8 <rxAcceptFrame+0x230>)
 8001ff8:	f44f 715b 	mov.w	r1, #876	@ 0x36c
 8001ffc:	486f      	ldr	r0, [pc, #444]	@ (80021bc <rxAcceptFrame+0x234>)
 8001ffe:	f003 fe6f 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	7b9b      	ldrb	r3, [r3, #14]
 8002006:	2b1f      	cmp	r3, #31
 8002008:	d906      	bls.n	8002018 <rxAcceptFrame+0x90>
 800200a:	4b71      	ldr	r3, [pc, #452]	@ (80021d0 <rxAcceptFrame+0x248>)
 800200c:	4a6a      	ldr	r2, [pc, #424]	@ (80021b8 <rxAcceptFrame+0x230>)
 800200e:	f240 316d 	movw	r1, #877	@ 0x36d
 8002012:	486a      	ldr	r0, [pc, #424]	@ (80021bc <rxAcceptFrame+0x234>)
 8002014:	f003 fe64 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7b5b      	ldrb	r3, [r3, #13]
 800201c:	2bff      	cmp	r3, #255	@ 0xff
 800201e:	d00c      	beq.n	800203a <rxAcceptFrame+0xb2>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	791a      	ldrb	r2, [r3, #4]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7b5b      	ldrb	r3, [r3, #13]
 8002028:	429a      	cmp	r2, r3
 800202a:	d006      	beq.n	800203a <rxAcceptFrame+0xb2>
 800202c:	4b69      	ldr	r3, [pc, #420]	@ (80021d4 <rxAcceptFrame+0x24c>)
 800202e:	4a62      	ldr	r2, [pc, #392]	@ (80021b8 <rxAcceptFrame+0x230>)
 8002030:	f240 316e 	movw	r1, #878	@ 0x36e
 8002034:	4861      	ldr	r0, [pc, #388]	@ (80021bc <rxAcceptFrame+0x234>)
 8002036:	f003 fe53 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203c:	2b00      	cmp	r3, #0
 800203e:	d106      	bne.n	800204e <rxAcceptFrame+0xc6>
 8002040:	4b65      	ldr	r3, [pc, #404]	@ (80021d8 <rxAcceptFrame+0x250>)
 8002042:	4a5d      	ldr	r2, [pc, #372]	@ (80021b8 <rxAcceptFrame+0x230>)
 8002044:	f240 316f 	movw	r1, #879	@ 0x36f
 8002048:	485c      	ldr	r0, [pc, #368]	@ (80021bc <rxAcceptFrame+0x234>)
 800204a:	f003 fe49 	bl	8005ce0 <__assert_func>

    int8_t out = 0;
 800204e:	2300      	movs	r3, #0
 8002050:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	7b1b      	ldrb	r3, [r3, #12]
 8002056:	b25b      	sxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	db6c      	blt.n	8002136 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	7b1b      	ldrb	r3, [r3, #12]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	3308      	adds	r3, #8
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d134      	bne.n	80020d8 <rxAcceptFrame+0x150>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	7bdb      	ldrb	r3, [r3, #15]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d030      	beq.n	80020d8 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	2120      	movs	r1, #32
 800207c:	68f8      	ldr	r0, [r7, #12]
 800207e:	4798      	blx	r3
 8002080:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	7b1b      	ldrb	r3, [r3, #12]
 8002086:	68ba      	ldr	r2, [r7, #8]
 8002088:	3308      	adds	r3, #8
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d01d      	beq.n	80020d4 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec   = frame->timestamp_usec;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800209e:	6939      	ldr	r1, [r7, #16]
 80020a0:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size        = 0U;
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	2200      	movs	r2, #0
 80020a8:	609a      	str	r2, [r3, #8]
                rxs->payload_size              = 0U;
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2200      	movs	r2, #0
 80020ae:	60da      	str	r2, [r3, #12]
                rxs->payload                   = NULL;
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2200      	movs	r2, #0
 80020b4:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc            = CRC_INITIAL;
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80020bc:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id               = frame->transfer_id;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	7b9a      	ldrb	r2, [r3, #14]
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	759a      	strb	r2, [r3, #22]
                rxs->redundant_transport_index = redundant_transport_index;
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	78fa      	ldrb	r2, [r7, #3]
 80020ca:	75da      	strb	r2, [r3, #23]
                rxs->toggle                    = INITIAL_TOGGLE_STATE;
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	2201      	movs	r2, #1
 80020d0:	761a      	strb	r2, [r3, #24]
 80020d2:	e001      	b.n	80020d8 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 80020d4:	23fd      	movs	r3, #253	@ 0xfd
 80020d6:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	7b1b      	ldrb	r3, [r3, #12]
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	3308      	adds	r3, #8
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d05e      	beq.n	80021a8 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 80020ea:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d006      	beq.n	8002100 <rxAcceptFrame+0x178>
 80020f2:	4b3a      	ldr	r3, [pc, #232]	@ (80021dc <rxAcceptFrame+0x254>)
 80020f4:	4a30      	ldr	r2, [pc, #192]	@ (80021b8 <rxAcceptFrame+0x230>)
 80020f6:	f240 318e 	movw	r1, #910	@ 0x38e
 80020fa:	4830      	ldr	r0, [pc, #192]	@ (80021bc <rxAcceptFrame+0x234>)
 80020fc:	f003 fdf0 	bl	8005ce0 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	7b1b      	ldrb	r3, [r3, #12]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	3308      	adds	r3, #8
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	4413      	add	r3, r2
 800210c:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002114:	68b9      	ldr	r1, [r7, #8]
 8002116:	6989      	ldr	r1, [r1, #24]
 8002118:	78fd      	ldrb	r5, [r7, #3]
 800211a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800211c:	9003      	str	r0, [sp, #12]
 800211e:	9102      	str	r1, [sp, #8]
 8002120:	e9cd 2300 	strd	r2, r3, [sp]
 8002124:	462b      	mov	r3, r5
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	4621      	mov	r1, r4
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fe36 	bl	8001d9c <rxSessionUpdate>
 8002130:	4603      	mov	r3, r0
 8002132:	77fb      	strb	r3, [r7, #31]
 8002134:	e038      	b.n	80021a8 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	7b1b      	ldrb	r3, [r3, #12]
 800213a:	2bff      	cmp	r3, #255	@ 0xff
 800213c:	d006      	beq.n	800214c <rxAcceptFrame+0x1c4>
 800213e:	4b28      	ldr	r3, [pc, #160]	@ (80021e0 <rxAcceptFrame+0x258>)
 8002140:	4a1d      	ldr	r2, [pc, #116]	@ (80021b8 <rxAcceptFrame+0x230>)
 8002142:	f240 319a 	movw	r1, #922	@ 0x39a
 8002146:	481d      	ldr	r0, [pc, #116]	@ (80021bc <rxAcceptFrame+0x234>)
 8002148:	f003 fdca 	bl	8005ce0 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	695a      	ldr	r2, [r3, #20]
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8002154:	4293      	cmp	r3, r2
 8002156:	bf28      	it	cs
 8002158:	4613      	movcs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	69b9      	ldr	r1, [r7, #24]
 8002162:	68f8      	ldr	r0, [r7, #12]
 8002164:	4798      	blx	r3
 8002166:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d01a      	beq.n	80021a4 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800216e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fb32 	bl	80017dc <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800217e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002180:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8002184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800218a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4619      	mov	r1, r3
 8002198:	6978      	ldr	r0, [r7, #20]
 800219a:	f004 f83a 	bl	8006212 <memcpy>
            out = 1;
 800219e:	2301      	movs	r3, #1
 80021a0:	77fb      	strb	r3, [r7, #31]
 80021a2:	e001      	b.n	80021a8 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 80021a4:	23fd      	movs	r3, #253	@ 0xfd
 80021a6:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 80021a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3720      	adds	r7, #32
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdb0      	pop	{r4, r5, r7, pc}
 80021b4:	08007058 	.word	0x08007058
 80021b8:	08008000 	.word	0x08008000
 80021bc:	08006e7c 	.word	0x08006e7c
 80021c0:	08007558 	.word	0x08007558
 80021c4:	08007574 	.word	0x08007574
 80021c8:	080072ec 	.word	0x080072ec
 80021cc:	08007348 	.word	0x08007348
 80021d0:	08007488 	.word	0x08007488
 80021d4:	0800759c 	.word	0x0800759c
 80021d8:	08007368 	.word	0x08007368
 80021dc:	080075f4 	.word	0x080075f4
 80021e0:	08007600 	.word	0x08007600

080021e4 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	881b      	ldrh	r3, [r3, #0]
 80021f2:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) node)->port_id;
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	8b9b      	ldrh	r3, [r3, #28]
 80021f8:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 80021fa:	89fa      	ldrh	r2, [r7, #14]
 80021fc:	89bb      	ldrh	r3, [r7, #12]
 80021fe:	429a      	cmp	r2, r3
 8002200:	d00a      	beq.n	8002218 <rxSubscriptionPredicateOnPortID+0x34>
 8002202:	89fa      	ldrh	r2, [r7, #14]
 8002204:	89bb      	ldrh	r3, [r7, #12]
 8002206:	429a      	cmp	r2, r3
 8002208:	bf8c      	ite	hi
 800220a:	2301      	movhi	r3, #1
 800220c:	2300      	movls	r3, #0
 800220e:	b2db      	uxtb	r3, r3
 8002210:	461a      	mov	r2, r3
 8002212:	4b05      	ldr	r3, [pc, #20]	@ (8002228 <rxSubscriptionPredicateOnPortID+0x44>)
 8002214:	569b      	ldrsb	r3, [r3, r2]
 8002216:	e000      	b.n	800221a <rxSubscriptionPredicateOnPortID+0x36>
 8002218:	2300      	movs	r3, #0
}
 800221a:	4618      	mov	r0, r3
 800221c:	3714      	adds	r7, #20
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	08007fec 	.word	0x08007fec

0800222c <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
 8002234:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	331c      	adds	r3, #28
 800223a:	6839      	ldr	r1, [r7, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff ffd1 	bl	80021e4 <rxSubscriptionPredicateOnPortID>
 8002242:	4603      	mov	r3, r0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800224c:	b5b0      	push	{r4, r5, r7, lr}
 800224e:	b08c      	sub	sp, #48	@ 0x30
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d106      	bne.n	800226c <canardInit+0x20>
 800225e:	4b16      	ldr	r3, [pc, #88]	@ (80022b8 <canardInit+0x6c>)
 8002260:	4a16      	ldr	r2, [pc, #88]	@ (80022bc <canardInit+0x70>)
 8002262:	f240 31d6 	movw	r1, #982	@ 0x3d6
 8002266:	4816      	ldr	r0, [pc, #88]	@ (80022c0 <canardInit+0x74>)
 8002268:	f003 fd3a 	bl	8005ce0 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d106      	bne.n	8002280 <canardInit+0x34>
 8002272:	4b14      	ldr	r3, [pc, #80]	@ (80022c4 <canardInit+0x78>)
 8002274:	4a11      	ldr	r2, [pc, #68]	@ (80022bc <canardInit+0x70>)
 8002276:	f240 31d7 	movw	r1, #983	@ 0x3d7
 800227a:	4811      	ldr	r0, [pc, #68]	@ (80022c0 <canardInit+0x74>)
 800227c:	f003 fd30 	bl	8005ce0 <__assert_func>
    const CanardInstance out = {
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	23ff      	movs	r3, #255	@ 0xff
 8002286:	763b      	strb	r3, [r7, #24]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	61fb      	str	r3, [r7, #28]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	623b      	str	r3, [r7, #32]
 8002290:	2300      	movs	r3, #0
 8002292:	627b      	str	r3, [r7, #36]	@ 0x24
 8002294:	2300      	movs	r3, #0
 8002296:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002298:	2300      	movs	r3, #0
 800229a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	461d      	mov	r5, r3
 80022a0:	f107 0414 	add.w	r4, r7, #20
 80022a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022a8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80022ac:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 80022b0:	68f8      	ldr	r0, [r7, #12]
 80022b2:	3730      	adds	r7, #48	@ 0x30
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bdb0      	pop	{r4, r5, r7, pc}
 80022b8:	08007620 	.word	0x08007620
 80022bc:	08007e74 	.word	0x08007e74
 80022c0:	08006e7c 	.word	0x08006e7c
 80022c4:	08007640 	.word	0x08007640

080022c8 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 80022c8:	b4b0      	push	{r4, r5, r7}
 80022ca:	b08b      	sub	sp, #44	@ 0x2c
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	617b      	str	r3, [r7, #20]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	2300      	movs	r3, #0
 80022de:	61fb      	str	r3, [r7, #28]
 80022e0:	2300      	movs	r3, #0
 80022e2:	623b      	str	r3, [r7, #32]
 80022e4:	2300      	movs	r3, #0
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	461d      	mov	r5, r3
 80022ec:	f107 0414 	add.w	r4, r7, #20
 80022f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022f4:	6823      	ldr	r3, [r4, #0]
 80022f6:	602b      	str	r3, [r5, #0]
}
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	372c      	adds	r7, #44	@ 0x2c
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bcb0      	pop	{r4, r5, r7}
 8002300:	4770      	bx	lr
	...

08002304 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b08e      	sub	sp, #56	@ 0x38
 8002308:	af06      	add	r7, sp, #24
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8002312:	f06f 0301 	mvn.w	r3, #1
 8002316:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d062      	beq.n	80023e4 <canardTxPush+0xe0>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d05f      	beq.n	80023e4 <canardTxPush+0xe0>
 8002324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002326:	2b00      	cmp	r3, #0
 8002328:	d05c      	beq.n	80023e4 <canardTxPush+0xe0>
 800232a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <canardTxPush+0x32>
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	2b00      	cmp	r3, #0
 8002334:	d156      	bne.n	80023e4 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fc02 	bl	8000b44 <adjustPresentationLayerMTU>
 8002340:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	791a      	ldrb	r2, [r3, #4]
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	4613      	mov	r3, r2
 800234c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800234e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002350:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002352:	f7fe fc27 	bl	8000ba4 <txMakeCANID>
 8002356:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	2b00      	cmp	r3, #0
 800235c:	db40      	blt.n	80023e0 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 800235e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	429a      	cmp	r2, r3
 8002364:	d81c      	bhi.n	80023a0 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8002366:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8002368:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800236a:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 800236c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800236e:	9103      	str	r1, [sp, #12]
 8002370:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002372:	9102      	str	r1, [sp, #8]
 8002374:	9201      	str	r2, [sp, #4]
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	e9d7 2300 	ldrd	r2, r3, [r7]
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7fe fdda 	bl	8000f38 <txPushSingleFrame>
 8002384:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	2b00      	cmp	r3, #0
 800238a:	db2b      	blt.n	80023e4 <canardTxPush+0xe0>
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d028      	beq.n	80023e4 <canardTxPush+0xe0>
 8002392:	4b1c      	ldr	r3, [pc, #112]	@ (8002404 <canardTxPush+0x100>)
 8002394:	4a1c      	ldr	r2, [pc, #112]	@ (8002408 <canardTxPush+0x104>)
 8002396:	f240 4105 	movw	r1, #1029	@ 0x405
 800239a:	481c      	ldr	r0, [pc, #112]	@ (800240c <canardTxPush+0x108>)
 800239c:	f003 fca0 	bl	8005ce0 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 80023a0:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 80023a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a4:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 80023a6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80023a8:	9105      	str	r1, [sp, #20]
 80023aa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80023ac:	9104      	str	r1, [sp, #16]
 80023ae:	9203      	str	r2, [sp, #12]
 80023b0:	9302      	str	r3, [sp, #8]
 80023b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023b6:	e9cd 2300 	strd	r2, r3, [sp]
 80023ba:	69ba      	ldr	r2, [r7, #24]
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f7fe ffd4 	bl	800136c <txPushMultiFrame>
 80023c4:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 80023c6:	69fb      	ldr	r3, [r7, #28]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	db0b      	blt.n	80023e4 <canardTxPush+0xe0>
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	dc08      	bgt.n	80023e4 <canardTxPush+0xe0>
 80023d2:	4b0f      	ldr	r3, [pc, #60]	@ (8002410 <canardTxPush+0x10c>)
 80023d4:	4a0c      	ldr	r2, [pc, #48]	@ (8002408 <canardTxPush+0x104>)
 80023d6:	f240 4111 	movw	r1, #1041	@ 0x411
 80023da:	480c      	ldr	r0, [pc, #48]	@ (800240c <canardTxPush+0x108>)
 80023dc:	f003 fc80 	bl	8005ce0 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <canardTxPush+0xf4>
 80023ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002414 <canardTxPush+0x110>)
 80023ec:	4a06      	ldr	r2, [pc, #24]	@ (8002408 <canardTxPush+0x104>)
 80023ee:	f240 4119 	movw	r1, #1049	@ 0x419
 80023f2:	4806      	ldr	r0, [pc, #24]	@ (800240c <canardTxPush+0x108>)
 80023f4:	f003 fc74 	bl	8005ce0 <__assert_func>
    return out;
 80023f8:	69fb      	ldr	r3, [r7, #28]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	08007190 	.word	0x08007190
 8002408:	08007e80 	.word	0x08007e80
 800240c:	08006e7c 	.word	0x08006e7c
 8002410:	080072d4 	.word	0x080072d4
 8002414:	0800765c 	.word	0x0800765c

08002418 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8002420:	2300      	movs	r3, #0
 8002422:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d006      	beq.n	8002438 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) cavlFindExtremum(que->root, false);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2100      	movs	r1, #0
 8002430:	4618      	mov	r0, r3
 8002432:	f7fd ff1d 	bl	8000270 <cavlFindExtremum>
 8002436:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8002438:	68fb      	ldr	r3, [r7, #12]
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b084      	sub	sp, #16
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 800244c:	2300      	movs	r3, #0
 800244e:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d010      	beq.n	8002478 <canardTxPop+0x36>
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00d      	beq.n	8002478 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	330c      	adds	r3, #12
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	4611      	mov	r1, r2
 8002468:	4618      	mov	r0, r3
 800246a:	f7fe f957 	bl	800071c <cavlRemove>
        que->size--;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	1e5a      	subs	r2, r3, #1
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	609a      	str	r2, [r3, #8]
    }
    return out;
 8002478:	68fb      	ldr	r3, [r7, #12]
}
 800247a:	4618      	mov	r0, r3
 800247c:	3710      	adds	r7, #16
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}
	...

08002484 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_transport_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b090      	sub	sp, #64	@ 0x40
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8002490:	23fe      	movs	r3, #254	@ 0xfe
 8002492:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d068      	beq.n	800256e <canardRxAccept+0xea>
 800249c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d065      	beq.n	800256e <canardRxAccept+0xea>
 80024a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d062      	beq.n	800256e <canardRxAccept+0xea>
 80024a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024b0:	d25d      	bcs.n	800256e <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80024b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024b4:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 80024ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d155      	bne.n	800256e <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 80024c2:	f107 0310 	add.w	r3, r7, #16
 80024c6:	2220      	movs	r2, #32
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f003 fe15 	bl	80060fa <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 80024d0:	f107 0310 	add.w	r3, r7, #16
 80024d4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80024d6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80024da:	f7ff f83b 	bl	8001554 <rxTryParseFrame>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d041      	beq.n	8002568 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 80024e4:	7f7b      	ldrb	r3, [r7, #29]
 80024e6:	2bff      	cmp	r3, #255	@ 0xff
 80024e8:	d004      	beq.n	80024f4 <canardRxAccept+0x70>
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	791a      	ldrb	r2, [r3, #4]
 80024ee:	7f7b      	ldrb	r3, [r7, #29]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d135      	bne.n	8002560 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 80024f4:	7e7b      	ldrb	r3, [r7, #25]
 80024f6:	3304      	adds	r3, #4
 80024f8:	009b      	lsls	r3, r3, #2
 80024fa:	68fa      	ldr	r2, [r7, #12]
 80024fc:	18d0      	adds	r0, r2, r3
 80024fe:	f107 0310 	add.w	r3, r7, #16
 8002502:	f103 010a 	add.w	r1, r3, #10
 8002506:	2300      	movs	r3, #0
 8002508:	4a21      	ldr	r2, [pc, #132]	@ (8002590 <canardRxAccept+0x10c>)
 800250a:	f7fe f889 	bl	8000620 <cavlSearch>
 800250e:	6338      	str	r0, [r7, #48]	@ 0x30
                                                       &model.port_id,
                                                       &rxSubscriptionPredicateOnPortID,
                                                       NULL);
                if (out_subscription != NULL)
 8002510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002512:	2b00      	cmp	r3, #0
 8002514:	d002      	beq.n	800251c <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8002516:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800251a:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 800251c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800251e:	2b00      	cmp	r3, #0
 8002520:	d01a      	beq.n	8002558 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 8002522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002524:	8b9a      	ldrh	r2, [r3, #28]
 8002526:	8b7b      	ldrh	r3, [r7, #26]
 8002528:	429a      	cmp	r2, r3
 800252a:	d006      	beq.n	800253a <canardRxAccept+0xb6>
 800252c:	4b19      	ldr	r3, [pc, #100]	@ (8002594 <canardRxAccept+0x110>)
 800252e:	4a1a      	ldr	r2, [pc, #104]	@ (8002598 <canardRxAccept+0x114>)
 8002530:	f240 415a 	movw	r1, #1114	@ 0x45a
 8002534:	4819      	ldr	r0, [pc, #100]	@ (800259c <canardRxAccept+0x118>)
 8002536:	f003 fbd3 	bl	8005ce0 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_transport_index, out_transfer);
 800253a:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 800253e:	f107 0210 	add.w	r2, r7, #16
 8002542:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002544:	9300      	str	r3, [sp, #0]
 8002546:	460b      	mov	r3, r1
 8002548:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff fd1c 	bl	8001f88 <rxAcceptFrame>
 8002550:	4603      	mov	r3, r0
 8002552:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8002556:	e00a      	b.n	800256e <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8002558:	2300      	movs	r3, #0
 800255a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 800255e:	e006      	b.n	800256e <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8002560:	2300      	movs	r3, #0
 8002562:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8002566:	e002      	b.n	800256e <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-UAVCAN/CAN input frame.
 8002568:	2300      	movs	r3, #0
 800256a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 800256e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8002572:	2b01      	cmp	r3, #1
 8002574:	dd06      	ble.n	8002584 <canardRxAccept+0x100>
 8002576:	4b0a      	ldr	r3, [pc, #40]	@ (80025a0 <canardRxAccept+0x11c>)
 8002578:	4a07      	ldr	r2, [pc, #28]	@ (8002598 <canardRxAccept+0x114>)
 800257a:	f240 416c 	movw	r1, #1132	@ 0x46c
 800257e:	4807      	ldr	r0, [pc, #28]	@ (800259c <canardRxAccept+0x118>)
 8002580:	f003 fbae 	bl	8005ce0 <__assert_func>
    return out;
 8002584:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8002588:	4618      	mov	r0, r3
 800258a:	3738      	adds	r7, #56	@ 0x38
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	080021e5 	.word	0x080021e5
 8002594:	08007668 	.word	0x08007668
 8002598:	08007fdc 	.word	0x08007fdc
 800259c:	08006e7c 	.word	0x08006e7c
 80025a0:	08007688 	.word	0x08007688

080025a4 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b088      	sub	sp, #32
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	607b      	str	r3, [r7, #4]
 80025ae:	460b      	mov	r3, r1
 80025b0:	72fb      	strb	r3, [r7, #11]
 80025b2:	4613      	mov	r3, r2
 80025b4:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 80025b6:	23fe      	movs	r3, #254	@ 0xfe
 80025b8:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d04a      	beq.n	800265a <canardRxSubscribe+0xb6>
 80025c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d047      	beq.n	800265a <canardRxSubscribe+0xb6>
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d844      	bhi.n	800265a <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 80025d0:	893a      	ldrh	r2, [r7, #8]
 80025d2:	7afb      	ldrb	r3, [r7, #11]
 80025d4:	4619      	mov	r1, r3
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f000 f850 	bl	800267c <canardRxUnsubscribe>
 80025dc:	4603      	mov	r3, r0
 80025de:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 80025e0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	db38      	blt.n	800265a <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 80025e8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80025ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80025ee:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 80025f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fa:	893a      	ldrh	r2, [r7, #8]
 80025fc:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80025fe:	2300      	movs	r3, #0
 8002600:	61bb      	str	r3, [r7, #24]
 8002602:	e009      	b.n	8002618 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8002604:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	3308      	adds	r3, #8
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	4413      	add	r3, r2
 800260e:	2200      	movs	r2, #0
 8002610:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	3301      	adds	r3, #1
 8002616:	61bb      	str	r3, [r7, #24]
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2b7f      	cmp	r3, #127	@ 0x7f
 800261c:	d9f2      	bls.n	8002604 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	3304      	adds	r3, #4
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	18d0      	adds	r0, r2, r3
 8002628:	4b0f      	ldr	r3, [pc, #60]	@ (8002668 <canardRxSubscribe+0xc4>)
 800262a:	4a10      	ldr	r2, [pc, #64]	@ (800266c <canardRxSubscribe+0xc8>)
 800262c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800262e:	f7fd fff7 	bl	8000620 <cavlSearch>
 8002632:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8002634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002636:	693a      	ldr	r2, [r7, #16]
 8002638:	429a      	cmp	r2, r3
 800263a:	d006      	beq.n	800264a <canardRxSubscribe+0xa6>
 800263c:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <canardRxSubscribe+0xcc>)
 800263e:	4a0d      	ldr	r2, [pc, #52]	@ (8002674 <canardRxSubscribe+0xd0>)
 8002640:	f44f 6192 	mov.w	r1, #1168	@ 0x490
 8002644:	480c      	ldr	r0, [pc, #48]	@ (8002678 <canardRxSubscribe+0xd4>)
 8002646:	f003 fb4b 	bl	8005ce0 <__assert_func>
            out = (out > 0) ? 0 : 1;
 800264a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfd4      	ite	le
 8002652:	2301      	movle	r3, #1
 8002654:	2300      	movgt	r3, #0
 8002656:	b2db      	uxtb	r3, r3
 8002658:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800265a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800265e:	4618      	mov	r0, r3
 8002660:	3720      	adds	r7, #32
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	08000981 	.word	0x08000981
 800266c:	0800222d 	.word	0x0800222d
 8002670:	08007694 	.word	0x08007694
 8002674:	080080a4 	.word	0x080080a4
 8002678:	08006e7c 	.word	0x08006e7c

0800267c <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b088      	sub	sp, #32
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
 8002688:	4613      	mov	r3, r2
 800268a:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 800268c:	23fe      	movs	r3, #254	@ 0xfe
 800268e:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8002690:	78fb      	ldrb	r3, [r7, #3]
 8002692:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d05f      	beq.n	800275a <canardRxUnsubscribe+0xde>
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d85c      	bhi.n	800275a <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 80026a0:	883b      	ldrh	r3, [r7, #0]
 80026a2:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	3304      	adds	r3, #4
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	18d0      	adds	r0, r2, r3
 80026ae:	f107 010e 	add.w	r1, r7, #14
 80026b2:	2300      	movs	r3, #0
 80026b4:	4a2c      	ldr	r2, [pc, #176]	@ (8002768 <canardRxUnsubscribe+0xec>)
 80026b6:	f7fd ffb3 	bl	8000620 <cavlSearch>
 80026ba:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 80026bc:	693b      	ldr	r3, [r7, #16]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d049      	beq.n	8002756 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	3304      	adds	r3, #4
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	693a      	ldr	r2, [r7, #16]
 80026ce:	4611      	mov	r1, r2
 80026d0:	4618      	mov	r0, r3
 80026d2:	f7fe f823 	bl	800071c <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	8b9b      	ldrh	r3, [r3, #28]
 80026da:	883a      	ldrh	r2, [r7, #0]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d006      	beq.n	80026ee <canardRxUnsubscribe+0x72>
 80026e0:	4b22      	ldr	r3, [pc, #136]	@ (800276c <canardRxUnsubscribe+0xf0>)
 80026e2:	4a23      	ldr	r2, [pc, #140]	@ (8002770 <canardRxUnsubscribe+0xf4>)
 80026e4:	f240 41a5 	movw	r1, #1189	@ 0x4a5
 80026e8:	4822      	ldr	r0, [pc, #136]	@ (8002774 <canardRxUnsubscribe+0xf8>)
 80026ea:	f003 faf9 	bl	8005ce0 <__assert_func>
            out = 1;
 80026ee:	2301      	movs	r3, #1
 80026f0:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
 80026f6:	e02a      	b.n	800274e <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	6939      	ldr	r1, [r7, #16]
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	3308      	adds	r3, #8
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	440b      	add	r3, r1
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d007      	beq.n	800271c <canardRxUnsubscribe+0xa0>
 800270c:	6939      	ldr	r1, [r7, #16]
 800270e:	69bb      	ldr	r3, [r7, #24]
 8002710:	3308      	adds	r3, #8
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	691b      	ldr	r3, [r3, #16]
 800271a:	e000      	b.n	800271e <canardRxUnsubscribe+0xa2>
 800271c:	2300      	movs	r3, #0
 800271e:	4619      	mov	r1, r3
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	6939      	ldr	r1, [r7, #16]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	3308      	adds	r3, #8
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	440b      	add	r3, r1
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	4619      	mov	r1, r3
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4790      	blx	r2
                sub->sessions[i] = NULL;
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	69bb      	ldr	r3, [r7, #24]
 800273e:	3308      	adds	r3, #8
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4413      	add	r3, r2
 8002744:	2200      	movs	r2, #0
 8002746:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	3301      	adds	r3, #1
 800274c:	61bb      	str	r3, [r7, #24]
 800274e:	69bb      	ldr	r3, [r7, #24]
 8002750:	2b7f      	cmp	r3, #127	@ 0x7f
 8002752:	d9d1      	bls.n	80026f8 <canardRxUnsubscribe+0x7c>
 8002754:	e001      	b.n	800275a <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 800275a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800275e:	4618      	mov	r0, r3
 8002760:	3720      	adds	r7, #32
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	080021e5 	.word	0x080021e5
 800276c:	080076b4 	.word	0x080076b4
 8002770:	080080b8 	.word	0x080080b8
 8002774:	08006e7c 	.word	0x08006e7c

08002778 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4293      	cmp	r3, r2
 8002788:	bf28      	it	cs
 800278a:	4613      	movcs	r3, r2
}
 800278c:	4618      	mov	r0, r3
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80027aa:	68b9      	ldr	r1, [r7, #8]
 80027ac:	6978      	ldr	r0, [r7, #20]
 80027ae:	f7ff ffe3 	bl	8002778 <nunavutChooseMin>
 80027b2:	4602      	mov	r2, r0
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	1a9b      	subs	r3, r3, r2
 80027b8:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80027ba:	6939      	ldr	r1, [r7, #16]
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f7ff ffdb 	bl	8002778 <nunavutChooseMin>
 80027c2:	4603      	mov	r3, r0
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	3718      	adds	r7, #24
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b092      	sub	sp, #72	@ 0x48
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <nunavutCopyBits+0x20>
 80027e0:	4b91      	ldr	r3, [pc, #580]	@ (8002a28 <nunavutCopyBits+0x25c>)
 80027e2:	4a92      	ldr	r2, [pc, #584]	@ (8002a2c <nunavutCopyBits+0x260>)
 80027e4:	2181      	movs	r1, #129	@ 0x81
 80027e6:	4892      	ldr	r0, [pc, #584]	@ (8002a30 <nunavutCopyBits+0x264>)
 80027e8:	f003 fa7a 	bl	8005ce0 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d105      	bne.n	80027fe <nunavutCopyBits+0x32>
 80027f2:	4b90      	ldr	r3, [pc, #576]	@ (8002a34 <nunavutCopyBits+0x268>)
 80027f4:	4a8d      	ldr	r2, [pc, #564]	@ (8002a2c <nunavutCopyBits+0x260>)
 80027f6:	2182      	movs	r1, #130	@ 0x82
 80027f8:	488d      	ldr	r0, [pc, #564]	@ (8002a30 <nunavutCopyBits+0x264>)
 80027fa:	f003 fa71 	bl	8005ce0 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	429a      	cmp	r2, r3
 8002804:	d105      	bne.n	8002812 <nunavutCopyBits+0x46>
 8002806:	4b8c      	ldr	r3, [pc, #560]	@ (8002a38 <nunavutCopyBits+0x26c>)
 8002808:	4a88      	ldr	r2, [pc, #544]	@ (8002a2c <nunavutCopyBits+0x260>)
 800280a:	2183      	movs	r1, #131	@ 0x83
 800280c:	4888      	ldr	r0, [pc, #544]	@ (8002a30 <nunavutCopyBits+0x264>)
 800280e:	f003 fa67 	bl	8005ce0 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 8002812:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002814:	f003 0307 	and.w	r3, r3, #7
 8002818:	2b00      	cmp	r3, #0
 800281a:	d14f      	bne.n	80028bc <nunavutCopyBits+0xf0>
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f003 0307 	and.w	r3, r3, #7
 8002822:	2b00      	cmp	r3, #0
 8002824:	d14a      	bne.n	80028bc <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 800282c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800282e:	08db      	lsrs	r3, r3, #3
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	4413      	add	r3, r2
 8002834:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 8002836:	68bb      	ldr	r3, [r7, #8]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4413      	add	r3, r2
 800283e:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8002840:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002842:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002844:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002846:	f003 fc3e 	bl	80060c6 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 8002856:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 80df 	beq.w	8002a1e <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8002860:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002862:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002864:	4413      	add	r3, r2
 8002866:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8002868:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800286a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800286c:	4413      	add	r3, r2
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8002870:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002874:	2b07      	cmp	r3, #7
 8002876:	d905      	bls.n	8002884 <nunavutCopyBits+0xb8>
 8002878:	4b70      	ldr	r3, [pc, #448]	@ (8002a3c <nunavutCopyBits+0x270>)
 800287a:	4a6c      	ldr	r2, [pc, #432]	@ (8002a2c <nunavutCopyBits+0x260>)
 800287c:	2192      	movs	r1, #146	@ 0x92
 800287e:	486c      	ldr	r0, [pc, #432]	@ (8002a30 <nunavutCopyBits+0x264>)
 8002880:	f003 fa2e 	bl	8005ce0 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8002884:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002888:	2201      	movs	r2, #1
 800288a:	fa02 f303 	lsl.w	r3, r2, r3
 800288e:	b2db      	uxtb	r3, r3
 8002890:	3b01      	subs	r3, #1
 8002892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 8002896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002898:	781a      	ldrb	r2, [r3, #0]
 800289a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800289e:	43db      	mvns	r3, r3
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	4013      	ands	r3, r2
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028a8:	7819      	ldrb	r1, [r3, #0]
 80028aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028ae:	400b      	ands	r3, r1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4313      	orrs	r3, r2
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028b8:	701a      	strb	r2, [r3, #0]
    {
 80028ba:	e0b0      	b.n	8002a1e <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/UAVCAN/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80028c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80028c6:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 80028cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4413      	add	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 80028d4:	6a3a      	ldr	r2, [r7, #32]
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d210      	bcs.n	80028fe <nunavutCopyBits+0x132>
 80028dc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4413      	add	r3, r2
 80028e2:	3308      	adds	r3, #8
 80028e4:	08db      	lsrs	r3, r3, #3
 80028e6:	6a3a      	ldr	r2, [r7, #32]
 80028e8:	4413      	add	r3, r2
 80028ea:	461a      	mov	r2, r3
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d905      	bls.n	80028fe <nunavutCopyBits+0x132>
 80028f2:	4b53      	ldr	r3, [pc, #332]	@ (8002a40 <nunavutCopyBits+0x274>)
 80028f4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a2c <nunavutCopyBits+0x260>)
 80028f6:	21a1      	movs	r1, #161	@ 0xa1
 80028f8:	484d      	ldr	r0, [pc, #308]	@ (8002a30 <nunavutCopyBits+0x264>)
 80028fa:	f003 f9f1 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 80028fe:	6a3a      	ldr	r2, [r7, #32]
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	429a      	cmp	r2, r3
 8002904:	d97d      	bls.n	8002a02 <nunavutCopyBits+0x236>
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4413      	add	r3, r2
 800290c:	3308      	adds	r3, #8
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	69fa      	ldr	r2, [r7, #28]
 8002912:	4413      	add	r3, r2
 8002914:	461a      	mov	r2, r3
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	429a      	cmp	r2, r3
 800291a:	d972      	bls.n	8002a02 <nunavutCopyBits+0x236>
 800291c:	4b49      	ldr	r3, [pc, #292]	@ (8002a44 <nunavutCopyBits+0x278>)
 800291e:	4a43      	ldr	r2, [pc, #268]	@ (8002a2c <nunavutCopyBits+0x260>)
 8002920:	21a2      	movs	r1, #162	@ 0xa2
 8002922:	4843      	ldr	r0, [pc, #268]	@ (8002a30 <nunavutCopyBits+0x264>)
 8002924:	f003 f9dc 	bl	8005ce0 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8002928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800292a:	b2db      	uxtb	r3, r3
 800292c:	f003 0307 	and.w	r3, r3, #7
 8002930:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 8002932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002934:	b2db      	uxtb	r3, r3
 8002936:	f003 0307 	and.w	r3, r3, #7
 800293a:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 800293c:	7dba      	ldrb	r2, [r7, #22]
 800293e:	7dfb      	ldrb	r3, [r7, #23]
 8002940:	4293      	cmp	r3, r2
 8002942:	bf38      	it	cc
 8002944:	4613      	movcc	r3, r2
 8002946:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8002948:	7d7b      	ldrb	r3, [r7, #21]
 800294a:	f1c3 0008 	rsb	r0, r3, #8
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	4619      	mov	r1, r3
 8002956:	f7ff ff0f 	bl	8002778 <nunavutChooseMin>
 800295a:	4603      	mov	r3, r0
 800295c:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 800295e:	7d3b      	ldrb	r3, [r7, #20]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d105      	bne.n	8002970 <nunavutCopyBits+0x1a4>
 8002964:	4b38      	ldr	r3, [pc, #224]	@ (8002a48 <nunavutCopyBits+0x27c>)
 8002966:	4a31      	ldr	r2, [pc, #196]	@ (8002a2c <nunavutCopyBits+0x260>)
 8002968:	21a9      	movs	r1, #169	@ 0xa9
 800296a:	4831      	ldr	r0, [pc, #196]	@ (8002a30 <nunavutCopyBits+0x264>)
 800296c:	f003 f9b8 	bl	8005ce0 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 8002970:	7d3b      	ldrb	r3, [r7, #20]
 8002972:	2b08      	cmp	r3, #8
 8002974:	d905      	bls.n	8002982 <nunavutCopyBits+0x1b6>
 8002976:	4b35      	ldr	r3, [pc, #212]	@ (8002a4c <nunavutCopyBits+0x280>)
 8002978:	4a2c      	ldr	r2, [pc, #176]	@ (8002a2c <nunavutCopyBits+0x260>)
 800297a:	21aa      	movs	r1, #170	@ 0xaa
 800297c:	482c      	ldr	r0, [pc, #176]	@ (8002a30 <nunavutCopyBits+0x264>)
 800297e:	f003 f9af 	bl	8005ce0 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8002982:	7d3b      	ldrb	r3, [r7, #20]
 8002984:	2201      	movs	r2, #1
 8002986:	fa02 f303 	lsl.w	r3, r2, r3
 800298a:	1e5a      	subs	r2, r3, #1
 800298c:	7dbb      	ldrb	r3, [r7, #22]
 800298e:	fa02 f303 	lsl.w	r3, r2, r3
 8002992:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d105      	bne.n	80029a6 <nunavutCopyBits+0x1da>
 800299a:	4b2d      	ldr	r3, [pc, #180]	@ (8002a50 <nunavutCopyBits+0x284>)
 800299c:	4a23      	ldr	r2, [pc, #140]	@ (8002a2c <nunavutCopyBits+0x260>)
 800299e:	21ad      	movs	r1, #173	@ 0xad
 80029a0:	4823      	ldr	r0, [pc, #140]	@ (8002a30 <nunavutCopyBits+0x264>)
 80029a2:	f003 f99d 	bl	8005ce0 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80029a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80029a8:	08db      	lsrs	r3, r3, #3
 80029aa:	6a3a      	ldr	r2, [r7, #32]
 80029ac:	4413      	add	r3, r2
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	7dfb      	ldrb	r3, [r7, #23]
 80029b4:	fa42 f303 	asr.w	r3, r2, r3
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	7dbb      	ldrb	r3, [r7, #22]
 80029be:	fa02 f303 	lsl.w	r3, r2, r3
 80029c2:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80029c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029c6:	08db      	lsrs	r3, r3, #3
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	4413      	add	r3, r2
 80029cc:	781a      	ldrb	r2, [r3, #0]
 80029ce:	7cfb      	ldrb	r3, [r7, #19]
 80029d0:	43db      	mvns	r3, r3
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4013      	ands	r3, r2
 80029d6:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80029d8:	7cba      	ldrb	r2, [r7, #18]
 80029da:	7cfb      	ldrb	r3, [r7, #19]
 80029dc:	4013      	ands	r3, r2
 80029de:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80029e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80029e2:	08db      	lsrs	r3, r3, #3
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	4413      	add	r3, r2
 80029e8:	7c79      	ldrb	r1, [r7, #17]
 80029ea:	7c3a      	ldrb	r2, [r7, #16]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	b2d2      	uxtb	r2, r2
 80029f0:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80029f2:	7d3b      	ldrb	r3, [r7, #20]
 80029f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029f6:	4413      	add	r3, r2
 80029f8:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 80029fa:	7d3b      	ldrb	r3, [r7, #20]
 80029fc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80029fe:	4413      	add	r3, r2
 8002a00:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d88e      	bhi.n	8002928 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d006      	beq.n	8002a20 <nunavutCopyBits+0x254>
 8002a12:	4b10      	ldr	r3, [pc, #64]	@ (8002a54 <nunavutCopyBits+0x288>)
 8002a14:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <nunavutCopyBits+0x260>)
 8002a16:	21bb      	movs	r1, #187	@ 0xbb
 8002a18:	4805      	ldr	r0, [pc, #20]	@ (8002a30 <nunavutCopyBits+0x264>)
 8002a1a:	f003 f961 	bl	8005ce0 <__assert_func>
    {
 8002a1e:	bf00      	nop
    }
}
 8002a20:	bf00      	nop
 8002a22:	3748      	adds	r7, #72	@ 0x48
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	080076cc 	.word	0x080076cc
 8002a2c:	08008148 	.word	0x08008148
 8002a30:	080076e0 	.word	0x080076e0
 8002a34:	08007738 	.word	0x08007738
 8002a38:	0800774c 	.word	0x0800774c
 8002a3c:	08007758 	.word	0x08007758
 8002a40:	08007768 	.word	0x08007768
 8002a44:	080077d4 	.word	0x080077d4
 8002a48:	08007840 	.word	0x08007840
 8002a4c:	0800784c 	.word	0x0800784c
 8002a50:	08007858 	.word	0x08007858
 8002a54:	08007864 	.word	0x08007864

08002a58 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b088      	sub	sp, #32
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	607a      	str	r2, [r7, #4]
 8002a64:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(output != NULL);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d105      	bne.n	8002a78 <nunavutGetBits+0x20>
 8002a6c:	4b17      	ldr	r3, [pc, #92]	@ (8002acc <nunavutGetBits+0x74>)
 8002a6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ad0 <nunavutGetBits+0x78>)
 8002a70:	21cb      	movs	r1, #203	@ 0xcb
 8002a72:	4818      	ldr	r0, [pc, #96]	@ (8002ad4 <nunavutGetBits+0x7c>)
 8002a74:	f003 f934 	bl	8005ce0 <__assert_func>
    NUNAVUT_ASSERT(buf != NULL);
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d105      	bne.n	8002a8a <nunavutGetBits+0x32>
 8002a7e:	4b16      	ldr	r3, [pc, #88]	@ (8002ad8 <nunavutGetBits+0x80>)
 8002a80:	4a13      	ldr	r2, [pc, #76]	@ (8002ad0 <nunavutGetBits+0x78>)
 8002a82:	21cc      	movs	r1, #204	@ 0xcc
 8002a84:	4813      	ldr	r0, [pc, #76]	@ (8002ad4 <nunavutGetBits+0x7c>)
 8002a86:	f003 f92b 	bl	8005ce0 <__assert_func>
    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8002a8a:	6a3a      	ldr	r2, [r7, #32]
 8002a8c:	6839      	ldr	r1, [r7, #0]
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe82 	bl	8002798 <nunavutSaturateBufferFragmentBitLength>
 8002a94:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	08db      	lsrs	r3, r3, #3
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	18d0      	adds	r0, r2, r3
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	3307      	adds	r3, #7
 8002aa2:	08da      	lsrs	r2, r3, #3
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	08db      	lsrs	r3, r3, #3
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	f003 fb24 	bl	80060fa <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	2100      	movs	r1, #0
 8002abc:	68f8      	ldr	r0, [r7, #12]
 8002abe:	f7ff fe85 	bl	80027cc <nunavutCopyBits>
}
 8002ac2:	bf00      	nop
 8002ac4:	3718      	adds	r7, #24
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	08007878 	.word	0x08007878
 8002ad0:	08008188 	.word	0x08008188
 8002ad4:	080076e0 	.word	0x080076e0
 8002ad8:	08007890 	.word	0x08007890

08002adc <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b088      	sub	sp, #32
 8002ae0:	af02      	add	r7, sp, #8
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <nunavutSetUxx+0x1e>
 8002aee:	4b13      	ldr	r3, [pc, #76]	@ (8002b3c <nunavutSetUxx+0x60>)
 8002af0:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <nunavutSetUxx+0x64>)
 8002af2:	21f9      	movs	r1, #249	@ 0xf9
 8002af4:	4813      	ldr	r0, [pc, #76]	@ (8002b44 <nunavutSetUxx+0x68>)
 8002af6:	f003 f8f3 	bl	8005ce0 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	00da      	lsls	r2, r3, #3
 8002afe:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	440b      	add	r3, r1
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d202      	bcs.n	8002b10 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002b0a:	f06f 0302 	mvn.w	r3, #2
 8002b0e:	e010      	b.n	8002b32 <nunavutSetUxx+0x56>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8002b10:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002b14:	2140      	movs	r1, #64	@ 0x40
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7ff fe2e 	bl	8002778 <nunavutChooseMin>
 8002b1c:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8002b1e:	2300      	movs	r3, #0
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f107 0320 	add.w	r3, r7, #32
 8002b26:	697a      	ldr	r2, [r7, #20]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	68f8      	ldr	r0, [r7, #12]
 8002b2c:	f7ff fe4e 	bl	80027cc <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8002b30:	2300      	movs	r3, #0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3718      	adds	r7, #24
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	08007890 	.word	0x08007890
 8002b40:	08008138 	.word	0x08008138
 8002b44:	080076e0 	.word	0x080076e0

08002b48 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002b48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b4c:	b08c      	sub	sp, #48	@ 0x30
 8002b4e:	af04      	add	r7, sp, #16
 8002b50:	60f8      	str	r0, [r7, #12]
 8002b52:	60b9      	str	r1, [r7, #8]
 8002b54:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d005      	beq.n	8002b68 <uavcan_node_Health_1_0_serialize_+0x20>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <uavcan_node_Health_1_0_serialize_+0x20>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d102      	bne.n	8002b6e <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002b68:	f06f 0301 	mvn.w	r3, #1
 8002b6c:	e092      	b.n	8002c94 <uavcan_node_Health_1_0_serialize_+0x14c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	00db      	lsls	r3, r3, #3
 8002b78:	2b07      	cmp	r3, #7
 8002b7a:	d802      	bhi.n	8002b82 <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002b7c:	f06f 0302 	mvn.w	r3, #2
 8002b80:	e088      	b.n	8002c94 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	61fb      	str	r3, [r7, #28]




    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002b86:	69fb      	ldr	r3, [r7, #28]
 8002b88:	f003 0307 	and.w	r3, r3, #7
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d005      	beq.n	8002b9c <uavcan_node_Health_1_0_serialize_+0x54>
 8002b90:	4b43      	ldr	r3, [pc, #268]	@ (8002ca0 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002b92:	4a44      	ldr	r2, [pc, #272]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002b94:	2182      	movs	r1, #130	@ 0x82
 8002b96:	4844      	ldr	r0, [pc, #272]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002b98:	f003 f8a2 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	469a      	mov	sl, r3
 8002ba2:	4693      	mov	fp, r2
 8002ba4:	f11a 0402 	adds.w	r4, sl, #2
 8002ba8:	f14b 0500 	adc.w	r5, fp, #0
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	00db      	lsls	r3, r3, #3
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	4698      	mov	r8, r3
 8002bb4:	4691      	mov	r9, r2
 8002bb6:	45a0      	cmp	r8, r4
 8002bb8:	eb79 0305 	sbcs.w	r3, r9, r5
 8002bbc:	d205      	bcs.n	8002bca <uavcan_node_Health_1_0_serialize_+0x82>
 8002bbe:	4b3b      	ldr	r3, [pc, #236]	@ (8002cac <uavcan_node_Health_1_0_serialize_+0x164>)
 8002bc0:	4a38      	ldr	r2, [pc, #224]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002bc2:	2183      	movs	r1, #131	@ 0x83
 8002bc4:	4838      	ldr	r0, [pc, #224]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002bc6:	f003 f88b 	bl	8005ce0 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8002bd0:	7efb      	ldrb	r3, [r7, #27]
 8002bd2:	2b03      	cmp	r3, #3
 8002bd4:	d901      	bls.n	8002bda <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	08db      	lsrs	r3, r3, #3
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	4413      	add	r3, r2
 8002be2:	7efa      	ldrb	r2, [r7, #27]
 8002be4:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	3302      	adds	r3, #2
 8002bea:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f003 0307 	and.w	r3, r3, #7
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d035      	beq.n	8002c62 <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	b2db      	uxtb	r3, r3
 8002c00:	f1c3 0308 	rsb	r3, r3, #8
 8002c04:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002c06:	7cfb      	ldrb	r3, [r7, #19]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d105      	bne.n	8002c18 <uavcan_node_Health_1_0_serialize_+0xd0>
 8002c0c:	4b28      	ldr	r3, [pc, #160]	@ (8002cb0 <uavcan_node_Health_1_0_serialize_+0x168>)
 8002c0e:	4a25      	ldr	r2, [pc, #148]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002c10:	2191      	movs	r1, #145	@ 0x91
 8002c12:	4825      	ldr	r0, [pc, #148]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002c14:	f003 f864 	bl	8005ce0 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002c18:	7cfb      	ldrb	r3, [r7, #19]
 8002c1a:	9302      	str	r3, [sp, #8]
 8002c1c:	f04f 0200 	mov.w	r2, #0
 8002c20:	f04f 0300 	mov.w	r3, #0
 8002c24:	e9cd 2300 	strd	r2, r3, [sp]
 8002c28:	69fa      	ldr	r2, [r7, #28]
 8002c2a:	6979      	ldr	r1, [r7, #20]
 8002c2c:	68b8      	ldr	r0, [r7, #8]
 8002c2e:	f7ff ff55 	bl	8002adc <nunavutSetUxx>
 8002c32:	4603      	mov	r3, r0
 8002c34:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002c36:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da02      	bge.n	8002c44 <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 8002c3e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002c42:	e027      	b.n	8002c94 <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8002c44:	7cfb      	ldrb	r3, [r7, #19]
 8002c46:	69fa      	ldr	r2, [r7, #28]
 8002c48:	4413      	add	r3, r2
 8002c4a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d005      	beq.n	8002c62 <uavcan_node_Health_1_0_serialize_+0x11a>
 8002c56:	4b12      	ldr	r3, [pc, #72]	@ (8002ca0 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002c58:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002c5a:	2198      	movs	r1, #152	@ 0x98
 8002c5c:	4812      	ldr	r0, [pc, #72]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002c5e:	f003 f83f 	bl	8005ce0 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d005      	beq.n	8002c74 <uavcan_node_Health_1_0_serialize_+0x12c>
 8002c68:	4b12      	ldr	r3, [pc, #72]	@ (8002cb4 <uavcan_node_Health_1_0_serialize_+0x16c>)
 8002c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002c6c:	219c      	movs	r1, #156	@ 0x9c
 8002c6e:	480e      	ldr	r0, [pc, #56]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002c70:	f003 f836 	bl	8005ce0 <__assert_func>

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f003 0307 	and.w	r3, r3, #7
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d005      	beq.n	8002c8a <uavcan_node_Health_1_0_serialize_+0x142>
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <uavcan_node_Health_1_0_serialize_+0x158>)
 8002c80:	4a08      	ldr	r2, [pc, #32]	@ (8002ca4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8002c82:	219e      	movs	r1, #158	@ 0x9e
 8002c84:	4808      	ldr	r0, [pc, #32]	@ (8002ca8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8002c86:	f003 f82b 	bl	8005ce0 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	08da      	lsrs	r2, r3, #3
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002c92:	2300      	movs	r3, #0
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3720      	adds	r7, #32
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c9e:	bf00      	nop
 8002ca0:	080078a4 	.word	0x080078a4
 8002ca4:	080080f4 	.word	0x080080f4
 8002ca8:	080078bc 	.word	0x080078bc
 8002cac:	0800790c 	.word	0x0800790c
 8002cb0:	0800793c 	.word	0x0800793c
 8002cb4:	08007948 	.word	0x08007948

08002cb8 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002cb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cbc:	b08c      	sub	sp, #48	@ 0x30
 8002cbe:	af04      	add	r7, sp, #16
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <uavcan_node_Mode_1_0_serialize_+0x20>
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d002      	beq.n	8002cd8 <uavcan_node_Mode_1_0_serialize_+0x20>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d102      	bne.n	8002cde <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002cd8:	f06f 0301 	mvn.w	r3, #1
 8002cdc:	e092      	b.n	8002e04 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	2b07      	cmp	r3, #7
 8002cea:	d802      	bhi.n	8002cf2 <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002cec:	f06f 0302 	mvn.w	r3, #2
 8002cf0:	e088      	b.n	8002e04 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	61fb      	str	r3, [r7, #28]




    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	f003 0307 	and.w	r3, r3, #7
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <uavcan_node_Mode_1_0_serialize_+0x54>
 8002d00:	4b43      	ldr	r3, [pc, #268]	@ (8002e10 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002d02:	4a44      	ldr	r2, [pc, #272]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002d04:	2182      	movs	r1, #130	@ 0x82
 8002d06:	4844      	ldr	r0, [pc, #272]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002d08:	f002 ffea 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	469a      	mov	sl, r3
 8002d12:	4693      	mov	fp, r2
 8002d14:	f11a 0403 	adds.w	r4, sl, #3
 8002d18:	f14b 0500 	adc.w	r5, fp, #0
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	2200      	movs	r2, #0
 8002d22:	4698      	mov	r8, r3
 8002d24:	4691      	mov	r9, r2
 8002d26:	45a0      	cmp	r8, r4
 8002d28:	eb79 0305 	sbcs.w	r3, r9, r5
 8002d2c:	d205      	bcs.n	8002d3a <uavcan_node_Mode_1_0_serialize_+0x82>
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <uavcan_node_Mode_1_0_serialize_+0x164>)
 8002d30:	4a38      	ldr	r2, [pc, #224]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002d32:	2183      	movs	r1, #131	@ 0x83
 8002d34:	4838      	ldr	r0, [pc, #224]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002d36:	f002 ffd3 	bl	8005ce0 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8002d40:	7efb      	ldrb	r3, [r7, #27]
 8002d42:	2b07      	cmp	r3, #7
 8002d44:	d901      	bls.n	8002d4a <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 8002d46:	2307      	movs	r3, #7
 8002d48:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	08db      	lsrs	r3, r3, #3
 8002d4e:	68ba      	ldr	r2, [r7, #8]
 8002d50:	4413      	add	r3, r2
 8002d52:	7efa      	ldrb	r2, [r7, #27]
 8002d54:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	3303      	adds	r3, #3
 8002d5a:	61fb      	str	r3, [r7, #28]
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	f003 0307 	and.w	r3, r3, #7
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d035      	beq.n	8002dd2 <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	f003 0307 	and.w	r3, r3, #7
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f1c3 0308 	rsb	r3, r3, #8
 8002d74:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002d76:	7cfb      	ldrb	r3, [r7, #19]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d105      	bne.n	8002d88 <uavcan_node_Mode_1_0_serialize_+0xd0>
 8002d7c:	4b28      	ldr	r3, [pc, #160]	@ (8002e20 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8002d7e:	4a25      	ldr	r2, [pc, #148]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002d80:	2191      	movs	r1, #145	@ 0x91
 8002d82:	4825      	ldr	r0, [pc, #148]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002d84:	f002 ffac 	bl	8005ce0 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	9302      	str	r3, [sp, #8]
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	f04f 0300 	mov.w	r3, #0
 8002d94:	e9cd 2300 	strd	r2, r3, [sp]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	6979      	ldr	r1, [r7, #20]
 8002d9c:	68b8      	ldr	r0, [r7, #8]
 8002d9e:	f7ff fe9d 	bl	8002adc <nunavutSetUxx>
 8002da2:	4603      	mov	r3, r0
 8002da4:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8002da6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	da02      	bge.n	8002db4 <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 8002dae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8002db2:	e027      	b.n	8002e04 <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8002db4:	7cfb      	ldrb	r3, [r7, #19]
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	4413      	add	r3, r2
 8002dba:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002dbc:	69fb      	ldr	r3, [r7, #28]
 8002dbe:	f003 0307 	and.w	r3, r3, #7
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d005      	beq.n	8002dd2 <uavcan_node_Mode_1_0_serialize_+0x11a>
 8002dc6:	4b12      	ldr	r3, [pc, #72]	@ (8002e10 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002dc8:	4a12      	ldr	r2, [pc, #72]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002dca:	2198      	movs	r1, #152	@ 0x98
 8002dcc:	4812      	ldr	r0, [pc, #72]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002dce:	f002 ff87 	bl	8005ce0 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d005      	beq.n	8002de4 <uavcan_node_Mode_1_0_serialize_+0x12c>
 8002dd8:	4b12      	ldr	r3, [pc, #72]	@ (8002e24 <uavcan_node_Mode_1_0_serialize_+0x16c>)
 8002dda:	4a0e      	ldr	r2, [pc, #56]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002ddc:	219c      	movs	r1, #156	@ 0x9c
 8002dde:	480e      	ldr	r0, [pc, #56]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002de0:	f002 ff7e 	bl	8005ce0 <__assert_func>

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0307 	and.w	r3, r3, #7
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d005      	beq.n	8002dfa <uavcan_node_Mode_1_0_serialize_+0x142>
 8002dee:	4b08      	ldr	r3, [pc, #32]	@ (8002e10 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8002df0:	4a08      	ldr	r2, [pc, #32]	@ (8002e14 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8002df2:	219e      	movs	r1, #158	@ 0x9e
 8002df4:	4808      	ldr	r0, [pc, #32]	@ (8002e18 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8002df6:	f002 ff73 	bl	8005ce0 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	08da      	lsrs	r2, r3, #3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3720      	adds	r7, #32
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e0e:	bf00      	nop
 8002e10:	080078a4 	.word	0x080078a4
 8002e14:	08008118 	.word	0x08008118
 8002e18:	0800795c 	.word	0x0800795c
 8002e1c:	080079a8 	.word	0x080079a8
 8002e20:	0800793c 	.word	0x0800793c
 8002e24:	08007948 	.word	0x08007948

08002e28 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8002e28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e2c:	b0a0      	sub	sp, #128	@ 0x80
 8002e2e:	af04      	add	r7, sp, #16
 8002e30:	6578      	str	r0, [r7, #84]	@ 0x54
 8002e32:	6539      	str	r1, [r7, #80]	@ 0x50
 8002e34:	64fa      	str	r2, [r7, #76]	@ 0x4c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8002e36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8002e3c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8002e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8002e48:	f06f 0301 	mvn.w	r3, #1
 8002e4c:	e260      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8002e4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8002e54:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	2b37      	cmp	r3, #55	@ 0x37
 8002e5a:	d802      	bhi.n	8002e62 <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8002e5c:	f06f 0302 	mvn.w	r3, #2
 8002e60:	e256      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	66fb      	str	r3, [r7, #108]	@ 0x6c




    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d005      	beq.n	8002e7c <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8002e70:	4bb0      	ldr	r3, [pc, #704]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002e72:	4ab1      	ldr	r2, [pc, #708]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002e74:	2189      	movs	r1, #137	@ 0x89
 8002e76:	48b1      	ldr	r0, [pc, #708]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002e78:	f002 ff32 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8002e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4698      	mov	r8, r3
 8002e82:	4691      	mov	r9, r2
 8002e84:	f118 0420 	adds.w	r4, r8, #32
 8002e88:	f149 0500 	adc.w	r5, r9, #0
 8002e8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	2200      	movs	r2, #0
 8002e92:	469a      	mov	sl, r3
 8002e94:	4693      	mov	fp, r2
 8002e96:	45a2      	cmp	sl, r4
 8002e98:	eb7b 0305 	sbcs.w	r3, fp, r5
 8002e9c:	d205      	bcs.n	8002eaa <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 8002e9e:	4ba8      	ldr	r3, [pc, #672]	@ (8003140 <uavcan_node_Heartbeat_1_0_serialize_+0x318>)
 8002ea0:	4aa5      	ldr	r2, [pc, #660]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002ea2:	218a      	movs	r1, #138	@ 0x8a
 8002ea4:	48a5      	ldr	r0, [pc, #660]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002ea6:	f002 ff1b 	bl	8005ce0 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 8002eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eac:	08da      	lsrs	r2, r3, #3
 8002eae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002eb0:	441a      	add	r2, r3
 8002eb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6013      	str	r3, [r2, #0]
        offset_bits += 32U;
 8002eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eba:	3320      	adds	r3, #32
 8002ebc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8002ebe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d03a      	beq.n	8002f3e <uavcan_node_Heartbeat_1_0_serialize_+0x116>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8002ec8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f1c3 0308 	rsb	r3, r3, #8
 8002ed6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        NUNAVUT_ASSERT(_pad0_ > 0);
 8002eda:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d105      	bne.n	8002eee <uavcan_node_Heartbeat_1_0_serialize_+0xc6>
 8002ee2:	4b98      	ldr	r3, [pc, #608]	@ (8003144 <uavcan_node_Heartbeat_1_0_serialize_+0x31c>)
 8002ee4:	4a94      	ldr	r2, [pc, #592]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002ee6:	2194      	movs	r1, #148	@ 0x94
 8002ee8:	4894      	ldr	r0, [pc, #592]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002eea:	f002 fef9 	bl	8005ce0 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8002eee:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8002ef2:	9302      	str	r3, [sp, #8]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9cd 2300 	strd	r2, r3, [sp]
 8002f00:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002f02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002f04:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8002f06:	f7ff fde9 	bl	8002adc <nunavutSetUxx>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        if (_err0_ < 0)
 8002f10:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	da02      	bge.n	8002f1e <uavcan_node_Heartbeat_1_0_serialize_+0xf6>
        {
            return _err0_;
 8002f18:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8002f1c:	e1f8      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad0_;
 8002f1e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8002f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f24:	4413      	add	r3, r2
 8002f26:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f2a:	f003 0307 	and.w	r3, r3, #7
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d005      	beq.n	8002f3e <uavcan_node_Heartbeat_1_0_serialize_+0x116>
 8002f32:	4b80      	ldr	r3, [pc, #512]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002f34:	4a80      	ldr	r2, [pc, #512]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002f36:	219b      	movs	r1, #155	@ 0x9b
 8002f38:	4880      	ldr	r0, [pc, #512]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002f3a:	f002 fed1 	bl	8005ce0 <__assert_func>
    }

    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <uavcan_node_Heartbeat_1_0_serialize_+0x12c>
 8002f48:	4b7a      	ldr	r3, [pc, #488]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002f4a:	4a7b      	ldr	r2, [pc, #492]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002f4c:	219f      	movs	r1, #159	@ 0x9f
 8002f4e:	487b      	ldr	r0, [pc, #492]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002f50:	f002 fec6 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002f54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f56:	f003 0307 	and.w	r3, r3, #7
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d005      	beq.n	8002f6a <uavcan_node_Heartbeat_1_0_serialize_+0x142>
 8002f5e:	4b75      	ldr	r3, [pc, #468]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002f60:	4a75      	ldr	r2, [pc, #468]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002f62:	21a0      	movs	r1, #160	@ 0xa0
 8002f64:	4875      	ldr	r0, [pc, #468]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002f66:	f002 febb 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8002f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002f70:	647a      	str	r2, [r7, #68]	@ 0x44
 8002f72:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8002f76:	460b      	mov	r3, r1
 8002f78:	3308      	adds	r3, #8
 8002f7a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	f143 0300 	adc.w	r3, r3, #0
 8002f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002f84:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f86:	00db      	lsls	r3, r3, #3
 8002f88:	2200      	movs	r2, #0
 8002f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8002f8c:	637a      	str	r2, [r7, #52]	@ 0x34
 8002f8e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002f92:	4623      	mov	r3, r4
 8002f94:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002f98:	4602      	mov	r2, r0
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	462b      	mov	r3, r5
 8002f9e:	460a      	mov	r2, r1
 8002fa0:	4193      	sbcs	r3, r2
 8002fa2:	d205      	bcs.n	8002fb0 <uavcan_node_Heartbeat_1_0_serialize_+0x188>
 8002fa4:	4b68      	ldr	r3, [pc, #416]	@ (8003148 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8002fa6:	4a64      	ldr	r2, [pc, #400]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002fa8:	21a1      	movs	r1, #161	@ 0xa1
 8002faa:	4864      	ldr	r0, [pc, #400]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002fac:	f002 fe98 	bl	8005ce0 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8002fb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fb6:	f003 0307 	and.w	r3, r3, #7
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <uavcan_node_Heartbeat_1_0_serialize_+0x1a2>
 8002fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8002fc0:	4a5d      	ldr	r2, [pc, #372]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002fc2:	21a3      	movs	r1, #163	@ 0xa3
 8002fc4:	485d      	ldr	r0, [pc, #372]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002fc6:	f002 fe8b 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8002fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fcc:	08da      	lsrs	r2, r3, #3
 8002fce:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002fd0:	4413      	add	r3, r2
 8002fd2:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d205      	bcs.n	8002fe4 <uavcan_node_Heartbeat_1_0_serialize_+0x1bc>
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	@ (800314c <uavcan_node_Heartbeat_1_0_serialize_+0x324>)
 8002fda:	4a57      	ldr	r2, [pc, #348]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8002fdc:	21a4      	movs	r1, #164	@ 0xa4
 8002fde:	4857      	ldr	r0, [pc, #348]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8002fe0:	f002 fe7e 	bl	8005ce0 <__assert_func>
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002fe4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe6:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8002fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002fea:	08da      	lsrs	r2, r3, #3
 8002fec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002fee:	1899      	adds	r1, r3, r2
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8002ff0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f7ff fda7 	bl	8002b48 <uavcan_node_Health_1_0_serialize_>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        if (_err1_ < 0)
 8003000:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8003004:	2b00      	cmp	r3, #0
 8003006:	da02      	bge.n	800300e <uavcan_node_Heartbeat_1_0_serialize_+0x1e6>
        {
            return _err1_;
 8003008:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 800300c:	e180      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 800300e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003010:	00db      	lsls	r3, r3, #3
 8003012:	2b08      	cmp	r3, #8
 8003014:	d005      	beq.n	8003022 <uavcan_node_Heartbeat_1_0_serialize_+0x1fa>
 8003016:	4b4e      	ldr	r3, [pc, #312]	@ (8003150 <uavcan_node_Heartbeat_1_0_serialize_+0x328>)
 8003018:	4a47      	ldr	r2, [pc, #284]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800301a:	21ac      	movs	r1, #172	@ 0xac
 800301c:	4847      	ldr	r0, [pc, #284]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800301e:	f002 fe5f 	bl	8005ce0 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8003022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003028:	4413      	add	r3, r2
 800302a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 800302c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800302e:	00db      	lsls	r3, r3, #3
 8003030:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003032:	429a      	cmp	r2, r3
 8003034:	d905      	bls.n	8003042 <uavcan_node_Heartbeat_1_0_serialize_+0x21a>
 8003036:	4b47      	ldr	r3, [pc, #284]	@ (8003154 <uavcan_node_Heartbeat_1_0_serialize_+0x32c>)
 8003038:	4a3f      	ldr	r2, [pc, #252]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800303a:	21ae      	movs	r1, #174	@ 0xae
 800303c:	483f      	ldr	r0, [pc, #252]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800303e:	f002 fe4f 	bl	8005ce0 <__assert_func>
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8003042:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	2b00      	cmp	r3, #0
 800304a:	d03a      	beq.n	80030c2 <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 800304c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800304e:	b2db      	uxtb	r3, r3
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	b2db      	uxtb	r3, r3
 8003056:	f1c3 0308 	rsb	r3, r3, #8
 800305a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        NUNAVUT_ASSERT(_pad1_ > 0);
 800305e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003062:	2b00      	cmp	r3, #0
 8003064:	d105      	bne.n	8003072 <uavcan_node_Heartbeat_1_0_serialize_+0x24a>
 8003066:	4b3c      	ldr	r3, [pc, #240]	@ (8003158 <uavcan_node_Heartbeat_1_0_serialize_+0x330>)
 8003068:	4a33      	ldr	r2, [pc, #204]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800306a:	21b5      	movs	r1, #181	@ 0xb5
 800306c:	4833      	ldr	r0, [pc, #204]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800306e:	f002 fe37 	bl	8005ce0 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8003072:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8003076:	9302      	str	r3, [sp, #8]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	e9cd 2300 	strd	r2, r3, [sp]
 8003084:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003086:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003088:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 800308a:	f7ff fd27 	bl	8002adc <nunavutSetUxx>
 800308e:	4603      	mov	r3, r0
 8003090:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        if (_err2_ < 0)
 8003094:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8003098:	2b00      	cmp	r3, #0
 800309a:	da02      	bge.n	80030a2 <uavcan_node_Heartbeat_1_0_serialize_+0x27a>
        {
            return _err2_;
 800309c:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 80030a0:	e136      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad1_;
 80030a2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 80030a6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030a8:	4413      	add	r3, r2
 80030aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80030ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
 80030b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80030b8:	4a1f      	ldr	r2, [pc, #124]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80030ba:	21bc      	movs	r1, #188	@ 0xbc
 80030bc:	481f      	ldr	r0, [pc, #124]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80030be:	f002 fe0f 	bl	8005ce0 <__assert_func>
    }

    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80030c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030c4:	f003 0307 	and.w	r3, r3, #7
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d005      	beq.n	80030d8 <uavcan_node_Heartbeat_1_0_serialize_+0x2b0>
 80030cc:	4b19      	ldr	r3, [pc, #100]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80030ce:	4a1a      	ldr	r2, [pc, #104]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80030d0:	21c0      	movs	r1, #192	@ 0xc0
 80030d2:	481a      	ldr	r0, [pc, #104]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80030d4:	f002 fe04 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80030d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <uavcan_node_Heartbeat_1_0_serialize_+0x2c6>
 80030e2:	4b14      	ldr	r3, [pc, #80]	@ (8003134 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80030e4:	4a14      	ldr	r2, [pc, #80]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80030e6:	21c1      	movs	r1, #193	@ 0xc1
 80030e8:	4814      	ldr	r0, [pc, #80]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80030ea:	f002 fdf9 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 80030ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80030f0:	2200      	movs	r2, #0
 80030f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80030f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80030f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80030fa:	460b      	mov	r3, r1
 80030fc:	3308      	adds	r3, #8
 80030fe:	623b      	str	r3, [r7, #32]
 8003100:	4613      	mov	r3, r2
 8003102:	f143 0300 	adc.w	r3, r3, #0
 8003106:	627b      	str	r3, [r7, #36]	@ 0x24
 8003108:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	2200      	movs	r2, #0
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	61fa      	str	r2, [r7, #28]
 8003112:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8003116:	4623      	mov	r3, r4
 8003118:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800311c:	4602      	mov	r2, r0
 800311e:	4293      	cmp	r3, r2
 8003120:	462b      	mov	r3, r5
 8003122:	460a      	mov	r2, r1
 8003124:	4193      	sbcs	r3, r2
 8003126:	d219      	bcs.n	800315c <uavcan_node_Heartbeat_1_0_serialize_+0x334>
 8003128:	4b07      	ldr	r3, [pc, #28]	@ (8003148 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 800312a:	4a03      	ldr	r2, [pc, #12]	@ (8003138 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800312c:	21c2      	movs	r1, #194	@ 0xc2
 800312e:	4803      	ldr	r0, [pc, #12]	@ (800313c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8003130:	f002 fdd6 	bl	8005ce0 <__assert_func>
 8003134:	080078a4 	.word	0x080078a4
 8003138:	080080cc 	.word	0x080080cc
 800313c:	080079d8 	.word	0x080079d8
 8003140:	08007a2c 	.word	0x08007a2c
 8003144:	0800793c 	.word	0x0800793c
 8003148:	08007a5c 	.word	0x08007a5c
 800314c:	08007a8c 	.word	0x08007a8c
 8003150:	08007ac4 	.word	0x08007ac4
 8003154:	08007ae4 	.word	0x08007ae4
 8003158:	08007b0c 	.word	0x08007b0c
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 800315c:	2301      	movs	r3, #1
 800315e:	65bb      	str	r3, [r7, #88]	@ 0x58
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003160:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003162:	f003 0307 	and.w	r3, r3, #7
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <uavcan_node_Heartbeat_1_0_serialize_+0x34e>
 800316a:	4b6c      	ldr	r3, [pc, #432]	@ (800331c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 800316c:	4a6c      	ldr	r2, [pc, #432]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 800316e:	21c4      	movs	r1, #196	@ 0xc4
 8003170:	486c      	ldr	r0, [pc, #432]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8003172:	f002 fdb5 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8003176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003178:	08da      	lsrs	r2, r3, #3
 800317a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800317c:	4413      	add	r3, r2
 800317e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8003180:	429a      	cmp	r2, r3
 8003182:	d205      	bcs.n	8003190 <uavcan_node_Heartbeat_1_0_serialize_+0x368>
 8003184:	4b68      	ldr	r3, [pc, #416]	@ (8003328 <uavcan_node_Heartbeat_1_0_serialize_+0x500>)
 8003186:	4a66      	ldr	r2, [pc, #408]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8003188:	21c5      	movs	r1, #197	@ 0xc5
 800318a:	4866      	ldr	r0, [pc, #408]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 800318c:	f002 fda8 	bl	8005ce0 <__assert_func>
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8003190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003192:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8003194:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003196:	08db      	lsrs	r3, r3, #3
 8003198:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800319a:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 800319c:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 80031a0:	4619      	mov	r1, r3
 80031a2:	f7ff fd89 	bl	8002cb8 <uavcan_node_Mode_1_0_serialize_>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
        if (_err3_ < 0)
 80031ac:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da02      	bge.n	80031ba <uavcan_node_Heartbeat_1_0_serialize_+0x392>
        {
            return _err3_;
 80031b4:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 80031b8:	e0aa      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 80031ba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031bc:	00db      	lsls	r3, r3, #3
 80031be:	2b08      	cmp	r3, #8
 80031c0:	d005      	beq.n	80031ce <uavcan_node_Heartbeat_1_0_serialize_+0x3a6>
 80031c2:	4b5a      	ldr	r3, [pc, #360]	@ (800332c <uavcan_node_Heartbeat_1_0_serialize_+0x504>)
 80031c4:	4a56      	ldr	r2, [pc, #344]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80031c6:	21cd      	movs	r1, #205	@ 0xcd
 80031c8:	4856      	ldr	r0, [pc, #344]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 80031ca:	f002 fd89 	bl	8005ce0 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 80031ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80031d0:	00db      	lsls	r3, r3, #3
 80031d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031d4:	4413      	add	r3, r2
 80031d6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80031d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80031de:	429a      	cmp	r2, r3
 80031e0:	d905      	bls.n	80031ee <uavcan_node_Heartbeat_1_0_serialize_+0x3c6>
 80031e2:	4b53      	ldr	r3, [pc, #332]	@ (8003330 <uavcan_node_Heartbeat_1_0_serialize_+0x508>)
 80031e4:	4a4e      	ldr	r2, [pc, #312]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80031e6:	21cf      	movs	r1, #207	@ 0xcf
 80031e8:	484e      	ldr	r0, [pc, #312]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 80031ea:	f002 fd79 	bl	8005ce0 <__assert_func>




    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80031ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d005      	beq.n	8003204 <uavcan_node_Heartbeat_1_0_serialize_+0x3dc>
 80031f8:	4b48      	ldr	r3, [pc, #288]	@ (800331c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 80031fa:	4a49      	ldr	r2, [pc, #292]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80031fc:	21d6      	movs	r1, #214	@ 0xd6
 80031fe:	4849      	ldr	r0, [pc, #292]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8003200:	f002 fd6e 	bl	8005ce0 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8003204:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003206:	2200      	movs	r2, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	617a      	str	r2, [r7, #20]
 800320c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003210:	460b      	mov	r3, r1
 8003212:	3308      	adds	r3, #8
 8003214:	60bb      	str	r3, [r7, #8]
 8003216:	4613      	mov	r3, r2
 8003218:	f143 0300 	adc.w	r3, r3, #0
 800321c:	60fb      	str	r3, [r7, #12]
 800321e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003220:	00db      	lsls	r3, r3, #3
 8003222:	2200      	movs	r2, #0
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	607a      	str	r2, [r7, #4]
 8003228:	e9d7 4500 	ldrd	r4, r5, [r7]
 800322c:	4623      	mov	r3, r4
 800322e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003232:	4602      	mov	r2, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	462b      	mov	r3, r5
 8003238:	460a      	mov	r2, r1
 800323a:	4193      	sbcs	r3, r2
 800323c:	d205      	bcs.n	800324a <uavcan_node_Heartbeat_1_0_serialize_+0x422>
 800323e:	4b3d      	ldr	r3, [pc, #244]	@ (8003334 <uavcan_node_Heartbeat_1_0_serialize_+0x50c>)
 8003240:	4a37      	ldr	r2, [pc, #220]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8003242:	21d7      	movs	r1, #215	@ 0xd7
 8003244:	4837      	ldr	r0, [pc, #220]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8003246:	f002 fd4b 	bl	8005ce0 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 800324a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800324c:	08db      	lsrs	r3, r3, #3
 800324e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003250:	4413      	add	r3, r2
 8003252:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003254:	7992      	ldrb	r2, [r2, #6]
 8003256:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8003258:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800325a:	3308      	adds	r3, #8
 800325c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }


    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800325e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	2b00      	cmp	r3, #0
 8003266:	d03a      	beq.n	80032de <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8003268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800326a:	b2db      	uxtb	r3, r3
 800326c:	f003 0307 	and.w	r3, r3, #7
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f1c3 0308 	rsb	r3, r3, #8
 8003276:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        NUNAVUT_ASSERT(_pad2_ > 0);
 800327a:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 800327e:	2b00      	cmp	r3, #0
 8003280:	d105      	bne.n	800328e <uavcan_node_Heartbeat_1_0_serialize_+0x466>
 8003282:	4b2d      	ldr	r3, [pc, #180]	@ (8003338 <uavcan_node_Heartbeat_1_0_serialize_+0x510>)
 8003284:	4a26      	ldr	r2, [pc, #152]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8003286:	21e1      	movs	r1, #225	@ 0xe1
 8003288:	4826      	ldr	r0, [pc, #152]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 800328a:	f002 fd29 	bl	8005ce0 <__assert_func>
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 800328e:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8003292:	9302      	str	r3, [sp, #8]
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	f04f 0300 	mov.w	r3, #0
 800329c:	e9cd 2300 	strd	r2, r3, [sp]
 80032a0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80032a4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80032a6:	f7ff fc19 	bl	8002adc <nunavutSetUxx>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        if (_err4_ < 0)
 80032b0:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	da02      	bge.n	80032be <uavcan_node_Heartbeat_1_0_serialize_+0x496>
        {
            return _err4_;
 80032b8:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 80032bc:	e028      	b.n	8003310 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad2_;
 80032be:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 80032c2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80032c4:	4413      	add	r3, r2
 80032c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80032c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
 80032d2:	4b12      	ldr	r3, [pc, #72]	@ (800331c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 80032d4:	4a12      	ldr	r2, [pc, #72]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80032d6:	21e8      	movs	r1, #232	@ 0xe8
 80032d8:	4812      	ldr	r0, [pc, #72]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 80032da:	f002 fd01 	bl	8005ce0 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.

    NUNAVUT_ASSERT(offset_bits == 56ULL);
 80032de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032e0:	2b38      	cmp	r3, #56	@ 0x38
 80032e2:	d005      	beq.n	80032f0 <uavcan_node_Heartbeat_1_0_serialize_+0x4c8>
 80032e4:	4b15      	ldr	r3, [pc, #84]	@ (800333c <uavcan_node_Heartbeat_1_0_serialize_+0x514>)
 80032e6:	4a0e      	ldr	r2, [pc, #56]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80032e8:	21ec      	movs	r1, #236	@ 0xec
 80032ea:	480e      	ldr	r0, [pc, #56]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 80032ec:	f002 fcf8 	bl	8005ce0 <__assert_func>

    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80032f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80032f2:	f003 0307 	and.w	r3, r3, #7
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <uavcan_node_Heartbeat_1_0_serialize_+0x4de>
 80032fa:	4b08      	ldr	r3, [pc, #32]	@ (800331c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 80032fc:	4a08      	ldr	r2, [pc, #32]	@ (8003320 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 80032fe:	21ee      	movs	r1, #238	@ 0xee
 8003300:	4808      	ldr	r0, [pc, #32]	@ (8003324 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8003302:	f002 fced 	bl	8005ce0 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8003306:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003308:	08da      	lsrs	r2, r3, #3
 800330a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800330c:	601a      	str	r2, [r3, #0]

    return NUNAVUT_SUCCESS;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3770      	adds	r7, #112	@ 0x70
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800331a:	bf00      	nop
 800331c:	080078a4 	.word	0x080078a4
 8003320:	080080cc 	.word	0x080080cc
 8003324:	080079d8 	.word	0x080079d8
 8003328:	08007b18 	.word	0x08007b18
 800332c:	08007b50 	.word	0x08007b50
 8003330:	08007ae4 	.word	0x08007ae4
 8003334:	08007a5c 	.word	0x08007a5c
 8003338:	08007b70 	.word	0x08007b70
 800333c:	08007b7c 	.word	0x08007b7c

08003340 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	@ 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d006      	beq.n	8003366 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d106      	bne.n	800336c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d002      	beq.n	800336c <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8003366:	f06f 0301 	mvn.w	r3, #1
 800336a:	e076      	b.n	800345a <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    if (buffer == NULL)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8003372:	4b3c      	ldr	r3, [pc, #240]	@ (8003464 <uavcan_primitive_array_Real64_1_0_deserialize_+0x124>)
 8003374:	60bb      	str	r3, [r7, #8]
    }


    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	00db      	lsls	r3, r3, #3
 8003380:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8003382:	2300      	movs	r3, #0
 8003384:	617b      	str	r3, [r7, #20]




    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f003 0307 	and.w	r3, r3, #7
 800338c:	2b00      	cmp	r3, #0
 800338e:	d005      	beq.n	800339c <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8003390:	4b35      	ldr	r3, [pc, #212]	@ (8003468 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8003392:	4a36      	ldr	r2, [pc, #216]	@ (800346c <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8003394:	21d3      	movs	r1, #211	@ 0xd3
 8003396:	4836      	ldr	r0, [pc, #216]	@ (8003470 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8003398:	f002 fca2 	bl	8005ce0 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	3308      	adds	r3, #8
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	429a      	cmp	r2, r3
 80033a4:	d309      	bcc.n	80033ba <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	08db      	lsrs	r3, r3, #3
 80033aa:	68ba      	ldr	r2, [r7, #8]
 80033ac:	4413      	add	r3, r2
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	461a      	mov	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80033b8:	e003      	b.n	80033c2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	3308      	adds	r3, #8
 80033c6:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d902      	bls.n	80033d8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 80033d2:	f06f 0309 	mvn.w	r3, #9
 80033d6:	e040      	b.n	800345a <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f003 0307 	and.w	r3, r3, #7
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 80033e2:	4b21      	ldr	r3, [pc, #132]	@ (8003468 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 80033e4:	4a21      	ldr	r2, [pc, #132]	@ (800346c <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 80033e6:	21e2      	movs	r1, #226	@ 0xe2
 80033e8:	4821      	ldr	r0, [pc, #132]	@ (8003470 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 80033ea:	f002 fc79 	bl	8005ce0 <__assert_func>
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 80033ee:	68f8      	ldr	r0, [r7, #12]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80033f6:	019b      	lsls	r3, r3, #6
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	69fa      	ldr	r2, [r7, #28]
 80033fe:	68b9      	ldr	r1, [r7, #8]
 8003400:	f7ff fb2a 	bl	8002a58 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800340a:	019b      	lsls	r3, r3, #6
 800340c:	697a      	ldr	r2, [r7, #20]
 800340e:	4413      	add	r3, r2
 8003410:	617b      	str	r3, [r7, #20]


    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3307      	adds	r3, #7
 8003416:	f023 0307 	bic.w	r3, r3, #7
 800341a:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	2b00      	cmp	r3, #0
 8003424:	d005      	beq.n	8003432 <uavcan_primitive_array_Real64_1_0_deserialize_+0xf2>
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8003428:	4a10      	ldr	r2, [pc, #64]	@ (800346c <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 800342a:	21ea      	movs	r1, #234	@ 0xea
 800342c:	4810      	ldr	r0, [pc, #64]	@ (8003470 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 800342e:	f002 fc57 	bl	8005ce0 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8003432:	69b9      	ldr	r1, [r7, #24]
 8003434:	6978      	ldr	r0, [r7, #20]
 8003436:	f7ff f99f 	bl	8002778 <nunavutChooseMin>
 800343a:	4603      	mov	r3, r0
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	69fa      	ldr	r2, [r7, #28]
 8003448:	429a      	cmp	r2, r3
 800344a:	d205      	bcs.n	8003458 <uavcan_primitive_array_Real64_1_0_deserialize_+0x118>
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <uavcan_primitive_array_Real64_1_0_deserialize_+0x134>)
 800344e:	4a07      	ldr	r2, [pc, #28]	@ (800346c <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8003450:	21ec      	movs	r1, #236	@ 0xec
 8003452:	4807      	ldr	r0, [pc, #28]	@ (8003470 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8003454:	f002 fc44 	bl	8005ce0 <__assert_func>

    return NUNAVUT_SUCCESS;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3720      	adds	r7, #32
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	08007b94 	.word	0x08007b94
 8003468:	080078a4 	.word	0x080078a4
 800346c:	08008158 	.word	0x08008158
 8003470:	08007b98 	.word	0x08007b98
 8003474:	08007bf4 	.word	0x08007bf4

08003478 <micros>:
// Application-specific function prototypes
void process_canard_TX_queue(void);

// return useconds - not implemented yet
uint32_t micros(void)
{
 8003478:	b480      	push	{r7}
 800347a:	af00      	add	r7, sp, #0
  return 0;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003488:	b5b0      	push	{r4, r5, r7, lr}
 800348a:	f5ad 7d26 	sub.w	sp, sp, #664	@ 0x298
 800348e:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003490:	f000 fc4d 	bl	8003d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003494:	f000 f8ee 	bl	8003674 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003498:	f000 f968 	bl	800376c <MX_GPIO_Init>
  MX_CAN1_Init();
 800349c:	f000 f930 	bl	8003700 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 80034a0:	486a      	ldr	r0, [pc, #424]	@ (800364c <main+0x1c4>)
 80034a2:	f000 fea2 	bl	80041ea <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80034a6:	2102      	movs	r1, #2
 80034a8:	4868      	ldr	r0, [pc, #416]	@ (800364c <main+0x1c4>)
 80034aa:	f001 f8d4 	bl	8004656 <HAL_CAN_ActivateNotification>

    CAN_FilterTypeDef Filter;

    // accept all frames - filtration is managed by software
    Filter.FilterIdHigh = 0x0000;
 80034ae:	2300      	movs	r3, #0
 80034b0:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
    Filter.FilterIdLow = 0x0000;
 80034b4:	2300      	movs	r3, #0
 80034b6:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
    Filter.FilterMaskIdHigh = 0x0000;
 80034ba:	2300      	movs	r3, #0
 80034bc:	f8c7 3264 	str.w	r3, [r7, #612]	@ 0x264
    Filter.FilterMaskIdLow = 0x0000;
 80034c0:	2300      	movs	r3, #0
 80034c2:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
    Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 80034c6:	2300      	movs	r3, #0
 80034c8:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
    Filter.FilterBank = 0;
 80034cc:	2300      	movs	r3, #0
 80034ce:	f8c7 3270 	str.w	r3, [r7, #624]	@ 0x270
    Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	f8c7 3274 	str.w	r3, [r7, #628]	@ 0x274
    Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 80034d8:	2301      	movs	r3, #1
 80034da:	f8c7 3278 	str.w	r3, [r7, #632]	@ 0x278
    Filter.FilterActivation = ENABLE;
 80034de:	2301      	movs	r3, #1
 80034e0:	f8c7 327c 	str.w	r3, [r7, #636]	@ 0x27c
    Filter.SlaveStartFilterBank = 0;
 80034e4:	2300      	movs	r3, #0
 80034e6:	f8c7 3280 	str.w	r3, [r7, #640]	@ 0x280

    HAL_CAN_ConfigFilter(&hcan1, &Filter);
 80034ea:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 80034ee:	4619      	mov	r1, r3
 80034f0:	4856      	ldr	r0, [pc, #344]	@ (800364c <main+0x1c4>)
 80034f2:	f000 fdb0 	bl	8004056 <HAL_CAN_ConfigFilter>

    // Initialization of a canard instance with the previous allocator
    canard = canardInit(&memAllocate, &memFree);
 80034f6:	4c56      	ldr	r4, [pc, #344]	@ (8003650 <main+0x1c8>)
 80034f8:	463b      	mov	r3, r7
 80034fa:	4a56      	ldr	r2, [pc, #344]	@ (8003654 <main+0x1cc>)
 80034fc:	4956      	ldr	r1, [pc, #344]	@ (8003658 <main+0x1d0>)
 80034fe:	4618      	mov	r0, r3
 8003500:	f7fe fea4 	bl	800224c <canardInit>
 8003504:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8003508:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 800350c:	461d      	mov	r5, r3
 800350e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003512:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8003516:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    canard.node_id = 96;
 800351a:	4b4d      	ldr	r3, [pc, #308]	@ (8003650 <main+0x1c8>)
 800351c:	2260      	movs	r2, #96	@ 0x60
 800351e:	711a      	strb	r2, [r3, #4]

    queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
 8003520:	4c4e      	ldr	r4, [pc, #312]	@ (800365c <main+0x1d4>)
 8003522:	463b      	mov	r3, r7
 8003524:	2208      	movs	r2, #8
 8003526:	2164      	movs	r1, #100	@ 0x64
 8003528:	4618      	mov	r0, r3
 800352a:	f7fe fecd 	bl	80022c8 <canardTxInit>
 800352e:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8003532:	f5a3 7322 	sub.w	r3, r3, #648	@ 0x288
 8003536:	461d      	mov	r5, r3
 8003538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800353a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800353c:	682b      	ldr	r3, [r5, #0]
 800353e:	6023      	str	r3, [r4, #0]
                          CANARD_MTU_CAN_CLASSIC);

    CanardRxSubscription subscription; // Transfer subscription state.

    if( canardRxSubscribe((CanardInstance *const)&canard,
 8003540:	f240 6154 	movw	r1, #1620	@ 0x654
 8003544:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8003548:	9302      	str	r3, [sp, #8]
 800354a:	4a45      	ldr	r2, [pc, #276]	@ (8003660 <main+0x1d8>)
 800354c:	f04f 0300 	mov.w	r3, #0
 8003550:	e9cd 2300 	strd	r2, r3, [sp]
 8003554:	f240 1301 	movw	r3, #257	@ 0x101
 8003558:	460a      	mov	r2, r1
 800355a:	2100      	movs	r1, #0
 800355c:	483c      	ldr	r0, [pc, #240]	@ (8003650 <main+0x1c8>)
 800355e:	f7ff f821 	bl	80025a4 <canardRxSubscribe>
 8003562:	4603      	mov	r3, r0
 8003564:	2b01      	cmp	r3, #1
 8003566:	d001      	beq.n	800356c <main+0xe4>
                          MSG_PORT_ID,
                          uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                          CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                          &subscription) != 1 )
                          {
                            Error_Handler();
 8003568:	f000 f9f9 	bl	800395e <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create a heartbeat message
	      uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 800356c:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8003570:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003574:	461a      	mov	r2, r3
 8003576:	2300      	movs	r3, #0
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	6053      	str	r3, [r2, #4]
 800357c:	4b39      	ldr	r3, [pc, #228]	@ (8003664 <main+0x1dc>)
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 8003584:	f5a3 7318 	sub.w	r3, r3, #608	@ 0x260
 8003588:	601a      	str	r2, [r3, #0]
	                                                  .health = {uavcan_node_Health_1_0_NOMINAL},
	                                                  .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

	      // Serialize the heartbeat message
	      if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 800358a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800358e:	4a36      	ldr	r2, [pc, #216]	@ (8003668 <main+0x1e0>)
 8003590:	4936      	ldr	r1, [pc, #216]	@ (800366c <main+0x1e4>)
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff fc48 	bl	8002e28 <uavcan_node_Heartbeat_1_0_serialize_>
 8003598:	4603      	mov	r3, r0
 800359a:	2b00      	cmp	r3, #0
 800359c:	da01      	bge.n	80035a2 <main+0x11a>
	      {
	        Error_Handler();
 800359e:	f000 f9de 	bl	800395e <Error_Handler>
	      }

	      // Create a transfer for the heartbeat message
	      const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
 80035a2:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80035a6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80035aa:	2204      	movs	r2, #4
 80035ac:	701a      	strb	r2, [r3, #0]
 80035ae:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80035b2:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80035b6:	2200      	movs	r2, #0
 80035b8:	705a      	strb	r2, [r3, #1]
 80035ba:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80035be:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80035c2:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80035c6:	805a      	strh	r2, [r3, #2]
 80035c8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80035cc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80035d0:	22ff      	movs	r2, #255	@ 0xff
 80035d2:	711a      	strb	r2, [r3, #4]
 80035d4:	4b26      	ldr	r3, [pc, #152]	@ (8003670 <main+0x1e8>)
 80035d6:	781a      	ldrb	r2, [r3, #0]
 80035d8:	f507 7322 	add.w	r3, r7, #648	@ 0x288
 80035dc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80035e0:	715a      	strb	r2, [r3, #5]
	                                                        .transfer_kind = CanardTransferKindMessage,
	                                                        .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
	                                                        .remote_node_id = CANARD_NODE_ID_UNSET,
	                                                        .transfer_id = my_message_transfer_id,};

	      if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
 80035e2:	4b21      	ldr	r3, [pc, #132]	@ (8003668 <main+0x1e0>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a21      	ldr	r2, [pc, #132]	@ (800366c <main+0x1e4>)
 80035e8:	9202      	str	r2, [sp, #8]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	f107 0320 	add.w	r3, r7, #32
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	f04f 0200 	mov.w	r2, #0
 80035f6:	f04f 0300 	mov.w	r3, #0
 80035fa:	4915      	ldr	r1, [pc, #84]	@ (8003650 <main+0x1c8>)
 80035fc:	4817      	ldr	r0, [pc, #92]	@ (800365c <main+0x1d4>)
 80035fe:	f7fe fe81 	bl	8002304 <canardTxPush>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	da01      	bge.n	800360c <main+0x184>
	                      0,     					// Zero if transmission deadline is not limited.
	                      &transfer_metadata,
	                      hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
	                      hbeat_ser_buf) < 0 )
	                      {
	                        Error_Handler();
 8003608:	f000 f9a9 	bl	800395e <Error_Handler>
	                      }

	      // Block for a second before generating the next transfer
	      uint32_t timestamp = HAL_GetTick();
 800360c:	f000 fbf8 	bl	8003e00 <HAL_GetTick>
 8003610:	f8c7 0284 	str.w	r0, [r7, #644]	@ 0x284
	      while( HAL_GetTick() < timestamp + 1000u )
 8003614:	e004      	b.n	8003620 <main+0x198>
	      {
	        process_canard_TX_queue();
 8003616:	f000 f8c1 	bl	800379c <process_canard_TX_queue>
	        HAL_Delay(10);
 800361a:	200a      	movs	r0, #10
 800361c:	f000 fbfc 	bl	8003e18 <HAL_Delay>
	      while( HAL_GetTick() < timestamp + 1000u )
 8003620:	f000 fbee 	bl	8003e00 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	f8d7 3284 	ldr.w	r3, [r7, #644]	@ 0x284
 800362a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800362e:	429a      	cmp	r2, r3
 8003630:	d3f1      	bcc.n	8003616 <main+0x18e>
	      }

	      // Increase uptime
	      test_uptimeSec++;
 8003632:	4b0c      	ldr	r3, [pc, #48]	@ (8003664 <main+0x1dc>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	3301      	adds	r3, #1
 8003638:	4a0a      	ldr	r2, [pc, #40]	@ (8003664 <main+0x1dc>)
 800363a:	6013      	str	r3, [r2, #0]
	      // Increment the transfer_id variable
	      my_message_transfer_id++;
 800363c:	4b0c      	ldr	r3, [pc, #48]	@ (8003670 <main+0x1e8>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	3301      	adds	r3, #1
 8003642:	b2da      	uxtb	r2, r3
 8003644:	4b0a      	ldr	r3, [pc, #40]	@ (8003670 <main+0x1e8>)
 8003646:	701a      	strb	r2, [r3, #0]
  {
 8003648:	e790      	b.n	800356c <main+0xe4>
 800364a:	bf00      	nop
 800364c:	20000088 	.word	0x20000088
 8003650:	200000b0 	.word	0x200000b0
 8003654:	08003947 	.word	0x08003947
 8003658:	0800392d 	.word	0x0800392d
 800365c:	200000cc 	.word	0x200000cc
 8003660:	001e8480 	.word	0x001e8480
 8003664:	200000e4 	.word	0x200000e4
 8003668:	20000000 	.word	0x20000000
 800366c:	200000e8 	.word	0x200000e8
 8003670:	200000e0 	.word	0x200000e0

08003674 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b096      	sub	sp, #88	@ 0x58
 8003678:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800367a:	f107 0314 	add.w	r3, r7, #20
 800367e:	2244      	movs	r2, #68	@ 0x44
 8003680:	2100      	movs	r1, #0
 8003682:	4618      	mov	r0, r3
 8003684:	f002 fd39 	bl	80060fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003688:	463b      	mov	r3, r7
 800368a:	2200      	movs	r2, #0
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	605a      	str	r2, [r3, #4]
 8003690:	609a      	str	r2, [r3, #8]
 8003692:	60da      	str	r2, [r3, #12]
 8003694:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003696:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800369a:	f001 fccb 	bl	8005034 <HAL_PWREx_ControlVoltageScaling>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80036a4:	f000 f95b 	bl	800395e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80036a8:	2310      	movs	r3, #16
 80036aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80036ac:	2301      	movs	r3, #1
 80036ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80036b0:	2300      	movs	r3, #0
 80036b2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80036b4:	2360      	movs	r3, #96	@ 0x60
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80036bc:	f107 0314 	add.w	r3, r7, #20
 80036c0:	4618      	mov	r0, r3
 80036c2:	f001 fd0d 	bl	80050e0 <HAL_RCC_OscConfig>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80036cc:	f000 f947 	bl	800395e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80036d0:	230f      	movs	r3, #15
 80036d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80036d4:	2300      	movs	r3, #0
 80036d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80036d8:	2300      	movs	r3, #0
 80036da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80036dc:	2300      	movs	r3, #0
 80036de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80036e0:	2300      	movs	r3, #0
 80036e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80036e4:	463b      	mov	r3, r7
 80036e6:	2100      	movs	r1, #0
 80036e8:	4618      	mov	r0, r3
 80036ea:	f002 f90d 	bl	8005908 <HAL_RCC_ClockConfig>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80036f4:	f000 f933 	bl	800395e <Error_Handler>
  }
}
 80036f8:	bf00      	nop
 80036fa:	3758      	adds	r7, #88	@ 0x58
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}

08003700 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003704:	4b17      	ldr	r3, [pc, #92]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003706:	4a18      	ldr	r2, [pc, #96]	@ (8003768 <MX_CAN1_Init+0x68>)
 8003708:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 10;
 800370a:	4b16      	ldr	r3, [pc, #88]	@ (8003764 <MX_CAN1_Init+0x64>)
 800370c:	220a      	movs	r2, #10
 800370e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003710:	4b14      	ldr	r3, [pc, #80]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003716:	4b13      	ldr	r3, [pc, #76]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003718:	2200      	movs	r2, #0
 800371a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 800371c:	4b11      	ldr	r3, [pc, #68]	@ (8003764 <MX_CAN1_Init+0x64>)
 800371e:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8003722:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8003724:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003726:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800372a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800372c:	4b0d      	ldr	r3, [pc, #52]	@ (8003764 <MX_CAN1_Init+0x64>)
 800372e:	2200      	movs	r2, #0
 8003730:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003732:	4b0c      	ldr	r3, [pc, #48]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003734:	2200      	movs	r2, #0
 8003736:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003738:	4b0a      	ldr	r3, [pc, #40]	@ (8003764 <MX_CAN1_Init+0x64>)
 800373a:	2200      	movs	r2, #0
 800373c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800373e:	4b09      	ldr	r3, [pc, #36]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003740:	2200      	movs	r2, #0
 8003742:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003744:	4b07      	ldr	r3, [pc, #28]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003746:	2200      	movs	r2, #0
 8003748:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800374a:	4b06      	ldr	r3, [pc, #24]	@ (8003764 <MX_CAN1_Init+0x64>)
 800374c:	2200      	movs	r2, #0
 800374e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003750:	4804      	ldr	r0, [pc, #16]	@ (8003764 <MX_CAN1_Init+0x64>)
 8003752:	f000 fb85 	bl	8003e60 <HAL_CAN_Init>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800375c:	f000 f8ff 	bl	800395e <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003760:	bf00      	nop
 8003762:	bd80      	pop	{r7, pc}
 8003764:	20000088 	.word	0x20000088
 8003768:	40006400 	.word	0x40006400

0800376c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <MX_GPIO_Init+0x2c>)
 8003774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003776:	4a08      	ldr	r2, [pc, #32]	@ (8003798 <MX_GPIO_Init+0x2c>)
 8003778:	f043 0301 	orr.w	r3, r3, #1
 800377c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800377e:	4b06      	ldr	r3, [pc, #24]	@ (8003798 <MX_GPIO_Init+0x2c>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800378a:	bf00      	nop
 800378c:	370c      	adds	r7, #12
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40021000 	.word	0x40021000

0800379c <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
 800379c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037a0:	b08b      	sub	sp, #44	@ 0x2c
 80037a2:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 80037a4:	2300      	movs	r3, #0
 80037a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a8:	e039      	b.n	800381e <process_canard_TX_queue+0x82>
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
 80037aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ac:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80037b0:	4313      	orrs	r3, r2
 80037b2:	d00c      	beq.n	80037ce <process_canard_TX_queue+0x32>
 80037b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037b6:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 80037ba:	f7ff fe5d 	bl	8003478 <micros>
 80037be:	4603      	mov	r3, r0
 80037c0:	2200      	movs	r2, #0
 80037c2:	461c      	mov	r4, r3
 80037c4:	4615      	mov	r5, r2
 80037c6:	4544      	cmp	r4, r8
 80037c8:	eb75 0309 	sbcs.w	r3, r5, r9
 80037cc:	d21d      	bcs.n	800380a <process_canard_TX_queue+0x6e>
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
 80037ce:	2304      	movs	r3, #4
 80037d0:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA;
 80037d2:	2300      	movs	r3, #0
 80037d4:	61bb      	str	r3, [r7, #24]

      TxHeader.DLC = ti->frame.payload_size;
 80037d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037da:	61fb      	str	r3, [r7, #28]
      TxHeader.ExtId = ti->frame.extended_can_id;
 80037dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	613b      	str	r3, [r7, #16]

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );
 80037e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037ea:	1d3b      	adds	r3, r7, #4
 80037ec:	4618      	mov	r0, r3
 80037ee:	f002 fd10 	bl	8006212 <memcpy>

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 80037f2:	463b      	mov	r3, r7
 80037f4:	1d3a      	adds	r2, r7, #4
 80037f6:	f107 010c 	add.w	r1, r7, #12
 80037fa:	480f      	ldr	r0, [pc, #60]	@ (8003838 <process_canard_TX_queue+0x9c>)
 80037fc:	f000 fd39 	bl	8004272 <HAL_CAN_AddTxMessage>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d001      	beq.n	800380a <process_canard_TX_queue+0x6e>
      {
        break;
 8003806:	bf00      	nop
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}
 8003808:	e010      	b.n	800382c <process_canard_TX_queue+0x90>
    canard.memory_free(&canard, canardTxPop(&queue, ti));
 800380a:	4b0c      	ldr	r3, [pc, #48]	@ (800383c <process_canard_TX_queue+0xa0>)
 800380c:	68de      	ldr	r6, [r3, #12]
 800380e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003810:	480b      	ldr	r0, [pc, #44]	@ (8003840 <process_canard_TX_queue+0xa4>)
 8003812:	f7fe fe16 	bl	8002442 <canardTxPop>
 8003816:	4603      	mov	r3, r0
 8003818:	4619      	mov	r1, r3
 800381a:	4808      	ldr	r0, [pc, #32]	@ (800383c <process_canard_TX_queue+0xa0>)
 800381c:	47b0      	blx	r6
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 800381e:	4808      	ldr	r0, [pc, #32]	@ (8003840 <process_canard_TX_queue+0xa4>)
 8003820:	f7fe fdfa 	bl	8002418 <canardTxPeek>
 8003824:	6278      	str	r0, [r7, #36]	@ 0x24
 8003826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1be      	bne.n	80037aa <process_canard_TX_queue+0xe>
}
 800382c:	bf00      	nop
 800382e:	372c      	adds	r7, #44	@ 0x2c
 8003830:	46bd      	mov	sp, r7
 8003832:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003836:	bf00      	nop
 8003838:	20000088 	.word	0x20000088
 800383c:	200000b0 	.word	0x200000b0
 8003840:	200000cc 	.word	0x200000cc

08003844 <HAL_CAN_RxFifo0MsgPendingCallback>:

#pragma optimize=s none
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003844:	b5b0      	push	{r4, r5, r7, lr}
 8003846:	b0de      	sub	sp, #376	@ 0x178
 8003848:	af04      	add	r7, sp, #16
 800384a:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 800384e:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003852:	6018      	str	r0, [r3, #0]
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8] = {0};
 8003854:	2300      	movs	r3, #0
 8003856:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800385a:	2300      	movs	r3, #0
 800385c:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
  uint32_t RxFifo1 = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  HAL_CAN_GetRxMessage(&hcan1, RxFifo1, &RxHeader, RxData);
 8003866:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800386a:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800386e:	f8d7 1164 	ldr.w	r1, [r7, #356]	@ 0x164
 8003872:	4827      	ldr	r0, [pc, #156]	@ (8003910 <HAL_CAN_RxFifo0MsgPendingCallback+0xcc>)
 8003874:	f000 fdcd 	bl	8004412 <HAL_CAN_GetRxMessage>

  CanardFrame rxf;

  rxf.extended_can_id = RxHeader.ExtId;
 8003878:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800387c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  rxf.payload_size = (size_t)RxHeader.DLC;
 8003880:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8003884:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  rxf.payload = (void*)RxData;
 8003888:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800388c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

  CanardRxTransfer transfer;

  if( canardRxAccept(   (CanardInstance *const)&canard,
                        micros(),
 8003890:	f7ff fdf2 	bl	8003478 <micros>
 8003894:	4603      	mov	r3, r0
  if( canardRxAccept(   (CanardInstance *const)&canard,
 8003896:	2200      	movs	r2, #0
 8003898:	461c      	mov	r4, r3
 800389a:	4615      	mov	r5, r2
 800389c:	2300      	movs	r3, #0
 800389e:	9303      	str	r3, [sp, #12]
 80038a0:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 80038a4:	9302      	str	r3, [sp, #8]
 80038a6:	2300      	movs	r3, #0
 80038a8:	9301      	str	r3, [sp, #4]
 80038aa:	f507 739a 	add.w	r3, r7, #308	@ 0x134
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	4622      	mov	r2, r4
 80038b2:	462b      	mov	r3, r5
 80038b4:	4817      	ldr	r0, [pc, #92]	@ (8003914 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80038b6:	f7fe fde5 	bl	8002484 <canardRxAccept>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d121      	bne.n	8003904 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>
                        {
                          return ; // the frame received is not a valid transfer
                        }

  uavcan_primitive_array_Real64_1_0 array;
  size_t array_ser_buf_size = uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_;
 80038c0:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 80038c4:	f5a3 73ae 	sub.w	r3, r3, #348	@ 0x15c
 80038c8:	f240 1201 	movw	r2, #257	@ 0x101
 80038cc:	601a      	str	r2, [r3, #0]

  if ( uavcan_primitive_array_Real64_1_0_deserialize_( &array, transfer.payload, &array_ser_buf_size) < 0)
 80038ce:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 80038d2:	f107 020c 	add.w	r2, r7, #12
 80038d6:	f107 0310 	add.w	r3, r7, #16
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fd30 	bl	8003340 <uavcan_primitive_array_Real64_1_0_deserialize_>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	da01      	bge.n	80038ea <HAL_CAN_RxFifo0MsgPendingCallback+0xa6>
  {
    Error_Handler();
 80038e6:	f000 f83a 	bl	800395e <Error_Handler>
  }

  canard.memory_free(&canard, transfer.payload);
 80038ea:	4b0a      	ldr	r3, [pc, #40]	@ (8003914 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80038f2:	4611      	mov	r1, r2
 80038f4:	4807      	ldr	r0, [pc, #28]	@ (8003914 <HAL_CAN_RxFifo0MsgPendingCallback+0xd0>)
 80038f6:	4798      	blx	r3

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80038f8:	2120      	movs	r1, #32
 80038fa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80038fe:	f001 fb71 	bl	8004fe4 <HAL_GPIO_TogglePin>

  return ;
 8003902:	e000      	b.n	8003906 <HAL_CAN_RxFifo0MsgPendingCallback+0xc2>
                          return ; // the frame received is not a valid transfer
 8003904:	bf00      	nop
}
 8003906:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 800390a:	46bd      	mov	sp, r7
 800390c:	bdb0      	pop	{r4, r5, r7, pc}
 800390e:	bf00      	nop
 8003910:	20000088 	.word	0x20000088
 8003914:	200000b0 	.word	0x200000b0

08003918 <HAL_CAN_RxFifo1MsgPendingCallback>:

#pragma optimize=s none
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ;
 8003920:	bf00      	nop
}
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <memAllocate>:

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b082      	sub	sp, #8
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  (void) ins;
  return malloc(amount);
 8003936:	6838      	ldr	r0, [r7, #0]
 8003938:	f002 f9f0 	bl	8005d1c <malloc>
 800393c:	4603      	mov	r3, r0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3708      	adds	r7, #8
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}

08003946 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 8003946:	b580      	push	{r7, lr}
 8003948:	b082      	sub	sp, #8
 800394a:	af00      	add	r7, sp, #0
 800394c:	6078      	str	r0, [r7, #4]
 800394e:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f002 f9eb 	bl	8005d2c <free>
}
 8003956:	bf00      	nop
 8003958:	3708      	adds	r7, #8
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}

0800395e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003962:	b672      	cpsid	i
}
 8003964:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003966:	bf00      	nop
 8003968:	e7fd      	b.n	8003966 <Error_Handler+0x8>
	...

0800396c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003972:	4b0f      	ldr	r3, [pc, #60]	@ (80039b0 <HAL_MspInit+0x44>)
 8003974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003976:	4a0e      	ldr	r2, [pc, #56]	@ (80039b0 <HAL_MspInit+0x44>)
 8003978:	f043 0301 	orr.w	r3, r3, #1
 800397c:	6613      	str	r3, [r2, #96]	@ 0x60
 800397e:	4b0c      	ldr	r3, [pc, #48]	@ (80039b0 <HAL_MspInit+0x44>)
 8003980:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	607b      	str	r3, [r7, #4]
 8003988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	4b09      	ldr	r3, [pc, #36]	@ (80039b0 <HAL_MspInit+0x44>)
 800398c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398e:	4a08      	ldr	r2, [pc, #32]	@ (80039b0 <HAL_MspInit+0x44>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003994:	6593      	str	r3, [r2, #88]	@ 0x58
 8003996:	4b06      	ldr	r3, [pc, #24]	@ (80039b0 <HAL_MspInit+0x44>)
 8003998:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800399a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80039a2:	bf00      	nop
 80039a4:	370c      	adds	r7, #12
 80039a6:	46bd      	mov	sp, r7
 80039a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ac:	4770      	bx	lr
 80039ae:	bf00      	nop
 80039b0:	40021000 	.word	0x40021000

080039b4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b08a      	sub	sp, #40	@ 0x28
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	605a      	str	r2, [r3, #4]
 80039c6:	609a      	str	r2, [r3, #8]
 80039c8:	60da      	str	r2, [r3, #12]
 80039ca:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a28      	ldr	r2, [pc, #160]	@ (8003a74 <HAL_CAN_MspInit+0xc0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d149      	bne.n	8003a6a <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80039d6:	4b28      	ldr	r3, [pc, #160]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039da:	4a27      	ldr	r2, [pc, #156]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039dc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80039e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80039e2:	4b25      	ldr	r3, [pc, #148]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ea:	613b      	str	r3, [r7, #16]
 80039ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ee:	4b22      	ldr	r3, [pc, #136]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039f2:	4a21      	ldr	r2, [pc, #132]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039f4:	f043 0301 	orr.w	r3, r3, #1
 80039f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80039fa:	4b1f      	ldr	r3, [pc, #124]	@ (8003a78 <HAL_CAN_MspInit+0xc4>)
 80039fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8003a06:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0c:	2302      	movs	r3, #2
 8003a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a14:	2303      	movs	r3, #3
 8003a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a18:	2309      	movs	r3, #9
 8003a1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	4619      	mov	r1, r3
 8003a22:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003a26:	f001 f973 	bl	8004d10 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2013      	movs	r0, #19
 8003a30:	f001 f937 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003a34:	2013      	movs	r0, #19
 8003a36:	f001 f950 	bl	8004cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	2014      	movs	r0, #20
 8003a40:	f001 f92f 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a44:	2014      	movs	r0, #20
 8003a46:	f001 f948 	bl	8004cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	2100      	movs	r1, #0
 8003a4e:	2015      	movs	r0, #21
 8003a50:	f001 f927 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8003a54:	2015      	movs	r0, #21
 8003a56:	f001 f940 	bl	8004cda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	2016      	movs	r0, #22
 8003a60:	f001 f91f 	bl	8004ca2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8003a64:	2016      	movs	r0, #22
 8003a66:	f001 f938 	bl	8004cda <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8003a6a:	bf00      	nop
 8003a6c:	3728      	adds	r7, #40	@ 0x28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	40006400 	.word	0x40006400
 8003a78:	40021000 	.word	0x40021000

08003a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a80:	bf00      	nop
 8003a82:	e7fd      	b.n	8003a80 <NMI_Handler+0x4>

08003a84 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a88:	bf00      	nop
 8003a8a:	e7fd      	b.n	8003a88 <HardFault_Handler+0x4>

08003a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a8c:	b480      	push	{r7}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a90:	bf00      	nop
 8003a92:	e7fd      	b.n	8003a90 <MemManage_Handler+0x4>

08003a94 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a98:	bf00      	nop
 8003a9a:	e7fd      	b.n	8003a98 <BusFault_Handler+0x4>

08003a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <UsageFault_Handler+0x4>

08003aa4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003aa8:	bf00      	nop
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr

08003ab2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ab2:	b480      	push	{r7}
 8003ab4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ac4:	bf00      	nop
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003acc:	4770      	bx	lr

08003ace <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ad2:	f000 f981 	bl	8003dd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ad6:	bf00      	nop
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ae0:	4802      	ldr	r0, [pc, #8]	@ (8003aec <CAN1_TX_IRQHandler+0x10>)
 8003ae2:	f000 fdde 	bl	80046a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003ae6:	bf00      	nop
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	20000088 	.word	0x20000088

08003af0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003af4:	4802      	ldr	r0, [pc, #8]	@ (8003b00 <CAN1_RX0_IRQHandler+0x10>)
 8003af6:	f000 fdd4 	bl	80046a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003afa:	bf00      	nop
 8003afc:	bd80      	pop	{r7, pc}
 8003afe:	bf00      	nop
 8003b00:	20000088 	.word	0x20000088

08003b04 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b08:	4802      	ldr	r0, [pc, #8]	@ (8003b14 <CAN1_RX1_IRQHandler+0x10>)
 8003b0a:	f000 fdca 	bl	80046a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 8003b0e:	bf00      	nop
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	20000088 	.word	0x20000088

08003b18 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003b1c:	4802      	ldr	r0, [pc, #8]	@ (8003b28 <CAN1_SCE_IRQHandler+0x10>)
 8003b1e:	f000 fdc0 	bl	80046a2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	bd80      	pop	{r7, pc}
 8003b26:	bf00      	nop
 8003b28:	20000088 	.word	0x20000088

08003b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return 1;
 8003b30:	2301      	movs	r3, #1
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <_kill>:

int _kill(int pid, int sig)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003b46:	f002 fb37 	bl	80061b8 <__errno>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2216      	movs	r2, #22
 8003b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8003b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3708      	adds	r7, #8
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}

08003b5c <_exit>:

void _exit (int status)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003b64:	f04f 31ff 	mov.w	r1, #4294967295
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff ffe7 	bl	8003b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8003b6e:	bf00      	nop
 8003b70:	e7fd      	b.n	8003b6e <_exit+0x12>

08003b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b086      	sub	sp, #24
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b7e:	2300      	movs	r3, #0
 8003b80:	617b      	str	r3, [r7, #20]
 8003b82:	e00a      	b.n	8003b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003b84:	f3af 8000 	nop.w
 8003b88:	4601      	mov	r1, r0
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	1c5a      	adds	r2, r3, #1
 8003b8e:	60ba      	str	r2, [r7, #8]
 8003b90:	b2ca      	uxtb	r2, r1
 8003b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b94:	697b      	ldr	r3, [r7, #20]
 8003b96:	3301      	adds	r3, #1
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	dbf0      	blt.n	8003b84 <_read+0x12>
  }

  return len;
 8003ba2:	687b      	ldr	r3, [r7, #4]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bb8:	2300      	movs	r3, #0
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e009      	b.n	8003bd2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	1c5a      	adds	r2, r3, #1
 8003bc2:	60ba      	str	r2, [r7, #8]
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3301      	adds	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	dbf1      	blt.n	8003bbe <_write+0x12>
  }
  return len;
 8003bda:	687b      	ldr	r3, [r7, #4]
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3718      	adds	r7, #24
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}

08003be4 <_close>:

int _close(int file)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfa:	4770      	bx	lr

08003bfc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003c0c:	605a      	str	r2, [r3, #4]
  return 0;
 8003c0e:	2300      	movs	r3, #0
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	370c      	adds	r7, #12
 8003c14:	46bd      	mov	sp, r7
 8003c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1a:	4770      	bx	lr

08003c1c <_isatty>:

int _isatty(int file)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b083      	sub	sp, #12
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003c24:	2301      	movs	r3, #1
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr

08003c32 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c32:	b480      	push	{r7}
 8003c34:	b085      	sub	sp, #20
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	60f8      	str	r0, [r7, #12]
 8003c3a:	60b9      	str	r1, [r7, #8]
 8003c3c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3714      	adds	r7, #20
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b086      	sub	sp, #24
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003c54:	4a14      	ldr	r2, [pc, #80]	@ (8003ca8 <_sbrk+0x5c>)
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <_sbrk+0x60>)
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003c60:	4b13      	ldr	r3, [pc, #76]	@ (8003cb0 <_sbrk+0x64>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003c68:	4b11      	ldr	r3, [pc, #68]	@ (8003cb0 <_sbrk+0x64>)
 8003c6a:	4a12      	ldr	r2, [pc, #72]	@ (8003cb4 <_sbrk+0x68>)
 8003c6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003c6e:	4b10      	ldr	r3, [pc, #64]	@ (8003cb0 <_sbrk+0x64>)
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4413      	add	r3, r2
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d207      	bcs.n	8003c8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003c7c:	f002 fa9c 	bl	80061b8 <__errno>
 8003c80:	4603      	mov	r3, r0
 8003c82:	220c      	movs	r2, #12
 8003c84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003c86:	f04f 33ff 	mov.w	r3, #4294967295
 8003c8a:	e009      	b.n	8003ca0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	@ (8003cb0 <_sbrk+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c92:	4b07      	ldr	r3, [pc, #28]	@ (8003cb0 <_sbrk+0x64>)
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4413      	add	r3, r2
 8003c9a:	4a05      	ldr	r2, [pc, #20]	@ (8003cb0 <_sbrk+0x64>)
 8003c9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3718      	adds	r7, #24
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	20010000 	.word	0x20010000
 8003cac:	00000400 	.word	0x00000400
 8003cb0:	200000f4 	.word	0x200000f4
 8003cb4:	20000248 	.word	0x20000248

08003cb8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <SystemInit+0x20>)
 8003cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cc2:	4a05      	ldr	r2, [pc, #20]	@ (8003cd8 <SystemInit+0x20>)
 8003cc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003cc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	e000ed00 	.word	0xe000ed00

08003cdc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003cdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003d14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003ce0:	f7ff ffea 	bl	8003cb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ce4:	480c      	ldr	r0, [pc, #48]	@ (8003d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8003ce6:	490d      	ldr	r1, [pc, #52]	@ (8003d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ce8:	4a0d      	ldr	r2, [pc, #52]	@ (8003d20 <LoopForever+0xe>)
  movs r3, #0
 8003cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cec:	e002      	b.n	8003cf4 <LoopCopyDataInit>

08003cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cf2:	3304      	adds	r3, #4

08003cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cf8:	d3f9      	bcc.n	8003cee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8003d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cfc:	4c0a      	ldr	r4, [pc, #40]	@ (8003d28 <LoopForever+0x16>)
  movs r3, #0
 8003cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003d00:	e001      	b.n	8003d06 <LoopFillZerobss>

08003d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003d04:	3204      	adds	r2, #4

08003d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003d08:	d3fb      	bcc.n	8003d02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d0a:	f002 fa5b 	bl	80061c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d0e:	f7ff fbbb 	bl	8003488 <main>

08003d12 <LoopForever>:

LoopForever:
    b LoopForever
 8003d12:	e7fe      	b.n	8003d12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003d14:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003d1c:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8003d20:	08008258 	.word	0x08008258
  ldr r2, =_sbss
 8003d24:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8003d28:	20000248 	.word	0x20000248

08003d2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003d2c:	e7fe      	b.n	8003d2c <ADC1_IRQHandler>

08003d2e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d34:	2300      	movs	r3, #0
 8003d36:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d38:	2003      	movs	r0, #3
 8003d3a:	f000 ffa7 	bl	8004c8c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d3e:	200f      	movs	r0, #15
 8003d40:	f000 f80e 	bl	8003d60 <HAL_InitTick>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d4a:	2301      	movs	r3, #1
 8003d4c:	71fb      	strb	r3, [r7, #7]
 8003d4e:	e001      	b.n	8003d54 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d50:	f7ff fe0c 	bl	800396c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d54:	79fb      	ldrb	r3, [r7, #7]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3708      	adds	r7, #8
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
	...

08003d60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8003d6c:	4b17      	ldr	r3, [pc, #92]	@ (8003dcc <HAL_InitTick+0x6c>)
 8003d6e:	781b      	ldrb	r3, [r3, #0]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d023      	beq.n	8003dbc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8003d74:	4b16      	ldr	r3, [pc, #88]	@ (8003dd0 <HAL_InitTick+0x70>)
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	4b14      	ldr	r3, [pc, #80]	@ (8003dcc <HAL_InitTick+0x6c>)
 8003d7a:	781b      	ldrb	r3, [r3, #0]
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003d82:	fbb3 f3f1 	udiv	r3, r3, r1
 8003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f000 ffb3 	bl	8004cf6 <HAL_SYSTICK_Config>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b0f      	cmp	r3, #15
 8003d9a:	d809      	bhi.n	8003db0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	6879      	ldr	r1, [r7, #4]
 8003da0:	f04f 30ff 	mov.w	r0, #4294967295
 8003da4:	f000 ff7d 	bl	8004ca2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003da8:	4a0a      	ldr	r2, [pc, #40]	@ (8003dd4 <HAL_InitTick+0x74>)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	e007      	b.n	8003dc0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8003db0:	2301      	movs	r3, #1
 8003db2:	73fb      	strb	r3, [r7, #15]
 8003db4:	e004      	b.n	8003dc0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	73fb      	strb	r3, [r7, #15]
 8003dba:	e001      	b.n	8003dc0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8003dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	2000000c 	.word	0x2000000c
 8003dd0:	20000004 	.word	0x20000004
 8003dd4:	20000008 	.word	0x20000008

08003dd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003ddc:	4b06      	ldr	r3, [pc, #24]	@ (8003df8 <HAL_IncTick+0x20>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	461a      	mov	r2, r3
 8003de2:	4b06      	ldr	r3, [pc, #24]	@ (8003dfc <HAL_IncTick+0x24>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4413      	add	r3, r2
 8003de8:	4a04      	ldr	r2, [pc, #16]	@ (8003dfc <HAL_IncTick+0x24>)
 8003dea:	6013      	str	r3, [r2, #0]
}
 8003dec:	bf00      	nop
 8003dee:	46bd      	mov	sp, r7
 8003df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df4:	4770      	bx	lr
 8003df6:	bf00      	nop
 8003df8:	2000000c 	.word	0x2000000c
 8003dfc:	200000f8 	.word	0x200000f8

08003e00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
  return uwTick;
 8003e04:	4b03      	ldr	r3, [pc, #12]	@ (8003e14 <HAL_GetTick+0x14>)
 8003e06:	681b      	ldr	r3, [r3, #0]
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	200000f8 	.word	0x200000f8

08003e18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b084      	sub	sp, #16
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e20:	f7ff ffee 	bl	8003e00 <HAL_GetTick>
 8003e24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e30:	d005      	beq.n	8003e3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003e32:	4b0a      	ldr	r3, [pc, #40]	@ (8003e5c <HAL_Delay+0x44>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003e3e:	bf00      	nop
 8003e40:	f7ff ffde 	bl	8003e00 <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d8f7      	bhi.n	8003e40 <HAL_Delay+0x28>
  {
  }
}
 8003e50:	bf00      	nop
 8003e52:	bf00      	nop
 8003e54:	3710      	adds	r7, #16
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	2000000c 	.word	0x2000000c

08003e60 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003e6e:	2301      	movs	r3, #1
 8003e70:	e0ed      	b.n	800404e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e78:	b2db      	uxtb	r3, r3
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d102      	bne.n	8003e84 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff fd98 	bl	80039b4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f042 0201 	orr.w	r2, r2, #1
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e94:	f7ff ffb4 	bl	8003e00 <HAL_GetTick>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003e9a:	e012      	b.n	8003ec2 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003e9c:	f7ff ffb0 	bl	8003e00 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b0a      	cmp	r3, #10
 8003ea8:	d90b      	bls.n	8003ec2 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eae:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2205      	movs	r2, #5
 8003eba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e0c5      	b.n	800404e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 0301 	and.w	r3, r3, #1
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d0e5      	beq.n	8003e9c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0202 	bic.w	r2, r2, #2
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003ee0:	f7ff ff8e 	bl	8003e00 <HAL_GetTick>
 8003ee4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003ee6:	e012      	b.n	8003f0e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003ee8:	f7ff ff8a 	bl	8003e00 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b0a      	cmp	r3, #10
 8003ef4:	d90b      	bls.n	8003f0e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003efa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2205      	movs	r2, #5
 8003f06:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e09f      	b.n	800404e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	685b      	ldr	r3, [r3, #4]
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e5      	bne.n	8003ee8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	7e1b      	ldrb	r3, [r3, #24]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d108      	bne.n	8003f36 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	e007      	b.n	8003f46 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681a      	ldr	r2, [r3, #0]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003f44:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	7e5b      	ldrb	r3, [r3, #25]
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d108      	bne.n	8003f60 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e007      	b.n	8003f70 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681a      	ldr	r2, [r3, #0]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003f6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	7e9b      	ldrb	r3, [r3, #26]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d108      	bne.n	8003f8a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f042 0220 	orr.w	r2, r2, #32
 8003f86:	601a      	str	r2, [r3, #0]
 8003f88:	e007      	b.n	8003f9a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f022 0220 	bic.w	r2, r2, #32
 8003f98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	7edb      	ldrb	r3, [r3, #27]
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d108      	bne.n	8003fb4 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0210 	bic.w	r2, r2, #16
 8003fb0:	601a      	str	r2, [r3, #0]
 8003fb2:	e007      	b.n	8003fc4 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0210 	orr.w	r2, r2, #16
 8003fc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	7f1b      	ldrb	r3, [r3, #28]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d108      	bne.n	8003fde <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f042 0208 	orr.w	r2, r2, #8
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	e007      	b.n	8003fee <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0208 	bic.w	r2, r2, #8
 8003fec:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	7f5b      	ldrb	r3, [r3, #29]
 8003ff2:	2b01      	cmp	r3, #1
 8003ff4:	d108      	bne.n	8004008 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f042 0204 	orr.w	r2, r2, #4
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e007      	b.n	8004018 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0204 	bic.w	r2, r2, #4
 8004016:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689a      	ldr	r2, [r3, #8]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	431a      	orrs	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	ea42 0103 	orr.w	r1, r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	1e5a      	subs	r2, r3, #1
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	430a      	orrs	r2, r1
 800403c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2201      	movs	r2, #1
 8004048:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800404c:	2300      	movs	r3, #0
}
 800404e:	4618      	mov	r0, r3
 8004050:	3710      	adds	r7, #16
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004056:	b480      	push	{r7}
 8004058:	b087      	sub	sp, #28
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
 800405e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f893 3020 	ldrb.w	r3, [r3, #32]
 800406c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800406e:	7cfb      	ldrb	r3, [r7, #19]
 8004070:	2b01      	cmp	r3, #1
 8004072:	d003      	beq.n	800407c <HAL_CAN_ConfigFilter+0x26>
 8004074:	7cfb      	ldrb	r3, [r7, #19]
 8004076:	2b02      	cmp	r3, #2
 8004078:	f040 80aa 	bne.w	80041d0 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004082:	f043 0201 	orr.w	r2, r3, #1
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	695b      	ldr	r3, [r3, #20]
 8004090:	f003 031f 	and.w	r3, r3, #31
 8004094:	2201      	movs	r2, #1
 8004096:	fa02 f303 	lsl.w	r3, r2, r3
 800409a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	43db      	mvns	r3, r3
 80040a6:	401a      	ands	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	69db      	ldr	r3, [r3, #28]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d123      	bne.n	80040fe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	43db      	mvns	r3, r3
 80040c0:	401a      	ands	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80040d8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	3248      	adds	r2, #72	@ 0x48
 80040de:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80040f2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	3348      	adds	r3, #72	@ 0x48
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d122      	bne.n	800414c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	431a      	orrs	r2, r3
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004126:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	3248      	adds	r2, #72	@ 0x48
 800412c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	68db      	ldr	r3, [r3, #12]
 800413a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004140:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004142:	6979      	ldr	r1, [r7, #20]
 8004144:	3348      	adds	r3, #72	@ 0x48
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d109      	bne.n	8004168 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	43db      	mvns	r3, r3
 800415e:	401a      	ands	r2, r3
 8004160:	697b      	ldr	r3, [r7, #20]
 8004162:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004166:	e007      	b.n	8004178 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	431a      	orrs	r2, r3
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004180:	697b      	ldr	r3, [r7, #20]
 8004182:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	43db      	mvns	r3, r3
 800418a:	401a      	ands	r2, r3
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004192:	e007      	b.n	80041a4 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	431a      	orrs	r2, r3
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a1b      	ldr	r3, [r3, #32]
 80041a8:	2b01      	cmp	r3, #1
 80041aa:	d107      	bne.n	80041bc <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	431a      	orrs	r2, r3
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80041c2:	f023 0201 	bic.w	r2, r3, #1
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80041cc:	2300      	movs	r3, #0
 80041ce:	e006      	b.n	80041de <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041d4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
  }
}
 80041de:	4618      	mov	r0, r3
 80041e0:	371c      	adds	r7, #28
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d12e      	bne.n	800425c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2202      	movs	r2, #2
 8004202:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f022 0201 	bic.w	r2, r2, #1
 8004214:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004216:	f7ff fdf3 	bl	8003e00 <HAL_GetTick>
 800421a:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800421c:	e012      	b.n	8004244 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800421e:	f7ff fdef 	bl	8003e00 <HAL_GetTick>
 8004222:	4602      	mov	r2, r0
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	2b0a      	cmp	r3, #10
 800422a:	d90b      	bls.n	8004244 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004230:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2205      	movs	r2, #5
 800423c:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e012      	b.n	800426a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1e5      	bne.n	800421e <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	2200      	movs	r2, #0
 8004256:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e006      	b.n	800426a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004260:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
  }
}
 800426a:	4618      	mov	r0, r3
 800426c:	3710      	adds	r7, #16
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004272:	b480      	push	{r7}
 8004274:	b089      	sub	sp, #36	@ 0x24
 8004276:	af00      	add	r7, sp, #0
 8004278:	60f8      	str	r0, [r7, #12]
 800427a:	60b9      	str	r1, [r7, #8]
 800427c:	607a      	str	r2, [r7, #4]
 800427e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004286:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d003      	beq.n	800429e <HAL_CAN_AddTxMessage+0x2c>
 8004296:	7ffb      	ldrb	r3, [r7, #31]
 8004298:	2b02      	cmp	r3, #2
 800429a:	f040 80ad 	bne.w	80043f8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800429e:	69bb      	ldr	r3, [r7, #24]
 80042a0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042a8:	69bb      	ldr	r3, [r7, #24]
 80042aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d105      	bne.n	80042be <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f000 8095 	beq.w	80043e8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	0e1b      	lsrs	r3, r3, #24
 80042c2:	f003 0303 	and.w	r3, r3, #3
 80042c6:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80042c8:	2201      	movs	r2, #1
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	409a      	lsls	r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10d      	bne.n	80042f6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80042e4:	68f9      	ldr	r1, [r7, #12]
 80042e6:	6809      	ldr	r1, [r1, #0]
 80042e8:	431a      	orrs	r2, r3
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	3318      	adds	r3, #24
 80042ee:	011b      	lsls	r3, r3, #4
 80042f0:	440b      	add	r3, r1
 80042f2:	601a      	str	r2, [r3, #0]
 80042f4:	e00f      	b.n	8004316 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004300:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004306:	68f9      	ldr	r1, [r7, #12]
 8004308:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800430a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3318      	adds	r3, #24
 8004310:	011b      	lsls	r3, r3, #4
 8004312:	440b      	add	r3, r1
 8004314:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6819      	ldr	r1, [r3, #0]
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	691a      	ldr	r2, [r3, #16]
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	3318      	adds	r3, #24
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	440b      	add	r3, r1
 8004326:	3304      	adds	r3, #4
 8004328:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	7d1b      	ldrb	r3, [r3, #20]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d111      	bne.n	8004356 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	3318      	adds	r3, #24
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4413      	add	r3, r2
 800433e:	3304      	adds	r3, #4
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	68fa      	ldr	r2, [r7, #12]
 8004344:	6811      	ldr	r1, [r2, #0]
 8004346:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	3318      	adds	r3, #24
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	440b      	add	r3, r1
 8004352:	3304      	adds	r3, #4
 8004354:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	3307      	adds	r3, #7
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	061a      	lsls	r2, r3, #24
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	3306      	adds	r3, #6
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	041b      	lsls	r3, r3, #16
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	3305      	adds	r3, #5
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	021b      	lsls	r3, r3, #8
 8004370:	4313      	orrs	r3, r2
 8004372:	687a      	ldr	r2, [r7, #4]
 8004374:	3204      	adds	r2, #4
 8004376:	7812      	ldrb	r2, [r2, #0]
 8004378:	4610      	mov	r0, r2
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	6811      	ldr	r1, [r2, #0]
 800437e:	ea43 0200 	orr.w	r2, r3, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	011b      	lsls	r3, r3, #4
 8004386:	440b      	add	r3, r1
 8004388:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 800438c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	3303      	adds	r3, #3
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	061a      	lsls	r2, r3, #24
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	3302      	adds	r3, #2
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	041b      	lsls	r3, r3, #16
 800439e:	431a      	orrs	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	3301      	adds	r3, #1
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	021b      	lsls	r3, r3, #8
 80043a8:	4313      	orrs	r3, r2
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	7812      	ldrb	r2, [r2, #0]
 80043ae:	4610      	mov	r0, r2
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	6811      	ldr	r1, [r2, #0]
 80043b4:	ea43 0200 	orr.w	r2, r3, r0
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	011b      	lsls	r3, r3, #4
 80043bc:	440b      	add	r3, r1
 80043be:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80043c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	3318      	adds	r3, #24
 80043cc:	011b      	lsls	r3, r3, #4
 80043ce:	4413      	add	r3, r2
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f043 0201 	orr.w	r2, r3, #1
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	3318      	adds	r3, #24
 80043de:	011b      	lsls	r3, r3, #4
 80043e0:	440b      	add	r3, r1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	e00e      	b.n	8004406 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e006      	b.n	8004406 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
  }
}
 8004406:	4618      	mov	r0, r3
 8004408:	3724      	adds	r7, #36	@ 0x24
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr

08004412 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004412:	b480      	push	{r7}
 8004414:	b087      	sub	sp, #28
 8004416:	af00      	add	r7, sp, #0
 8004418:	60f8      	str	r0, [r7, #12]
 800441a:	60b9      	str	r1, [r7, #8]
 800441c:	607a      	str	r2, [r7, #4]
 800441e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004426:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004428:	7dfb      	ldrb	r3, [r7, #23]
 800442a:	2b01      	cmp	r3, #1
 800442c:	d003      	beq.n	8004436 <HAL_CAN_GetRxMessage+0x24>
 800442e:	7dfb      	ldrb	r3, [r7, #23]
 8004430:	2b02      	cmp	r3, #2
 8004432:	f040 8103 	bne.w	800463c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10e      	bne.n	800445a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b00      	cmp	r3, #0
 8004448:	d116      	bne.n	8004478 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0f7      	b.n	800464a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	691b      	ldr	r3, [r3, #16]
 8004460:	f003 0303 	and.w	r3, r3, #3
 8004464:	2b00      	cmp	r3, #0
 8004466:	d107      	bne.n	8004478 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800446c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0e8      	b.n	800464a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	331b      	adds	r3, #27
 8004480:	011b      	lsls	r3, r3, #4
 8004482:	4413      	add	r3, r2
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f003 0204 	and.w	r2, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10c      	bne.n	80044b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	331b      	adds	r3, #27
 800449e:	011b      	lsls	r3, r3, #4
 80044a0:	4413      	add	r3, r2
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	0d5b      	lsrs	r3, r3, #21
 80044a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	e00b      	b.n	80044c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	331b      	adds	r3, #27
 80044b8:	011b      	lsls	r3, r3, #4
 80044ba:	4413      	add	r3, r2
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	331b      	adds	r3, #27
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4413      	add	r3, r2
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 0202 	and.w	r2, r3, #2
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	331b      	adds	r3, #27
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	4413      	add	r3, r2
 80044ea:	3304      	adds	r3, #4
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0308 	and.w	r3, r3, #8
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d003      	beq.n	80044fe <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2208      	movs	r2, #8
 80044fa:	611a      	str	r2, [r3, #16]
 80044fc:	e00b      	b.n	8004516 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681a      	ldr	r2, [r3, #0]
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	331b      	adds	r3, #27
 8004506:	011b      	lsls	r3, r3, #4
 8004508:	4413      	add	r3, r2
 800450a:	3304      	adds	r3, #4
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 020f 	and.w	r2, r3, #15
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	331b      	adds	r3, #27
 800451e:	011b      	lsls	r3, r3, #4
 8004520:	4413      	add	r3, r2
 8004522:	3304      	adds	r3, #4
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	0a1b      	lsrs	r3, r3, #8
 8004528:	b2da      	uxtb	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	331b      	adds	r3, #27
 8004536:	011b      	lsls	r3, r3, #4
 8004538:	4413      	add	r3, r2
 800453a:	3304      	adds	r3, #4
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	0c1b      	lsrs	r3, r3, #16
 8004540:	b29a      	uxth	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681a      	ldr	r2, [r3, #0]
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	4413      	add	r3, r2
 8004550:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	b2da      	uxtb	r2, r3
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4413      	add	r3, r2
 8004566:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	0a1a      	lsrs	r2, r3, #8
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	3301      	adds	r3, #1
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	011b      	lsls	r3, r3, #4
 800457e:	4413      	add	r3, r2
 8004580:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	0c1a      	lsrs	r2, r3, #16
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	3302      	adds	r3, #2
 800458c:	b2d2      	uxtb	r2, r2
 800458e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	68bb      	ldr	r3, [r7, #8]
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	4413      	add	r3, r2
 800459a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	0e1a      	lsrs	r2, r3, #24
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	3303      	adds	r3, #3
 80045a6:	b2d2      	uxtb	r2, r2
 80045a8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	011b      	lsls	r3, r3, #4
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	3304      	adds	r3, #4
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	011b      	lsls	r3, r3, #4
 80045ca:	4413      	add	r3, r2
 80045cc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	0a1a      	lsrs	r2, r3, #8
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	3305      	adds	r3, #5
 80045d8:	b2d2      	uxtb	r2, r2
 80045da:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	4413      	add	r3, r2
 80045e6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	0c1a      	lsrs	r2, r3, #16
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	3306      	adds	r3, #6
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681a      	ldr	r2, [r3, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	011b      	lsls	r3, r3, #4
 80045fe:	4413      	add	r3, r2
 8004600:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	0e1a      	lsrs	r2, r3, #24
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	3307      	adds	r3, #7
 800460c:	b2d2      	uxtb	r2, r2
 800460e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d108      	bne.n	8004628 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	68da      	ldr	r2, [r3, #12]
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f042 0220 	orr.w	r2, r2, #32
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	e007      	b.n	8004638 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	691a      	ldr	r2, [r3, #16]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f042 0220 	orr.w	r2, r2, #32
 8004636:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004638:	2300      	movs	r3, #0
 800463a:	e006      	b.n	800464a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004640:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
  }
}
 800464a:	4618      	mov	r0, r3
 800464c:	371c      	adds	r7, #28
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004656:	b480      	push	{r7}
 8004658:	b085      	sub	sp, #20
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004666:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004668:	7bfb      	ldrb	r3, [r7, #15]
 800466a:	2b01      	cmp	r3, #1
 800466c:	d002      	beq.n	8004674 <HAL_CAN_ActivateNotification+0x1e>
 800466e:	7bfb      	ldrb	r3, [r7, #15]
 8004670:	2b02      	cmp	r3, #2
 8004672:	d109      	bne.n	8004688 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	6959      	ldr	r1, [r3, #20]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	430a      	orrs	r2, r1
 8004682:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	e006      	b.n	8004696 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800468c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
  }
}
 8004696:	4618      	mov	r0, r3
 8004698:	3714      	adds	r7, #20
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr

080046a2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b08a      	sub	sp, #40	@ 0x28
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80046aa:	2300      	movs	r3, #0
 80046ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	695b      	ldr	r3, [r3, #20]
 80046b4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80046de:	6a3b      	ldr	r3, [r7, #32]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d07c      	beq.n	80047e2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d023      	beq.n	800473a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2201      	movs	r2, #1
 80046f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	f003 0302 	and.w	r3, r3, #2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d003      	beq.n	800470c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 f983 	bl	8004a10 <HAL_CAN_TxMailbox0CompleteCallback>
 800470a:	e016      	b.n	800473a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d004      	beq.n	8004720 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004718:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800471c:	627b      	str	r3, [r7, #36]	@ 0x24
 800471e:	e00c      	b.n	800473a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0308 	and.w	r3, r3, #8
 8004726:	2b00      	cmp	r3, #0
 8004728:	d004      	beq.n	8004734 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800472a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
 8004732:	e002      	b.n	800473a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f000 f989 	bl	8004a4c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004740:	2b00      	cmp	r3, #0
 8004742:	d024      	beq.n	800478e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800474c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004758:	6878      	ldr	r0, [r7, #4]
 800475a:	f000 f963 	bl	8004a24 <HAL_CAN_TxMailbox1CompleteCallback>
 800475e:	e016      	b.n	800478e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004766:	2b00      	cmp	r3, #0
 8004768:	d004      	beq.n	8004774 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800476a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004770:	627b      	str	r3, [r7, #36]	@ 0x24
 8004772:	e00c      	b.n	800478e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800477a:	2b00      	cmp	r3, #0
 800477c:	d004      	beq.n	8004788 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800477e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004780:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004784:	627b      	str	r3, [r7, #36]	@ 0x24
 8004786:	e002      	b.n	800478e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f969 	bl	8004a60 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d024      	beq.n	80047e2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80047a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d003      	beq.n	80047b4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 f943 	bl	8004a38 <HAL_CAN_TxMailbox2CompleteCallback>
 80047b2:	e016      	b.n	80047e2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d004      	beq.n	80047c8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80047c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c6:	e00c      	b.n	80047e2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d004      	beq.n	80047dc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80047d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80047da:	e002      	b.n	80047e2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 f949 	bl	8004a74 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80047e2:	6a3b      	ldr	r3, [r7, #32]
 80047e4:	f003 0308 	and.w	r3, r3, #8
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d00c      	beq.n	8004806 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0310 	and.w	r3, r3, #16
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d007      	beq.n	8004806 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80047f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80047fc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2210      	movs	r2, #16
 8004804:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8004806:	6a3b      	ldr	r3, [r7, #32]
 8004808:	f003 0304 	and.w	r3, r3, #4
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f003 0308 	and.w	r3, r3, #8
 8004816:	2b00      	cmp	r3, #0
 8004818:	d006      	beq.n	8004828 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2208      	movs	r2, #8
 8004820:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f000 f930 	bl	8004a88 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	f003 0302 	and.w	r3, r3, #2
 800482e:	2b00      	cmp	r3, #0
 8004830:	d009      	beq.n	8004846 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	68db      	ldr	r3, [r3, #12]
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	2b00      	cmp	r3, #0
 800483e:	d002      	beq.n	8004846 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	f7fe ffff 	bl	8003844 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8004846:	6a3b      	ldr	r3, [r7, #32]
 8004848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00c      	beq.n	800486a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	f003 0310 	and.w	r3, r3, #16
 8004856:	2b00      	cmp	r3, #0
 8004858:	d007      	beq.n	800486a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800485a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800485c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	2210      	movs	r2, #16
 8004868:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800486a:	6a3b      	ldr	r3, [r7, #32]
 800486c:	f003 0320 	and.w	r3, r3, #32
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00b      	beq.n	800488c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f003 0308 	and.w	r3, r3, #8
 800487a:	2b00      	cmp	r3, #0
 800487c:	d006      	beq.n	800488c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	2208      	movs	r2, #8
 8004884:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f908 	bl	8004a9c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800488c:	6a3b      	ldr	r3, [r7, #32]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	f003 0303 	and.w	r3, r3, #3
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7ff f837 	bl	8003918 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80048aa:	6a3b      	ldr	r3, [r7, #32]
 80048ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d00b      	beq.n	80048cc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0310 	and.w	r3, r3, #16
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d006      	beq.n	80048cc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2210      	movs	r2, #16
 80048c4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 f8f2 	bl	8004ab0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80048cc:	6a3b      	ldr	r3, [r7, #32]
 80048ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80048d6:	69fb      	ldr	r3, [r7, #28]
 80048d8:	f003 0308 	and.w	r3, r3, #8
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d006      	beq.n	80048ee <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2208      	movs	r2, #8
 80048e6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f8eb 	bl	8004ac4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80048ee:	6a3b      	ldr	r3, [r7, #32]
 80048f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d07b      	beq.n	80049f0 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80048f8:	69fb      	ldr	r3, [r7, #28]
 80048fa:	f003 0304 	and.w	r3, r3, #4
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d072      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004908:	2b00      	cmp	r3, #0
 800490a:	d008      	beq.n	800491e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	f043 0301 	orr.w	r3, r3, #1
 800491c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004924:	2b00      	cmp	r3, #0
 8004926:	d008      	beq.n	800493a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800493a:	6a3b      	ldr	r3, [r7, #32]
 800493c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004940:	2b00      	cmp	r3, #0
 8004942:	d008      	beq.n	8004956 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	f043 0304 	orr.w	r3, r3, #4
 8004954:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004956:	6a3b      	ldr	r3, [r7, #32]
 8004958:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800495c:	2b00      	cmp	r3, #0
 800495e:	d043      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004966:	2b00      	cmp	r3, #0
 8004968:	d03e      	beq.n	80049e8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004970:	2b60      	cmp	r3, #96	@ 0x60
 8004972:	d02b      	beq.n	80049cc <HAL_CAN_IRQHandler+0x32a>
 8004974:	2b60      	cmp	r3, #96	@ 0x60
 8004976:	d82e      	bhi.n	80049d6 <HAL_CAN_IRQHandler+0x334>
 8004978:	2b50      	cmp	r3, #80	@ 0x50
 800497a:	d022      	beq.n	80049c2 <HAL_CAN_IRQHandler+0x320>
 800497c:	2b50      	cmp	r3, #80	@ 0x50
 800497e:	d82a      	bhi.n	80049d6 <HAL_CAN_IRQHandler+0x334>
 8004980:	2b40      	cmp	r3, #64	@ 0x40
 8004982:	d019      	beq.n	80049b8 <HAL_CAN_IRQHandler+0x316>
 8004984:	2b40      	cmp	r3, #64	@ 0x40
 8004986:	d826      	bhi.n	80049d6 <HAL_CAN_IRQHandler+0x334>
 8004988:	2b30      	cmp	r3, #48	@ 0x30
 800498a:	d010      	beq.n	80049ae <HAL_CAN_IRQHandler+0x30c>
 800498c:	2b30      	cmp	r3, #48	@ 0x30
 800498e:	d822      	bhi.n	80049d6 <HAL_CAN_IRQHandler+0x334>
 8004990:	2b10      	cmp	r3, #16
 8004992:	d002      	beq.n	800499a <HAL_CAN_IRQHandler+0x2f8>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d005      	beq.n	80049a4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8004998:	e01d      	b.n	80049d6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	f043 0308 	orr.w	r3, r3, #8
 80049a0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049a2:	e019      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80049a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049a6:	f043 0310 	orr.w	r3, r3, #16
 80049aa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049ac:	e014      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80049ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b0:	f043 0320 	orr.w	r3, r3, #32
 80049b4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049b6:	e00f      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049be:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049c0:	e00a      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80049c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049c8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049ca:	e005      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80049cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049d2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80049d4:	e000      	b.n	80049d8 <HAL_CAN_IRQHandler+0x336>
            break;
 80049d6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80049e6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	2204      	movs	r2, #4
 80049ee:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80049f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d008      	beq.n	8004a08 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f868 	bl	8004ad8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004a08:	bf00      	nop
 8004a0a:	3728      	adds	r7, #40	@ 0x28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}

08004a10 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004a18:	bf00      	nop
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b083      	sub	sp, #12
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8004a2c:	bf00      	nop
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004a40:	bf00      	nop
 8004a42:	370c      	adds	r7, #12
 8004a44:	46bd      	mov	sp, r7
 8004a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4a:	4770      	bx	lr

08004a4c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr

08004a60 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b083      	sub	sp, #12
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004a68:	bf00      	nop
 8004a6a:	370c      	adds	r7, #12
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a72:	4770      	bx	lr

08004a74 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004a74:	b480      	push	{r7}
 8004a76:	b083      	sub	sp, #12
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004a7c:	bf00      	nop
 8004a7e:	370c      	adds	r7, #12
 8004a80:	46bd      	mov	sp, r7
 8004a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a86:	4770      	bx	lr

08004a88 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a88:	b480      	push	{r7}
 8004a8a:	b083      	sub	sp, #12
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004a90:	bf00      	nop
 8004a92:	370c      	adds	r7, #12
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b083      	sub	sp, #12
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004ae0:	bf00      	nop
 8004ae2:	370c      	adds	r7, #12
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aea:	4770      	bx	lr

08004aec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b085      	sub	sp, #20
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	f003 0307 	and.w	r3, r3, #7
 8004afa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004afc:	4b0c      	ldr	r3, [pc, #48]	@ (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b14:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b18:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b1e:	4a04      	ldr	r2, [pc, #16]	@ (8004b30 <__NVIC_SetPriorityGrouping+0x44>)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	60d3      	str	r3, [r2, #12]
}
 8004b24:	bf00      	nop
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr
 8004b30:	e000ed00 	.word	0xe000ed00

08004b34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b34:	b480      	push	{r7}
 8004b36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b38:	4b04      	ldr	r3, [pc, #16]	@ (8004b4c <__NVIC_GetPriorityGrouping+0x18>)
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	0a1b      	lsrs	r3, r3, #8
 8004b3e:	f003 0307 	and.w	r3, r3, #7
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr
 8004b4c:	e000ed00 	.word	0xe000ed00

08004b50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	db0b      	blt.n	8004b7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004b62:	79fb      	ldrb	r3, [r7, #7]
 8004b64:	f003 021f 	and.w	r2, r3, #31
 8004b68:	4907      	ldr	r1, [pc, #28]	@ (8004b88 <__NVIC_EnableIRQ+0x38>)
 8004b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b6e:	095b      	lsrs	r3, r3, #5
 8004b70:	2001      	movs	r0, #1
 8004b72:	fa00 f202 	lsl.w	r2, r0, r2
 8004b76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004b7a:	bf00      	nop
 8004b7c:	370c      	adds	r7, #12
 8004b7e:	46bd      	mov	sp, r7
 8004b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000e100 	.word	0xe000e100

08004b8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	b083      	sub	sp, #12
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	4603      	mov	r3, r0
 8004b94:	6039      	str	r1, [r7, #0]
 8004b96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	db0a      	blt.n	8004bb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	b2da      	uxtb	r2, r3
 8004ba4:	490c      	ldr	r1, [pc, #48]	@ (8004bd8 <__NVIC_SetPriority+0x4c>)
 8004ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004baa:	0112      	lsls	r2, r2, #4
 8004bac:	b2d2      	uxtb	r2, r2
 8004bae:	440b      	add	r3, r1
 8004bb0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bb4:	e00a      	b.n	8004bcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	4908      	ldr	r1, [pc, #32]	@ (8004bdc <__NVIC_SetPriority+0x50>)
 8004bbc:	79fb      	ldrb	r3, [r7, #7]
 8004bbe:	f003 030f 	and.w	r3, r3, #15
 8004bc2:	3b04      	subs	r3, #4
 8004bc4:	0112      	lsls	r2, r2, #4
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	440b      	add	r3, r1
 8004bca:	761a      	strb	r2, [r3, #24]
}
 8004bcc:	bf00      	nop
 8004bce:	370c      	adds	r7, #12
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr
 8004bd8:	e000e100 	.word	0xe000e100
 8004bdc:	e000ed00 	.word	0xe000ed00

08004be0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b089      	sub	sp, #36	@ 0x24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004bf4:	69fb      	ldr	r3, [r7, #28]
 8004bf6:	f1c3 0307 	rsb	r3, r3, #7
 8004bfa:	2b04      	cmp	r3, #4
 8004bfc:	bf28      	it	cs
 8004bfe:	2304      	movcs	r3, #4
 8004c00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c02:	69fb      	ldr	r3, [r7, #28]
 8004c04:	3304      	adds	r3, #4
 8004c06:	2b06      	cmp	r3, #6
 8004c08:	d902      	bls.n	8004c10 <NVIC_EncodePriority+0x30>
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	3b03      	subs	r3, #3
 8004c0e:	e000      	b.n	8004c12 <NVIC_EncodePriority+0x32>
 8004c10:	2300      	movs	r3, #0
 8004c12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c14:	f04f 32ff 	mov.w	r2, #4294967295
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004c1e:	43da      	mvns	r2, r3
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	401a      	ands	r2, r3
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c28:	f04f 31ff 	mov.w	r1, #4294967295
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c32:	43d9      	mvns	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c38:	4313      	orrs	r3, r2
         );
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3724      	adds	r7, #36	@ 0x24
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
	...

08004c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	3b01      	subs	r3, #1
 8004c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c58:	d301      	bcc.n	8004c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e00f      	b.n	8004c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8004c88 <SysTick_Config+0x40>)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	3b01      	subs	r3, #1
 8004c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c66:	210f      	movs	r1, #15
 8004c68:	f04f 30ff 	mov.w	r0, #4294967295
 8004c6c:	f7ff ff8e 	bl	8004b8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <SysTick_Config+0x40>)
 8004c72:	2200      	movs	r2, #0
 8004c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c76:	4b04      	ldr	r3, [pc, #16]	@ (8004c88 <SysTick_Config+0x40>)
 8004c78:	2207      	movs	r2, #7
 8004c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3708      	adds	r7, #8
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	e000e010 	.word	0xe000e010

08004c8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b082      	sub	sp, #8
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff ff29 	bl	8004aec <__NVIC_SetPriorityGrouping>
}
 8004c9a:	bf00      	nop
 8004c9c:	3708      	adds	r7, #8
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004ca2:	b580      	push	{r7, lr}
 8004ca4:	b086      	sub	sp, #24
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	4603      	mov	r3, r0
 8004caa:	60b9      	str	r1, [r7, #8]
 8004cac:	607a      	str	r2, [r7, #4]
 8004cae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004cb4:	f7ff ff3e 	bl	8004b34 <__NVIC_GetPriorityGrouping>
 8004cb8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	68b9      	ldr	r1, [r7, #8]
 8004cbe:	6978      	ldr	r0, [r7, #20]
 8004cc0:	f7ff ff8e 	bl	8004be0 <NVIC_EncodePriority>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f7ff ff5d 	bl	8004b8c <__NVIC_SetPriority>
}
 8004cd2:	bf00      	nop
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ce8:	4618      	mov	r0, r3
 8004cea:	f7ff ff31 	bl	8004b50 <__NVIC_EnableIRQ>
}
 8004cee:	bf00      	nop
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}

08004cf6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cf6:	b580      	push	{r7, lr}
 8004cf8:	b082      	sub	sp, #8
 8004cfa:	af00      	add	r7, sp, #0
 8004cfc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ffa2 	bl	8004c48 <SysTick_Config>
 8004d04:	4603      	mov	r3, r0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b087      	sub	sp, #28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1e:	e148      	b.n	8004fb2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	2101      	movs	r1, #1
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	fa01 f303 	lsl.w	r3, r1, r3
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 813a 	beq.w	8004fac <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f003 0303 	and.w	r3, r3, #3
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d005      	beq.n	8004d50 <HAL_GPIO_Init+0x40>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	f003 0303 	and.w	r3, r3, #3
 8004d4c:	2b02      	cmp	r3, #2
 8004d4e:	d130      	bne.n	8004db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	005b      	lsls	r3, r3, #1
 8004d5a:	2203      	movs	r2, #3
 8004d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d60:	43db      	mvns	r3, r3
 8004d62:	693a      	ldr	r2, [r7, #16]
 8004d64:	4013      	ands	r3, r2
 8004d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	68da      	ldr	r2, [r3, #12]
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	005b      	lsls	r3, r3, #1
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d86:	2201      	movs	r2, #1
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43db      	mvns	r3, r3
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4013      	ands	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0201 	and.w	r2, r3, #1
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	fa02 f303 	lsl.w	r3, r2, r3
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	693a      	ldr	r2, [r7, #16]
 8004db0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b03      	cmp	r3, #3
 8004dbc:	d017      	beq.n	8004dee <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	005b      	lsls	r3, r3, #1
 8004dc8:	2203      	movs	r2, #3
 8004dca:	fa02 f303 	lsl.w	r3, r2, r3
 8004dce:	43db      	mvns	r3, r3
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4013      	ands	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	689a      	ldr	r2, [r3, #8]
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	005b      	lsls	r3, r3, #1
 8004dde:	fa02 f303 	lsl.w	r3, r2, r3
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	4313      	orrs	r3, r2
 8004de6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b02      	cmp	r3, #2
 8004df8:	d123      	bne.n	8004e42 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	08da      	lsrs	r2, r3, #3
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	3208      	adds	r2, #8
 8004e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e06:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	f003 0307 	and.w	r3, r3, #7
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	220f      	movs	r2, #15
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	693a      	ldr	r2, [r7, #16]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	691a      	ldr	r2, [r3, #16]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f003 0307 	and.w	r3, r3, #7
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	693a      	ldr	r2, [r7, #16]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	08da      	lsrs	r2, r3, #3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	3208      	adds	r2, #8
 8004e3c:	6939      	ldr	r1, [r7, #16]
 8004e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	005b      	lsls	r3, r3, #1
 8004e4c:	2203      	movs	r2, #3
 8004e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e52:	43db      	mvns	r3, r3
 8004e54:	693a      	ldr	r2, [r7, #16]
 8004e56:	4013      	ands	r3, r2
 8004e58:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004e5a:	683b      	ldr	r3, [r7, #0]
 8004e5c:	685b      	ldr	r3, [r3, #4]
 8004e5e:	f003 0203 	and.w	r2, r3, #3
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	005b      	lsls	r3, r3, #1
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 8094 	beq.w	8004fac <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e84:	4b52      	ldr	r3, [pc, #328]	@ (8004fd0 <HAL_GPIO_Init+0x2c0>)
 8004e86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e88:	4a51      	ldr	r2, [pc, #324]	@ (8004fd0 <HAL_GPIO_Init+0x2c0>)
 8004e8a:	f043 0301 	orr.w	r3, r3, #1
 8004e8e:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e90:	4b4f      	ldr	r3, [pc, #316]	@ (8004fd0 <HAL_GPIO_Init+0x2c0>)
 8004e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	60bb      	str	r3, [r7, #8]
 8004e9a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004e9c:	4a4d      	ldr	r2, [pc, #308]	@ (8004fd4 <HAL_GPIO_Init+0x2c4>)
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	089b      	lsrs	r3, r3, #2
 8004ea2:	3302      	adds	r3, #2
 8004ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	f003 0303 	and.w	r3, r3, #3
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	220f      	movs	r2, #15
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	693a      	ldr	r2, [r7, #16]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ec6:	d00d      	beq.n	8004ee4 <HAL_GPIO_Init+0x1d4>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a43      	ldr	r2, [pc, #268]	@ (8004fd8 <HAL_GPIO_Init+0x2c8>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d007      	beq.n	8004ee0 <HAL_GPIO_Init+0x1d0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a42      	ldr	r2, [pc, #264]	@ (8004fdc <HAL_GPIO_Init+0x2cc>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d101      	bne.n	8004edc <HAL_GPIO_Init+0x1cc>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e004      	b.n	8004ee6 <HAL_GPIO_Init+0x1d6>
 8004edc:	2307      	movs	r3, #7
 8004ede:	e002      	b.n	8004ee6 <HAL_GPIO_Init+0x1d6>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e000      	b.n	8004ee6 <HAL_GPIO_Init+0x1d6>
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	f002 0203 	and.w	r2, r2, #3
 8004eec:	0092      	lsls	r2, r2, #2
 8004eee:	4093      	lsls	r3, r2
 8004ef0:	693a      	ldr	r2, [r7, #16]
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004ef6:	4937      	ldr	r1, [pc, #220]	@ (8004fd4 <HAL_GPIO_Init+0x2c4>)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	089b      	lsrs	r3, r3, #2
 8004efc:	3302      	adds	r3, #2
 8004efe:	693a      	ldr	r2, [r7, #16]
 8004f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f04:	4b36      	ldr	r3, [pc, #216]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	43db      	mvns	r3, r3
 8004f0e:	693a      	ldr	r2, [r7, #16]
 8004f10:	4013      	ands	r3, r2
 8004f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	685b      	ldr	r3, [r3, #4]
 8004f18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f28:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f2a:	693b      	ldr	r3, [r7, #16]
 8004f2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	43db      	mvns	r3, r3
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d003      	beq.n	8004f52 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8004f4a:	693a      	ldr	r2, [r7, #16]
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f52:	4a23      	ldr	r2, [pc, #140]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8004f58:	4b21      	ldr	r3, [pc, #132]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4013      	ands	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d003      	beq.n	8004f7c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004f74:	693a      	ldr	r2, [r7, #16]
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f7c:	4a18      	ldr	r2, [pc, #96]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004f82:	4b17      	ldr	r3, [pc, #92]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	43db      	mvns	r3, r3
 8004f8c:	693a      	ldr	r2, [r7, #16]
 8004f8e:	4013      	ands	r3, r2
 8004f90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	4313      	orrs	r3, r2
 8004fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fa6:	4a0e      	ldr	r2, [pc, #56]	@ (8004fe0 <HAL_GPIO_Init+0x2d0>)
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	3301      	adds	r3, #1
 8004fb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	fa22 f303 	lsr.w	r3, r2, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f47f aeaf 	bne.w	8004d20 <HAL_GPIO_Init+0x10>
  }
}
 8004fc2:	bf00      	nop
 8004fc4:	bf00      	nop
 8004fc6:	371c      	adds	r7, #28
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fce:	4770      	bx	lr
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	40010000 	.word	0x40010000
 8004fd8:	48000400 	.word	0x48000400
 8004fdc:	48000800 	.word	0x48000800
 8004fe0:	40010400 	.word	0x40010400

08004fe4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	460b      	mov	r3, r1
 8004fee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	695b      	ldr	r3, [r3, #20]
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ff6:	887a      	ldrh	r2, [r7, #2]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	041a      	lsls	r2, r3, #16
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	43d9      	mvns	r1, r3
 8005002:	887b      	ldrh	r3, [r7, #2]
 8005004:	400b      	ands	r3, r1
 8005006:	431a      	orrs	r2, r3
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	619a      	str	r2, [r3, #24]
}
 800500c:	bf00      	nop
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8005018:	b480      	push	{r7}
 800501a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800501c:	4b04      	ldr	r3, [pc, #16]	@ (8005030 <HAL_PWREx_GetVoltageRange+0x18>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8005024:	4618      	mov	r0, r3
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr
 800502e:	bf00      	nop
 8005030:	40007000 	.word	0x40007000

08005034 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005034:	b480      	push	{r7}
 8005036:	b085      	sub	sp, #20
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005042:	d130      	bne.n	80050a6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005044:	4b23      	ldr	r3, [pc, #140]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800504c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005050:	d038      	beq.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005052:	4b20      	ldr	r3, [pc, #128]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800505a:	4a1e      	ldr	r2, [pc, #120]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800505c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005060:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005062:	4b1d      	ldr	r3, [pc, #116]	@ (80050d8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	2232      	movs	r2, #50	@ 0x32
 8005068:	fb02 f303 	mul.w	r3, r2, r3
 800506c:	4a1b      	ldr	r2, [pc, #108]	@ (80050dc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800506e:	fba2 2303 	umull	r2, r3, r2, r3
 8005072:	0c9b      	lsrs	r3, r3, #18
 8005074:	3301      	adds	r3, #1
 8005076:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005078:	e002      	b.n	8005080 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	3b01      	subs	r3, #1
 800507e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005080:	4b14      	ldr	r3, [pc, #80]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005088:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800508c:	d102      	bne.n	8005094 <HAL_PWREx_ControlVoltageScaling+0x60>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f2      	bne.n	800507a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005094:	4b0f      	ldr	r3, [pc, #60]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8005096:	695b      	ldr	r3, [r3, #20]
 8005098:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800509c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050a0:	d110      	bne.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80050a2:	2303      	movs	r3, #3
 80050a4:	e00f      	b.n	80050c6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80050a6:	4b0b      	ldr	r3, [pc, #44]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b2:	d007      	beq.n	80050c4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80050b4:	4b07      	ldr	r3, [pc, #28]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80050bc:	4a05      	ldr	r2, [pc, #20]	@ (80050d4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80050be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050c2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	3714      	adds	r7, #20
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
 80050d2:	bf00      	nop
 80050d4:	40007000 	.word	0x40007000
 80050d8:	20000004 	.word	0x20000004
 80050dc:	431bde83 	.word	0x431bde83

080050e0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b088      	sub	sp, #32
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d102      	bne.n	80050f4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	f000 bc02 	b.w	80058f8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050f4:	4b96      	ldr	r3, [pc, #600]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	f003 030c 	and.w	r3, r3, #12
 80050fc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80050fe:	4b94      	ldr	r3, [pc, #592]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	f003 0303 	and.w	r3, r3, #3
 8005106:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0310 	and.w	r3, r3, #16
 8005110:	2b00      	cmp	r3, #0
 8005112:	f000 80e4 	beq.w	80052de <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d007      	beq.n	800512c <HAL_RCC_OscConfig+0x4c>
 800511c:	69bb      	ldr	r3, [r7, #24]
 800511e:	2b0c      	cmp	r3, #12
 8005120:	f040 808b 	bne.w	800523a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2b01      	cmp	r3, #1
 8005128:	f040 8087 	bne.w	800523a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800512c:	4b88      	ldr	r3, [pc, #544]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0302 	and.w	r3, r3, #2
 8005134:	2b00      	cmp	r3, #0
 8005136:	d005      	beq.n	8005144 <HAL_RCC_OscConfig+0x64>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e3d9      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1a      	ldr	r2, [r3, #32]
 8005148:	4b81      	ldr	r3, [pc, #516]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d004      	beq.n	800515e <HAL_RCC_OscConfig+0x7e>
 8005154:	4b7e      	ldr	r3, [pc, #504]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800515c:	e005      	b.n	800516a <HAL_RCC_OscConfig+0x8a>
 800515e:	4b7c      	ldr	r3, [pc, #496]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005160:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005164:	091b      	lsrs	r3, r3, #4
 8005166:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800516a:	4293      	cmp	r3, r2
 800516c:	d223      	bcs.n	80051b6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6a1b      	ldr	r3, [r3, #32]
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fd54 	bl	8005c20 <RCC_SetFlashLatencyFromMSIRange>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e3ba      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005182:	4b73      	ldr	r3, [pc, #460]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a72      	ldr	r2, [pc, #456]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005188:	f043 0308 	orr.w	r3, r3, #8
 800518c:	6013      	str	r3, [r2, #0]
 800518e:	4b70      	ldr	r3, [pc, #448]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	496d      	ldr	r1, [pc, #436]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800519c:	4313      	orrs	r3, r2
 800519e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051a0:	4b6b      	ldr	r3, [pc, #428]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	69db      	ldr	r3, [r3, #28]
 80051ac:	021b      	lsls	r3, r3, #8
 80051ae:	4968      	ldr	r1, [pc, #416]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051b0:	4313      	orrs	r3, r2
 80051b2:	604b      	str	r3, [r1, #4]
 80051b4:	e025      	b.n	8005202 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80051b6:	4b66      	ldr	r3, [pc, #408]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a65      	ldr	r2, [pc, #404]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051bc:	f043 0308 	orr.w	r3, r3, #8
 80051c0:	6013      	str	r3, [r2, #0]
 80051c2:	4b63      	ldr	r3, [pc, #396]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6a1b      	ldr	r3, [r3, #32]
 80051ce:	4960      	ldr	r1, [pc, #384]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051d0:	4313      	orrs	r3, r2
 80051d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80051d4:	4b5e      	ldr	r3, [pc, #376]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	495b      	ldr	r1, [pc, #364]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d109      	bne.n	8005202 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a1b      	ldr	r3, [r3, #32]
 80051f2:	4618      	mov	r0, r3
 80051f4:	f000 fd14 	bl	8005c20 <RCC_SetFlashLatencyFromMSIRange>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e37a      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005202:	f000 fc81 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005206:	4602      	mov	r2, r0
 8005208:	4b51      	ldr	r3, [pc, #324]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	091b      	lsrs	r3, r3, #4
 800520e:	f003 030f 	and.w	r3, r3, #15
 8005212:	4950      	ldr	r1, [pc, #320]	@ (8005354 <HAL_RCC_OscConfig+0x274>)
 8005214:	5ccb      	ldrb	r3, [r1, r3]
 8005216:	f003 031f 	and.w	r3, r3, #31
 800521a:	fa22 f303 	lsr.w	r3, r2, r3
 800521e:	4a4e      	ldr	r2, [pc, #312]	@ (8005358 <HAL_RCC_OscConfig+0x278>)
 8005220:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005222:	4b4e      	ldr	r3, [pc, #312]	@ (800535c <HAL_RCC_OscConfig+0x27c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	4618      	mov	r0, r3
 8005228:	f7fe fd9a 	bl	8003d60 <HAL_InitTick>
 800522c:	4603      	mov	r3, r0
 800522e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005230:	7bfb      	ldrb	r3, [r7, #15]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d052      	beq.n	80052dc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8005236:	7bfb      	ldrb	r3, [r7, #15]
 8005238:	e35e      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	699b      	ldr	r3, [r3, #24]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d032      	beq.n	80052a8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005242:	4b43      	ldr	r3, [pc, #268]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a42      	ldr	r2, [pc, #264]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005248:	f043 0301 	orr.w	r3, r3, #1
 800524c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800524e:	f7fe fdd7 	bl	8003e00 <HAL_GetTick>
 8005252:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005254:	e008      	b.n	8005268 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005256:	f7fe fdd3 	bl	8003e00 <HAL_GetTick>
 800525a:	4602      	mov	r2, r0
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	1ad3      	subs	r3, r2, r3
 8005260:	2b02      	cmp	r3, #2
 8005262:	d901      	bls.n	8005268 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e347      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005268:	4b39      	ldr	r3, [pc, #228]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 0302 	and.w	r3, r3, #2
 8005270:	2b00      	cmp	r3, #0
 8005272:	d0f0      	beq.n	8005256 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005274:	4b36      	ldr	r3, [pc, #216]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a35      	ldr	r2, [pc, #212]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800527a:	f043 0308 	orr.w	r3, r3, #8
 800527e:	6013      	str	r3, [r2, #0]
 8005280:	4b33      	ldr	r3, [pc, #204]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6a1b      	ldr	r3, [r3, #32]
 800528c:	4930      	ldr	r1, [pc, #192]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800528e:	4313      	orrs	r3, r2
 8005290:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005292:	4b2f      	ldr	r3, [pc, #188]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	492b      	ldr	r1, [pc, #172]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	604b      	str	r3, [r1, #4]
 80052a6:	e01a      	b.n	80052de <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80052a8:	4b29      	ldr	r3, [pc, #164]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a28      	ldr	r2, [pc, #160]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80052ae:	f023 0301 	bic.w	r3, r3, #1
 80052b2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80052b4:	f7fe fda4 	bl	8003e00 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80052bc:	f7fe fda0 	bl	8003e00 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e314      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80052ce:	4b20      	ldr	r3, [pc, #128]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1f0      	bne.n	80052bc <HAL_RCC_OscConfig+0x1dc>
 80052da:	e000      	b.n	80052de <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80052dc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d073      	beq.n	80053d2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80052ea:	69bb      	ldr	r3, [r7, #24]
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_OscConfig+0x21c>
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d10e      	bne.n	8005314 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	2b03      	cmp	r3, #3
 80052fa:	d10b      	bne.n	8005314 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052fc:	4b14      	ldr	r3, [pc, #80]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d063      	beq.n	80053d0 <HAL_RCC_OscConfig+0x2f0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d15f      	bne.n	80053d0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e2f1      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531c:	d106      	bne.n	800532c <HAL_RCC_OscConfig+0x24c>
 800531e:	4b0c      	ldr	r3, [pc, #48]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a0b      	ldr	r2, [pc, #44]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005324:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005328:	6013      	str	r3, [r2, #0]
 800532a:	e025      	b.n	8005378 <HAL_RCC_OscConfig+0x298>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005334:	d114      	bne.n	8005360 <HAL_RCC_OscConfig+0x280>
 8005336:	4b06      	ldr	r3, [pc, #24]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a05      	ldr	r2, [pc, #20]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 800533c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005340:	6013      	str	r3, [r2, #0]
 8005342:	4b03      	ldr	r3, [pc, #12]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a02      	ldr	r2, [pc, #8]	@ (8005350 <HAL_RCC_OscConfig+0x270>)
 8005348:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	e013      	b.n	8005378 <HAL_RCC_OscConfig+0x298>
 8005350:	40021000 	.word	0x40021000
 8005354:	08008198 	.word	0x08008198
 8005358:	20000004 	.word	0x20000004
 800535c:	20000008 	.word	0x20000008
 8005360:	4ba0      	ldr	r3, [pc, #640]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4a9f      	ldr	r2, [pc, #636]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005366:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800536a:	6013      	str	r3, [r2, #0]
 800536c:	4b9d      	ldr	r3, [pc, #628]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a9c      	ldr	r2, [pc, #624]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005372:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d013      	beq.n	80053a8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005380:	f7fe fd3e 	bl	8003e00 <HAL_GetTick>
 8005384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	e008      	b.n	800539a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005388:	f7fe fd3a 	bl	8003e00 <HAL_GetTick>
 800538c:	4602      	mov	r2, r0
 800538e:	693b      	ldr	r3, [r7, #16]
 8005390:	1ad3      	subs	r3, r2, r3
 8005392:	2b64      	cmp	r3, #100	@ 0x64
 8005394:	d901      	bls.n	800539a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e2ae      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800539a:	4b92      	ldr	r3, [pc, #584]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0f0      	beq.n	8005388 <HAL_RCC_OscConfig+0x2a8>
 80053a6:	e014      	b.n	80053d2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a8:	f7fe fd2a 	bl	8003e00 <HAL_GetTick>
 80053ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053ae:	e008      	b.n	80053c2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053b0:	f7fe fd26 	bl	8003e00 <HAL_GetTick>
 80053b4:	4602      	mov	r2, r0
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	2b64      	cmp	r3, #100	@ 0x64
 80053bc:	d901      	bls.n	80053c2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80053be:	2303      	movs	r3, #3
 80053c0:	e29a      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053c2:	4b88      	ldr	r3, [pc, #544]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d1f0      	bne.n	80053b0 <HAL_RCC_OscConfig+0x2d0>
 80053ce:	e000      	b.n	80053d2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d060      	beq.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	2b04      	cmp	r3, #4
 80053e2:	d005      	beq.n	80053f0 <HAL_RCC_OscConfig+0x310>
 80053e4:	69bb      	ldr	r3, [r7, #24]
 80053e6:	2b0c      	cmp	r3, #12
 80053e8:	d119      	bne.n	800541e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d116      	bne.n	800541e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80053f0:	4b7c      	ldr	r3, [pc, #496]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d005      	beq.n	8005408 <HAL_RCC_OscConfig+0x328>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	68db      	ldr	r3, [r3, #12]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d101      	bne.n	8005408 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8005404:	2301      	movs	r3, #1
 8005406:	e277      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005408:	4b76      	ldr	r3, [pc, #472]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	4973      	ldr	r1, [pc, #460]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005418:	4313      	orrs	r3, r2
 800541a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800541c:	e040      	b.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d023      	beq.n	800546e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005426:	4b6f      	ldr	r3, [pc, #444]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6e      	ldr	r2, [pc, #440]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fe fce5 	bl	8003e00 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543a:	f7fe fce1 	bl	8003e00 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e255      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800544c:	4b65      	ldr	r3, [pc, #404]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d0f0      	beq.n	800543a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005458:	4b62      	ldr	r3, [pc, #392]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	691b      	ldr	r3, [r3, #16]
 8005464:	061b      	lsls	r3, r3, #24
 8005466:	495f      	ldr	r1, [pc, #380]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005468:	4313      	orrs	r3, r2
 800546a:	604b      	str	r3, [r1, #4]
 800546c:	e018      	b.n	80054a0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800546e:	4b5d      	ldr	r3, [pc, #372]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a5c      	ldr	r2, [pc, #368]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005474:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005478:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800547a:	f7fe fcc1 	bl	8003e00 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005482:	f7fe fcbd 	bl	8003e00 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e231      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005494:	4b53      	ldr	r3, [pc, #332]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f003 0308 	and.w	r3, r3, #8
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d03c      	beq.n	8005526 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d01c      	beq.n	80054ee <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054b4:	4b4b      	ldr	r3, [pc, #300]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80054b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054ba:	4a4a      	ldr	r2, [pc, #296]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80054bc:	f043 0301 	orr.w	r3, r3, #1
 80054c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054c4:	f7fe fc9c 	bl	8003e00 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ca:	e008      	b.n	80054de <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054cc:	f7fe fc98 	bl	8003e00 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d901      	bls.n	80054de <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80054da:	2303      	movs	r3, #3
 80054dc:	e20c      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054de:	4b41      	ldr	r3, [pc, #260]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80054e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d0ef      	beq.n	80054cc <HAL_RCC_OscConfig+0x3ec>
 80054ec:	e01b      	b.n	8005526 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054ee:	4b3d      	ldr	r3, [pc, #244]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80054f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054f4:	4a3b      	ldr	r2, [pc, #236]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80054f6:	f023 0301 	bic.w	r3, r3, #1
 80054fa:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fe fc7f 	bl	8003e00 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005504:	e008      	b.n	8005518 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005506:	f7fe fc7b 	bl	8003e00 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	2b02      	cmp	r3, #2
 8005512:	d901      	bls.n	8005518 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e1ef      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005518:	4b32      	ldr	r3, [pc, #200]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800551a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d1ef      	bne.n	8005506 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 0304 	and.w	r3, r3, #4
 800552e:	2b00      	cmp	r3, #0
 8005530:	f000 80a6 	beq.w	8005680 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005534:	2300      	movs	r3, #0
 8005536:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005538:	4b2a      	ldr	r3, [pc, #168]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800553a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800553c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10d      	bne.n	8005560 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005544:	4b27      	ldr	r3, [pc, #156]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005546:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005548:	4a26      	ldr	r2, [pc, #152]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 800554a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800554e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005550:	4b24      	ldr	r3, [pc, #144]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 8005552:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005554:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005558:	60bb      	str	r3, [r7, #8]
 800555a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800555c:	2301      	movs	r3, #1
 800555e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005560:	4b21      	ldr	r3, [pc, #132]	@ (80055e8 <HAL_RCC_OscConfig+0x508>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005568:	2b00      	cmp	r3, #0
 800556a:	d118      	bne.n	800559e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800556c:	4b1e      	ldr	r3, [pc, #120]	@ (80055e8 <HAL_RCC_OscConfig+0x508>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a1d      	ldr	r2, [pc, #116]	@ (80055e8 <HAL_RCC_OscConfig+0x508>)
 8005572:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005576:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005578:	f7fe fc42 	bl	8003e00 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005580:	f7fe fc3e 	bl	8003e00 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e1b2      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005592:	4b15      	ldr	r3, [pc, #84]	@ (80055e8 <HAL_RCC_OscConfig+0x508>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	2b01      	cmp	r3, #1
 80055a4:	d108      	bne.n	80055b8 <HAL_RCC_OscConfig+0x4d8>
 80055a6:	4b0f      	ldr	r3, [pc, #60]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ac:	4a0d      	ldr	r2, [pc, #52]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055ae:	f043 0301 	orr.w	r3, r3, #1
 80055b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b6:	e029      	b.n	800560c <HAL_RCC_OscConfig+0x52c>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b05      	cmp	r3, #5
 80055be:	d115      	bne.n	80055ec <HAL_RCC_OscConfig+0x50c>
 80055c0:	4b08      	ldr	r3, [pc, #32]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055c6:	4a07      	ldr	r2, [pc, #28]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055c8:	f043 0304 	orr.w	r3, r3, #4
 80055cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055d0:	4b04      	ldr	r3, [pc, #16]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a03      	ldr	r2, [pc, #12]	@ (80055e4 <HAL_RCC_OscConfig+0x504>)
 80055d8:	f043 0301 	orr.w	r3, r3, #1
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e0:	e014      	b.n	800560c <HAL_RCC_OscConfig+0x52c>
 80055e2:	bf00      	nop
 80055e4:	40021000 	.word	0x40021000
 80055e8:	40007000 	.word	0x40007000
 80055ec:	4b9a      	ldr	r3, [pc, #616]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80055ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f2:	4a99      	ldr	r2, [pc, #612]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055fc:	4b96      	ldr	r3, [pc, #600]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80055fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005602:	4a95      	ldr	r2, [pc, #596]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005604:	f023 0304 	bic.w	r3, r3, #4
 8005608:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d016      	beq.n	8005642 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005614:	f7fe fbf4 	bl	8003e00 <HAL_GetTick>
 8005618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800561a:	e00a      	b.n	8005632 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800561c:	f7fe fbf0 	bl	8003e00 <HAL_GetTick>
 8005620:	4602      	mov	r2, r0
 8005622:	693b      	ldr	r3, [r7, #16]
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800562a:	4293      	cmp	r3, r2
 800562c:	d901      	bls.n	8005632 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800562e:	2303      	movs	r3, #3
 8005630:	e162      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005632:	4b89      	ldr	r3, [pc, #548]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005634:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005638:	f003 0302 	and.w	r3, r3, #2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d0ed      	beq.n	800561c <HAL_RCC_OscConfig+0x53c>
 8005640:	e015      	b.n	800566e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005642:	f7fe fbdd 	bl	8003e00 <HAL_GetTick>
 8005646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005648:	e00a      	b.n	8005660 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564a:	f7fe fbd9 	bl	8003e00 <HAL_GetTick>
 800564e:	4602      	mov	r2, r0
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	1ad3      	subs	r3, r2, r3
 8005654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005658:	4293      	cmp	r3, r2
 800565a:	d901      	bls.n	8005660 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e14b      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005660:	4b7d      	ldr	r3, [pc, #500]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005662:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d1ed      	bne.n	800564a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800566e:	7ffb      	ldrb	r3, [r7, #31]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d105      	bne.n	8005680 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005674:	4b78      	ldr	r3, [pc, #480]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005676:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005678:	4a77      	ldr	r2, [pc, #476]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 800567a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800567e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b00      	cmp	r3, #0
 800568a:	d03c      	beq.n	8005706 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	2b00      	cmp	r3, #0
 8005692:	d01c      	beq.n	80056ce <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005694:	4b70      	ldr	r3, [pc, #448]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005696:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800569a:	4a6f      	ldr	r2, [pc, #444]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 800569c:	f043 0301 	orr.w	r3, r3, #1
 80056a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fe fbac 	bl	8003e00 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056ac:	f7fe fba8 	bl	8003e00 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e11c      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056be:	4b66      	ldr	r3, [pc, #408]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80056c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056c4:	f003 0302 	and.w	r3, r3, #2
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d0ef      	beq.n	80056ac <HAL_RCC_OscConfig+0x5cc>
 80056cc:	e01b      	b.n	8005706 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ce:	4b62      	ldr	r3, [pc, #392]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80056d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056d4:	4a60      	ldr	r2, [pc, #384]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80056d6:	f023 0301 	bic.w	r3, r3, #1
 80056da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056de:	f7fe fb8f 	bl	8003e00 <HAL_GetTick>
 80056e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056e4:	e008      	b.n	80056f8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056e6:	f7fe fb8b 	bl	8003e00 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d901      	bls.n	80056f8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e0ff      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056f8:	4b57      	ldr	r3, [pc, #348]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80056fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056fe:	f003 0302 	and.w	r3, r3, #2
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1ef      	bne.n	80056e6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 80f3 	beq.w	80058f6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	2b02      	cmp	r3, #2
 8005716:	f040 80c9 	bne.w	80058ac <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800571a:	4b4f      	ldr	r3, [pc, #316]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f003 0203 	and.w	r2, r3, #3
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800572a:	429a      	cmp	r2, r3
 800572c:	d12c      	bne.n	8005788 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005738:	3b01      	subs	r3, #1
 800573a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800573c:	429a      	cmp	r2, r3
 800573e:	d123      	bne.n	8005788 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005740:	697b      	ldr	r3, [r7, #20]
 8005742:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800574a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800574c:	429a      	cmp	r2, r3
 800574e:	d11b      	bne.n	8005788 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800575c:	429a      	cmp	r2, r3
 800575e:	d113      	bne.n	8005788 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	3b01      	subs	r3, #1
 800576e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005770:	429a      	cmp	r2, r3
 8005772:	d109      	bne.n	8005788 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577e:	085b      	lsrs	r3, r3, #1
 8005780:	3b01      	subs	r3, #1
 8005782:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005784:	429a      	cmp	r2, r3
 8005786:	d06b      	beq.n	8005860 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005788:	69bb      	ldr	r3, [r7, #24]
 800578a:	2b0c      	cmp	r3, #12
 800578c:	d062      	beq.n	8005854 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800578e:	4b32      	ldr	r3, [pc, #200]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d001      	beq.n	800579e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e0ac      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800579e:	4b2e      	ldr	r3, [pc, #184]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a2d      	ldr	r2, [pc, #180]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80057a4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057a8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80057aa:	f7fe fb29 	bl	8003e00 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fe fb25 	bl	8003e00 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e099      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c4:	4b24      	ldr	r3, [pc, #144]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80057d0:	4b21      	ldr	r3, [pc, #132]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	4b21      	ldr	r3, [pc, #132]	@ (800585c <HAL_RCC_OscConfig+0x77c>)
 80057d6:	4013      	ands	r3, r2
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057e0:	3a01      	subs	r2, #1
 80057e2:	0112      	lsls	r2, r2, #4
 80057e4:	4311      	orrs	r1, r2
 80057e6:	687a      	ldr	r2, [r7, #4]
 80057e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057ea:	0212      	lsls	r2, r2, #8
 80057ec:	4311      	orrs	r1, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80057f2:	0852      	lsrs	r2, r2, #1
 80057f4:	3a01      	subs	r2, #1
 80057f6:	0552      	lsls	r2, r2, #21
 80057f8:	4311      	orrs	r1, r2
 80057fa:	687a      	ldr	r2, [r7, #4]
 80057fc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80057fe:	0852      	lsrs	r2, r2, #1
 8005800:	3a01      	subs	r2, #1
 8005802:	0652      	lsls	r2, r2, #25
 8005804:	4311      	orrs	r1, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800580a:	06d2      	lsls	r2, r2, #27
 800580c:	430a      	orrs	r2, r1
 800580e:	4912      	ldr	r1, [pc, #72]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005810:	4313      	orrs	r3, r2
 8005812:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a0f      	ldr	r2, [pc, #60]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 800581a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800581e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005820:	4b0d      	ldr	r3, [pc, #52]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	4a0c      	ldr	r2, [pc, #48]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800582a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800582c:	f7fe fae8 	bl	8003e00 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005834:	f7fe fae4 	bl	8003e00 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e058      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005846:	4b04      	ldr	r3, [pc, #16]	@ (8005858 <HAL_RCC_OscConfig+0x778>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d0f0      	beq.n	8005834 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005852:	e050      	b.n	80058f6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005854:	2301      	movs	r3, #1
 8005856:	e04f      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
 8005858:	40021000 	.word	0x40021000
 800585c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005860:	4b27      	ldr	r3, [pc, #156]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d144      	bne.n	80058f6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800586c:	4b24      	ldr	r3, [pc, #144]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a23      	ldr	r2, [pc, #140]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 8005872:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005876:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005878:	4b21      	ldr	r3, [pc, #132]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 800587a:	68db      	ldr	r3, [r3, #12]
 800587c:	4a20      	ldr	r2, [pc, #128]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 800587e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005882:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005884:	f7fe fabc 	bl	8003e00 <HAL_GetTick>
 8005888:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800588a:	e008      	b.n	800589e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800588c:	f7fe fab8 	bl	8003e00 <HAL_GetTick>
 8005890:	4602      	mov	r2, r0
 8005892:	693b      	ldr	r3, [r7, #16]
 8005894:	1ad3      	subs	r3, r2, r3
 8005896:	2b02      	cmp	r3, #2
 8005898:	d901      	bls.n	800589e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800589a:	2303      	movs	r3, #3
 800589c:	e02c      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800589e:	4b18      	ldr	r3, [pc, #96]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d0f0      	beq.n	800588c <HAL_RCC_OscConfig+0x7ac>
 80058aa:	e024      	b.n	80058f6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	2b0c      	cmp	r3, #12
 80058b0:	d01f      	beq.n	80058f2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b2:	4b13      	ldr	r3, [pc, #76]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a12      	ldr	r2, [pc, #72]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058b8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058be:	f7fe fa9f 	bl	8003e00 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c6:	f7fe fa9b 	bl	8003e00 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e00f      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80058d8:	4b09      	ldr	r3, [pc, #36]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1f0      	bne.n	80058c6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80058e4:	4b06      	ldr	r3, [pc, #24]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058e6:	68da      	ldr	r2, [r3, #12]
 80058e8:	4905      	ldr	r1, [pc, #20]	@ (8005900 <HAL_RCC_OscConfig+0x820>)
 80058ea:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <HAL_RCC_OscConfig+0x824>)
 80058ec:	4013      	ands	r3, r2
 80058ee:	60cb      	str	r3, [r1, #12]
 80058f0:	e001      	b.n	80058f6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e000      	b.n	80058f8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3720      	adds	r7, #32
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40021000 	.word	0x40021000
 8005904:	feeefffc 	.word	0xfeeefffc

08005908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005908:	b580      	push	{r7, lr}
 800590a:	b084      	sub	sp, #16
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
 8005910:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d101      	bne.n	800591c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0e7      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800591c:	4b75      	ldr	r3, [pc, #468]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	683a      	ldr	r2, [r7, #0]
 8005926:	429a      	cmp	r2, r3
 8005928:	d910      	bls.n	800594c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800592a:	4b72      	ldr	r3, [pc, #456]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f023 0207 	bic.w	r2, r3, #7
 8005932:	4970      	ldr	r1, [pc, #448]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	4313      	orrs	r3, r2
 8005938:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800593a:	4b6e      	ldr	r3, [pc, #440]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0307 	and.w	r3, r3, #7
 8005942:	683a      	ldr	r2, [r7, #0]
 8005944:	429a      	cmp	r2, r3
 8005946:	d001      	beq.n	800594c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0cf      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 0302 	and.w	r3, r3, #2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d010      	beq.n	800597a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	4b66      	ldr	r3, [pc, #408]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005964:	429a      	cmp	r2, r3
 8005966:	d908      	bls.n	800597a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005968:	4b63      	ldr	r3, [pc, #396]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	4960      	ldr	r1, [pc, #384]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005976:	4313      	orrs	r3, r2
 8005978:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d04c      	beq.n	8005a20 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800598e:	4b5a      	ldr	r3, [pc, #360]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005996:	2b00      	cmp	r3, #0
 8005998:	d121      	bne.n	80059de <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e0a6      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d107      	bne.n	80059b6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a6:	4b54      	ldr	r3, [pc, #336]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d115      	bne.n	80059de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e09a      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685b      	ldr	r3, [r3, #4]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d107      	bne.n	80059ce <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80059be:	4b4e      	ldr	r3, [pc, #312]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d109      	bne.n	80059de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059ca:	2301      	movs	r3, #1
 80059cc:	e08e      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059ce:	4b4a      	ldr	r3, [pc, #296]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e086      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059de:	4b46      	ldr	r3, [pc, #280]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f023 0203 	bic.w	r2, r3, #3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	685b      	ldr	r3, [r3, #4]
 80059ea:	4943      	ldr	r1, [pc, #268]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f0:	f7fe fa06 	bl	8003e00 <HAL_GetTick>
 80059f4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059f6:	e00a      	b.n	8005a0e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059f8:	f7fe fa02 	bl	8003e00 <HAL_GetTick>
 80059fc:	4602      	mov	r2, r0
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	1ad3      	subs	r3, r2, r3
 8005a02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d901      	bls.n	8005a0e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e06e      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a0e:	4b3a      	ldr	r3, [pc, #232]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	f003 020c 	and.w	r2, r3, #12
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	685b      	ldr	r3, [r3, #4]
 8005a1a:	009b      	lsls	r3, r3, #2
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d1eb      	bne.n	80059f8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0302 	and.w	r3, r3, #2
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d010      	beq.n	8005a4e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689a      	ldr	r2, [r3, #8]
 8005a30:	4b31      	ldr	r3, [pc, #196]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d208      	bcs.n	8005a4e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a3c:	4b2e      	ldr	r3, [pc, #184]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	492b      	ldr	r1, [pc, #172]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a4a:	4313      	orrs	r3, r2
 8005a4c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a4e:	4b29      	ldr	r3, [pc, #164]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	f003 0307 	and.w	r3, r3, #7
 8005a56:	683a      	ldr	r2, [r7, #0]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d210      	bcs.n	8005a7e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a5c:	4b25      	ldr	r3, [pc, #148]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f023 0207 	bic.w	r2, r3, #7
 8005a64:	4923      	ldr	r1, [pc, #140]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a6c:	4b21      	ldr	r3, [pc, #132]	@ (8005af4 <HAL_RCC_ClockConfig+0x1ec>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d001      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e036      	b.n	8005aec <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d008      	beq.n	8005a9c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a8a:	4b1b      	ldr	r3, [pc, #108]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	4918      	ldr	r1, [pc, #96]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0308 	and.w	r3, r3, #8
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005aa8:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	00db      	lsls	r3, r3, #3
 8005ab6:	4910      	ldr	r1, [pc, #64]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005abc:	f000 f824 	bl	8005b08 <HAL_RCC_GetSysClockFreq>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <HAL_RCC_ClockConfig+0x1f0>)
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	091b      	lsrs	r3, r3, #4
 8005ac8:	f003 030f 	and.w	r3, r3, #15
 8005acc:	490b      	ldr	r1, [pc, #44]	@ (8005afc <HAL_RCC_ClockConfig+0x1f4>)
 8005ace:	5ccb      	ldrb	r3, [r1, r3]
 8005ad0:	f003 031f 	and.w	r3, r3, #31
 8005ad4:	fa22 f303 	lsr.w	r3, r2, r3
 8005ad8:	4a09      	ldr	r2, [pc, #36]	@ (8005b00 <HAL_RCC_ClockConfig+0x1f8>)
 8005ada:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005adc:	4b09      	ldr	r3, [pc, #36]	@ (8005b04 <HAL_RCC_ClockConfig+0x1fc>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f7fe f93d 	bl	8003d60 <HAL_InitTick>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	72fb      	strb	r3, [r7, #11]

  return status;
 8005aea:	7afb      	ldrb	r3, [r7, #11]
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3710      	adds	r7, #16
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	40022000 	.word	0x40022000
 8005af8:	40021000 	.word	0x40021000
 8005afc:	08008198 	.word	0x08008198
 8005b00:	20000004 	.word	0x20000004
 8005b04:	20000008 	.word	0x20000008

08005b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b089      	sub	sp, #36	@ 0x24
 8005b0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b0e:	2300      	movs	r3, #0
 8005b10:	61fb      	str	r3, [r7, #28]
 8005b12:	2300      	movs	r3, #0
 8005b14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b16:	4b3e      	ldr	r3, [pc, #248]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b20:	4b3b      	ldr	r3, [pc, #236]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f003 0303 	and.w	r3, r3, #3
 8005b28:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d005      	beq.n	8005b3c <HAL_RCC_GetSysClockFreq+0x34>
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	2b0c      	cmp	r3, #12
 8005b34:	d121      	bne.n	8005b7a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d11e      	bne.n	8005b7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005b3c:	4b34      	ldr	r3, [pc, #208]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0308 	and.w	r3, r3, #8
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d107      	bne.n	8005b58 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005b48:	4b31      	ldr	r3, [pc, #196]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b4e:	0a1b      	lsrs	r3, r3, #8
 8005b50:	f003 030f 	and.w	r3, r3, #15
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	e005      	b.n	8005b64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005b58:	4b2d      	ldr	r3, [pc, #180]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	091b      	lsrs	r3, r3, #4
 8005b5e:	f003 030f 	and.w	r3, r3, #15
 8005b62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005b64:	4a2b      	ldr	r2, [pc, #172]	@ (8005c14 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005b66:	69fb      	ldr	r3, [r7, #28]
 8005b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005b6c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d10d      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005b74:	69fb      	ldr	r3, [r7, #28]
 8005b76:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005b78:	e00a      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b04      	cmp	r3, #4
 8005b7e:	d102      	bne.n	8005b86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b80:	4b25      	ldr	r3, [pc, #148]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005b82:	61bb      	str	r3, [r7, #24]
 8005b84:	e004      	b.n	8005b90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d101      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b8c:	4b23      	ldr	r3, [pc, #140]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005b8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d134      	bne.n	8005c00 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b1e      	ldr	r3, [pc, #120]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b02      	cmp	r3, #2
 8005ba4:	d003      	beq.n	8005bae <HAL_RCC_GetSysClockFreq+0xa6>
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d003      	beq.n	8005bb4 <HAL_RCC_GetSysClockFreq+0xac>
 8005bac:	e005      	b.n	8005bba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005bae:	4b1a      	ldr	r3, [pc, #104]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0x110>)
 8005bb0:	617b      	str	r3, [r7, #20]
      break;
 8005bb2:	e005      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005bb4:	4b19      	ldr	r3, [pc, #100]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0x114>)
 8005bb6:	617b      	str	r3, [r7, #20]
      break;
 8005bb8:	e002      	b.n	8005bc0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	617b      	str	r3, [r7, #20]
      break;
 8005bbe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005bc0:	4b13      	ldr	r3, [pc, #76]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bc2:	68db      	ldr	r3, [r3, #12]
 8005bc4:	091b      	lsrs	r3, r3, #4
 8005bc6:	f003 0307 	and.w	r3, r3, #7
 8005bca:	3301      	adds	r3, #1
 8005bcc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005bce:	4b10      	ldr	r3, [pc, #64]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	0a1b      	lsrs	r3, r3, #8
 8005bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	fb03 f202 	mul.w	r2, r3, r2
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be6:	4b0a      	ldr	r3, [pc, #40]	@ (8005c10 <HAL_RCC_GetSysClockFreq+0x108>)
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	0e5b      	lsrs	r3, r3, #25
 8005bec:	f003 0303 	and.w	r3, r3, #3
 8005bf0:	3301      	adds	r3, #1
 8005bf2:	005b      	lsls	r3, r3, #1
 8005bf4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005bf6:	697a      	ldr	r2, [r7, #20]
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bfe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005c00:	69bb      	ldr	r3, [r7, #24]
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3724      	adds	r7, #36	@ 0x24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40021000 	.word	0x40021000
 8005c14:	080081a8 	.word	0x080081a8
 8005c18:	00f42400 	.word	0x00f42400
 8005c1c:	007a1200 	.word	0x007a1200

08005c20 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005c28:	2300      	movs	r3, #0
 8005c2a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005c38:	f7ff f9ee 	bl	8005018 <HAL_PWREx_GetVoltageRange>
 8005c3c:	6178      	str	r0, [r7, #20]
 8005c3e:	e014      	b.n	8005c6a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c40:	4b25      	ldr	r3, [pc, #148]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c44:	4a24      	ldr	r2, [pc, #144]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c4a:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c4c:	4b22      	ldr	r3, [pc, #136]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005c54:	60fb      	str	r3, [r7, #12]
 8005c56:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c58:	f7ff f9de 	bl	8005018 <HAL_PWREx_GetVoltageRange>
 8005c5c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c62:	4a1d      	ldr	r2, [pc, #116]	@ (8005cd8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c64:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c68:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c70:	d10b      	bne.n	8005c8a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2b80      	cmp	r3, #128	@ 0x80
 8005c76:	d919      	bls.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c7c:	d902      	bls.n	8005c84 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c7e:	2302      	movs	r3, #2
 8005c80:	613b      	str	r3, [r7, #16]
 8005c82:	e013      	b.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c84:	2301      	movs	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	e010      	b.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2b80      	cmp	r3, #128	@ 0x80
 8005c8e:	d902      	bls.n	8005c96 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c90:	2303      	movs	r3, #3
 8005c92:	613b      	str	r3, [r7, #16]
 8005c94:	e00a      	b.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b80      	cmp	r3, #128	@ 0x80
 8005c9a:	d102      	bne.n	8005ca2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c9c:	2302      	movs	r3, #2
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	e004      	b.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2b70      	cmp	r3, #112	@ 0x70
 8005ca6:	d101      	bne.n	8005cac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005ca8:	2301      	movs	r3, #1
 8005caa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005cac:	4b0b      	ldr	r3, [pc, #44]	@ (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f023 0207 	bic.w	r2, r3, #7
 8005cb4:	4909      	ldr	r1, [pc, #36]	@ (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005cbc:	4b07      	ldr	r3, [pc, #28]	@ (8005cdc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	693a      	ldr	r2, [r7, #16]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d001      	beq.n	8005cce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e000      	b.n	8005cd0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40021000 	.word	0x40021000
 8005cdc:	40022000 	.word	0x40022000

08005ce0 <__assert_func>:
 8005ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005ce2:	4614      	mov	r4, r2
 8005ce4:	461a      	mov	r2, r3
 8005ce6:	4b09      	ldr	r3, [pc, #36]	@ (8005d0c <__assert_func+0x2c>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4605      	mov	r5, r0
 8005cec:	68d8      	ldr	r0, [r3, #12]
 8005cee:	b954      	cbnz	r4, 8005d06 <__assert_func+0x26>
 8005cf0:	4b07      	ldr	r3, [pc, #28]	@ (8005d10 <__assert_func+0x30>)
 8005cf2:	461c      	mov	r4, r3
 8005cf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005cf8:	9100      	str	r1, [sp, #0]
 8005cfa:	462b      	mov	r3, r5
 8005cfc:	4905      	ldr	r1, [pc, #20]	@ (8005d14 <__assert_func+0x34>)
 8005cfe:	f000 f96f 	bl	8005fe0 <fiprintf>
 8005d02:	f000 fa94 	bl	800622e <abort>
 8005d06:	4b04      	ldr	r3, [pc, #16]	@ (8005d18 <__assert_func+0x38>)
 8005d08:	e7f4      	b.n	8005cf4 <__assert_func+0x14>
 8005d0a:	bf00      	nop
 8005d0c:	2000001c 	.word	0x2000001c
 8005d10:	08008213 	.word	0x08008213
 8005d14:	080081e5 	.word	0x080081e5
 8005d18:	080081d8 	.word	0x080081d8

08005d1c <malloc>:
 8005d1c:	4b02      	ldr	r3, [pc, #8]	@ (8005d28 <malloc+0xc>)
 8005d1e:	4601      	mov	r1, r0
 8005d20:	6818      	ldr	r0, [r3, #0]
 8005d22:	f000 b82d 	b.w	8005d80 <_malloc_r>
 8005d26:	bf00      	nop
 8005d28:	2000001c 	.word	0x2000001c

08005d2c <free>:
 8005d2c:	4b02      	ldr	r3, [pc, #8]	@ (8005d38 <free+0xc>)
 8005d2e:	4601      	mov	r1, r0
 8005d30:	6818      	ldr	r0, [r3, #0]
 8005d32:	f000 ba83 	b.w	800623c <_free_r>
 8005d36:	bf00      	nop
 8005d38:	2000001c 	.word	0x2000001c

08005d3c <sbrk_aligned>:
 8005d3c:	b570      	push	{r4, r5, r6, lr}
 8005d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8005d7c <sbrk_aligned+0x40>)
 8005d40:	460c      	mov	r4, r1
 8005d42:	6831      	ldr	r1, [r6, #0]
 8005d44:	4605      	mov	r5, r0
 8005d46:	b911      	cbnz	r1, 8005d4e <sbrk_aligned+0x12>
 8005d48:	f000 fa14 	bl	8006174 <_sbrk_r>
 8005d4c:	6030      	str	r0, [r6, #0]
 8005d4e:	4621      	mov	r1, r4
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 fa0f 	bl	8006174 <_sbrk_r>
 8005d56:	1c43      	adds	r3, r0, #1
 8005d58:	d103      	bne.n	8005d62 <sbrk_aligned+0x26>
 8005d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8005d5e:	4620      	mov	r0, r4
 8005d60:	bd70      	pop	{r4, r5, r6, pc}
 8005d62:	1cc4      	adds	r4, r0, #3
 8005d64:	f024 0403 	bic.w	r4, r4, #3
 8005d68:	42a0      	cmp	r0, r4
 8005d6a:	d0f8      	beq.n	8005d5e <sbrk_aligned+0x22>
 8005d6c:	1a21      	subs	r1, r4, r0
 8005d6e:	4628      	mov	r0, r5
 8005d70:	f000 fa00 	bl	8006174 <_sbrk_r>
 8005d74:	3001      	adds	r0, #1
 8005d76:	d1f2      	bne.n	8005d5e <sbrk_aligned+0x22>
 8005d78:	e7ef      	b.n	8005d5a <sbrk_aligned+0x1e>
 8005d7a:	bf00      	nop
 8005d7c:	200000fc 	.word	0x200000fc

08005d80 <_malloc_r>:
 8005d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d84:	1ccd      	adds	r5, r1, #3
 8005d86:	f025 0503 	bic.w	r5, r5, #3
 8005d8a:	3508      	adds	r5, #8
 8005d8c:	2d0c      	cmp	r5, #12
 8005d8e:	bf38      	it	cc
 8005d90:	250c      	movcc	r5, #12
 8005d92:	2d00      	cmp	r5, #0
 8005d94:	4606      	mov	r6, r0
 8005d96:	db01      	blt.n	8005d9c <_malloc_r+0x1c>
 8005d98:	42a9      	cmp	r1, r5
 8005d9a:	d904      	bls.n	8005da6 <_malloc_r+0x26>
 8005d9c:	230c      	movs	r3, #12
 8005d9e:	6033      	str	r3, [r6, #0]
 8005da0:	2000      	movs	r0, #0
 8005da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005e7c <_malloc_r+0xfc>
 8005daa:	f000 f869 	bl	8005e80 <__malloc_lock>
 8005dae:	f8d8 3000 	ldr.w	r3, [r8]
 8005db2:	461c      	mov	r4, r3
 8005db4:	bb44      	cbnz	r4, 8005e08 <_malloc_r+0x88>
 8005db6:	4629      	mov	r1, r5
 8005db8:	4630      	mov	r0, r6
 8005dba:	f7ff ffbf 	bl	8005d3c <sbrk_aligned>
 8005dbe:	1c43      	adds	r3, r0, #1
 8005dc0:	4604      	mov	r4, r0
 8005dc2:	d158      	bne.n	8005e76 <_malloc_r+0xf6>
 8005dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8005dc8:	4627      	mov	r7, r4
 8005dca:	2f00      	cmp	r7, #0
 8005dcc:	d143      	bne.n	8005e56 <_malloc_r+0xd6>
 8005dce:	2c00      	cmp	r4, #0
 8005dd0:	d04b      	beq.n	8005e6a <_malloc_r+0xea>
 8005dd2:	6823      	ldr	r3, [r4, #0]
 8005dd4:	4639      	mov	r1, r7
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	eb04 0903 	add.w	r9, r4, r3
 8005ddc:	f000 f9ca 	bl	8006174 <_sbrk_r>
 8005de0:	4581      	cmp	r9, r0
 8005de2:	d142      	bne.n	8005e6a <_malloc_r+0xea>
 8005de4:	6821      	ldr	r1, [r4, #0]
 8005de6:	1a6d      	subs	r5, r5, r1
 8005de8:	4629      	mov	r1, r5
 8005dea:	4630      	mov	r0, r6
 8005dec:	f7ff ffa6 	bl	8005d3c <sbrk_aligned>
 8005df0:	3001      	adds	r0, #1
 8005df2:	d03a      	beq.n	8005e6a <_malloc_r+0xea>
 8005df4:	6823      	ldr	r3, [r4, #0]
 8005df6:	442b      	add	r3, r5
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	bb62      	cbnz	r2, 8005e5c <_malloc_r+0xdc>
 8005e02:	f8c8 7000 	str.w	r7, [r8]
 8005e06:	e00f      	b.n	8005e28 <_malloc_r+0xa8>
 8005e08:	6822      	ldr	r2, [r4, #0]
 8005e0a:	1b52      	subs	r2, r2, r5
 8005e0c:	d420      	bmi.n	8005e50 <_malloc_r+0xd0>
 8005e0e:	2a0b      	cmp	r2, #11
 8005e10:	d917      	bls.n	8005e42 <_malloc_r+0xc2>
 8005e12:	1961      	adds	r1, r4, r5
 8005e14:	42a3      	cmp	r3, r4
 8005e16:	6025      	str	r5, [r4, #0]
 8005e18:	bf18      	it	ne
 8005e1a:	6059      	strne	r1, [r3, #4]
 8005e1c:	6863      	ldr	r3, [r4, #4]
 8005e1e:	bf08      	it	eq
 8005e20:	f8c8 1000 	streq.w	r1, [r8]
 8005e24:	5162      	str	r2, [r4, r5]
 8005e26:	604b      	str	r3, [r1, #4]
 8005e28:	4630      	mov	r0, r6
 8005e2a:	f000 f82f 	bl	8005e8c <__malloc_unlock>
 8005e2e:	f104 000b 	add.w	r0, r4, #11
 8005e32:	1d23      	adds	r3, r4, #4
 8005e34:	f020 0007 	bic.w	r0, r0, #7
 8005e38:	1ac2      	subs	r2, r0, r3
 8005e3a:	bf1c      	itt	ne
 8005e3c:	1a1b      	subne	r3, r3, r0
 8005e3e:	50a3      	strne	r3, [r4, r2]
 8005e40:	e7af      	b.n	8005da2 <_malloc_r+0x22>
 8005e42:	6862      	ldr	r2, [r4, #4]
 8005e44:	42a3      	cmp	r3, r4
 8005e46:	bf0c      	ite	eq
 8005e48:	f8c8 2000 	streq.w	r2, [r8]
 8005e4c:	605a      	strne	r2, [r3, #4]
 8005e4e:	e7eb      	b.n	8005e28 <_malloc_r+0xa8>
 8005e50:	4623      	mov	r3, r4
 8005e52:	6864      	ldr	r4, [r4, #4]
 8005e54:	e7ae      	b.n	8005db4 <_malloc_r+0x34>
 8005e56:	463c      	mov	r4, r7
 8005e58:	687f      	ldr	r7, [r7, #4]
 8005e5a:	e7b6      	b.n	8005dca <_malloc_r+0x4a>
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	42a3      	cmp	r3, r4
 8005e62:	d1fb      	bne.n	8005e5c <_malloc_r+0xdc>
 8005e64:	2300      	movs	r3, #0
 8005e66:	6053      	str	r3, [r2, #4]
 8005e68:	e7de      	b.n	8005e28 <_malloc_r+0xa8>
 8005e6a:	230c      	movs	r3, #12
 8005e6c:	6033      	str	r3, [r6, #0]
 8005e6e:	4630      	mov	r0, r6
 8005e70:	f000 f80c 	bl	8005e8c <__malloc_unlock>
 8005e74:	e794      	b.n	8005da0 <_malloc_r+0x20>
 8005e76:	6005      	str	r5, [r0, #0]
 8005e78:	e7d6      	b.n	8005e28 <_malloc_r+0xa8>
 8005e7a:	bf00      	nop
 8005e7c:	20000100 	.word	0x20000100

08005e80 <__malloc_lock>:
 8005e80:	4801      	ldr	r0, [pc, #4]	@ (8005e88 <__malloc_lock+0x8>)
 8005e82:	f000 b9c4 	b.w	800620e <__retarget_lock_acquire_recursive>
 8005e86:	bf00      	nop
 8005e88:	20000244 	.word	0x20000244

08005e8c <__malloc_unlock>:
 8005e8c:	4801      	ldr	r0, [pc, #4]	@ (8005e94 <__malloc_unlock+0x8>)
 8005e8e:	f000 b9bf 	b.w	8006210 <__retarget_lock_release_recursive>
 8005e92:	bf00      	nop
 8005e94:	20000244 	.word	0x20000244

08005e98 <std>:
 8005e98:	2300      	movs	r3, #0
 8005e9a:	b510      	push	{r4, lr}
 8005e9c:	4604      	mov	r4, r0
 8005e9e:	e9c0 3300 	strd	r3, r3, [r0]
 8005ea2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ea6:	6083      	str	r3, [r0, #8]
 8005ea8:	8181      	strh	r1, [r0, #12]
 8005eaa:	6643      	str	r3, [r0, #100]	@ 0x64
 8005eac:	81c2      	strh	r2, [r0, #14]
 8005eae:	6183      	str	r3, [r0, #24]
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	2208      	movs	r2, #8
 8005eb4:	305c      	adds	r0, #92	@ 0x5c
 8005eb6:	f000 f920 	bl	80060fa <memset>
 8005eba:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef0 <std+0x58>)
 8005ebc:	6263      	str	r3, [r4, #36]	@ 0x24
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef4 <std+0x5c>)
 8005ec0:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005ec2:	4b0d      	ldr	r3, [pc, #52]	@ (8005ef8 <std+0x60>)
 8005ec4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ec6:	4b0d      	ldr	r3, [pc, #52]	@ (8005efc <std+0x64>)
 8005ec8:	6323      	str	r3, [r4, #48]	@ 0x30
 8005eca:	4b0d      	ldr	r3, [pc, #52]	@ (8005f00 <std+0x68>)
 8005ecc:	6224      	str	r4, [r4, #32]
 8005ece:	429c      	cmp	r4, r3
 8005ed0:	d006      	beq.n	8005ee0 <std+0x48>
 8005ed2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ed6:	4294      	cmp	r4, r2
 8005ed8:	d002      	beq.n	8005ee0 <std+0x48>
 8005eda:	33d0      	adds	r3, #208	@ 0xd0
 8005edc:	429c      	cmp	r4, r3
 8005ede:	d105      	bne.n	8005eec <std+0x54>
 8005ee0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ee8:	f000 b990 	b.w	800620c <__retarget_lock_init_recursive>
 8005eec:	bd10      	pop	{r4, pc}
 8005eee:	bf00      	nop
 8005ef0:	08006041 	.word	0x08006041
 8005ef4:	08006063 	.word	0x08006063
 8005ef8:	0800609b 	.word	0x0800609b
 8005efc:	080060bf 	.word	0x080060bf
 8005f00:	20000104 	.word	0x20000104

08005f04 <stdio_exit_handler>:
 8005f04:	4a02      	ldr	r2, [pc, #8]	@ (8005f10 <stdio_exit_handler+0xc>)
 8005f06:	4903      	ldr	r1, [pc, #12]	@ (8005f14 <stdio_exit_handler+0x10>)
 8005f08:	4803      	ldr	r0, [pc, #12]	@ (8005f18 <stdio_exit_handler+0x14>)
 8005f0a:	f000 b87b 	b.w	8006004 <_fwalk_sglue>
 8005f0e:	bf00      	nop
 8005f10:	20000010 	.word	0x20000010
 8005f14:	08006979 	.word	0x08006979
 8005f18:	20000020 	.word	0x20000020

08005f1c <cleanup_stdio>:
 8005f1c:	6841      	ldr	r1, [r0, #4]
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005f50 <cleanup_stdio+0x34>)
 8005f20:	4299      	cmp	r1, r3
 8005f22:	b510      	push	{r4, lr}
 8005f24:	4604      	mov	r4, r0
 8005f26:	d001      	beq.n	8005f2c <cleanup_stdio+0x10>
 8005f28:	f000 fd26 	bl	8006978 <_fflush_r>
 8005f2c:	68a1      	ldr	r1, [r4, #8]
 8005f2e:	4b09      	ldr	r3, [pc, #36]	@ (8005f54 <cleanup_stdio+0x38>)
 8005f30:	4299      	cmp	r1, r3
 8005f32:	d002      	beq.n	8005f3a <cleanup_stdio+0x1e>
 8005f34:	4620      	mov	r0, r4
 8005f36:	f000 fd1f 	bl	8006978 <_fflush_r>
 8005f3a:	68e1      	ldr	r1, [r4, #12]
 8005f3c:	4b06      	ldr	r3, [pc, #24]	@ (8005f58 <cleanup_stdio+0x3c>)
 8005f3e:	4299      	cmp	r1, r3
 8005f40:	d004      	beq.n	8005f4c <cleanup_stdio+0x30>
 8005f42:	4620      	mov	r0, r4
 8005f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f48:	f000 bd16 	b.w	8006978 <_fflush_r>
 8005f4c:	bd10      	pop	{r4, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000104 	.word	0x20000104
 8005f54:	2000016c 	.word	0x2000016c
 8005f58:	200001d4 	.word	0x200001d4

08005f5c <global_stdio_init.part.0>:
 8005f5c:	b510      	push	{r4, lr}
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	@ (8005f8c <global_stdio_init.part.0+0x30>)
 8005f60:	4c0b      	ldr	r4, [pc, #44]	@ (8005f90 <global_stdio_init.part.0+0x34>)
 8005f62:	4a0c      	ldr	r2, [pc, #48]	@ (8005f94 <global_stdio_init.part.0+0x38>)
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	4620      	mov	r0, r4
 8005f68:	2200      	movs	r2, #0
 8005f6a:	2104      	movs	r1, #4
 8005f6c:	f7ff ff94 	bl	8005e98 <std>
 8005f70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f74:	2201      	movs	r2, #1
 8005f76:	2109      	movs	r1, #9
 8005f78:	f7ff ff8e 	bl	8005e98 <std>
 8005f7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f80:	2202      	movs	r2, #2
 8005f82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f86:	2112      	movs	r1, #18
 8005f88:	f7ff bf86 	b.w	8005e98 <std>
 8005f8c:	2000023c 	.word	0x2000023c
 8005f90:	20000104 	.word	0x20000104
 8005f94:	08005f05 	.word	0x08005f05

08005f98 <__sfp_lock_acquire>:
 8005f98:	4801      	ldr	r0, [pc, #4]	@ (8005fa0 <__sfp_lock_acquire+0x8>)
 8005f9a:	f000 b938 	b.w	800620e <__retarget_lock_acquire_recursive>
 8005f9e:	bf00      	nop
 8005fa0:	20000245 	.word	0x20000245

08005fa4 <__sfp_lock_release>:
 8005fa4:	4801      	ldr	r0, [pc, #4]	@ (8005fac <__sfp_lock_release+0x8>)
 8005fa6:	f000 b933 	b.w	8006210 <__retarget_lock_release_recursive>
 8005faa:	bf00      	nop
 8005fac:	20000245 	.word	0x20000245

08005fb0 <__sinit>:
 8005fb0:	b510      	push	{r4, lr}
 8005fb2:	4604      	mov	r4, r0
 8005fb4:	f7ff fff0 	bl	8005f98 <__sfp_lock_acquire>
 8005fb8:	6a23      	ldr	r3, [r4, #32]
 8005fba:	b11b      	cbz	r3, 8005fc4 <__sinit+0x14>
 8005fbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fc0:	f7ff bff0 	b.w	8005fa4 <__sfp_lock_release>
 8005fc4:	4b04      	ldr	r3, [pc, #16]	@ (8005fd8 <__sinit+0x28>)
 8005fc6:	6223      	str	r3, [r4, #32]
 8005fc8:	4b04      	ldr	r3, [pc, #16]	@ (8005fdc <__sinit+0x2c>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1f5      	bne.n	8005fbc <__sinit+0xc>
 8005fd0:	f7ff ffc4 	bl	8005f5c <global_stdio_init.part.0>
 8005fd4:	e7f2      	b.n	8005fbc <__sinit+0xc>
 8005fd6:	bf00      	nop
 8005fd8:	08005f1d 	.word	0x08005f1d
 8005fdc:	2000023c 	.word	0x2000023c

08005fe0 <fiprintf>:
 8005fe0:	b40e      	push	{r1, r2, r3}
 8005fe2:	b503      	push	{r0, r1, lr}
 8005fe4:	4601      	mov	r1, r0
 8005fe6:	ab03      	add	r3, sp, #12
 8005fe8:	4805      	ldr	r0, [pc, #20]	@ (8006000 <fiprintf+0x20>)
 8005fea:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fee:	6800      	ldr	r0, [r0, #0]
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	f000 f997 	bl	8006324 <_vfiprintf_r>
 8005ff6:	b002      	add	sp, #8
 8005ff8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ffc:	b003      	add	sp, #12
 8005ffe:	4770      	bx	lr
 8006000:	2000001c 	.word	0x2000001c

08006004 <_fwalk_sglue>:
 8006004:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006008:	4607      	mov	r7, r0
 800600a:	4688      	mov	r8, r1
 800600c:	4614      	mov	r4, r2
 800600e:	2600      	movs	r6, #0
 8006010:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006014:	f1b9 0901 	subs.w	r9, r9, #1
 8006018:	d505      	bpl.n	8006026 <_fwalk_sglue+0x22>
 800601a:	6824      	ldr	r4, [r4, #0]
 800601c:	2c00      	cmp	r4, #0
 800601e:	d1f7      	bne.n	8006010 <_fwalk_sglue+0xc>
 8006020:	4630      	mov	r0, r6
 8006022:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006026:	89ab      	ldrh	r3, [r5, #12]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d907      	bls.n	800603c <_fwalk_sglue+0x38>
 800602c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006030:	3301      	adds	r3, #1
 8006032:	d003      	beq.n	800603c <_fwalk_sglue+0x38>
 8006034:	4629      	mov	r1, r5
 8006036:	4638      	mov	r0, r7
 8006038:	47c0      	blx	r8
 800603a:	4306      	orrs	r6, r0
 800603c:	3568      	adds	r5, #104	@ 0x68
 800603e:	e7e9      	b.n	8006014 <_fwalk_sglue+0x10>

08006040 <__sread>:
 8006040:	b510      	push	{r4, lr}
 8006042:	460c      	mov	r4, r1
 8006044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006048:	f000 f882 	bl	8006150 <_read_r>
 800604c:	2800      	cmp	r0, #0
 800604e:	bfab      	itete	ge
 8006050:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006052:	89a3      	ldrhlt	r3, [r4, #12]
 8006054:	181b      	addge	r3, r3, r0
 8006056:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800605a:	bfac      	ite	ge
 800605c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800605e:	81a3      	strhlt	r3, [r4, #12]
 8006060:	bd10      	pop	{r4, pc}

08006062 <__swrite>:
 8006062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006066:	461f      	mov	r7, r3
 8006068:	898b      	ldrh	r3, [r1, #12]
 800606a:	05db      	lsls	r3, r3, #23
 800606c:	4605      	mov	r5, r0
 800606e:	460c      	mov	r4, r1
 8006070:	4616      	mov	r6, r2
 8006072:	d505      	bpl.n	8006080 <__swrite+0x1e>
 8006074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006078:	2302      	movs	r3, #2
 800607a:	2200      	movs	r2, #0
 800607c:	f000 f856 	bl	800612c <_lseek_r>
 8006080:	89a3      	ldrh	r3, [r4, #12]
 8006082:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006086:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	4632      	mov	r2, r6
 800608e:	463b      	mov	r3, r7
 8006090:	4628      	mov	r0, r5
 8006092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006096:	f000 b87d 	b.w	8006194 <_write_r>

0800609a <__sseek>:
 800609a:	b510      	push	{r4, lr}
 800609c:	460c      	mov	r4, r1
 800609e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a2:	f000 f843 	bl	800612c <_lseek_r>
 80060a6:	1c43      	adds	r3, r0, #1
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	bf15      	itete	ne
 80060ac:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060ae:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060b2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060b6:	81a3      	strheq	r3, [r4, #12]
 80060b8:	bf18      	it	ne
 80060ba:	81a3      	strhne	r3, [r4, #12]
 80060bc:	bd10      	pop	{r4, pc}

080060be <__sclose>:
 80060be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c2:	f000 b823 	b.w	800610c <_close_r>

080060c6 <memmove>:
 80060c6:	4288      	cmp	r0, r1
 80060c8:	b510      	push	{r4, lr}
 80060ca:	eb01 0402 	add.w	r4, r1, r2
 80060ce:	d902      	bls.n	80060d6 <memmove+0x10>
 80060d0:	4284      	cmp	r4, r0
 80060d2:	4623      	mov	r3, r4
 80060d4:	d807      	bhi.n	80060e6 <memmove+0x20>
 80060d6:	1e43      	subs	r3, r0, #1
 80060d8:	42a1      	cmp	r1, r4
 80060da:	d008      	beq.n	80060ee <memmove+0x28>
 80060dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80060e4:	e7f8      	b.n	80060d8 <memmove+0x12>
 80060e6:	4402      	add	r2, r0
 80060e8:	4601      	mov	r1, r0
 80060ea:	428a      	cmp	r2, r1
 80060ec:	d100      	bne.n	80060f0 <memmove+0x2a>
 80060ee:	bd10      	pop	{r4, pc}
 80060f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80060f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80060f8:	e7f7      	b.n	80060ea <memmove+0x24>

080060fa <memset>:
 80060fa:	4402      	add	r2, r0
 80060fc:	4603      	mov	r3, r0
 80060fe:	4293      	cmp	r3, r2
 8006100:	d100      	bne.n	8006104 <memset+0xa>
 8006102:	4770      	bx	lr
 8006104:	f803 1b01 	strb.w	r1, [r3], #1
 8006108:	e7f9      	b.n	80060fe <memset+0x4>
	...

0800610c <_close_r>:
 800610c:	b538      	push	{r3, r4, r5, lr}
 800610e:	4d06      	ldr	r5, [pc, #24]	@ (8006128 <_close_r+0x1c>)
 8006110:	2300      	movs	r3, #0
 8006112:	4604      	mov	r4, r0
 8006114:	4608      	mov	r0, r1
 8006116:	602b      	str	r3, [r5, #0]
 8006118:	f7fd fd64 	bl	8003be4 <_close>
 800611c:	1c43      	adds	r3, r0, #1
 800611e:	d102      	bne.n	8006126 <_close_r+0x1a>
 8006120:	682b      	ldr	r3, [r5, #0]
 8006122:	b103      	cbz	r3, 8006126 <_close_r+0x1a>
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	bd38      	pop	{r3, r4, r5, pc}
 8006128:	20000240 	.word	0x20000240

0800612c <_lseek_r>:
 800612c:	b538      	push	{r3, r4, r5, lr}
 800612e:	4d07      	ldr	r5, [pc, #28]	@ (800614c <_lseek_r+0x20>)
 8006130:	4604      	mov	r4, r0
 8006132:	4608      	mov	r0, r1
 8006134:	4611      	mov	r1, r2
 8006136:	2200      	movs	r2, #0
 8006138:	602a      	str	r2, [r5, #0]
 800613a:	461a      	mov	r2, r3
 800613c:	f7fd fd79 	bl	8003c32 <_lseek>
 8006140:	1c43      	adds	r3, r0, #1
 8006142:	d102      	bne.n	800614a <_lseek_r+0x1e>
 8006144:	682b      	ldr	r3, [r5, #0]
 8006146:	b103      	cbz	r3, 800614a <_lseek_r+0x1e>
 8006148:	6023      	str	r3, [r4, #0]
 800614a:	bd38      	pop	{r3, r4, r5, pc}
 800614c:	20000240 	.word	0x20000240

08006150 <_read_r>:
 8006150:	b538      	push	{r3, r4, r5, lr}
 8006152:	4d07      	ldr	r5, [pc, #28]	@ (8006170 <_read_r+0x20>)
 8006154:	4604      	mov	r4, r0
 8006156:	4608      	mov	r0, r1
 8006158:	4611      	mov	r1, r2
 800615a:	2200      	movs	r2, #0
 800615c:	602a      	str	r2, [r5, #0]
 800615e:	461a      	mov	r2, r3
 8006160:	f7fd fd07 	bl	8003b72 <_read>
 8006164:	1c43      	adds	r3, r0, #1
 8006166:	d102      	bne.n	800616e <_read_r+0x1e>
 8006168:	682b      	ldr	r3, [r5, #0]
 800616a:	b103      	cbz	r3, 800616e <_read_r+0x1e>
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	bd38      	pop	{r3, r4, r5, pc}
 8006170:	20000240 	.word	0x20000240

08006174 <_sbrk_r>:
 8006174:	b538      	push	{r3, r4, r5, lr}
 8006176:	4d06      	ldr	r5, [pc, #24]	@ (8006190 <_sbrk_r+0x1c>)
 8006178:	2300      	movs	r3, #0
 800617a:	4604      	mov	r4, r0
 800617c:	4608      	mov	r0, r1
 800617e:	602b      	str	r3, [r5, #0]
 8006180:	f7fd fd64 	bl	8003c4c <_sbrk>
 8006184:	1c43      	adds	r3, r0, #1
 8006186:	d102      	bne.n	800618e <_sbrk_r+0x1a>
 8006188:	682b      	ldr	r3, [r5, #0]
 800618a:	b103      	cbz	r3, 800618e <_sbrk_r+0x1a>
 800618c:	6023      	str	r3, [r4, #0]
 800618e:	bd38      	pop	{r3, r4, r5, pc}
 8006190:	20000240 	.word	0x20000240

08006194 <_write_r>:
 8006194:	b538      	push	{r3, r4, r5, lr}
 8006196:	4d07      	ldr	r5, [pc, #28]	@ (80061b4 <_write_r+0x20>)
 8006198:	4604      	mov	r4, r0
 800619a:	4608      	mov	r0, r1
 800619c:	4611      	mov	r1, r2
 800619e:	2200      	movs	r2, #0
 80061a0:	602a      	str	r2, [r5, #0]
 80061a2:	461a      	mov	r2, r3
 80061a4:	f7fd fd02 	bl	8003bac <_write>
 80061a8:	1c43      	adds	r3, r0, #1
 80061aa:	d102      	bne.n	80061b2 <_write_r+0x1e>
 80061ac:	682b      	ldr	r3, [r5, #0]
 80061ae:	b103      	cbz	r3, 80061b2 <_write_r+0x1e>
 80061b0:	6023      	str	r3, [r4, #0]
 80061b2:	bd38      	pop	{r3, r4, r5, pc}
 80061b4:	20000240 	.word	0x20000240

080061b8 <__errno>:
 80061b8:	4b01      	ldr	r3, [pc, #4]	@ (80061c0 <__errno+0x8>)
 80061ba:	6818      	ldr	r0, [r3, #0]
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	2000001c 	.word	0x2000001c

080061c4 <__libc_init_array>:
 80061c4:	b570      	push	{r4, r5, r6, lr}
 80061c6:	4d0d      	ldr	r5, [pc, #52]	@ (80061fc <__libc_init_array+0x38>)
 80061c8:	4c0d      	ldr	r4, [pc, #52]	@ (8006200 <__libc_init_array+0x3c>)
 80061ca:	1b64      	subs	r4, r4, r5
 80061cc:	10a4      	asrs	r4, r4, #2
 80061ce:	2600      	movs	r6, #0
 80061d0:	42a6      	cmp	r6, r4
 80061d2:	d109      	bne.n	80061e8 <__libc_init_array+0x24>
 80061d4:	4d0b      	ldr	r5, [pc, #44]	@ (8006204 <__libc_init_array+0x40>)
 80061d6:	4c0c      	ldr	r4, [pc, #48]	@ (8006208 <__libc_init_array+0x44>)
 80061d8:	f000 fd52 	bl	8006c80 <_init>
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	2600      	movs	r6, #0
 80061e2:	42a6      	cmp	r6, r4
 80061e4:	d105      	bne.n	80061f2 <__libc_init_array+0x2e>
 80061e6:	bd70      	pop	{r4, r5, r6, pc}
 80061e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061ec:	4798      	blx	r3
 80061ee:	3601      	adds	r6, #1
 80061f0:	e7ee      	b.n	80061d0 <__libc_init_array+0xc>
 80061f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f6:	4798      	blx	r3
 80061f8:	3601      	adds	r6, #1
 80061fa:	e7f2      	b.n	80061e2 <__libc_init_array+0x1e>
 80061fc:	08008250 	.word	0x08008250
 8006200:	08008250 	.word	0x08008250
 8006204:	08008250 	.word	0x08008250
 8006208:	08008254 	.word	0x08008254

0800620c <__retarget_lock_init_recursive>:
 800620c:	4770      	bx	lr

0800620e <__retarget_lock_acquire_recursive>:
 800620e:	4770      	bx	lr

08006210 <__retarget_lock_release_recursive>:
 8006210:	4770      	bx	lr

08006212 <memcpy>:
 8006212:	440a      	add	r2, r1
 8006214:	4291      	cmp	r1, r2
 8006216:	f100 33ff 	add.w	r3, r0, #4294967295
 800621a:	d100      	bne.n	800621e <memcpy+0xc>
 800621c:	4770      	bx	lr
 800621e:	b510      	push	{r4, lr}
 8006220:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006224:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006228:	4291      	cmp	r1, r2
 800622a:	d1f9      	bne.n	8006220 <memcpy+0xe>
 800622c:	bd10      	pop	{r4, pc}

0800622e <abort>:
 800622e:	b508      	push	{r3, lr}
 8006230:	2006      	movs	r0, #6
 8006232:	f000 fc85 	bl	8006b40 <raise>
 8006236:	2001      	movs	r0, #1
 8006238:	f7fd fc90 	bl	8003b5c <_exit>

0800623c <_free_r>:
 800623c:	b538      	push	{r3, r4, r5, lr}
 800623e:	4605      	mov	r5, r0
 8006240:	2900      	cmp	r1, #0
 8006242:	d041      	beq.n	80062c8 <_free_r+0x8c>
 8006244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006248:	1f0c      	subs	r4, r1, #4
 800624a:	2b00      	cmp	r3, #0
 800624c:	bfb8      	it	lt
 800624e:	18e4      	addlt	r4, r4, r3
 8006250:	f7ff fe16 	bl	8005e80 <__malloc_lock>
 8006254:	4a1d      	ldr	r2, [pc, #116]	@ (80062cc <_free_r+0x90>)
 8006256:	6813      	ldr	r3, [r2, #0]
 8006258:	b933      	cbnz	r3, 8006268 <_free_r+0x2c>
 800625a:	6063      	str	r3, [r4, #4]
 800625c:	6014      	str	r4, [r2, #0]
 800625e:	4628      	mov	r0, r5
 8006260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006264:	f7ff be12 	b.w	8005e8c <__malloc_unlock>
 8006268:	42a3      	cmp	r3, r4
 800626a:	d908      	bls.n	800627e <_free_r+0x42>
 800626c:	6820      	ldr	r0, [r4, #0]
 800626e:	1821      	adds	r1, r4, r0
 8006270:	428b      	cmp	r3, r1
 8006272:	bf01      	itttt	eq
 8006274:	6819      	ldreq	r1, [r3, #0]
 8006276:	685b      	ldreq	r3, [r3, #4]
 8006278:	1809      	addeq	r1, r1, r0
 800627a:	6021      	streq	r1, [r4, #0]
 800627c:	e7ed      	b.n	800625a <_free_r+0x1e>
 800627e:	461a      	mov	r2, r3
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	b10b      	cbz	r3, 8006288 <_free_r+0x4c>
 8006284:	42a3      	cmp	r3, r4
 8006286:	d9fa      	bls.n	800627e <_free_r+0x42>
 8006288:	6811      	ldr	r1, [r2, #0]
 800628a:	1850      	adds	r0, r2, r1
 800628c:	42a0      	cmp	r0, r4
 800628e:	d10b      	bne.n	80062a8 <_free_r+0x6c>
 8006290:	6820      	ldr	r0, [r4, #0]
 8006292:	4401      	add	r1, r0
 8006294:	1850      	adds	r0, r2, r1
 8006296:	4283      	cmp	r3, r0
 8006298:	6011      	str	r1, [r2, #0]
 800629a:	d1e0      	bne.n	800625e <_free_r+0x22>
 800629c:	6818      	ldr	r0, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	6053      	str	r3, [r2, #4]
 80062a2:	4408      	add	r0, r1
 80062a4:	6010      	str	r0, [r2, #0]
 80062a6:	e7da      	b.n	800625e <_free_r+0x22>
 80062a8:	d902      	bls.n	80062b0 <_free_r+0x74>
 80062aa:	230c      	movs	r3, #12
 80062ac:	602b      	str	r3, [r5, #0]
 80062ae:	e7d6      	b.n	800625e <_free_r+0x22>
 80062b0:	6820      	ldr	r0, [r4, #0]
 80062b2:	1821      	adds	r1, r4, r0
 80062b4:	428b      	cmp	r3, r1
 80062b6:	bf04      	itt	eq
 80062b8:	6819      	ldreq	r1, [r3, #0]
 80062ba:	685b      	ldreq	r3, [r3, #4]
 80062bc:	6063      	str	r3, [r4, #4]
 80062be:	bf04      	itt	eq
 80062c0:	1809      	addeq	r1, r1, r0
 80062c2:	6021      	streq	r1, [r4, #0]
 80062c4:	6054      	str	r4, [r2, #4]
 80062c6:	e7ca      	b.n	800625e <_free_r+0x22>
 80062c8:	bd38      	pop	{r3, r4, r5, pc}
 80062ca:	bf00      	nop
 80062cc:	20000100 	.word	0x20000100

080062d0 <__sfputc_r>:
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	b410      	push	{r4}
 80062d8:	6093      	str	r3, [r2, #8]
 80062da:	da08      	bge.n	80062ee <__sfputc_r+0x1e>
 80062dc:	6994      	ldr	r4, [r2, #24]
 80062de:	42a3      	cmp	r3, r4
 80062e0:	db01      	blt.n	80062e6 <__sfputc_r+0x16>
 80062e2:	290a      	cmp	r1, #10
 80062e4:	d103      	bne.n	80062ee <__sfputc_r+0x1e>
 80062e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062ea:	f000 bb6d 	b.w	80069c8 <__swbuf_r>
 80062ee:	6813      	ldr	r3, [r2, #0]
 80062f0:	1c58      	adds	r0, r3, #1
 80062f2:	6010      	str	r0, [r2, #0]
 80062f4:	7019      	strb	r1, [r3, #0]
 80062f6:	4608      	mov	r0, r1
 80062f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <__sfputs_r>:
 80062fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006300:	4606      	mov	r6, r0
 8006302:	460f      	mov	r7, r1
 8006304:	4614      	mov	r4, r2
 8006306:	18d5      	adds	r5, r2, r3
 8006308:	42ac      	cmp	r4, r5
 800630a:	d101      	bne.n	8006310 <__sfputs_r+0x12>
 800630c:	2000      	movs	r0, #0
 800630e:	e007      	b.n	8006320 <__sfputs_r+0x22>
 8006310:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006314:	463a      	mov	r2, r7
 8006316:	4630      	mov	r0, r6
 8006318:	f7ff ffda 	bl	80062d0 <__sfputc_r>
 800631c:	1c43      	adds	r3, r0, #1
 800631e:	d1f3      	bne.n	8006308 <__sfputs_r+0xa>
 8006320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006324 <_vfiprintf_r>:
 8006324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006328:	460d      	mov	r5, r1
 800632a:	b09d      	sub	sp, #116	@ 0x74
 800632c:	4614      	mov	r4, r2
 800632e:	4698      	mov	r8, r3
 8006330:	4606      	mov	r6, r0
 8006332:	b118      	cbz	r0, 800633c <_vfiprintf_r+0x18>
 8006334:	6a03      	ldr	r3, [r0, #32]
 8006336:	b90b      	cbnz	r3, 800633c <_vfiprintf_r+0x18>
 8006338:	f7ff fe3a 	bl	8005fb0 <__sinit>
 800633c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800633e:	07d9      	lsls	r1, r3, #31
 8006340:	d405      	bmi.n	800634e <_vfiprintf_r+0x2a>
 8006342:	89ab      	ldrh	r3, [r5, #12]
 8006344:	059a      	lsls	r2, r3, #22
 8006346:	d402      	bmi.n	800634e <_vfiprintf_r+0x2a>
 8006348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800634a:	f7ff ff60 	bl	800620e <__retarget_lock_acquire_recursive>
 800634e:	89ab      	ldrh	r3, [r5, #12]
 8006350:	071b      	lsls	r3, r3, #28
 8006352:	d501      	bpl.n	8006358 <_vfiprintf_r+0x34>
 8006354:	692b      	ldr	r3, [r5, #16]
 8006356:	b99b      	cbnz	r3, 8006380 <_vfiprintf_r+0x5c>
 8006358:	4629      	mov	r1, r5
 800635a:	4630      	mov	r0, r6
 800635c:	f000 fb72 	bl	8006a44 <__swsetup_r>
 8006360:	b170      	cbz	r0, 8006380 <_vfiprintf_r+0x5c>
 8006362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006364:	07dc      	lsls	r4, r3, #31
 8006366:	d504      	bpl.n	8006372 <_vfiprintf_r+0x4e>
 8006368:	f04f 30ff 	mov.w	r0, #4294967295
 800636c:	b01d      	add	sp, #116	@ 0x74
 800636e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006372:	89ab      	ldrh	r3, [r5, #12]
 8006374:	0598      	lsls	r0, r3, #22
 8006376:	d4f7      	bmi.n	8006368 <_vfiprintf_r+0x44>
 8006378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800637a:	f7ff ff49 	bl	8006210 <__retarget_lock_release_recursive>
 800637e:	e7f3      	b.n	8006368 <_vfiprintf_r+0x44>
 8006380:	2300      	movs	r3, #0
 8006382:	9309      	str	r3, [sp, #36]	@ 0x24
 8006384:	2320      	movs	r3, #32
 8006386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800638a:	f8cd 800c 	str.w	r8, [sp, #12]
 800638e:	2330      	movs	r3, #48	@ 0x30
 8006390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006540 <_vfiprintf_r+0x21c>
 8006394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006398:	f04f 0901 	mov.w	r9, #1
 800639c:	4623      	mov	r3, r4
 800639e:	469a      	mov	sl, r3
 80063a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063a4:	b10a      	cbz	r2, 80063aa <_vfiprintf_r+0x86>
 80063a6:	2a25      	cmp	r2, #37	@ 0x25
 80063a8:	d1f9      	bne.n	800639e <_vfiprintf_r+0x7a>
 80063aa:	ebba 0b04 	subs.w	fp, sl, r4
 80063ae:	d00b      	beq.n	80063c8 <_vfiprintf_r+0xa4>
 80063b0:	465b      	mov	r3, fp
 80063b2:	4622      	mov	r2, r4
 80063b4:	4629      	mov	r1, r5
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7ff ffa1 	bl	80062fe <__sfputs_r>
 80063bc:	3001      	adds	r0, #1
 80063be:	f000 80a7 	beq.w	8006510 <_vfiprintf_r+0x1ec>
 80063c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063c4:	445a      	add	r2, fp
 80063c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80063c8:	f89a 3000 	ldrb.w	r3, [sl]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 809f 	beq.w	8006510 <_vfiprintf_r+0x1ec>
 80063d2:	2300      	movs	r3, #0
 80063d4:	f04f 32ff 	mov.w	r2, #4294967295
 80063d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80063dc:	f10a 0a01 	add.w	sl, sl, #1
 80063e0:	9304      	str	r3, [sp, #16]
 80063e2:	9307      	str	r3, [sp, #28]
 80063e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80063e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80063ea:	4654      	mov	r4, sl
 80063ec:	2205      	movs	r2, #5
 80063ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063f2:	4853      	ldr	r0, [pc, #332]	@ (8006540 <_vfiprintf_r+0x21c>)
 80063f4:	f7f9 feec 	bl	80001d0 <memchr>
 80063f8:	9a04      	ldr	r2, [sp, #16]
 80063fa:	b9d8      	cbnz	r0, 8006434 <_vfiprintf_r+0x110>
 80063fc:	06d1      	lsls	r1, r2, #27
 80063fe:	bf44      	itt	mi
 8006400:	2320      	movmi	r3, #32
 8006402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006406:	0713      	lsls	r3, r2, #28
 8006408:	bf44      	itt	mi
 800640a:	232b      	movmi	r3, #43	@ 0x2b
 800640c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006410:	f89a 3000 	ldrb.w	r3, [sl]
 8006414:	2b2a      	cmp	r3, #42	@ 0x2a
 8006416:	d015      	beq.n	8006444 <_vfiprintf_r+0x120>
 8006418:	9a07      	ldr	r2, [sp, #28]
 800641a:	4654      	mov	r4, sl
 800641c:	2000      	movs	r0, #0
 800641e:	f04f 0c0a 	mov.w	ip, #10
 8006422:	4621      	mov	r1, r4
 8006424:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006428:	3b30      	subs	r3, #48	@ 0x30
 800642a:	2b09      	cmp	r3, #9
 800642c:	d94b      	bls.n	80064c6 <_vfiprintf_r+0x1a2>
 800642e:	b1b0      	cbz	r0, 800645e <_vfiprintf_r+0x13a>
 8006430:	9207      	str	r2, [sp, #28]
 8006432:	e014      	b.n	800645e <_vfiprintf_r+0x13a>
 8006434:	eba0 0308 	sub.w	r3, r0, r8
 8006438:	fa09 f303 	lsl.w	r3, r9, r3
 800643c:	4313      	orrs	r3, r2
 800643e:	9304      	str	r3, [sp, #16]
 8006440:	46a2      	mov	sl, r4
 8006442:	e7d2      	b.n	80063ea <_vfiprintf_r+0xc6>
 8006444:	9b03      	ldr	r3, [sp, #12]
 8006446:	1d19      	adds	r1, r3, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	9103      	str	r1, [sp, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	bfbb      	ittet	lt
 8006450:	425b      	neglt	r3, r3
 8006452:	f042 0202 	orrlt.w	r2, r2, #2
 8006456:	9307      	strge	r3, [sp, #28]
 8006458:	9307      	strlt	r3, [sp, #28]
 800645a:	bfb8      	it	lt
 800645c:	9204      	strlt	r2, [sp, #16]
 800645e:	7823      	ldrb	r3, [r4, #0]
 8006460:	2b2e      	cmp	r3, #46	@ 0x2e
 8006462:	d10a      	bne.n	800647a <_vfiprintf_r+0x156>
 8006464:	7863      	ldrb	r3, [r4, #1]
 8006466:	2b2a      	cmp	r3, #42	@ 0x2a
 8006468:	d132      	bne.n	80064d0 <_vfiprintf_r+0x1ac>
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	1d1a      	adds	r2, r3, #4
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	9203      	str	r2, [sp, #12]
 8006472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006476:	3402      	adds	r4, #2
 8006478:	9305      	str	r3, [sp, #20]
 800647a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006550 <_vfiprintf_r+0x22c>
 800647e:	7821      	ldrb	r1, [r4, #0]
 8006480:	2203      	movs	r2, #3
 8006482:	4650      	mov	r0, sl
 8006484:	f7f9 fea4 	bl	80001d0 <memchr>
 8006488:	b138      	cbz	r0, 800649a <_vfiprintf_r+0x176>
 800648a:	9b04      	ldr	r3, [sp, #16]
 800648c:	eba0 000a 	sub.w	r0, r0, sl
 8006490:	2240      	movs	r2, #64	@ 0x40
 8006492:	4082      	lsls	r2, r0
 8006494:	4313      	orrs	r3, r2
 8006496:	3401      	adds	r4, #1
 8006498:	9304      	str	r3, [sp, #16]
 800649a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800649e:	4829      	ldr	r0, [pc, #164]	@ (8006544 <_vfiprintf_r+0x220>)
 80064a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80064a4:	2206      	movs	r2, #6
 80064a6:	f7f9 fe93 	bl	80001d0 <memchr>
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d03f      	beq.n	800652e <_vfiprintf_r+0x20a>
 80064ae:	4b26      	ldr	r3, [pc, #152]	@ (8006548 <_vfiprintf_r+0x224>)
 80064b0:	bb1b      	cbnz	r3, 80064fa <_vfiprintf_r+0x1d6>
 80064b2:	9b03      	ldr	r3, [sp, #12]
 80064b4:	3307      	adds	r3, #7
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	3308      	adds	r3, #8
 80064bc:	9303      	str	r3, [sp, #12]
 80064be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c0:	443b      	add	r3, r7
 80064c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80064c4:	e76a      	b.n	800639c <_vfiprintf_r+0x78>
 80064c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80064ca:	460c      	mov	r4, r1
 80064cc:	2001      	movs	r0, #1
 80064ce:	e7a8      	b.n	8006422 <_vfiprintf_r+0xfe>
 80064d0:	2300      	movs	r3, #0
 80064d2:	3401      	adds	r4, #1
 80064d4:	9305      	str	r3, [sp, #20]
 80064d6:	4619      	mov	r1, r3
 80064d8:	f04f 0c0a 	mov.w	ip, #10
 80064dc:	4620      	mov	r0, r4
 80064de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80064e2:	3a30      	subs	r2, #48	@ 0x30
 80064e4:	2a09      	cmp	r2, #9
 80064e6:	d903      	bls.n	80064f0 <_vfiprintf_r+0x1cc>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0c6      	beq.n	800647a <_vfiprintf_r+0x156>
 80064ec:	9105      	str	r1, [sp, #20]
 80064ee:	e7c4      	b.n	800647a <_vfiprintf_r+0x156>
 80064f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80064f4:	4604      	mov	r4, r0
 80064f6:	2301      	movs	r3, #1
 80064f8:	e7f0      	b.n	80064dc <_vfiprintf_r+0x1b8>
 80064fa:	ab03      	add	r3, sp, #12
 80064fc:	9300      	str	r3, [sp, #0]
 80064fe:	462a      	mov	r2, r5
 8006500:	4b12      	ldr	r3, [pc, #72]	@ (800654c <_vfiprintf_r+0x228>)
 8006502:	a904      	add	r1, sp, #16
 8006504:	4630      	mov	r0, r6
 8006506:	f3af 8000 	nop.w
 800650a:	4607      	mov	r7, r0
 800650c:	1c78      	adds	r0, r7, #1
 800650e:	d1d6      	bne.n	80064be <_vfiprintf_r+0x19a>
 8006510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006512:	07d9      	lsls	r1, r3, #31
 8006514:	d405      	bmi.n	8006522 <_vfiprintf_r+0x1fe>
 8006516:	89ab      	ldrh	r3, [r5, #12]
 8006518:	059a      	lsls	r2, r3, #22
 800651a:	d402      	bmi.n	8006522 <_vfiprintf_r+0x1fe>
 800651c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800651e:	f7ff fe77 	bl	8006210 <__retarget_lock_release_recursive>
 8006522:	89ab      	ldrh	r3, [r5, #12]
 8006524:	065b      	lsls	r3, r3, #25
 8006526:	f53f af1f 	bmi.w	8006368 <_vfiprintf_r+0x44>
 800652a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800652c:	e71e      	b.n	800636c <_vfiprintf_r+0x48>
 800652e:	ab03      	add	r3, sp, #12
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	462a      	mov	r2, r5
 8006534:	4b05      	ldr	r3, [pc, #20]	@ (800654c <_vfiprintf_r+0x228>)
 8006536:	a904      	add	r1, sp, #16
 8006538:	4630      	mov	r0, r6
 800653a:	f000 f879 	bl	8006630 <_printf_i>
 800653e:	e7e4      	b.n	800650a <_vfiprintf_r+0x1e6>
 8006540:	08008214 	.word	0x08008214
 8006544:	0800821e 	.word	0x0800821e
 8006548:	00000000 	.word	0x00000000
 800654c:	080062ff 	.word	0x080062ff
 8006550:	0800821a 	.word	0x0800821a

08006554 <_printf_common>:
 8006554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006558:	4616      	mov	r6, r2
 800655a:	4698      	mov	r8, r3
 800655c:	688a      	ldr	r2, [r1, #8]
 800655e:	690b      	ldr	r3, [r1, #16]
 8006560:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006564:	4293      	cmp	r3, r2
 8006566:	bfb8      	it	lt
 8006568:	4613      	movlt	r3, r2
 800656a:	6033      	str	r3, [r6, #0]
 800656c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006570:	4607      	mov	r7, r0
 8006572:	460c      	mov	r4, r1
 8006574:	b10a      	cbz	r2, 800657a <_printf_common+0x26>
 8006576:	3301      	adds	r3, #1
 8006578:	6033      	str	r3, [r6, #0]
 800657a:	6823      	ldr	r3, [r4, #0]
 800657c:	0699      	lsls	r1, r3, #26
 800657e:	bf42      	ittt	mi
 8006580:	6833      	ldrmi	r3, [r6, #0]
 8006582:	3302      	addmi	r3, #2
 8006584:	6033      	strmi	r3, [r6, #0]
 8006586:	6825      	ldr	r5, [r4, #0]
 8006588:	f015 0506 	ands.w	r5, r5, #6
 800658c:	d106      	bne.n	800659c <_printf_common+0x48>
 800658e:	f104 0a19 	add.w	sl, r4, #25
 8006592:	68e3      	ldr	r3, [r4, #12]
 8006594:	6832      	ldr	r2, [r6, #0]
 8006596:	1a9b      	subs	r3, r3, r2
 8006598:	42ab      	cmp	r3, r5
 800659a:	dc26      	bgt.n	80065ea <_printf_common+0x96>
 800659c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80065a0:	6822      	ldr	r2, [r4, #0]
 80065a2:	3b00      	subs	r3, #0
 80065a4:	bf18      	it	ne
 80065a6:	2301      	movne	r3, #1
 80065a8:	0692      	lsls	r2, r2, #26
 80065aa:	d42b      	bmi.n	8006604 <_printf_common+0xb0>
 80065ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80065b0:	4641      	mov	r1, r8
 80065b2:	4638      	mov	r0, r7
 80065b4:	47c8      	blx	r9
 80065b6:	3001      	adds	r0, #1
 80065b8:	d01e      	beq.n	80065f8 <_printf_common+0xa4>
 80065ba:	6823      	ldr	r3, [r4, #0]
 80065bc:	6922      	ldr	r2, [r4, #16]
 80065be:	f003 0306 	and.w	r3, r3, #6
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	bf02      	ittt	eq
 80065c6:	68e5      	ldreq	r5, [r4, #12]
 80065c8:	6833      	ldreq	r3, [r6, #0]
 80065ca:	1aed      	subeq	r5, r5, r3
 80065cc:	68a3      	ldr	r3, [r4, #8]
 80065ce:	bf0c      	ite	eq
 80065d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80065d4:	2500      	movne	r5, #0
 80065d6:	4293      	cmp	r3, r2
 80065d8:	bfc4      	itt	gt
 80065da:	1a9b      	subgt	r3, r3, r2
 80065dc:	18ed      	addgt	r5, r5, r3
 80065de:	2600      	movs	r6, #0
 80065e0:	341a      	adds	r4, #26
 80065e2:	42b5      	cmp	r5, r6
 80065e4:	d11a      	bne.n	800661c <_printf_common+0xc8>
 80065e6:	2000      	movs	r0, #0
 80065e8:	e008      	b.n	80065fc <_printf_common+0xa8>
 80065ea:	2301      	movs	r3, #1
 80065ec:	4652      	mov	r2, sl
 80065ee:	4641      	mov	r1, r8
 80065f0:	4638      	mov	r0, r7
 80065f2:	47c8      	blx	r9
 80065f4:	3001      	adds	r0, #1
 80065f6:	d103      	bne.n	8006600 <_printf_common+0xac>
 80065f8:	f04f 30ff 	mov.w	r0, #4294967295
 80065fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006600:	3501      	adds	r5, #1
 8006602:	e7c6      	b.n	8006592 <_printf_common+0x3e>
 8006604:	18e1      	adds	r1, r4, r3
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	2030      	movs	r0, #48	@ 0x30
 800660a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800660e:	4422      	add	r2, r4
 8006610:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006614:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006618:	3302      	adds	r3, #2
 800661a:	e7c7      	b.n	80065ac <_printf_common+0x58>
 800661c:	2301      	movs	r3, #1
 800661e:	4622      	mov	r2, r4
 8006620:	4641      	mov	r1, r8
 8006622:	4638      	mov	r0, r7
 8006624:	47c8      	blx	r9
 8006626:	3001      	adds	r0, #1
 8006628:	d0e6      	beq.n	80065f8 <_printf_common+0xa4>
 800662a:	3601      	adds	r6, #1
 800662c:	e7d9      	b.n	80065e2 <_printf_common+0x8e>
	...

08006630 <_printf_i>:
 8006630:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006634:	7e0f      	ldrb	r7, [r1, #24]
 8006636:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006638:	2f78      	cmp	r7, #120	@ 0x78
 800663a:	4691      	mov	r9, r2
 800663c:	4680      	mov	r8, r0
 800663e:	460c      	mov	r4, r1
 8006640:	469a      	mov	sl, r3
 8006642:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006646:	d807      	bhi.n	8006658 <_printf_i+0x28>
 8006648:	2f62      	cmp	r7, #98	@ 0x62
 800664a:	d80a      	bhi.n	8006662 <_printf_i+0x32>
 800664c:	2f00      	cmp	r7, #0
 800664e:	f000 80d2 	beq.w	80067f6 <_printf_i+0x1c6>
 8006652:	2f58      	cmp	r7, #88	@ 0x58
 8006654:	f000 80b9 	beq.w	80067ca <_printf_i+0x19a>
 8006658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800665c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006660:	e03a      	b.n	80066d8 <_printf_i+0xa8>
 8006662:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006666:	2b15      	cmp	r3, #21
 8006668:	d8f6      	bhi.n	8006658 <_printf_i+0x28>
 800666a:	a101      	add	r1, pc, #4	@ (adr r1, 8006670 <_printf_i+0x40>)
 800666c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006670:	080066c9 	.word	0x080066c9
 8006674:	080066dd 	.word	0x080066dd
 8006678:	08006659 	.word	0x08006659
 800667c:	08006659 	.word	0x08006659
 8006680:	08006659 	.word	0x08006659
 8006684:	08006659 	.word	0x08006659
 8006688:	080066dd 	.word	0x080066dd
 800668c:	08006659 	.word	0x08006659
 8006690:	08006659 	.word	0x08006659
 8006694:	08006659 	.word	0x08006659
 8006698:	08006659 	.word	0x08006659
 800669c:	080067dd 	.word	0x080067dd
 80066a0:	08006707 	.word	0x08006707
 80066a4:	08006797 	.word	0x08006797
 80066a8:	08006659 	.word	0x08006659
 80066ac:	08006659 	.word	0x08006659
 80066b0:	080067ff 	.word	0x080067ff
 80066b4:	08006659 	.word	0x08006659
 80066b8:	08006707 	.word	0x08006707
 80066bc:	08006659 	.word	0x08006659
 80066c0:	08006659 	.word	0x08006659
 80066c4:	0800679f 	.word	0x0800679f
 80066c8:	6833      	ldr	r3, [r6, #0]
 80066ca:	1d1a      	adds	r2, r3, #4
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	6032      	str	r2, [r6, #0]
 80066d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80066d8:	2301      	movs	r3, #1
 80066da:	e09d      	b.n	8006818 <_printf_i+0x1e8>
 80066dc:	6833      	ldr	r3, [r6, #0]
 80066de:	6820      	ldr	r0, [r4, #0]
 80066e0:	1d19      	adds	r1, r3, #4
 80066e2:	6031      	str	r1, [r6, #0]
 80066e4:	0606      	lsls	r6, r0, #24
 80066e6:	d501      	bpl.n	80066ec <_printf_i+0xbc>
 80066e8:	681d      	ldr	r5, [r3, #0]
 80066ea:	e003      	b.n	80066f4 <_printf_i+0xc4>
 80066ec:	0645      	lsls	r5, r0, #25
 80066ee:	d5fb      	bpl.n	80066e8 <_printf_i+0xb8>
 80066f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80066f4:	2d00      	cmp	r5, #0
 80066f6:	da03      	bge.n	8006700 <_printf_i+0xd0>
 80066f8:	232d      	movs	r3, #45	@ 0x2d
 80066fa:	426d      	negs	r5, r5
 80066fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006700:	4859      	ldr	r0, [pc, #356]	@ (8006868 <_printf_i+0x238>)
 8006702:	230a      	movs	r3, #10
 8006704:	e011      	b.n	800672a <_printf_i+0xfa>
 8006706:	6821      	ldr	r1, [r4, #0]
 8006708:	6833      	ldr	r3, [r6, #0]
 800670a:	0608      	lsls	r0, r1, #24
 800670c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006710:	d402      	bmi.n	8006718 <_printf_i+0xe8>
 8006712:	0649      	lsls	r1, r1, #25
 8006714:	bf48      	it	mi
 8006716:	b2ad      	uxthmi	r5, r5
 8006718:	2f6f      	cmp	r7, #111	@ 0x6f
 800671a:	4853      	ldr	r0, [pc, #332]	@ (8006868 <_printf_i+0x238>)
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	bf14      	ite	ne
 8006720:	230a      	movne	r3, #10
 8006722:	2308      	moveq	r3, #8
 8006724:	2100      	movs	r1, #0
 8006726:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800672a:	6866      	ldr	r6, [r4, #4]
 800672c:	60a6      	str	r6, [r4, #8]
 800672e:	2e00      	cmp	r6, #0
 8006730:	bfa2      	ittt	ge
 8006732:	6821      	ldrge	r1, [r4, #0]
 8006734:	f021 0104 	bicge.w	r1, r1, #4
 8006738:	6021      	strge	r1, [r4, #0]
 800673a:	b90d      	cbnz	r5, 8006740 <_printf_i+0x110>
 800673c:	2e00      	cmp	r6, #0
 800673e:	d04b      	beq.n	80067d8 <_printf_i+0x1a8>
 8006740:	4616      	mov	r6, r2
 8006742:	fbb5 f1f3 	udiv	r1, r5, r3
 8006746:	fb03 5711 	mls	r7, r3, r1, r5
 800674a:	5dc7      	ldrb	r7, [r0, r7]
 800674c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006750:	462f      	mov	r7, r5
 8006752:	42bb      	cmp	r3, r7
 8006754:	460d      	mov	r5, r1
 8006756:	d9f4      	bls.n	8006742 <_printf_i+0x112>
 8006758:	2b08      	cmp	r3, #8
 800675a:	d10b      	bne.n	8006774 <_printf_i+0x144>
 800675c:	6823      	ldr	r3, [r4, #0]
 800675e:	07df      	lsls	r7, r3, #31
 8006760:	d508      	bpl.n	8006774 <_printf_i+0x144>
 8006762:	6923      	ldr	r3, [r4, #16]
 8006764:	6861      	ldr	r1, [r4, #4]
 8006766:	4299      	cmp	r1, r3
 8006768:	bfde      	ittt	le
 800676a:	2330      	movle	r3, #48	@ 0x30
 800676c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006770:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006774:	1b92      	subs	r2, r2, r6
 8006776:	6122      	str	r2, [r4, #16]
 8006778:	f8cd a000 	str.w	sl, [sp]
 800677c:	464b      	mov	r3, r9
 800677e:	aa03      	add	r2, sp, #12
 8006780:	4621      	mov	r1, r4
 8006782:	4640      	mov	r0, r8
 8006784:	f7ff fee6 	bl	8006554 <_printf_common>
 8006788:	3001      	adds	r0, #1
 800678a:	d14a      	bne.n	8006822 <_printf_i+0x1f2>
 800678c:	f04f 30ff 	mov.w	r0, #4294967295
 8006790:	b004      	add	sp, #16
 8006792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006796:	6823      	ldr	r3, [r4, #0]
 8006798:	f043 0320 	orr.w	r3, r3, #32
 800679c:	6023      	str	r3, [r4, #0]
 800679e:	4833      	ldr	r0, [pc, #204]	@ (800686c <_printf_i+0x23c>)
 80067a0:	2778      	movs	r7, #120	@ 0x78
 80067a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80067a6:	6823      	ldr	r3, [r4, #0]
 80067a8:	6831      	ldr	r1, [r6, #0]
 80067aa:	061f      	lsls	r7, r3, #24
 80067ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80067b0:	d402      	bmi.n	80067b8 <_printf_i+0x188>
 80067b2:	065f      	lsls	r7, r3, #25
 80067b4:	bf48      	it	mi
 80067b6:	b2ad      	uxthmi	r5, r5
 80067b8:	6031      	str	r1, [r6, #0]
 80067ba:	07d9      	lsls	r1, r3, #31
 80067bc:	bf44      	itt	mi
 80067be:	f043 0320 	orrmi.w	r3, r3, #32
 80067c2:	6023      	strmi	r3, [r4, #0]
 80067c4:	b11d      	cbz	r5, 80067ce <_printf_i+0x19e>
 80067c6:	2310      	movs	r3, #16
 80067c8:	e7ac      	b.n	8006724 <_printf_i+0xf4>
 80067ca:	4827      	ldr	r0, [pc, #156]	@ (8006868 <_printf_i+0x238>)
 80067cc:	e7e9      	b.n	80067a2 <_printf_i+0x172>
 80067ce:	6823      	ldr	r3, [r4, #0]
 80067d0:	f023 0320 	bic.w	r3, r3, #32
 80067d4:	6023      	str	r3, [r4, #0]
 80067d6:	e7f6      	b.n	80067c6 <_printf_i+0x196>
 80067d8:	4616      	mov	r6, r2
 80067da:	e7bd      	b.n	8006758 <_printf_i+0x128>
 80067dc:	6833      	ldr	r3, [r6, #0]
 80067de:	6825      	ldr	r5, [r4, #0]
 80067e0:	6961      	ldr	r1, [r4, #20]
 80067e2:	1d18      	adds	r0, r3, #4
 80067e4:	6030      	str	r0, [r6, #0]
 80067e6:	062e      	lsls	r6, r5, #24
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	d501      	bpl.n	80067f0 <_printf_i+0x1c0>
 80067ec:	6019      	str	r1, [r3, #0]
 80067ee:	e002      	b.n	80067f6 <_printf_i+0x1c6>
 80067f0:	0668      	lsls	r0, r5, #25
 80067f2:	d5fb      	bpl.n	80067ec <_printf_i+0x1bc>
 80067f4:	8019      	strh	r1, [r3, #0]
 80067f6:	2300      	movs	r3, #0
 80067f8:	6123      	str	r3, [r4, #16]
 80067fa:	4616      	mov	r6, r2
 80067fc:	e7bc      	b.n	8006778 <_printf_i+0x148>
 80067fe:	6833      	ldr	r3, [r6, #0]
 8006800:	1d1a      	adds	r2, r3, #4
 8006802:	6032      	str	r2, [r6, #0]
 8006804:	681e      	ldr	r6, [r3, #0]
 8006806:	6862      	ldr	r2, [r4, #4]
 8006808:	2100      	movs	r1, #0
 800680a:	4630      	mov	r0, r6
 800680c:	f7f9 fce0 	bl	80001d0 <memchr>
 8006810:	b108      	cbz	r0, 8006816 <_printf_i+0x1e6>
 8006812:	1b80      	subs	r0, r0, r6
 8006814:	6060      	str	r0, [r4, #4]
 8006816:	6863      	ldr	r3, [r4, #4]
 8006818:	6123      	str	r3, [r4, #16]
 800681a:	2300      	movs	r3, #0
 800681c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006820:	e7aa      	b.n	8006778 <_printf_i+0x148>
 8006822:	6923      	ldr	r3, [r4, #16]
 8006824:	4632      	mov	r2, r6
 8006826:	4649      	mov	r1, r9
 8006828:	4640      	mov	r0, r8
 800682a:	47d0      	blx	sl
 800682c:	3001      	adds	r0, #1
 800682e:	d0ad      	beq.n	800678c <_printf_i+0x15c>
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	079b      	lsls	r3, r3, #30
 8006834:	d413      	bmi.n	800685e <_printf_i+0x22e>
 8006836:	68e0      	ldr	r0, [r4, #12]
 8006838:	9b03      	ldr	r3, [sp, #12]
 800683a:	4298      	cmp	r0, r3
 800683c:	bfb8      	it	lt
 800683e:	4618      	movlt	r0, r3
 8006840:	e7a6      	b.n	8006790 <_printf_i+0x160>
 8006842:	2301      	movs	r3, #1
 8006844:	4632      	mov	r2, r6
 8006846:	4649      	mov	r1, r9
 8006848:	4640      	mov	r0, r8
 800684a:	47d0      	blx	sl
 800684c:	3001      	adds	r0, #1
 800684e:	d09d      	beq.n	800678c <_printf_i+0x15c>
 8006850:	3501      	adds	r5, #1
 8006852:	68e3      	ldr	r3, [r4, #12]
 8006854:	9903      	ldr	r1, [sp, #12]
 8006856:	1a5b      	subs	r3, r3, r1
 8006858:	42ab      	cmp	r3, r5
 800685a:	dcf2      	bgt.n	8006842 <_printf_i+0x212>
 800685c:	e7eb      	b.n	8006836 <_printf_i+0x206>
 800685e:	2500      	movs	r5, #0
 8006860:	f104 0619 	add.w	r6, r4, #25
 8006864:	e7f5      	b.n	8006852 <_printf_i+0x222>
 8006866:	bf00      	nop
 8006868:	08008225 	.word	0x08008225
 800686c:	08008236 	.word	0x08008236

08006870 <__sflush_r>:
 8006870:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006878:	0716      	lsls	r6, r2, #28
 800687a:	4605      	mov	r5, r0
 800687c:	460c      	mov	r4, r1
 800687e:	d454      	bmi.n	800692a <__sflush_r+0xba>
 8006880:	684b      	ldr	r3, [r1, #4]
 8006882:	2b00      	cmp	r3, #0
 8006884:	dc02      	bgt.n	800688c <__sflush_r+0x1c>
 8006886:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006888:	2b00      	cmp	r3, #0
 800688a:	dd48      	ble.n	800691e <__sflush_r+0xae>
 800688c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800688e:	2e00      	cmp	r6, #0
 8006890:	d045      	beq.n	800691e <__sflush_r+0xae>
 8006892:	2300      	movs	r3, #0
 8006894:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006898:	682f      	ldr	r7, [r5, #0]
 800689a:	6a21      	ldr	r1, [r4, #32]
 800689c:	602b      	str	r3, [r5, #0]
 800689e:	d030      	beq.n	8006902 <__sflush_r+0x92>
 80068a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80068a2:	89a3      	ldrh	r3, [r4, #12]
 80068a4:	0759      	lsls	r1, r3, #29
 80068a6:	d505      	bpl.n	80068b4 <__sflush_r+0x44>
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	1ad2      	subs	r2, r2, r3
 80068ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80068ae:	b10b      	cbz	r3, 80068b4 <__sflush_r+0x44>
 80068b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80068b2:	1ad2      	subs	r2, r2, r3
 80068b4:	2300      	movs	r3, #0
 80068b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80068b8:	6a21      	ldr	r1, [r4, #32]
 80068ba:	4628      	mov	r0, r5
 80068bc:	47b0      	blx	r6
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	89a3      	ldrh	r3, [r4, #12]
 80068c2:	d106      	bne.n	80068d2 <__sflush_r+0x62>
 80068c4:	6829      	ldr	r1, [r5, #0]
 80068c6:	291d      	cmp	r1, #29
 80068c8:	d82b      	bhi.n	8006922 <__sflush_r+0xb2>
 80068ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006974 <__sflush_r+0x104>)
 80068cc:	410a      	asrs	r2, r1
 80068ce:	07d6      	lsls	r6, r2, #31
 80068d0:	d427      	bmi.n	8006922 <__sflush_r+0xb2>
 80068d2:	2200      	movs	r2, #0
 80068d4:	6062      	str	r2, [r4, #4]
 80068d6:	04d9      	lsls	r1, r3, #19
 80068d8:	6922      	ldr	r2, [r4, #16]
 80068da:	6022      	str	r2, [r4, #0]
 80068dc:	d504      	bpl.n	80068e8 <__sflush_r+0x78>
 80068de:	1c42      	adds	r2, r0, #1
 80068e0:	d101      	bne.n	80068e6 <__sflush_r+0x76>
 80068e2:	682b      	ldr	r3, [r5, #0]
 80068e4:	b903      	cbnz	r3, 80068e8 <__sflush_r+0x78>
 80068e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80068e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80068ea:	602f      	str	r7, [r5, #0]
 80068ec:	b1b9      	cbz	r1, 800691e <__sflush_r+0xae>
 80068ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80068f2:	4299      	cmp	r1, r3
 80068f4:	d002      	beq.n	80068fc <__sflush_r+0x8c>
 80068f6:	4628      	mov	r0, r5
 80068f8:	f7ff fca0 	bl	800623c <_free_r>
 80068fc:	2300      	movs	r3, #0
 80068fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8006900:	e00d      	b.n	800691e <__sflush_r+0xae>
 8006902:	2301      	movs	r3, #1
 8006904:	4628      	mov	r0, r5
 8006906:	47b0      	blx	r6
 8006908:	4602      	mov	r2, r0
 800690a:	1c50      	adds	r0, r2, #1
 800690c:	d1c9      	bne.n	80068a2 <__sflush_r+0x32>
 800690e:	682b      	ldr	r3, [r5, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0c6      	beq.n	80068a2 <__sflush_r+0x32>
 8006914:	2b1d      	cmp	r3, #29
 8006916:	d001      	beq.n	800691c <__sflush_r+0xac>
 8006918:	2b16      	cmp	r3, #22
 800691a:	d11e      	bne.n	800695a <__sflush_r+0xea>
 800691c:	602f      	str	r7, [r5, #0]
 800691e:	2000      	movs	r0, #0
 8006920:	e022      	b.n	8006968 <__sflush_r+0xf8>
 8006922:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006926:	b21b      	sxth	r3, r3
 8006928:	e01b      	b.n	8006962 <__sflush_r+0xf2>
 800692a:	690f      	ldr	r7, [r1, #16]
 800692c:	2f00      	cmp	r7, #0
 800692e:	d0f6      	beq.n	800691e <__sflush_r+0xae>
 8006930:	0793      	lsls	r3, r2, #30
 8006932:	680e      	ldr	r6, [r1, #0]
 8006934:	bf08      	it	eq
 8006936:	694b      	ldreq	r3, [r1, #20]
 8006938:	600f      	str	r7, [r1, #0]
 800693a:	bf18      	it	ne
 800693c:	2300      	movne	r3, #0
 800693e:	eba6 0807 	sub.w	r8, r6, r7
 8006942:	608b      	str	r3, [r1, #8]
 8006944:	f1b8 0f00 	cmp.w	r8, #0
 8006948:	dde9      	ble.n	800691e <__sflush_r+0xae>
 800694a:	6a21      	ldr	r1, [r4, #32]
 800694c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800694e:	4643      	mov	r3, r8
 8006950:	463a      	mov	r2, r7
 8006952:	4628      	mov	r0, r5
 8006954:	47b0      	blx	r6
 8006956:	2800      	cmp	r0, #0
 8006958:	dc08      	bgt.n	800696c <__sflush_r+0xfc>
 800695a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800695e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006962:	81a3      	strh	r3, [r4, #12]
 8006964:	f04f 30ff 	mov.w	r0, #4294967295
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	4407      	add	r7, r0
 800696e:	eba8 0800 	sub.w	r8, r8, r0
 8006972:	e7e7      	b.n	8006944 <__sflush_r+0xd4>
 8006974:	dfbffffe 	.word	0xdfbffffe

08006978 <_fflush_r>:
 8006978:	b538      	push	{r3, r4, r5, lr}
 800697a:	690b      	ldr	r3, [r1, #16]
 800697c:	4605      	mov	r5, r0
 800697e:	460c      	mov	r4, r1
 8006980:	b913      	cbnz	r3, 8006988 <_fflush_r+0x10>
 8006982:	2500      	movs	r5, #0
 8006984:	4628      	mov	r0, r5
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	b118      	cbz	r0, 8006992 <_fflush_r+0x1a>
 800698a:	6a03      	ldr	r3, [r0, #32]
 800698c:	b90b      	cbnz	r3, 8006992 <_fflush_r+0x1a>
 800698e:	f7ff fb0f 	bl	8005fb0 <__sinit>
 8006992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d0f3      	beq.n	8006982 <_fflush_r+0xa>
 800699a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800699c:	07d0      	lsls	r0, r2, #31
 800699e:	d404      	bmi.n	80069aa <_fflush_r+0x32>
 80069a0:	0599      	lsls	r1, r3, #22
 80069a2:	d402      	bmi.n	80069aa <_fflush_r+0x32>
 80069a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069a6:	f7ff fc32 	bl	800620e <__retarget_lock_acquire_recursive>
 80069aa:	4628      	mov	r0, r5
 80069ac:	4621      	mov	r1, r4
 80069ae:	f7ff ff5f 	bl	8006870 <__sflush_r>
 80069b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80069b4:	07da      	lsls	r2, r3, #31
 80069b6:	4605      	mov	r5, r0
 80069b8:	d4e4      	bmi.n	8006984 <_fflush_r+0xc>
 80069ba:	89a3      	ldrh	r3, [r4, #12]
 80069bc:	059b      	lsls	r3, r3, #22
 80069be:	d4e1      	bmi.n	8006984 <_fflush_r+0xc>
 80069c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80069c2:	f7ff fc25 	bl	8006210 <__retarget_lock_release_recursive>
 80069c6:	e7dd      	b.n	8006984 <_fflush_r+0xc>

080069c8 <__swbuf_r>:
 80069c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ca:	460e      	mov	r6, r1
 80069cc:	4614      	mov	r4, r2
 80069ce:	4605      	mov	r5, r0
 80069d0:	b118      	cbz	r0, 80069da <__swbuf_r+0x12>
 80069d2:	6a03      	ldr	r3, [r0, #32]
 80069d4:	b90b      	cbnz	r3, 80069da <__swbuf_r+0x12>
 80069d6:	f7ff faeb 	bl	8005fb0 <__sinit>
 80069da:	69a3      	ldr	r3, [r4, #24]
 80069dc:	60a3      	str	r3, [r4, #8]
 80069de:	89a3      	ldrh	r3, [r4, #12]
 80069e0:	071a      	lsls	r2, r3, #28
 80069e2:	d501      	bpl.n	80069e8 <__swbuf_r+0x20>
 80069e4:	6923      	ldr	r3, [r4, #16]
 80069e6:	b943      	cbnz	r3, 80069fa <__swbuf_r+0x32>
 80069e8:	4621      	mov	r1, r4
 80069ea:	4628      	mov	r0, r5
 80069ec:	f000 f82a 	bl	8006a44 <__swsetup_r>
 80069f0:	b118      	cbz	r0, 80069fa <__swbuf_r+0x32>
 80069f2:	f04f 37ff 	mov.w	r7, #4294967295
 80069f6:	4638      	mov	r0, r7
 80069f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069fa:	6823      	ldr	r3, [r4, #0]
 80069fc:	6922      	ldr	r2, [r4, #16]
 80069fe:	1a98      	subs	r0, r3, r2
 8006a00:	6963      	ldr	r3, [r4, #20]
 8006a02:	b2f6      	uxtb	r6, r6
 8006a04:	4283      	cmp	r3, r0
 8006a06:	4637      	mov	r7, r6
 8006a08:	dc05      	bgt.n	8006a16 <__swbuf_r+0x4e>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	f7ff ffb3 	bl	8006978 <_fflush_r>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d1ed      	bne.n	80069f2 <__swbuf_r+0x2a>
 8006a16:	68a3      	ldr	r3, [r4, #8]
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	60a3      	str	r3, [r4, #8]
 8006a1c:	6823      	ldr	r3, [r4, #0]
 8006a1e:	1c5a      	adds	r2, r3, #1
 8006a20:	6022      	str	r2, [r4, #0]
 8006a22:	701e      	strb	r6, [r3, #0]
 8006a24:	6962      	ldr	r2, [r4, #20]
 8006a26:	1c43      	adds	r3, r0, #1
 8006a28:	429a      	cmp	r2, r3
 8006a2a:	d004      	beq.n	8006a36 <__swbuf_r+0x6e>
 8006a2c:	89a3      	ldrh	r3, [r4, #12]
 8006a2e:	07db      	lsls	r3, r3, #31
 8006a30:	d5e1      	bpl.n	80069f6 <__swbuf_r+0x2e>
 8006a32:	2e0a      	cmp	r6, #10
 8006a34:	d1df      	bne.n	80069f6 <__swbuf_r+0x2e>
 8006a36:	4621      	mov	r1, r4
 8006a38:	4628      	mov	r0, r5
 8006a3a:	f7ff ff9d 	bl	8006978 <_fflush_r>
 8006a3e:	2800      	cmp	r0, #0
 8006a40:	d0d9      	beq.n	80069f6 <__swbuf_r+0x2e>
 8006a42:	e7d6      	b.n	80069f2 <__swbuf_r+0x2a>

08006a44 <__swsetup_r>:
 8006a44:	b538      	push	{r3, r4, r5, lr}
 8006a46:	4b29      	ldr	r3, [pc, #164]	@ (8006aec <__swsetup_r+0xa8>)
 8006a48:	4605      	mov	r5, r0
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	460c      	mov	r4, r1
 8006a4e:	b118      	cbz	r0, 8006a58 <__swsetup_r+0x14>
 8006a50:	6a03      	ldr	r3, [r0, #32]
 8006a52:	b90b      	cbnz	r3, 8006a58 <__swsetup_r+0x14>
 8006a54:	f7ff faac 	bl	8005fb0 <__sinit>
 8006a58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a5c:	0719      	lsls	r1, r3, #28
 8006a5e:	d422      	bmi.n	8006aa6 <__swsetup_r+0x62>
 8006a60:	06da      	lsls	r2, r3, #27
 8006a62:	d407      	bmi.n	8006a74 <__swsetup_r+0x30>
 8006a64:	2209      	movs	r2, #9
 8006a66:	602a      	str	r2, [r5, #0]
 8006a68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a6c:	81a3      	strh	r3, [r4, #12]
 8006a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a72:	e033      	b.n	8006adc <__swsetup_r+0x98>
 8006a74:	0758      	lsls	r0, r3, #29
 8006a76:	d512      	bpl.n	8006a9e <__swsetup_r+0x5a>
 8006a78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006a7a:	b141      	cbz	r1, 8006a8e <__swsetup_r+0x4a>
 8006a7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006a80:	4299      	cmp	r1, r3
 8006a82:	d002      	beq.n	8006a8a <__swsetup_r+0x46>
 8006a84:	4628      	mov	r0, r5
 8006a86:	f7ff fbd9 	bl	800623c <_free_r>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006a8e:	89a3      	ldrh	r3, [r4, #12]
 8006a90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	2300      	movs	r3, #0
 8006a98:	6063      	str	r3, [r4, #4]
 8006a9a:	6923      	ldr	r3, [r4, #16]
 8006a9c:	6023      	str	r3, [r4, #0]
 8006a9e:	89a3      	ldrh	r3, [r4, #12]
 8006aa0:	f043 0308 	orr.w	r3, r3, #8
 8006aa4:	81a3      	strh	r3, [r4, #12]
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	b94b      	cbnz	r3, 8006abe <__swsetup_r+0x7a>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ab4:	d003      	beq.n	8006abe <__swsetup_r+0x7a>
 8006ab6:	4621      	mov	r1, r4
 8006ab8:	4628      	mov	r0, r5
 8006aba:	f000 f883 	bl	8006bc4 <__smakebuf_r>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	f013 0201 	ands.w	r2, r3, #1
 8006ac6:	d00a      	beq.n	8006ade <__swsetup_r+0x9a>
 8006ac8:	2200      	movs	r2, #0
 8006aca:	60a2      	str	r2, [r4, #8]
 8006acc:	6962      	ldr	r2, [r4, #20]
 8006ace:	4252      	negs	r2, r2
 8006ad0:	61a2      	str	r2, [r4, #24]
 8006ad2:	6922      	ldr	r2, [r4, #16]
 8006ad4:	b942      	cbnz	r2, 8006ae8 <__swsetup_r+0xa4>
 8006ad6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006ada:	d1c5      	bne.n	8006a68 <__swsetup_r+0x24>
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	0799      	lsls	r1, r3, #30
 8006ae0:	bf58      	it	pl
 8006ae2:	6962      	ldrpl	r2, [r4, #20]
 8006ae4:	60a2      	str	r2, [r4, #8]
 8006ae6:	e7f4      	b.n	8006ad2 <__swsetup_r+0x8e>
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e7f7      	b.n	8006adc <__swsetup_r+0x98>
 8006aec:	2000001c 	.word	0x2000001c

08006af0 <_raise_r>:
 8006af0:	291f      	cmp	r1, #31
 8006af2:	b538      	push	{r3, r4, r5, lr}
 8006af4:	4605      	mov	r5, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	d904      	bls.n	8006b04 <_raise_r+0x14>
 8006afa:	2316      	movs	r3, #22
 8006afc:	6003      	str	r3, [r0, #0]
 8006afe:	f04f 30ff 	mov.w	r0, #4294967295
 8006b02:	bd38      	pop	{r3, r4, r5, pc}
 8006b04:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006b06:	b112      	cbz	r2, 8006b0e <_raise_r+0x1e>
 8006b08:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b0c:	b94b      	cbnz	r3, 8006b22 <_raise_r+0x32>
 8006b0e:	4628      	mov	r0, r5
 8006b10:	f000 f830 	bl	8006b74 <_getpid_r>
 8006b14:	4622      	mov	r2, r4
 8006b16:	4601      	mov	r1, r0
 8006b18:	4628      	mov	r0, r5
 8006b1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b1e:	f000 b817 	b.w	8006b50 <_kill_r>
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d00a      	beq.n	8006b3c <_raise_r+0x4c>
 8006b26:	1c59      	adds	r1, r3, #1
 8006b28:	d103      	bne.n	8006b32 <_raise_r+0x42>
 8006b2a:	2316      	movs	r3, #22
 8006b2c:	6003      	str	r3, [r0, #0]
 8006b2e:	2001      	movs	r0, #1
 8006b30:	e7e7      	b.n	8006b02 <_raise_r+0x12>
 8006b32:	2100      	movs	r1, #0
 8006b34:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4798      	blx	r3
 8006b3c:	2000      	movs	r0, #0
 8006b3e:	e7e0      	b.n	8006b02 <_raise_r+0x12>

08006b40 <raise>:
 8006b40:	4b02      	ldr	r3, [pc, #8]	@ (8006b4c <raise+0xc>)
 8006b42:	4601      	mov	r1, r0
 8006b44:	6818      	ldr	r0, [r3, #0]
 8006b46:	f7ff bfd3 	b.w	8006af0 <_raise_r>
 8006b4a:	bf00      	nop
 8006b4c:	2000001c 	.word	0x2000001c

08006b50 <_kill_r>:
 8006b50:	b538      	push	{r3, r4, r5, lr}
 8006b52:	4d07      	ldr	r5, [pc, #28]	@ (8006b70 <_kill_r+0x20>)
 8006b54:	2300      	movs	r3, #0
 8006b56:	4604      	mov	r4, r0
 8006b58:	4608      	mov	r0, r1
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	602b      	str	r3, [r5, #0]
 8006b5e:	f7fc ffed 	bl	8003b3c <_kill>
 8006b62:	1c43      	adds	r3, r0, #1
 8006b64:	d102      	bne.n	8006b6c <_kill_r+0x1c>
 8006b66:	682b      	ldr	r3, [r5, #0]
 8006b68:	b103      	cbz	r3, 8006b6c <_kill_r+0x1c>
 8006b6a:	6023      	str	r3, [r4, #0]
 8006b6c:	bd38      	pop	{r3, r4, r5, pc}
 8006b6e:	bf00      	nop
 8006b70:	20000240 	.word	0x20000240

08006b74 <_getpid_r>:
 8006b74:	f7fc bfda 	b.w	8003b2c <_getpid>

08006b78 <__swhatbuf_r>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b80:	2900      	cmp	r1, #0
 8006b82:	b096      	sub	sp, #88	@ 0x58
 8006b84:	4615      	mov	r5, r2
 8006b86:	461e      	mov	r6, r3
 8006b88:	da0d      	bge.n	8006ba6 <__swhatbuf_r+0x2e>
 8006b8a:	89a3      	ldrh	r3, [r4, #12]
 8006b8c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006b90:	f04f 0100 	mov.w	r1, #0
 8006b94:	bf14      	ite	ne
 8006b96:	2340      	movne	r3, #64	@ 0x40
 8006b98:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	6031      	str	r1, [r6, #0]
 8006ba0:	602b      	str	r3, [r5, #0]
 8006ba2:	b016      	add	sp, #88	@ 0x58
 8006ba4:	bd70      	pop	{r4, r5, r6, pc}
 8006ba6:	466a      	mov	r2, sp
 8006ba8:	f000 f848 	bl	8006c3c <_fstat_r>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	dbec      	blt.n	8006b8a <__swhatbuf_r+0x12>
 8006bb0:	9901      	ldr	r1, [sp, #4]
 8006bb2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006bb6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006bba:	4259      	negs	r1, r3
 8006bbc:	4159      	adcs	r1, r3
 8006bbe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006bc2:	e7eb      	b.n	8006b9c <__swhatbuf_r+0x24>

08006bc4 <__smakebuf_r>:
 8006bc4:	898b      	ldrh	r3, [r1, #12]
 8006bc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006bc8:	079d      	lsls	r5, r3, #30
 8006bca:	4606      	mov	r6, r0
 8006bcc:	460c      	mov	r4, r1
 8006bce:	d507      	bpl.n	8006be0 <__smakebuf_r+0x1c>
 8006bd0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006bd4:	6023      	str	r3, [r4, #0]
 8006bd6:	6123      	str	r3, [r4, #16]
 8006bd8:	2301      	movs	r3, #1
 8006bda:	6163      	str	r3, [r4, #20]
 8006bdc:	b003      	add	sp, #12
 8006bde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006be0:	ab01      	add	r3, sp, #4
 8006be2:	466a      	mov	r2, sp
 8006be4:	f7ff ffc8 	bl	8006b78 <__swhatbuf_r>
 8006be8:	9f00      	ldr	r7, [sp, #0]
 8006bea:	4605      	mov	r5, r0
 8006bec:	4639      	mov	r1, r7
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f7ff f8c6 	bl	8005d80 <_malloc_r>
 8006bf4:	b948      	cbnz	r0, 8006c0a <__smakebuf_r+0x46>
 8006bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006bfa:	059a      	lsls	r2, r3, #22
 8006bfc:	d4ee      	bmi.n	8006bdc <__smakebuf_r+0x18>
 8006bfe:	f023 0303 	bic.w	r3, r3, #3
 8006c02:	f043 0302 	orr.w	r3, r3, #2
 8006c06:	81a3      	strh	r3, [r4, #12]
 8006c08:	e7e2      	b.n	8006bd0 <__smakebuf_r+0xc>
 8006c0a:	89a3      	ldrh	r3, [r4, #12]
 8006c0c:	6020      	str	r0, [r4, #0]
 8006c0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c12:	81a3      	strh	r3, [r4, #12]
 8006c14:	9b01      	ldr	r3, [sp, #4]
 8006c16:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006c1a:	b15b      	cbz	r3, 8006c34 <__smakebuf_r+0x70>
 8006c1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c20:	4630      	mov	r0, r6
 8006c22:	f000 f81d 	bl	8006c60 <_isatty_r>
 8006c26:	b128      	cbz	r0, 8006c34 <__smakebuf_r+0x70>
 8006c28:	89a3      	ldrh	r3, [r4, #12]
 8006c2a:	f023 0303 	bic.w	r3, r3, #3
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	81a3      	strh	r3, [r4, #12]
 8006c34:	89a3      	ldrh	r3, [r4, #12]
 8006c36:	431d      	orrs	r5, r3
 8006c38:	81a5      	strh	r5, [r4, #12]
 8006c3a:	e7cf      	b.n	8006bdc <__smakebuf_r+0x18>

08006c3c <_fstat_r>:
 8006c3c:	b538      	push	{r3, r4, r5, lr}
 8006c3e:	4d07      	ldr	r5, [pc, #28]	@ (8006c5c <_fstat_r+0x20>)
 8006c40:	2300      	movs	r3, #0
 8006c42:	4604      	mov	r4, r0
 8006c44:	4608      	mov	r0, r1
 8006c46:	4611      	mov	r1, r2
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	f7fc ffd7 	bl	8003bfc <_fstat>
 8006c4e:	1c43      	adds	r3, r0, #1
 8006c50:	d102      	bne.n	8006c58 <_fstat_r+0x1c>
 8006c52:	682b      	ldr	r3, [r5, #0]
 8006c54:	b103      	cbz	r3, 8006c58 <_fstat_r+0x1c>
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	bd38      	pop	{r3, r4, r5, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000240 	.word	0x20000240

08006c60 <_isatty_r>:
 8006c60:	b538      	push	{r3, r4, r5, lr}
 8006c62:	4d06      	ldr	r5, [pc, #24]	@ (8006c7c <_isatty_r+0x1c>)
 8006c64:	2300      	movs	r3, #0
 8006c66:	4604      	mov	r4, r0
 8006c68:	4608      	mov	r0, r1
 8006c6a:	602b      	str	r3, [r5, #0]
 8006c6c:	f7fc ffd6 	bl	8003c1c <_isatty>
 8006c70:	1c43      	adds	r3, r0, #1
 8006c72:	d102      	bne.n	8006c7a <_isatty_r+0x1a>
 8006c74:	682b      	ldr	r3, [r5, #0]
 8006c76:	b103      	cbz	r3, 8006c7a <_isatty_r+0x1a>
 8006c78:	6023      	str	r3, [r4, #0]
 8006c7a:	bd38      	pop	{r3, r4, r5, pc}
 8006c7c:	20000240 	.word	0x20000240

08006c80 <_init>:
 8006c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c82:	bf00      	nop
 8006c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c86:	bc08      	pop	{r3}
 8006c88:	469e      	mov	lr, r3
 8006c8a:	4770      	bx	lr

08006c8c <_fini>:
 8006c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c8e:	bf00      	nop
 8006c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c92:	bc08      	pop	{r3}
 8006c94:	469e      	mov	lr, r3
 8006c96:	4770      	bx	lr
