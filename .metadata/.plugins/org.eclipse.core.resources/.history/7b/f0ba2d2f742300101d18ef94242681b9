/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include "libcanard/canard.h"
#include "uavcan/node/Heartbeat_1_0.h"
#include "uavcan/node/GetInfo_1_0.h"
#include "uavcan/primitive/array/Real64_1_0.h"
/* USER CODE END Includes */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define GETINFO_TARGET_NODE_ID 5
/* USER CODE END PD */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;

/* USER CODE BEGIN PV */
CanardInstance canard;
CanardTxQueue queue;

static uint8_t getinfo_request_transfer_id = 0;
static uint8_t my_message_transfer_id = 0;
CanardPortID const MSG_PORT_ID = 1620U;
uint32_t test_uptimeSec = 0;

size_t hbeat_ser_buf_size = uavcan_node_Heartbeat_1_0_EXTENT_BYTES_;
uint8_t hbeat_ser_buf[uavcan_node_Heartbeat_1_0_EXTENT_BYTES_];
uint8_t getinfo_request_ser_buf[1];
size_t getinfo_request_ser_buf_size = sizeof(getinfo_request_ser_buf);
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
/* USER CODE BEGIN PFP */
static void* memAllocate(CanardInstance* const ins, const size_t amount);
static void memFree(CanardInstance* const ins, void* const pointer);
void process_canard_TX_queue(void);

uint32_t micros(void)
{
  // TODO: Implement if needed (for now we return 0)
  return 0;
}
/* USER CODE END PFP */

/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_CAN1_Init();

  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

  CAN_FilterTypeDef Filter;
  Filter.FilterIdHigh = 0x0000;
  Filter.FilterIdLow = 0x0000;
  Filter.FilterMaskIdHigh = 0x0000;
  Filter.FilterMaskIdLow = 0x0000;
  Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
  Filter.FilterBank = 0;
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
  Filter.FilterActivation = ENABLE;
  Filter.SlaveStartFilterBank = 0;
  HAL_CAN_ConfigFilter(&hcan1, &Filter);

  canard = canardInit(&memAllocate, &memFree);
  canard.node_id = 1;
  queue = canardTxInit(100, CANARD_MTU_CAN_CLASSIC);

  CanardRxSubscription subscription;
  if (canardRxSubscribe(&canard,
                        CanardTransferKindMessage,
                        MSG_PORT_ID,
                        uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &subscription) != 1)
  {
    Error_Handler();
  }
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    uavcan_node_Heartbeat_1_0 test_heartbeat = {
      .uptime = test_uptimeSec,
      .health = {uavcan_node_Health_1_0_NOMINAL},
      .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
    };

    hbeat_ser_buf_size = uavcan_node_Heartbeat_1_0_EXTENT_BYTES_;
    if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
    {
      Error_Handler();
    }

    const CanardTransferMetadata transfer_metadata = {
      .priority = CanardPriorityNominal,
      .transfer_kind = CanardTransferKindMessage,
      .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
      .remote_node_id = CANARD_NODE_ID_UNSET,
      .transfer_id = my_message_transfer_id,
    };

    if (canardTxPush(&queue, &canard, 0, &transfer_metadata, hbeat_ser_buf_size, hbeat_ser_buf) < 0)
    {
      Error_Handler();
    }

    // Send GetInfo request every 5 seconds
    if ((test_uptimeSec % 5 == 0) && (test_uptimeSec > 0))
    {
      uavcan_node_GetInfo_Request_1_0 getinfo_req = {0};
      getinfo_request_ser_buf_size = sizeof(getinfo_request_ser_buf);

      if (uavcan_node_GetInfo_Request_1_0_serialize_(&getinfo_req, getinfo_request_ser_buf, &getinfo_request_ser_buf_size) < 0)
      {
        Error_Handler();
      }

      const CanardTransferMetadata getinfo_req_metadata = {
        .priority = CanardPriorityNominal,
        .transfer_kind = CanardTransferKindRequest,
        .port_id = uavcan_node_GetInfo_1_0_FIXED_PORT_ID_,
        .remote_node_id = GETINFO_TARGET_NODE_ID,
        .transfer_id = getinfo_request_transfer_id,
      };

      if (canardTxPush(&queue, &canard, 0, &getinfo_req_metadata, getinfo_request_ser_buf_size, getinfo_request_ser_buf) >= 0)
      {
        getinfo_request_transfer_id++;
      }
    }

    uint32_t timestamp = HAL_GetTick();
    while (HAL_GetTick() - timestamp < 1000)
    {
      process_canard_TX_queue();
      HAL_Delay(5);
    }

    test_uptimeSec++;
    my_message_transfer_id++;
    /* USER CODE END WHILE */
  }
  /* USER CODE END 3 */
}

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
  const CanardTxQueueItem* ti = NULL;
  while ((ti = canardTxPeek(&queue)) != NULL)
  {
    if ((ti->tx_deadline_usec == 0U) || (ti->tx_deadline_usec > micros()))
    {
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
      TxHeader.RTR = CAN_RTR_DATA;
      TxHeader.DLC = ti->frame.payload_size;
      TxHeader.ExtId = ti->frame.extended_can_id;

      uint8_t TxData[8] = {0};
      uint32_t TxMailbox;
      memcpy(TxData, ti->frame.payload, ti->frame.payload_size);

      if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
      {
        break;
      }
    }
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8] = {0};
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData);

  CanardFrame rxf;
  rxf.extended_can_id = RxHeader.ExtId;
  rxf.payload_size = (size_t)RxHeader.DLC;
  rxf.payload = RxData;

  CanardRxTransfer transfer;
  if (canardRxAccept(&canard, micros(), &rxf, 0, &transfer, NULL) != 1)
  {
    return;
  }

  uavcan_primitive_array_Real64_1_0 array;
  size_t array_ser_buf_size = uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_;
  if (uavcan_primitive_array_Real64_1_0_deserialize_(&array, transfer.payload, &array_ser_buf_size) < 0)
  {
    //Error_Handler();
  }

  canard.memory_free(&canard, transfer.payload);
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
}

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
  (void) ins;
  return malloc(amount);
}

static void memFree(CanardInstance* const ins, void* const pointer)
{
  (void) ins;
  free(pointer);
}
/* USER CODE END 4 */
