/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2025 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <stdlib.h>
#include "libcanard/canard.h"
#include "uavcan/node/Heartbeat_1_0.h"
#include "uavcan/node/GetInfo_1_0.h"
#include "uavcan/primitive/array/Real64_1_0.h"
// --- Add Register Service Headers ---
#include "uavcan/_register/Access_1_0.h"
#include "uavcan/_register/List_1_0.h"
#include "uavcan/_register/Name_1_0.h"
#include "uavcan/_register/Value_1_0.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
// --- Define Register Structure ---
typedef struct {
    uavcan_register_Name_1_0 name;
    uavcan_register_Value_1_0 value;
    bool mutable;
    bool persistent;
} Register;
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_REGISTERS 10
#define GETINFO_TARGET_NODE_ID 5
#define REGISTER_NAME_MAX_LEN uavcan_register_Name_1_0_name_ARRAY_CAPACITY_
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
CAN_HandleTypeDef hcan1;

/* USER CODE BEGIN PV */
CanardInstance 	canard;		// This is the core structure that keeps all of the states and allocated resources of the library instance
CanardTxQueue 	queue;		// Prioritized transmission queue that keeps CAN frames destined for transmission via one CAN interface

static uint8_t getinfo_request_transfer_id = 0;
static uint8_t my_message_transfer_id = 0;
CanardPortID const MSG_PORT_ID   = 1620U;
uint32_t test_uptimeSec = 0;

// buffer for serialization of a heartbeat message
size_t hbeat_ser_buf_size = uavcan_node_Heartbeat_1_0_EXTENT_BYTES_;
uint8_t hbeat_ser_buf[uavcan_node_Heartbeat_1_0_EXTENT_BYTES_];
uint8_t getinfo_request_ser_buf[1];
size_t getinfo_request_ser_buf_size = sizeof(getinfo_request_ser_buf);

// --- Register Storage ---
Register registers[MAX_REGISTERS];
size_t num_registers = 0;

// --- Buffers for Register Service Responses ---
uint8_t access_response_payload_buffer[uavcan_register_Access_Response_1_0_EXTENT_BYTES_];
uint8_t list_response_payload_buffer[uavcan_register_List_Response_1_0_EXTENT_BYTES_];


/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_CAN1_Init(void);
/* USER CODE BEGIN PFP */
// Wrappers for using o1heap allocator with libcanard
static void* memAllocate(CanardInstance* const ins, const size_t amount);
static void memFree(CanardInstance* const ins, void* const pointer);

// Application-specific function prototypes
void process_canard_TX_queue(void);
void initialize_registers(void); // Function to setup registers
void handle_register_access_request(CanardInstance* ins, CanardRxTransfer* transfer);
void handle_register_list_request(CanardInstance* ins, CanardRxTransfer* transfer);

// return useconds - not implemented yet
uint32_t micros(void)
{
  // A simple approximation using HAL_GetTick() - multiply by 1000
  // For better accuracy, use a hardware timer (e.g., TIM) in microsecond resolution
  return HAL_GetTick() * 1000;
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{

  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_CAN1_Init();
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);

    CAN_FilterTypeDef Filter;

    // accept all frames - filtration is managed by software
    Filter.FilterIdHigh = 0x0000;
    Filter.FilterIdLow = 0x0000;
    Filter.FilterMaskIdHigh = 0x0000;
    Filter.FilterMaskIdLow = 0x0000;
    Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
    Filter.FilterBank = 0;
    Filter.FilterMode = CAN_FILTERMODE_IDMASK;
    Filter.FilterScale = CAN_FILTERSCALE_32BIT;
    Filter.FilterActivation = ENABLE;
    Filter.SlaveStartFilterBank = 0;

    HAL_CAN_ConfigFilter(&hcan1, &Filter);

    // Initialization of a canard instance with the previous allocator
    canard = canardInit(&memAllocate, &memFree);
    canard.node_id = 5;

    queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
                          CANARD_MTU_CAN_CLASSIC);

    CanardRxSubscription subscription; // Transfer subscription state.

    if( canardRxSubscribe((CanardInstance *const)&canard,
                          CanardTransferKindMessage,
                          MSG_PORT_ID,
                          uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                          CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                          &subscription) != 1 )
                          {
                            Error_Handler();
                          }

    // --- Subscribe to Register Access Requests ---
      CanardRxSubscription access_subscription;
      if (canardRxSubscribe(&canard,
                            CanardTransferKindRequest, // It's a service request
                            uavcan_register_Access_1_0_FIXED_PORT_ID_,
                            uavcan_register_Access_Request_1_0_EXTENT_BYTES_, // Max size of request
                            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                            &access_subscription) != 1)
      {
          Error_Handler(); // Failed to subscribe
      }

      // --- Subscribe to Register List Requests ---
      CanardRxSubscription list_subscription;
      if (canardRxSubscribe(&canard,
                            CanardTransferKindRequest, // It's a service request
                            uavcan_register_List_1_0_FIXED_PORT_ID_,
                            uavcan_register_List_Request_1_0_EXTENT_BYTES_, // Max size of request
                            CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                            &list_subscription) != 1)
      {
          Error_Handler(); // Failed to subscribe
      }

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create a heartbeat message
	      uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
	                                                  .health = {uavcan_node_Health_1_0_NOMINAL},
	                                                  .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

	      // Serialize the heartbeat message
	      if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
	      {
	        Error_Handler();
	      }

	      // Create a transfer for the heartbeat message
	      const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
	                                                        .transfer_kind = CanardTransferKindMessage,
	                                                        .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
	                                                        .remote_node_id = CANARD_NODE_ID_UNSET,
	                                                        .transfer_id = my_message_transfer_id,};

	      if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
	                      &canard,
	                      0,     					// Zero if transmission deadline is not limited.
	                      &transfer_metadata,
	                      hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
	                      hbeat_ser_buf) < 0 )
	                      {
	                        Error_Handler();
	                      }
	      /*
	      // --- Add: Send GetInfo request ---
	      // Example: Send a GetInfo request approximately every 5 seconds
	            if ((test_uptimeSec % 5 == 0) && (test_uptimeSec > 0)) // Avoid sending immediately on startup
	                {
	                    // 1. Create GetInfo request object (content is empty)
	                    uavcan_node_GetInfo_Request_1_0 getinfo_req = {0}; // Initialization to 0 is sufficient

	                    // 2. Serialize the GetInfo request (result size should be 0)
	                    //    Reset the buffer size variable before calling
	                    getinfo_request_ser_buf_size = sizeof(getinfo_request_ser_buf);
	                    int8_t ser_res = uavcan_node_GetInfo_Request_1_0_serialize_(&getinfo_req,
	                                                                                 getinfo_request_ser_buf,
	                                                                                 &getinfo_request_ser_buf_size);
	                    if (ser_res < 0)
	                    {
	                        // Serialization error handling
	                        Error_Handler();
	                    }
	                    // At this point, getinfo_request_ser_buf_size should be equal to 0

	                    // 3. Create transfer metadata for the GetInfo request
	                    const CanardTransferMetadata getinfo_req_metadata = {
	                        .priority       = CanardPriorityNominal,        // Priority of the request
	                        .transfer_kind  = CanardTransferKindRequest,    // <<<--- Key: Set as service request
	                        .port_id        = uavcan_node_GetInfo_1_0_FIXED_PORT_ID_, // Fixed Port ID for GetInfo
	                        .remote_node_id = GETINFO_TARGET_NODE_ID,       // <<<--- Key: Set the target server node ID
	                        .transfer_id    = getinfo_request_transfer_id,  // Use the dedicated transfer ID for GetInfo requests
	                    };

	                    // 4. Push the request into the transmission queue
	                    //    Note: The payload size passed is the actual size after serialization (0)
	                    int32_t push_res = canardTxPush(&queue,
	                                                    &canard,
	                                                    0, // Transmission deadline (0 means unlimited)
	                                                    &getinfo_req_metadata,
	                                                    getinfo_request_ser_buf_size, // <<<--- Pass the actual size after serialization (0)
	                                                    getinfo_request_ser_buf);     // <<<--- Pass the serialization buffer pointer

	                    if (push_res < 0)
	                    {
	                        // Failed to push to queue (e.g., queue is full)
	                        // You can add error handling logic here, e.g., log the error
	                    }
	                    else
	                    {
	                        // After successful push, increment the transfer ID for GetInfo requests
	                        getinfo_request_transfer_id++;
	                    }
	                } // --- End GetInfo request ---
	      */

	      process_canard_TX_queue();

	      // Block for a second before generating the next transfer
	      uint32_t timestamp = HAL_GetTick();
	      while( HAL_GetTick() < timestamp + 1000u )
	      {
	        process_canard_TX_queue();
	        HAL_Delay(10);
	      }

	      // Increase uptime
	      test_uptimeSec++;
	      // Increment the transfer_id variable
	      my_message_transfer_id++;

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{

  /* USER CODE BEGIN CAN1_Init 0 */

  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
  hcan1.Init.Prescaler = 1;
  hcan1.Init.Mode = CAN_MODE_NORMAL;
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
  hcan1.Init.TimeTriggeredMode = DISABLE;
  hcan1.Init.AutoBusOff = DISABLE;
  hcan1.Init.AutoWakeUp = DISABLE;
  hcan1.Init.AutoRetransmission = DISABLE;
  hcan1.Init.ReceiveFifoLocked = DISABLE;
  hcan1.Init.TransmitFifoPriority = DISABLE;
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
// --- Initialize Registers ---
void initialize_registers() {
    num_registers = 0; // Reset count

    if (num_registers < MAX_REGISTERS) {
            // Register 0: node.id (Read-only, Persistent - although we don't save it)
            Register* reg = ®isters[num_registers]; // <<<--- 修正 ®
            reg->mutable = false;
            reg->persistent = true;
            strncpy((char*)reg->name.name.elements, "uavcan.node.id", REGISTER_NAME_MAX_LEN - 1);
            reg->name.name.count = strlen((char*)reg->name.name.elements);

            reg->value._tag_ = uavcan_register_Value_1_0_natural16_c; // <<<--- 修正 _tag 和枚舉值 (通常以 _c 結尾)
            reg->value._natural16.value.count = 1; // <<<--- 修正 union 成員
            reg->value._natural16.value.elements[0] = canard.node_id;
            num_registers++;
        }

    if (num_registers < MAX_REGISTERS) {
        // Register 1: A custom parameter (Mutable, Not Persistent)
        Register* reg = ®isters[num_registers];
        reg->mutable = true;
        reg->persistent = false;
        strncpy((char*)reg->name.name.elements, "my_app.gain", REGISTER_NAME_MAX_LEN - 1);
        reg->name.name.count = strlen((char*)reg->name.name.elements);

        reg->value._tag = uavcan_register_Value_1_0_real32; // 32-bit float
        reg->value.real32.value.count = 1;
        reg->value.real32.value.elements[0] = 1.23f; // Initial value
        num_registers++;
    }

     if (num_registers < MAX_REGISTERS) {
        // Register 2: Another custom parameter (Mutable, String)
        Register* reg = ®isters[num_registers];
        reg->mutable = true;
        reg->persistent = false; // Not saving to NVM in this example
        strncpy((char*)reg->name.name.elements, "my_app.name", REGISTER_NAME_MAX_LEN - 1);
        reg->name.name.count = strlen((char*)reg->name.name.elements);

        reg->value._tag = uavcan_register_Value_1_0_string; // String type
        const char* initial_string = "DefaultName";
        size_t len = strlen(initial_string);
        if (len > uavcan_register_Value_1_0_string_value_ARRAY_CAPACITY_) {
            len = uavcan_register_Value_1_0_string_value_ARRAY_CAPACITY_;
        }
        memcpy(reg->value.string.value.elements, initial_string, len);
        reg->value.string.value.count = len;
        num_registers++;
    }

    // Add more registers as needed up to MAX_REGISTERS
}

// --- Find Register by Name ---
// Returns pointer to register if found, NULL otherwise
Register* find_register(const uavcan_register_Name_1_0* name) {
    for (size_t i = 0; i < num_registers; ++i) {
        // Compare names (Need null termination for strcmp)
        char req_name_str[REGISTER_NAME_MAX_LEN] = {0};
        char reg_name_str[REGISTER_NAME_MAX_LEN] = {0};

        memcpy(req_name_str, name->name.elements, name->name.count);
        memcpy(reg_name_str, registers[i].name.name.elements, registers[i].name.name.count);

        // Null terminate for strcmp (important!)
        req_name_str[name->name.count] = '\0';
        reg_name_str[registers[i].name.name.count] = '\0';


        if (strcmp(req_name_str, reg_name_str) == 0) {
            return ®isters[i];
        }
    }
    return NULL;
}


// --- Handle Register Access Request ---
void handle_register_access_request(CanardInstance* ins, CanardRxTransfer* transfer) {
    uavcan_register_Access_Request_1_0 request;
    size_t request_payload_size = transfer->payload_size;

    // Deserialize request
    if (uavcan_register_Access_Request_1_0_deserialize_(&request, transfer->payload, &request_payload_size) < 0) {
        // Deserialization error
        return; // Or handle error appropriately
    }

    // Prepare response structure
    uavcan_register_Access_Response_1_0 response = {0}; // Initialize to zero/empty
    response.timestamp.microsecond = micros(); // Set timestamp

    // Find the register by name
    Register* reg = find_register(&request.name);

    if (reg != NULL) {
        // Register found
        bool write_attempt = !uavcan_register_Value_1_0_is_empty_(&request.value);

        if (write_attempt) {
            // Write request
            if (reg->mutable) {
                // Register is mutable, attempt to write
                // Check if types are compatible (optional but recommended)
                if (request.value._tag == reg->value._tag || reg->value._tag == uavcan_register_Value_1_0_empty) {
                     // Type matches or current register value is empty, copy the new value
                    memcpy(®->value, &request.value, sizeof(uavcan_register_Value_1_0));
                    // TODO: Add code here to make the value persistent if reg->persistent is true
                    // (e.g., save to Flash/EEPROM)

                    // Copy the (potentially updated) value to the response
                     memcpy(&response.value, ®->value, sizeof(uavcan_register_Value_1_0));
                } else {
                    // Type mismatch - reject write by keeping response value empty
                    // (or handle specific type conversions if desired)
                    // response.value remains empty (as initialized)
                }
            } else {
                // Attempt to write to an immutable register - reject
                // response.value remains empty
                 // Keep existing value in response for info purposes? Spec says empty on failure.
                 memcpy(&response.value, ®->value, sizeof(uavcan_register_Value_1_0)); // Let's return current value but indicate failure via mutability flag? No, spec implies empty.
                 response.value._tag = uavcan_register_Value_1_0_empty; // Explicitly set to empty on write failure? Let's follow this.

            }
        } else {
            // Read request - copy current value to response
            memcpy(&response.value, ®->value, sizeof(uavcan_register_Value_1_0));
        }

        // Set flags in response regardless of read/write success/failure
        response.mutable = reg->mutable;
        response.persistent = reg->persistent;

    } else {
        // Register not found - response.value remains empty
    }

    // Serialize the response
    size_t response_payload_size = sizeof(access_response_payload_buffer);
    if (uavcan_register_Access_Response_1_0_serialize_(&response, access_response_payload_buffer, &response_payload_size) >= 0) {
        // Serialization successful, push to TX queue
        const CanardTransferMetadata response_metadata = {
            .priority        = CanardPriorityNominal,
            .transfer_kind   = CanardTransferKindResponse,
            .port_id         = uavcan_register_Access_1_0_FIXED_PORT_ID_,
            .remote_node_id  = transfer->metadata.remote_node_id, // Send back to requester
            .transfer_id     = transfer->metadata.transfer_id,   // Use same transfer ID
        };

        canardTxPush(&queue, ins, micros() + 1000000, // Deadline 1 sec
                     &response_metadata, response_payload_size, access_response_payload_buffer);
    } else {
        // Serialization error
    }
}

// --- Handle Register List Request ---
void handle_register_list_request(CanardInstance* ins, CanardRxTransfer* transfer) {
    uavcan_register_List_Request_1_0 request;
    size_t request_payload_size = transfer->payload_size;

    // Deserialize request
    if (uavcan_register_List_Request_1_0_deserialize_(&request, transfer->payload, &request_payload_size) < 0) {
        // Deserialization error
        return;
    }

    // Prepare response structure
    uavcan_register_List_Response_1_0 response = {0}; // Initialize name to empty

    // Check if the requested index is valid
    if (request.index < num_registers) {
        // Index is valid, copy the name of the register at that index
        memcpy(&response.name, ®isters[request.index].name, sizeof(uavcan_register_Name_1_0));
    } else {
        // Index out of bounds - response.name remains empty (signals end of list)
    }

    // Serialize the response
    size_t response_payload_size = sizeof(list_response_payload_buffer);
    if (uavcan_register_List_Response_1_0_serialize_(&response, list_response_payload_buffer, &response_payload_size) >= 0) {
        // Serialization successful, push to TX queue
        const CanardTransferMetadata response_metadata = {
            .priority        = CanardPriorityNominal,
            .transfer_kind   = CanardTransferKindResponse,
            .port_id         = uavcan_register_List_1_0_FIXED_PORT_ID_,
            .remote_node_id  = transfer->metadata.remote_node_id, // Send back to requester
            .transfer_id     = transfer->metadata.transfer_id,   // Use same transfer ID
        };

        canardTxPush(&queue, ins, micros() + 1000000, // Deadline 1 sec
                     &response_metadata, response_payload_size, list_response_payload_buffer);
    } else {
        // Serialization error
    }
}
/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
      TxHeader.RTR = CAN_RTR_DATA;

      TxHeader.DLC = ti->frame.payload_size;
      TxHeader.ExtId = ti->frame.extended_can_id;

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
      {
        break;
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}

#pragma optimize=s none
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  CAN_RxHeaderTypeDef RxHeader;
  uint8_t RxData[8] = {0};
  uint32_t RxFifo1 = 0;
  HAL_CAN_GetRxMessage(&hcan1, RxFifo1, &RxHeader, RxData);

  CanardFrame rxf;

  rxf.extended_can_id = RxHeader.ExtId;
  rxf.payload_size = (size_t)RxHeader.DLC;
  rxf.payload = (void*)RxData;

  CanardRxTransfer transfer;

  if( canardRxAccept(   (CanardInstance *const)&canard,
                        micros(),
                        &rxf,
                        0,
                        &transfer,
                        NULL) != 1 )
                        {
                          return ; // the frame received is not a valid transfer
                        }

  uavcan_primitive_array_Real64_1_0 array;
  size_t array_ser_buf_size = uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_;

  if ( uavcan_primitive_array_Real64_1_0_deserialize_( &array, transfer.payload, &array_ser_buf_size) < 0)
  {
    Error_Handler();
  }

  canard.memory_free(&canard, transfer.payload);

  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);

  return ;
}

#pragma optimize=s none
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
  return ;
}

static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
  (void) ins;
  return malloc(amount);
}

static void memFree(CanardInstance* const ins, void* const pointer)
{
  (void) ins;
  free( pointer );
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
