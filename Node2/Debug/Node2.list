
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c70  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018c4  08007e00  08007e00  00008e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080096c4  080096c4  0000b070  2**0
                  CONTENTS
  4 .ARM          00000008  080096c4  080096c4  0000a6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080096cc  080096cc  0000b070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080096cc  080096cc  0000a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080096d0  080096d0  0000a6d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  080096d4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  20000070  08009744  0000b070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000860  08009744  0000b860  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a79f  00000000  00000000  0000b0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c6d  00000000  00000000  0001583f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009a8  00000000  00000000  000174b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b3  00000000  00000000  00017e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a72  00000000  00000000  0001860b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8e5  00000000  00000000  0003907d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1476  00000000  00000000  00043962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00104dd8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003038  00000000  00000000  00104e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00107e54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007de8 	.word	0x08007de8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007de8 	.word	0x08007de8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
 8000286:	6078      	str	r0, [r7, #4]
 8000288:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800028a:	683a      	ldr	r2, [r7, #0]
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	4293      	cmp	r3, r2
 8000290:	bf28      	it	cs
 8000292:	4613      	movcs	r3, r2
}
 8000294:	4618      	mov	r0, r3
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr

080002a0 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b086      	sub	sp, #24
 80002a4:	af00      	add	r7, sp, #0
 80002a6:	60f8      	str	r0, [r7, #12]
 80002a8:	60b9      	str	r1, [r7, #8]
 80002aa:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	00db      	lsls	r3, r3, #3
 80002b0:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80002b2:	68b9      	ldr	r1, [r7, #8]
 80002b4:	6978      	ldr	r0, [r7, #20]
 80002b6:	f7ff ffe3 	bl	8000280 <nunavutChooseMin>
 80002ba:	4602      	mov	r2, r0
 80002bc:	697b      	ldr	r3, [r7, #20]
 80002be:	1a9b      	subs	r3, r3, r2
 80002c0:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80002c2:	6939      	ldr	r1, [r7, #16]
 80002c4:	6878      	ldr	r0, [r7, #4]
 80002c6:	f7ff ffdb 	bl	8000280 <nunavutChooseMin>
 80002ca:	4603      	mov	r3, r0
}
 80002cc:	4618      	mov	r0, r3
 80002ce:	3718      	adds	r7, #24
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}

080002d4 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b092      	sub	sp, #72	@ 0x48
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
 80002e0:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d105      	bne.n	80002f4 <nunavutCopyBits+0x20>
 80002e8:	4b91      	ldr	r3, [pc, #580]	@ (8000530 <nunavutCopyBits+0x25c>)
 80002ea:	4a92      	ldr	r2, [pc, #584]	@ (8000534 <nunavutCopyBits+0x260>)
 80002ec:	2183      	movs	r1, #131	@ 0x83
 80002ee:	4892      	ldr	r0, [pc, #584]	@ (8000538 <nunavutCopyBits+0x264>)
 80002f0:	f006 fdaa 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 80002f4:	68fb      	ldr	r3, [r7, #12]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d105      	bne.n	8000306 <nunavutCopyBits+0x32>
 80002fa:	4b90      	ldr	r3, [pc, #576]	@ (800053c <nunavutCopyBits+0x268>)
 80002fc:	4a8d      	ldr	r2, [pc, #564]	@ (8000534 <nunavutCopyBits+0x260>)
 80002fe:	2184      	movs	r1, #132	@ 0x84
 8000300:	488d      	ldr	r0, [pc, #564]	@ (8000538 <nunavutCopyBits+0x264>)
 8000302:	f006 fda1 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 8000306:	683a      	ldr	r2, [r7, #0]
 8000308:	68fb      	ldr	r3, [r7, #12]
 800030a:	429a      	cmp	r2, r3
 800030c:	d105      	bne.n	800031a <nunavutCopyBits+0x46>
 800030e:	4b8c      	ldr	r3, [pc, #560]	@ (8000540 <nunavutCopyBits+0x26c>)
 8000310:	4a88      	ldr	r2, [pc, #544]	@ (8000534 <nunavutCopyBits+0x260>)
 8000312:	2185      	movs	r1, #133	@ 0x85
 8000314:	4888      	ldr	r0, [pc, #544]	@ (8000538 <nunavutCopyBits+0x264>)
 8000316:	f006 fd97 	bl	8006e48 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800031a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800031c:	f003 0307 	and.w	r3, r3, #7
 8000320:	2b00      	cmp	r3, #0
 8000322:	d14f      	bne.n	80003c4 <nunavutCopyBits+0xf0>
 8000324:	68bb      	ldr	r3, [r7, #8]
 8000326:	f003 0307 	and.w	r3, r3, #7
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14a      	bne.n	80003c4 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	08db      	lsrs	r3, r3, #3
 8000332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000334:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000336:	08db      	lsrs	r3, r3, #3
 8000338:	683a      	ldr	r2, [r7, #0]
 800033a:	4413      	add	r3, r2
 800033c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 800033e:	68bb      	ldr	r3, [r7, #8]
 8000340:	08db      	lsrs	r3, r3, #3
 8000342:	68fa      	ldr	r2, [r7, #12]
 8000344:	4413      	add	r3, r2
 8000346:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000348:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800034a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800034c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800034e:	f006 ff6e 	bl	800722e <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	b2db      	uxtb	r3, r3
 8000356:	f003 0307 	and.w	r3, r3, #7
 800035a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800035e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000362:	2b00      	cmp	r3, #0
 8000364:	f000 80df 	beq.w	8000526 <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000368:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800036a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800036c:	4413      	add	r3, r2
 800036e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000370:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000372:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000374:	4413      	add	r3, r2
 8000376:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000378:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800037c:	2b07      	cmp	r3, #7
 800037e:	d905      	bls.n	800038c <nunavutCopyBits+0xb8>
 8000380:	4b70      	ldr	r3, [pc, #448]	@ (8000544 <nunavutCopyBits+0x270>)
 8000382:	4a6c      	ldr	r2, [pc, #432]	@ (8000534 <nunavutCopyBits+0x260>)
 8000384:	2194      	movs	r1, #148	@ 0x94
 8000386:	486c      	ldr	r0, [pc, #432]	@ (8000538 <nunavutCopyBits+0x264>)
 8000388:	f006 fd5e 	bl	8006e48 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 800038c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000390:	2201      	movs	r2, #1
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	b2db      	uxtb	r3, r3
 8000398:	3b01      	subs	r3, #1
 800039a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800039e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003a0:	781a      	ldrb	r2, [r3, #0]
 80003a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003a6:	43db      	mvns	r3, r3
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4013      	ands	r3, r2
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003b0:	7819      	ldrb	r1, [r3, #0]
 80003b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003b6:	400b      	ands	r3, r1
 80003b8:	b2db      	uxtb	r3, r3
 80003ba:	4313      	orrs	r3, r2
 80003bc:	b2da      	uxtb	r2, r3
 80003be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003c0:	701a      	strb	r2, [r3, #0]
    {
 80003c2:	e0b0      	b.n	8000526 <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80003c4:	683b      	ldr	r3, [r7, #0]
 80003c6:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80003c8:	68fb      	ldr	r3, [r7, #12]
 80003ca:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80003cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80003ce:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 80003d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 80003dc:	6a3a      	ldr	r2, [r7, #32]
 80003de:	69fb      	ldr	r3, [r7, #28]
 80003e0:	429a      	cmp	r2, r3
 80003e2:	d210      	bcs.n	8000406 <nunavutCopyBits+0x132>
 80003e4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	3308      	adds	r3, #8
 80003ec:	08db      	lsrs	r3, r3, #3
 80003ee:	6a3a      	ldr	r2, [r7, #32]
 80003f0:	4413      	add	r3, r2
 80003f2:	461a      	mov	r2, r3
 80003f4:	69fb      	ldr	r3, [r7, #28]
 80003f6:	429a      	cmp	r2, r3
 80003f8:	d905      	bls.n	8000406 <nunavutCopyBits+0x132>
 80003fa:	4b53      	ldr	r3, [pc, #332]	@ (8000548 <nunavutCopyBits+0x274>)
 80003fc:	4a4d      	ldr	r2, [pc, #308]	@ (8000534 <nunavutCopyBits+0x260>)
 80003fe:	21a3      	movs	r1, #163	@ 0xa3
 8000400:	484d      	ldr	r0, [pc, #308]	@ (8000538 <nunavutCopyBits+0x264>)
 8000402:	f006 fd21 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 8000406:	6a3a      	ldr	r2, [r7, #32]
 8000408:	69fb      	ldr	r3, [r7, #28]
 800040a:	429a      	cmp	r2, r3
 800040c:	d97d      	bls.n	800050a <nunavutCopyBits+0x236>
 800040e:	68ba      	ldr	r2, [r7, #8]
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4413      	add	r3, r2
 8000414:	3308      	adds	r3, #8
 8000416:	08db      	lsrs	r3, r3, #3
 8000418:	69fa      	ldr	r2, [r7, #28]
 800041a:	4413      	add	r3, r2
 800041c:	461a      	mov	r2, r3
 800041e:	6a3b      	ldr	r3, [r7, #32]
 8000420:	429a      	cmp	r2, r3
 8000422:	d972      	bls.n	800050a <nunavutCopyBits+0x236>
 8000424:	4b49      	ldr	r3, [pc, #292]	@ (800054c <nunavutCopyBits+0x278>)
 8000426:	4a43      	ldr	r2, [pc, #268]	@ (8000534 <nunavutCopyBits+0x260>)
 8000428:	21a4      	movs	r1, #164	@ 0xa4
 800042a:	4843      	ldr	r0, [pc, #268]	@ (8000538 <nunavutCopyBits+0x264>)
 800042c:	f006 fd0c 	bl	8006e48 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8000430:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000432:	b2db      	uxtb	r3, r3
 8000434:	f003 0307 	and.w	r3, r3, #7
 8000438:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 800043a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800043c:	b2db      	uxtb	r3, r3
 800043e:	f003 0307 	and.w	r3, r3, #7
 8000442:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8000444:	7dba      	ldrb	r2, [r7, #22]
 8000446:	7dfb      	ldrb	r3, [r7, #23]
 8000448:	4293      	cmp	r3, r2
 800044a:	bf38      	it	cc
 800044c:	4613      	movcc	r3, r2
 800044e:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8000450:	7d7b      	ldrb	r3, [r7, #21]
 8000452:	f1c3 0008 	rsb	r0, r3, #8
 8000456:	69ba      	ldr	r2, [r7, #24]
 8000458:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800045a:	1ad3      	subs	r3, r2, r3
 800045c:	4619      	mov	r1, r3
 800045e:	f7ff ff0f 	bl	8000280 <nunavutChooseMin>
 8000462:	4603      	mov	r3, r0
 8000464:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 8000466:	7d3b      	ldrb	r3, [r7, #20]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d105      	bne.n	8000478 <nunavutCopyBits+0x1a4>
 800046c:	4b38      	ldr	r3, [pc, #224]	@ (8000550 <nunavutCopyBits+0x27c>)
 800046e:	4a31      	ldr	r2, [pc, #196]	@ (8000534 <nunavutCopyBits+0x260>)
 8000470:	21ab      	movs	r1, #171	@ 0xab
 8000472:	4831      	ldr	r0, [pc, #196]	@ (8000538 <nunavutCopyBits+0x264>)
 8000474:	f006 fce8 	bl	8006e48 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 8000478:	7d3b      	ldrb	r3, [r7, #20]
 800047a:	2b08      	cmp	r3, #8
 800047c:	d905      	bls.n	800048a <nunavutCopyBits+0x1b6>
 800047e:	4b35      	ldr	r3, [pc, #212]	@ (8000554 <nunavutCopyBits+0x280>)
 8000480:	4a2c      	ldr	r2, [pc, #176]	@ (8000534 <nunavutCopyBits+0x260>)
 8000482:	21ac      	movs	r1, #172	@ 0xac
 8000484:	482c      	ldr	r0, [pc, #176]	@ (8000538 <nunavutCopyBits+0x264>)
 8000486:	f006 fcdf 	bl	8006e48 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 800048a:	7d3b      	ldrb	r3, [r7, #20]
 800048c:	2201      	movs	r2, #1
 800048e:	fa02 f303 	lsl.w	r3, r2, r3
 8000492:	1e5a      	subs	r2, r3, #1
 8000494:	7dbb      	ldrb	r3, [r7, #22]
 8000496:	fa02 f303 	lsl.w	r3, r2, r3
 800049a:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 800049c:	7cfb      	ldrb	r3, [r7, #19]
 800049e:	2b00      	cmp	r3, #0
 80004a0:	d105      	bne.n	80004ae <nunavutCopyBits+0x1da>
 80004a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000558 <nunavutCopyBits+0x284>)
 80004a4:	4a23      	ldr	r2, [pc, #140]	@ (8000534 <nunavutCopyBits+0x260>)
 80004a6:	21af      	movs	r1, #175	@ 0xaf
 80004a8:	4823      	ldr	r0, [pc, #140]	@ (8000538 <nunavutCopyBits+0x264>)
 80004aa:	f006 fccd 	bl	8006e48 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 80004ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004b0:	08db      	lsrs	r3, r3, #3
 80004b2:	6a3a      	ldr	r2, [r7, #32]
 80004b4:	4413      	add	r3, r2
 80004b6:	781b      	ldrb	r3, [r3, #0]
 80004b8:	461a      	mov	r2, r3
 80004ba:	7dfb      	ldrb	r3, [r7, #23]
 80004bc:	fa42 f303 	asr.w	r3, r2, r3
 80004c0:	b2db      	uxtb	r3, r3
 80004c2:	461a      	mov	r2, r3
 80004c4:	7dbb      	ldrb	r3, [r7, #22]
 80004c6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ca:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80004cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004ce:	08db      	lsrs	r3, r3, #3
 80004d0:	69fa      	ldr	r2, [r7, #28]
 80004d2:	4413      	add	r3, r2
 80004d4:	781a      	ldrb	r2, [r3, #0]
 80004d6:	7cfb      	ldrb	r3, [r7, #19]
 80004d8:	43db      	mvns	r3, r3
 80004da:	b2db      	uxtb	r3, r3
 80004dc:	4013      	ands	r3, r2
 80004de:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80004e0:	7cba      	ldrb	r2, [r7, #18]
 80004e2:	7cfb      	ldrb	r3, [r7, #19]
 80004e4:	4013      	ands	r3, r2
 80004e6:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80004e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004ea:	08db      	lsrs	r3, r3, #3
 80004ec:	69fa      	ldr	r2, [r7, #28]
 80004ee:	4413      	add	r3, r2
 80004f0:	7c79      	ldrb	r1, [r7, #17]
 80004f2:	7c3a      	ldrb	r2, [r7, #16]
 80004f4:	430a      	orrs	r2, r1
 80004f6:	b2d2      	uxtb	r2, r2
 80004f8:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80004fa:	7d3b      	ldrb	r3, [r7, #20]
 80004fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004fe:	4413      	add	r3, r2
 8000500:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 8000502:	7d3b      	ldrb	r3, [r7, #20]
 8000504:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000506:	4413      	add	r3, r2
 8000508:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 800050a:	69ba      	ldr	r2, [r7, #24]
 800050c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800050e:	429a      	cmp	r2, r3
 8000510:	d88e      	bhi.n	8000430 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8000512:	69ba      	ldr	r2, [r7, #24]
 8000514:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000516:	429a      	cmp	r2, r3
 8000518:	d006      	beq.n	8000528 <nunavutCopyBits+0x254>
 800051a:	4b10      	ldr	r3, [pc, #64]	@ (800055c <nunavutCopyBits+0x288>)
 800051c:	4a05      	ldr	r2, [pc, #20]	@ (8000534 <nunavutCopyBits+0x260>)
 800051e:	21bd      	movs	r1, #189	@ 0xbd
 8000520:	4805      	ldr	r0, [pc, #20]	@ (8000538 <nunavutCopyBits+0x264>)
 8000522:	f006 fc91 	bl	8006e48 <__assert_func>
    {
 8000526:	bf00      	nop
    }
}
 8000528:	bf00      	nop
 800052a:	3748      	adds	r7, #72	@ 0x48
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	08007e00 	.word	0x08007e00
 8000534:	080090b0 	.word	0x080090b0
 8000538:	08007e14 	.word	0x08007e14
 800053c:	08007e64 	.word	0x08007e64
 8000540:	08007e78 	.word	0x08007e78
 8000544:	08007e84 	.word	0x08007e84
 8000548:	08007e94 	.word	0x08007e94
 800054c:	08007f00 	.word	0x08007f00
 8000550:	08007f6c 	.word	0x08007f6c
 8000554:	08007f78 	.word	0x08007f78
 8000558:	08007f84 	.word	0x08007f84
 800055c:	08007f90 	.word	0x08007f90

08000560 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af02      	add	r7, sp, #8
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
 800056c:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(output != NULL);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d105      	bne.n	8000580 <nunavutGetBits+0x20>
 8000574:	4b17      	ldr	r3, [pc, #92]	@ (80005d4 <nunavutGetBits+0x74>)
 8000576:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <nunavutGetBits+0x78>)
 8000578:	21cd      	movs	r1, #205	@ 0xcd
 800057a:	4818      	ldr	r0, [pc, #96]	@ (80005dc <nunavutGetBits+0x7c>)
 800057c:	f006 fc64 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(buf != NULL);
 8000580:	68bb      	ldr	r3, [r7, #8]
 8000582:	2b00      	cmp	r3, #0
 8000584:	d105      	bne.n	8000592 <nunavutGetBits+0x32>
 8000586:	4b16      	ldr	r3, [pc, #88]	@ (80005e0 <nunavutGetBits+0x80>)
 8000588:	4a13      	ldr	r2, [pc, #76]	@ (80005d8 <nunavutGetBits+0x78>)
 800058a:	21ce      	movs	r1, #206	@ 0xce
 800058c:	4813      	ldr	r0, [pc, #76]	@ (80005dc <nunavutGetBits+0x7c>)
 800058e:	f006 fc5b 	bl	8006e48 <__assert_func>
    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8000592:	6a3a      	ldr	r2, [r7, #32]
 8000594:	6839      	ldr	r1, [r7, #0]
 8000596:	6878      	ldr	r0, [r7, #4]
 8000598:	f7ff fe82 	bl	80002a0 <nunavutSaturateBufferFragmentBitLength>
 800059c:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 800059e:	697b      	ldr	r3, [r7, #20]
 80005a0:	08db      	lsrs	r3, r3, #3
 80005a2:	68fa      	ldr	r2, [r7, #12]
 80005a4:	18d0      	adds	r0, r2, r3
 80005a6:	6a3b      	ldr	r3, [r7, #32]
 80005a8:	3307      	adds	r3, #7
 80005aa:	08da      	lsrs	r2, r3, #3
 80005ac:	697b      	ldr	r3, [r7, #20]
 80005ae:	08db      	lsrs	r3, r3, #3
 80005b0:	1ad3      	subs	r3, r2, r3
 80005b2:	461a      	mov	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f006 fe54 	bl	8007262 <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	9300      	str	r3, [sp, #0]
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	697a      	ldr	r2, [r7, #20]
 80005c2:	2100      	movs	r1, #0
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f7ff fe85 	bl	80002d4 <nunavutCopyBits>
}
 80005ca:	bf00      	nop
 80005cc:	3718      	adds	r7, #24
 80005ce:	46bd      	mov	sp, r7
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	bf00      	nop
 80005d4:	08007fa4 	.word	0x08007fa4
 80005d8:	08009140 	.word	0x08009140
 80005dc:	08007e14 	.word	0x08007e14
 80005e0:	08007fbc 	.word	0x08007fbc

080005e4 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b088      	sub	sp, #32
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d105      	bne.n	8000602 <nunavutSetUxx+0x1e>
 80005f6:	4b13      	ldr	r3, [pc, #76]	@ (8000644 <nunavutSetUxx+0x60>)
 80005f8:	4a13      	ldr	r2, [pc, #76]	@ (8000648 <nunavutSetUxx+0x64>)
 80005fa:	21fb      	movs	r1, #251	@ 0xfb
 80005fc:	4813      	ldr	r0, [pc, #76]	@ (800064c <nunavutSetUxx+0x68>)
 80005fe:	f006 fc23 	bl	8006e48 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 8000602:	68bb      	ldr	r3, [r7, #8]
 8000604:	00da      	lsls	r2, r3, #3
 8000606:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	440b      	add	r3, r1
 800060e:	429a      	cmp	r2, r3
 8000610:	d202      	bcs.n	8000618 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000612:	f06f 0302 	mvn.w	r3, #2
 8000616:	e010      	b.n	800063a <nunavutSetUxx+0x56>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8000618:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800061c:	2140      	movs	r1, #64	@ 0x40
 800061e:	4618      	mov	r0, r3
 8000620:	f7ff fe2e 	bl	8000280 <nunavutChooseMin>
 8000624:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8000626:	2300      	movs	r3, #0
 8000628:	9300      	str	r3, [sp, #0]
 800062a:	f107 0320 	add.w	r3, r7, #32
 800062e:	697a      	ldr	r2, [r7, #20]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	68f8      	ldr	r0, [r7, #12]
 8000634:	f7ff fe4e 	bl	80002d4 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8000638:	2300      	movs	r3, #0
}
 800063a:	4618      	mov	r0, r3
 800063c:	3718      	adds	r7, #24
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	08007fbc 	.word	0x08007fbc
 8000648:	080090a0 	.word	0x080090a0
 800064c:	08007e14 	.word	0x08007e14

08000650 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000654:	b08c      	sub	sp, #48	@ 0x30
 8000656:	af04      	add	r7, sp, #16
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800065e:	68fb      	ldr	r3, [r7, #12]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d005      	beq.n	8000670 <uavcan_node_Health_1_0_serialize_+0x20>
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d002      	beq.n	8000670 <uavcan_node_Health_1_0_serialize_+0x20>
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d102      	bne.n	8000676 <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000670:	f06f 0301 	mvn.w	r3, #1
 8000674:	e092      	b.n	800079c <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 800067c:	697b      	ldr	r3, [r7, #20]
 800067e:	00db      	lsls	r3, r3, #3
 8000680:	2b07      	cmp	r3, #7
 8000682:	d802      	bhi.n	800068a <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000684:	f06f 0302 	mvn.w	r3, #2
 8000688:	e088      	b.n	800079c <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800068e:	69fb      	ldr	r3, [r7, #28]
 8000690:	f003 0307 	and.w	r3, r3, #7
 8000694:	2b00      	cmp	r3, #0
 8000696:	d005      	beq.n	80006a4 <uavcan_node_Health_1_0_serialize_+0x54>
 8000698:	4b43      	ldr	r3, [pc, #268]	@ (80007a8 <uavcan_node_Health_1_0_serialize_+0x158>)
 800069a:	4a44      	ldr	r2, [pc, #272]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 800069c:	2185      	movs	r1, #133	@ 0x85
 800069e:	4844      	ldr	r0, [pc, #272]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 80006a0:	f006 fbd2 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 80006a4:	69fb      	ldr	r3, [r7, #28]
 80006a6:	2200      	movs	r2, #0
 80006a8:	469a      	mov	sl, r3
 80006aa:	4693      	mov	fp, r2
 80006ac:	f11a 0402 	adds.w	r4, sl, #2
 80006b0:	f14b 0500 	adc.w	r5, fp, #0
 80006b4:	697b      	ldr	r3, [r7, #20]
 80006b6:	00db      	lsls	r3, r3, #3
 80006b8:	2200      	movs	r2, #0
 80006ba:	4698      	mov	r8, r3
 80006bc:	4691      	mov	r9, r2
 80006be:	45a0      	cmp	r8, r4
 80006c0:	eb79 0305 	sbcs.w	r3, r9, r5
 80006c4:	d205      	bcs.n	80006d2 <uavcan_node_Health_1_0_serialize_+0x82>
 80006c6:	4b3b      	ldr	r3, [pc, #236]	@ (80007b4 <uavcan_node_Health_1_0_serialize_+0x164>)
 80006c8:	4a38      	ldr	r2, [pc, #224]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 80006ca:	2186      	movs	r1, #134	@ 0x86
 80006cc:	4838      	ldr	r0, [pc, #224]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 80006ce:	f006 fbbb 	bl	8006e48 <__assert_func>
        uint8_t _sat0_ = obj->value;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80006d8:	7efb      	ldrb	r3, [r7, #27]
 80006da:	2b03      	cmp	r3, #3
 80006dc:	d901      	bls.n	80006e2 <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 80006de:	2303      	movs	r3, #3
 80006e0:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80006e2:	69fb      	ldr	r3, [r7, #28]
 80006e4:	08db      	lsrs	r3, r3, #3
 80006e6:	68ba      	ldr	r2, [r7, #8]
 80006e8:	4413      	add	r3, r2
 80006ea:	7efa      	ldrb	r2, [r7, #27]
 80006ec:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3302      	adds	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80006f4:	69fb      	ldr	r3, [r7, #28]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d035      	beq.n	800076a <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80006fe:	69fb      	ldr	r3, [r7, #28]
 8000700:	b2db      	uxtb	r3, r3
 8000702:	f003 0307 	and.w	r3, r3, #7
 8000706:	b2db      	uxtb	r3, r3
 8000708:	f1c3 0308 	rsb	r3, r3, #8
 800070c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800070e:	7cfb      	ldrb	r3, [r7, #19]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d105      	bne.n	8000720 <uavcan_node_Health_1_0_serialize_+0xd0>
 8000714:	4b28      	ldr	r3, [pc, #160]	@ (80007b8 <uavcan_node_Health_1_0_serialize_+0x168>)
 8000716:	4a25      	ldr	r2, [pc, #148]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000718:	2192      	movs	r1, #146	@ 0x92
 800071a:	4825      	ldr	r0, [pc, #148]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800071c:	f006 fb94 	bl	8006e48 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000720:	7cfb      	ldrb	r3, [r7, #19]
 8000722:	9302      	str	r3, [sp, #8]
 8000724:	f04f 0200 	mov.w	r2, #0
 8000728:	f04f 0300 	mov.w	r3, #0
 800072c:	e9cd 2300 	strd	r2, r3, [sp]
 8000730:	69fa      	ldr	r2, [r7, #28]
 8000732:	6979      	ldr	r1, [r7, #20]
 8000734:	68b8      	ldr	r0, [r7, #8]
 8000736:	f7ff ff55 	bl	80005e4 <nunavutSetUxx>
 800073a:	4603      	mov	r3, r0
 800073c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 800073e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000742:	2b00      	cmp	r3, #0
 8000744:	da02      	bge.n	800074c <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 8000746:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800074a:	e027      	b.n	800079c <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 800074c:	7cfb      	ldrb	r3, [r7, #19]
 800074e:	69fa      	ldr	r2, [r7, #28]
 8000750:	4413      	add	r3, r2
 8000752:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000754:	69fb      	ldr	r3, [r7, #28]
 8000756:	f003 0307 	and.w	r3, r3, #7
 800075a:	2b00      	cmp	r3, #0
 800075c:	d005      	beq.n	800076a <uavcan_node_Health_1_0_serialize_+0x11a>
 800075e:	4b12      	ldr	r3, [pc, #72]	@ (80007a8 <uavcan_node_Health_1_0_serialize_+0x158>)
 8000760:	4a12      	ldr	r2, [pc, #72]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000762:	2199      	movs	r1, #153	@ 0x99
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000766:	f006 fb6f 	bl	8006e48 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 800076a:	69fb      	ldr	r3, [r7, #28]
 800076c:	2b08      	cmp	r3, #8
 800076e:	d005      	beq.n	800077c <uavcan_node_Health_1_0_serialize_+0x12c>
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <uavcan_node_Health_1_0_serialize_+0x16c>)
 8000772:	4a0e      	ldr	r2, [pc, #56]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000774:	219c      	movs	r1, #156	@ 0x9c
 8000776:	480e      	ldr	r0, [pc, #56]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000778:	f006 fb66 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f003 0307 	and.w	r3, r3, #7
 8000782:	2b00      	cmp	r3, #0
 8000784:	d005      	beq.n	8000792 <uavcan_node_Health_1_0_serialize_+0x142>
 8000786:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <uavcan_node_Health_1_0_serialize_+0x158>)
 8000788:	4a08      	ldr	r2, [pc, #32]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x15c>)
 800078a:	219d      	movs	r1, #157	@ 0x9d
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800078e:	f006 fb5b 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	08da      	lsrs	r2, r3, #3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800079a:	2300      	movs	r3, #0
}
 800079c:	4618      	mov	r0, r3
 800079e:	3720      	adds	r7, #32
 80007a0:	46bd      	mov	sp, r7
 80007a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80007a6:	bf00      	nop
 80007a8:	08007fd0 	.word	0x08007fd0
 80007ac:	0800905c 	.word	0x0800905c
 80007b0:	08007fe8 	.word	0x08007fe8
 80007b4:	08008030 	.word	0x08008030
 80007b8:	08008060 	.word	0x08008060
 80007bc:	0800806c 	.word	0x0800806c

080007c0 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80007c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007c4:	b08c      	sub	sp, #48	@ 0x30
 80007c6:	af04      	add	r7, sp, #16
 80007c8:	60f8      	str	r0, [r7, #12]
 80007ca:	60b9      	str	r1, [r7, #8]
 80007cc:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d005      	beq.n	80007e0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d002      	beq.n	80007e0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80007e0:	f06f 0301 	mvn.w	r3, #1
 80007e4:	e092      	b.n	800090c <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	00db      	lsls	r3, r3, #3
 80007f0:	2b07      	cmp	r3, #7
 80007f2:	d802      	bhi.n	80007fa <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80007f4:	f06f 0302 	mvn.w	r3, #2
 80007f8:	e088      	b.n	800090c <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	f003 0307 	and.w	r3, r3, #7
 8000804:	2b00      	cmp	r3, #0
 8000806:	d005      	beq.n	8000814 <uavcan_node_Mode_1_0_serialize_+0x54>
 8000808:	4b43      	ldr	r3, [pc, #268]	@ (8000918 <uavcan_node_Mode_1_0_serialize_+0x158>)
 800080a:	4a44      	ldr	r2, [pc, #272]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800080c:	2185      	movs	r1, #133	@ 0x85
 800080e:	4844      	ldr	r0, [pc, #272]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000810:	f006 fb1a 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 8000814:	69fb      	ldr	r3, [r7, #28]
 8000816:	2200      	movs	r2, #0
 8000818:	469a      	mov	sl, r3
 800081a:	4693      	mov	fp, r2
 800081c:	f11a 0403 	adds.w	r4, sl, #3
 8000820:	f14b 0500 	adc.w	r5, fp, #0
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	00db      	lsls	r3, r3, #3
 8000828:	2200      	movs	r2, #0
 800082a:	4698      	mov	r8, r3
 800082c:	4691      	mov	r9, r2
 800082e:	45a0      	cmp	r8, r4
 8000830:	eb79 0305 	sbcs.w	r3, r9, r5
 8000834:	d205      	bcs.n	8000842 <uavcan_node_Mode_1_0_serialize_+0x82>
 8000836:	4b3b      	ldr	r3, [pc, #236]	@ (8000924 <uavcan_node_Mode_1_0_serialize_+0x164>)
 8000838:	4a38      	ldr	r2, [pc, #224]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800083a:	2186      	movs	r1, #134	@ 0x86
 800083c:	4838      	ldr	r0, [pc, #224]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800083e:	f006 fb03 	bl	8006e48 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8000848:	7efb      	ldrb	r3, [r7, #27]
 800084a:	2b07      	cmp	r3, #7
 800084c:	d901      	bls.n	8000852 <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 800084e:	2307      	movs	r3, #7
 8000850:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	08db      	lsrs	r3, r3, #3
 8000856:	68ba      	ldr	r2, [r7, #8]
 8000858:	4413      	add	r3, r2
 800085a:	7efa      	ldrb	r2, [r7, #27]
 800085c:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3303      	adds	r3, #3
 8000862:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	f003 0307 	and.w	r3, r3, #7
 800086a:	2b00      	cmp	r3, #0
 800086c:	d035      	beq.n	80008da <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	b2db      	uxtb	r3, r3
 8000872:	f003 0307 	and.w	r3, r3, #7
 8000876:	b2db      	uxtb	r3, r3
 8000878:	f1c3 0308 	rsb	r3, r3, #8
 800087c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800087e:	7cfb      	ldrb	r3, [r7, #19]
 8000880:	2b00      	cmp	r3, #0
 8000882:	d105      	bne.n	8000890 <uavcan_node_Mode_1_0_serialize_+0xd0>
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8000886:	4a25      	ldr	r2, [pc, #148]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8000888:	2192      	movs	r1, #146	@ 0x92
 800088a:	4825      	ldr	r0, [pc, #148]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800088c:	f006 fadc 	bl	8006e48 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000890:	7cfb      	ldrb	r3, [r7, #19]
 8000892:	9302      	str	r3, [sp, #8]
 8000894:	f04f 0200 	mov.w	r2, #0
 8000898:	f04f 0300 	mov.w	r3, #0
 800089c:	e9cd 2300 	strd	r2, r3, [sp]
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	6979      	ldr	r1, [r7, #20]
 80008a4:	68b8      	ldr	r0, [r7, #8]
 80008a6:	f7ff fe9d 	bl	80005e4 <nunavutSetUxx>
 80008aa:	4603      	mov	r3, r0
 80008ac:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80008ae:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	da02      	bge.n	80008bc <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 80008b6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80008ba:	e027      	b.n	800090c <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 80008bc:	7cfb      	ldrb	r3, [r7, #19]
 80008be:	69fa      	ldr	r2, [r7, #28]
 80008c0:	4413      	add	r3, r2
 80008c2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	f003 0307 	and.w	r3, r3, #7
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d005      	beq.n	80008da <uavcan_node_Mode_1_0_serialize_+0x11a>
 80008ce:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80008d0:	4a12      	ldr	r2, [pc, #72]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008d2:	2199      	movs	r1, #153	@ 0x99
 80008d4:	4812      	ldr	r0, [pc, #72]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008d6:	f006 fab7 	bl	8006e48 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	2b08      	cmp	r3, #8
 80008de:	d005      	beq.n	80008ec <uavcan_node_Mode_1_0_serialize_+0x12c>
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <uavcan_node_Mode_1_0_serialize_+0x16c>)
 80008e2:	4a0e      	ldr	r2, [pc, #56]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008e4:	219c      	movs	r1, #156	@ 0x9c
 80008e6:	480e      	ldr	r0, [pc, #56]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008e8:	f006 faae 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80008ec:	69fb      	ldr	r3, [r7, #28]
 80008ee:	f003 0307 	and.w	r3, r3, #7
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d005      	beq.n	8000902 <uavcan_node_Mode_1_0_serialize_+0x142>
 80008f6:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80008f8:	4a08      	ldr	r2, [pc, #32]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008fa:	219d      	movs	r1, #157	@ 0x9d
 80008fc:	4808      	ldr	r0, [pc, #32]	@ (8000920 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008fe:	f006 faa3 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	08da      	lsrs	r2, r3, #3
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3720      	adds	r7, #32
 8000910:	46bd      	mov	sp, r7
 8000912:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000916:	bf00      	nop
 8000918:	08007fd0 	.word	0x08007fd0
 800091c:	08009080 	.word	0x08009080
 8000920:	08008080 	.word	0x08008080
 8000924:	080080c8 	.word	0x080080c8
 8000928:	08008060 	.word	0x08008060
 800092c:	0800806c 	.word	0x0800806c

08000930 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000930:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000934:	b0a0      	sub	sp, #128	@ 0x80
 8000936:	af04      	add	r7, sp, #16
 8000938:	6578      	str	r0, [r7, #84]	@ 0x54
 800093a:	6539      	str	r1, [r7, #80]	@ 0x50
 800093c:	64fa      	str	r2, [r7, #76]	@ 0x4c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800093e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000940:	2b00      	cmp	r3, #0
 8000942:	d005      	beq.n	8000950 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8000944:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 800094a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000950:	f06f 0301 	mvn.w	r3, #1
 8000954:	e260      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if ((8U * (size_t) capacity_bytes) < 56UL)
 800095c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800095e:	00db      	lsls	r3, r3, #3
 8000960:	2b37      	cmp	r3, #55	@ 0x37
 8000962:	d802      	bhi.n	800096a <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000964:	f06f 0302 	mvn.w	r3, #2
 8000968:	e256      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800096a:	2300      	movs	r3, #0
 800096c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800096e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000970:	f003 0307 	and.w	r3, r3, #7
 8000974:	2b00      	cmp	r3, #0
 8000976:	d005      	beq.n	8000984 <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8000978:	4bb0      	ldr	r3, [pc, #704]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 800097a:	4ab1      	ldr	r2, [pc, #708]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800097c:	218a      	movs	r1, #138	@ 0x8a
 800097e:	48b1      	ldr	r0, [pc, #708]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000980:	f006 fa62 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8000984:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000986:	2200      	movs	r2, #0
 8000988:	4698      	mov	r8, r3
 800098a:	4691      	mov	r9, r2
 800098c:	f118 0420 	adds.w	r4, r8, #32
 8000990:	f149 0500 	adc.w	r5, r9, #0
 8000994:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000996:	00db      	lsls	r3, r3, #3
 8000998:	2200      	movs	r2, #0
 800099a:	469a      	mov	sl, r3
 800099c:	4693      	mov	fp, r2
 800099e:	45a2      	cmp	sl, r4
 80009a0:	eb7b 0305 	sbcs.w	r3, fp, r5
 80009a4:	d205      	bcs.n	80009b2 <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 80009a6:	4ba8      	ldr	r3, [pc, #672]	@ (8000c48 <uavcan_node_Heartbeat_1_0_serialize_+0x318>)
 80009a8:	4aa5      	ldr	r2, [pc, #660]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80009aa:	218b      	movs	r1, #139	@ 0x8b
 80009ac:	48a5      	ldr	r0, [pc, #660]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80009ae:	f006 fa4b 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 80009b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009b4:	08da      	lsrs	r2, r3, #3
 80009b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009b8:	441a      	add	r2, r3
 80009ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6013      	str	r3, [r2, #0]
        offset_bits += 32U;
 80009c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009c2:	3320      	adds	r3, #32
 80009c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80009c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009c8:	f003 0307 	and.w	r3, r3, #7
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d03a      	beq.n	8000a46 <uavcan_node_Heartbeat_1_0_serialize_+0x116>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80009d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	f003 0307 	and.w	r3, r3, #7
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	f1c3 0308 	rsb	r3, r3, #8
 80009de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        NUNAVUT_ASSERT(_pad0_ > 0);
 80009e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d105      	bne.n	80009f6 <uavcan_node_Heartbeat_1_0_serialize_+0xc6>
 80009ea:	4b98      	ldr	r3, [pc, #608]	@ (8000c4c <uavcan_node_Heartbeat_1_0_serialize_+0x31c>)
 80009ec:	4a94      	ldr	r2, [pc, #592]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80009ee:	2193      	movs	r1, #147	@ 0x93
 80009f0:	4894      	ldr	r0, [pc, #592]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80009f2:	f006 fa29 	bl	8006e48 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80009f6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009fa:	9302      	str	r3, [sp, #8]
 80009fc:	f04f 0200 	mov.w	r2, #0
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	e9cd 2300 	strd	r2, r3, [sp]
 8000a08:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000a0c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000a0e:	f7ff fde9 	bl	80005e4 <nunavutSetUxx>
 8000a12:	4603      	mov	r3, r0
 8000a14:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        if (_err0_ < 0)
 8000a18:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	da02      	bge.n	8000a26 <uavcan_node_Heartbeat_1_0_serialize_+0xf6>
        {
            return _err0_;
 8000a20:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000a24:	e1f8      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad0_;
 8000a26:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a2c:	4413      	add	r3, r2
 8000a2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a32:	f003 0307 	and.w	r3, r3, #7
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d005      	beq.n	8000a46 <uavcan_node_Heartbeat_1_0_serialize_+0x116>
 8000a3a:	4b80      	ldr	r3, [pc, #512]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a3c:	4a80      	ldr	r2, [pc, #512]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a3e:	219a      	movs	r1, #154	@ 0x9a
 8000a40:	4880      	ldr	r0, [pc, #512]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a42:	f006 fa01 	bl	8006e48 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a48:	f003 0307 	and.w	r3, r3, #7
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d005      	beq.n	8000a5c <uavcan_node_Heartbeat_1_0_serialize_+0x12c>
 8000a50:	4b7a      	ldr	r3, [pc, #488]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a52:	4a7b      	ldr	r2, [pc, #492]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a54:	219d      	movs	r1, #157	@ 0x9d
 8000a56:	487b      	ldr	r0, [pc, #492]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a58:	f006 f9f6 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a5c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d005      	beq.n	8000a72 <uavcan_node_Heartbeat_1_0_serialize_+0x142>
 8000a66:	4b75      	ldr	r3, [pc, #468]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a68:	4a75      	ldr	r2, [pc, #468]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a6a:	219e      	movs	r1, #158	@ 0x9e
 8000a6c:	4875      	ldr	r0, [pc, #468]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a6e:	f006 f9eb 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000a72:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a74:	2200      	movs	r2, #0
 8000a76:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a78:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a7a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000a7e:	460b      	mov	r3, r1
 8000a80:	3308      	adds	r3, #8
 8000a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a84:	4613      	mov	r3, r2
 8000a86:	f143 0300 	adc.w	r3, r3, #0
 8000a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a8c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a8e:	00db      	lsls	r3, r3, #3
 8000a90:	2200      	movs	r2, #0
 8000a92:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a94:	637a      	str	r2, [r7, #52]	@ 0x34
 8000a96:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000a9a:	4623      	mov	r3, r4
 8000a9c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000aa0:	4602      	mov	r2, r0
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	462b      	mov	r3, r5
 8000aa6:	460a      	mov	r2, r1
 8000aa8:	4193      	sbcs	r3, r2
 8000aaa:	d205      	bcs.n	8000ab8 <uavcan_node_Heartbeat_1_0_serialize_+0x188>
 8000aac:	4b68      	ldr	r3, [pc, #416]	@ (8000c50 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8000aae:	4a64      	ldr	r2, [pc, #400]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000ab0:	219f      	movs	r1, #159	@ 0x9f
 8000ab2:	4864      	ldr	r0, [pc, #400]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000ab4:	f006 f9c8 	bl	8006e48 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8000ab8:	2301      	movs	r3, #1
 8000aba:	65fb      	str	r3, [r7, #92]	@ 0x5c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000abc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d005      	beq.n	8000ad2 <uavcan_node_Heartbeat_1_0_serialize_+0x1a2>
 8000ac6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000ac8:	4a5d      	ldr	r2, [pc, #372]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000aca:	21a1      	movs	r1, #161	@ 0xa1
 8000acc:	485d      	ldr	r0, [pc, #372]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000ace:	f006 f9bb 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8000ad2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ad4:	08da      	lsrs	r2, r3, #3
 8000ad6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ad8:	4413      	add	r3, r2
 8000ada:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000adc:	429a      	cmp	r2, r3
 8000ade:	d205      	bcs.n	8000aec <uavcan_node_Heartbeat_1_0_serialize_+0x1bc>
 8000ae0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c54 <uavcan_node_Heartbeat_1_0_serialize_+0x324>)
 8000ae2:	4a57      	ldr	r2, [pc, #348]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000ae4:	21a2      	movs	r1, #162	@ 0xa2
 8000ae6:	4857      	ldr	r0, [pc, #348]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000ae8:	f006 f9ae 	bl	8006e48 <__assert_func>
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000aec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000aee:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8000af0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000af2:	08da      	lsrs	r2, r3, #3
 8000af4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000af6:	1899      	adds	r1, r3, r2
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000af8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000afc:	461a      	mov	r2, r3
 8000afe:	f7ff fda7 	bl	8000650 <uavcan_node_Health_1_0_serialize_>
 8000b02:	4603      	mov	r3, r0
 8000b04:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        if (_err1_ < 0)
 8000b08:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	da02      	bge.n	8000b16 <uavcan_node_Heartbeat_1_0_serialize_+0x1e6>
        {
            return _err1_;
 8000b10:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000b14:	e180      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 8000b16:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	2b08      	cmp	r3, #8
 8000b1c:	d005      	beq.n	8000b2a <uavcan_node_Heartbeat_1_0_serialize_+0x1fa>
 8000b1e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c58 <uavcan_node_Heartbeat_1_0_serialize_+0x328>)
 8000b20:	4a47      	ldr	r2, [pc, #284]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b22:	21aa      	movs	r1, #170	@ 0xaa
 8000b24:	4847      	ldr	r0, [pc, #284]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b26:	f006 f98f 	bl	8006e48 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8000b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b2c:	00db      	lsls	r3, r3, #3
 8000b2e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b30:	4413      	add	r3, r2
 8000b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000b34:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d905      	bls.n	8000b4a <uavcan_node_Heartbeat_1_0_serialize_+0x21a>
 8000b3e:	4b47      	ldr	r3, [pc, #284]	@ (8000c5c <uavcan_node_Heartbeat_1_0_serialize_+0x32c>)
 8000b40:	4a3f      	ldr	r2, [pc, #252]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b42:	21ac      	movs	r1, #172	@ 0xac
 8000b44:	483f      	ldr	r0, [pc, #252]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b46:	f006 f97f 	bl	8006e48 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000b4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b4c:	f003 0307 	and.w	r3, r3, #7
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d03a      	beq.n	8000bca <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8000b54:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b56:	b2db      	uxtb	r3, r3
 8000b58:	f003 0307 	and.w	r3, r3, #7
 8000b5c:	b2db      	uxtb	r3, r3
 8000b5e:	f1c3 0308 	rsb	r3, r3, #8
 8000b62:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        NUNAVUT_ASSERT(_pad1_ > 0);
 8000b66:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d105      	bne.n	8000b7a <uavcan_node_Heartbeat_1_0_serialize_+0x24a>
 8000b6e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c60 <uavcan_node_Heartbeat_1_0_serialize_+0x330>)
 8000b70:	4a33      	ldr	r2, [pc, #204]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b72:	21b1      	movs	r1, #177	@ 0xb1
 8000b74:	4833      	ldr	r0, [pc, #204]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b76:	f006 f967 	bl	8006e48 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8000b7a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b7e:	9302      	str	r3, [sp, #8]
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	e9cd 2300 	strd	r2, r3, [sp]
 8000b8c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b8e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000b90:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000b92:	f7ff fd27 	bl	80005e4 <nunavutSetUxx>
 8000b96:	4603      	mov	r3, r0
 8000b98:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        if (_err2_ < 0)
 8000b9c:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	da02      	bge.n	8000baa <uavcan_node_Heartbeat_1_0_serialize_+0x27a>
        {
            return _err2_;
 8000ba4:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000ba8:	e136      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad1_;
 8000baa:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000bae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000bb0:	4413      	add	r3, r2
 8000bb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000bb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb6:	f003 0307 	and.w	r3, r3, #7
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d005      	beq.n	8000bca <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
 8000bbe:	4b1f      	ldr	r3, [pc, #124]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bc2:	21b8      	movs	r1, #184	@ 0xb8
 8000bc4:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000bc6:	f006 f93f 	bl	8006e48 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000bca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bcc:	f003 0307 	and.w	r3, r3, #7
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <uavcan_node_Heartbeat_1_0_serialize_+0x2b0>
 8000bd4:	4b19      	ldr	r3, [pc, #100]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bd8:	21bb      	movs	r1, #187	@ 0xbb
 8000bda:	481a      	ldr	r0, [pc, #104]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000bdc:	f006 f934 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000be0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d005      	beq.n	8000bf6 <uavcan_node_Heartbeat_1_0_serialize_+0x2c6>
 8000bea:	4b14      	ldr	r3, [pc, #80]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bec:	4a14      	ldr	r2, [pc, #80]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bee:	21bc      	movs	r1, #188	@ 0xbc
 8000bf0:	4814      	ldr	r0, [pc, #80]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000bf2:	f006 f929 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000bf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000bfe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000c02:	460b      	mov	r3, r1
 8000c04:	3308      	adds	r3, #8
 8000c06:	623b      	str	r3, [r7, #32]
 8000c08:	4613      	mov	r3, r2
 8000c0a:	f143 0300 	adc.w	r3, r3, #0
 8000c0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c10:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c12:	00db      	lsls	r3, r3, #3
 8000c14:	2200      	movs	r2, #0
 8000c16:	61bb      	str	r3, [r7, #24]
 8000c18:	61fa      	str	r2, [r7, #28]
 8000c1a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000c1e:	4623      	mov	r3, r4
 8000c20:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c24:	4602      	mov	r2, r0
 8000c26:	4293      	cmp	r3, r2
 8000c28:	462b      	mov	r3, r5
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	4193      	sbcs	r3, r2
 8000c2e:	d219      	bcs.n	8000c64 <uavcan_node_Heartbeat_1_0_serialize_+0x334>
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8000c32:	4a03      	ldr	r2, [pc, #12]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000c34:	21bd      	movs	r1, #189	@ 0xbd
 8000c36:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000c38:	f006 f906 	bl	8006e48 <__assert_func>
 8000c3c:	08007fd0 	.word	0x08007fd0
 8000c40:	08009034 	.word	0x08009034
 8000c44:	080080f8 	.word	0x080080f8
 8000c48:	08008144 	.word	0x08008144
 8000c4c:	08008060 	.word	0x08008060
 8000c50:	08008174 	.word	0x08008174
 8000c54:	080081a4 	.word	0x080081a4
 8000c58:	080081dc 	.word	0x080081dc
 8000c5c:	080081fc 	.word	0x080081fc
 8000c60:	08008224 	.word	0x08008224
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8000c64:	2301      	movs	r3, #1
 8000c66:	65bb      	str	r3, [r7, #88]	@ 0x58
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000c68:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c6a:	f003 0307 	and.w	r3, r3, #7
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d005      	beq.n	8000c7e <uavcan_node_Heartbeat_1_0_serialize_+0x34e>
 8000c72:	4b6c      	ldr	r3, [pc, #432]	@ (8000e24 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000c74:	4a6c      	ldr	r2, [pc, #432]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c76:	21bf      	movs	r1, #191	@ 0xbf
 8000c78:	486c      	ldr	r0, [pc, #432]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c7a:	f006 f8e5 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8000c7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c80:	08da      	lsrs	r2, r3, #3
 8000c82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c84:	4413      	add	r3, r2
 8000c86:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d205      	bcs.n	8000c98 <uavcan_node_Heartbeat_1_0_serialize_+0x368>
 8000c8c:	4b68      	ldr	r3, [pc, #416]	@ (8000e30 <uavcan_node_Heartbeat_1_0_serialize_+0x500>)
 8000c8e:	4a66      	ldr	r2, [pc, #408]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c90:	21c0      	movs	r1, #192	@ 0xc0
 8000c92:	4866      	ldr	r0, [pc, #408]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c94:	f006 f8d8 	bl	8006e48 <__assert_func>
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000c98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c9a:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8000c9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000ca2:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000ca4:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000ca8:	4619      	mov	r1, r3
 8000caa:	f7ff fd89 	bl	80007c0 <uavcan_node_Mode_1_0_serialize_>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
        if (_err3_ < 0)
 8000cb4:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	da02      	bge.n	8000cc2 <uavcan_node_Heartbeat_1_0_serialize_+0x392>
        {
            return _err3_;
 8000cbc:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000cc0:	e0aa      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8000cc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	2b08      	cmp	r3, #8
 8000cc8:	d005      	beq.n	8000cd6 <uavcan_node_Heartbeat_1_0_serialize_+0x3a6>
 8000cca:	4b5a      	ldr	r3, [pc, #360]	@ (8000e34 <uavcan_node_Heartbeat_1_0_serialize_+0x504>)
 8000ccc:	4a56      	ldr	r2, [pc, #344]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cce:	21c8      	movs	r1, #200	@ 0xc8
 8000cd0:	4856      	ldr	r0, [pc, #344]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000cd2:	f006 f8b9 	bl	8006e48 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8000cd6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cd8:	00db      	lsls	r3, r3, #3
 8000cda:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000cdc:	4413      	add	r3, r2
 8000cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000ce0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000ce2:	00db      	lsls	r3, r3, #3
 8000ce4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ce6:	429a      	cmp	r2, r3
 8000ce8:	d905      	bls.n	8000cf6 <uavcan_node_Heartbeat_1_0_serialize_+0x3c6>
 8000cea:	4b53      	ldr	r3, [pc, #332]	@ (8000e38 <uavcan_node_Heartbeat_1_0_serialize_+0x508>)
 8000cec:	4a4e      	ldr	r2, [pc, #312]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cee:	21ca      	movs	r1, #202	@ 0xca
 8000cf0:	484e      	ldr	r0, [pc, #312]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000cf2:	f006 f8a9 	bl	8006e48 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000cf6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cf8:	f003 0307 	and.w	r3, r3, #7
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d005      	beq.n	8000d0c <uavcan_node_Heartbeat_1_0_serialize_+0x3dc>
 8000d00:	4b48      	ldr	r3, [pc, #288]	@ (8000e24 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000d02:	4a49      	ldr	r2, [pc, #292]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d04:	21cd      	movs	r1, #205	@ 0xcd
 8000d06:	4849      	ldr	r0, [pc, #292]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d08:	f006 f89e 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000d0c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d0e:	2200      	movs	r2, #0
 8000d10:	613b      	str	r3, [r7, #16]
 8000d12:	617a      	str	r2, [r7, #20]
 8000d14:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000d18:	460b      	mov	r3, r1
 8000d1a:	3308      	adds	r3, #8
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	f143 0300 	adc.w	r3, r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d28:	00db      	lsls	r3, r3, #3
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	607a      	str	r2, [r7, #4]
 8000d30:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000d34:	4623      	mov	r3, r4
 8000d36:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	462b      	mov	r3, r5
 8000d40:	460a      	mov	r2, r1
 8000d42:	4193      	sbcs	r3, r2
 8000d44:	d205      	bcs.n	8000d52 <uavcan_node_Heartbeat_1_0_serialize_+0x422>
 8000d46:	4b3d      	ldr	r3, [pc, #244]	@ (8000e3c <uavcan_node_Heartbeat_1_0_serialize_+0x50c>)
 8000d48:	4a37      	ldr	r2, [pc, #220]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d4a:	21ce      	movs	r1, #206	@ 0xce
 8000d4c:	4837      	ldr	r0, [pc, #220]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d4e:	f006 f87b 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8000d52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d54:	08db      	lsrs	r3, r3, #3
 8000d56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d58:	4413      	add	r3, r2
 8000d5a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d5c:	7992      	ldrb	r2, [r2, #6]
 8000d5e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8000d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d62:	3308      	adds	r3, #8
 8000d64:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000d66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d68:	f003 0307 	and.w	r3, r3, #7
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d03a      	beq.n	8000de6 <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8000d70:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f003 0307 	and.w	r3, r3, #7
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	f1c3 0308 	rsb	r3, r3, #8
 8000d7e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        NUNAVUT_ASSERT(_pad2_ > 0);
 8000d82:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d105      	bne.n	8000d96 <uavcan_node_Heartbeat_1_0_serialize_+0x466>
 8000d8a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e40 <uavcan_node_Heartbeat_1_0_serialize_+0x510>)
 8000d8c:	4a26      	ldr	r2, [pc, #152]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d8e:	21d6      	movs	r1, #214	@ 0xd6
 8000d90:	4826      	ldr	r0, [pc, #152]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d92:	f006 f859 	bl	8006e48 <__assert_func>
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8000d96:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d9a:	9302      	str	r3, [sp, #8]
 8000d9c:	f04f 0200 	mov.w	r2, #0
 8000da0:	f04f 0300 	mov.w	r3, #0
 8000da4:	e9cd 2300 	strd	r2, r3, [sp]
 8000da8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000daa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000dac:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000dae:	f7ff fc19 	bl	80005e4 <nunavutSetUxx>
 8000db2:	4603      	mov	r3, r0
 8000db4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        if (_err4_ < 0)
 8000db8:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	da02      	bge.n	8000dc6 <uavcan_node_Heartbeat_1_0_serialize_+0x496>
        {
            return _err4_;
 8000dc0:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000dc4:	e028      	b.n	8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad2_;
 8000dc6:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000dca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000dcc:	4413      	add	r3, r2
 8000dce:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dd2:	f003 0307 	and.w	r3, r3, #7
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d005      	beq.n	8000de6 <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
 8000dda:	4b12      	ldr	r3, [pc, #72]	@ (8000e24 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000ddc:	4a12      	ldr	r2, [pc, #72]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000dde:	21dd      	movs	r1, #221	@ 0xdd
 8000de0:	4812      	ldr	r0, [pc, #72]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000de2:	f006 f831 	bl	8006e48 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8000de6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000de8:	2b38      	cmp	r3, #56	@ 0x38
 8000dea:	d005      	beq.n	8000df8 <uavcan_node_Heartbeat_1_0_serialize_+0x4c8>
 8000dec:	4b15      	ldr	r3, [pc, #84]	@ (8000e44 <uavcan_node_Heartbeat_1_0_serialize_+0x514>)
 8000dee:	4a0e      	ldr	r2, [pc, #56]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000df0:	21e0      	movs	r1, #224	@ 0xe0
 8000df2:	480e      	ldr	r0, [pc, #56]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000df4:	f006 f828 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000df8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <uavcan_node_Heartbeat_1_0_serialize_+0x4de>
 8000e02:	4b08      	ldr	r3, [pc, #32]	@ (8000e24 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000e04:	4a08      	ldr	r2, [pc, #32]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000e06:	21e1      	movs	r1, #225	@ 0xe1
 8000e08:	4808      	ldr	r0, [pc, #32]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000e0a:	f006 f81d 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000e0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e10:	08da      	lsrs	r2, r3, #3
 8000e12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e14:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8000e16:	2300      	movs	r3, #0
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3770      	adds	r7, #112	@ 0x70
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e22:	bf00      	nop
 8000e24:	08007fd0 	.word	0x08007fd0
 8000e28:	08009034 	.word	0x08009034
 8000e2c:	080080f8 	.word	0x080080f8
 8000e30:	08008230 	.word	0x08008230
 8000e34:	08008268 	.word	0x08008268
 8000e38:	080081fc 	.word	0x080081fc
 8000e3c:	08008174 	.word	0x08008174
 8000e40:	08008288 	.word	0x08008288
 8000e44:	08008294 	.word	0x08008294

08000e48 <uavcan_node_Version_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Version_1_0_serialize_(
    const uavcan_node_Version_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000e48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000e4c:	b092      	sub	sp, #72	@ 0x48
 8000e4e:	af04      	add	r7, sp, #16
 8000e50:	6278      	str	r0, [r7, #36]	@ 0x24
 8000e52:	6239      	str	r1, [r7, #32]
 8000e54:	61fa      	str	r2, [r7, #28]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8000e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d005      	beq.n	8000e68 <uavcan_node_Version_1_0_serialize_+0x20>
 8000e5c:	6a3b      	ldr	r3, [r7, #32]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d002      	beq.n	8000e68 <uavcan_node_Version_1_0_serialize_+0x20>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d102      	bne.n	8000e6e <uavcan_node_Version_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000e68:	f06f 0301 	mvn.w	r3, #1
 8000e6c:	e0c8      	b.n	8001000 <uavcan_node_Version_1_0_serialize_+0x1b8>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	633b      	str	r3, [r7, #48]	@ 0x30
    if ((8U * (size_t) capacity_bytes) < 16UL)
 8000e74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	2b0f      	cmp	r3, #15
 8000e7a:	d802      	bhi.n	8000e82 <uavcan_node_Version_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000e7c:	f06f 0302 	mvn.w	r3, #2
 8000e80:	e0be      	b.n	8001000 <uavcan_node_Version_1_0_serialize_+0x1b8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
    {   // saturated uint8 major
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000e86:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d005      	beq.n	8000e9c <uavcan_node_Version_1_0_serialize_+0x54>
 8000e90:	4b5e      	ldr	r3, [pc, #376]	@ (800100c <uavcan_node_Version_1_0_serialize_+0x1c4>)
 8000e92:	4a5f      	ldr	r2, [pc, #380]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000e94:	217c      	movs	r1, #124	@ 0x7c
 8000e96:	485f      	ldr	r0, [pc, #380]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000e98:	f005 ffd6 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000e9c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	617a      	str	r2, [r7, #20]
 8000ea4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	f113 0808 	adds.w	r8, r3, #8
 8000eae:	4613      	mov	r3, r2
 8000eb0:	f143 0900 	adc.w	r9, r3, #0
 8000eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000eb6:	00db      	lsls	r3, r3, #3
 8000eb8:	2200      	movs	r2, #0
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	60fa      	str	r2, [r7, #12]
 8000ebe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4543      	cmp	r3, r8
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	eb73 0309 	sbcs.w	r3, r3, r9
 8000ecc:	d205      	bcs.n	8000eda <uavcan_node_Version_1_0_serialize_+0x92>
 8000ece:	4b52      	ldr	r3, [pc, #328]	@ (8001018 <uavcan_node_Version_1_0_serialize_+0x1d0>)
 8000ed0:	4a4f      	ldr	r2, [pc, #316]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000ed2:	217d      	movs	r1, #125	@ 0x7d
 8000ed4:	484f      	ldr	r0, [pc, #316]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000ed6:	f005 ffb7 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->major);  // C std, 6.3.1.3 Signed and unsigned integers
 8000eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000edc:	08db      	lsrs	r3, r3, #3
 8000ede:	6a3a      	ldr	r2, [r7, #32]
 8000ee0:	4413      	add	r3, r2
 8000ee2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ee4:	7812      	ldrb	r2, [r2, #0]
 8000ee6:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8000ee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eea:	3308      	adds	r3, #8
 8000eec:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    {   // saturated uint8 minor
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ef0:	f003 0307 	and.w	r3, r3, #7
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <uavcan_node_Version_1_0_serialize_+0xbc>
 8000ef8:	4b44      	ldr	r3, [pc, #272]	@ (800100c <uavcan_node_Version_1_0_serialize_+0x1c4>)
 8000efa:	4a45      	ldr	r2, [pc, #276]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000efc:	2183      	movs	r1, #131	@ 0x83
 8000efe:	4845      	ldr	r0, [pc, #276]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000f00:	f005 ffa2 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000f04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f06:	2200      	movs	r2, #0
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000f10:	460b      	mov	r3, r1
 8000f12:	f113 0408 	adds.w	r4, r3, #8
 8000f16:	4613      	mov	r3, r2
 8000f18:	f143 0500 	adc.w	r5, r3, #0
 8000f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f1e:	00db      	lsls	r3, r3, #3
 8000f20:	2200      	movs	r2, #0
 8000f22:	469a      	mov	sl, r3
 8000f24:	4693      	mov	fp, r2
 8000f26:	45a2      	cmp	sl, r4
 8000f28:	eb7b 0305 	sbcs.w	r3, fp, r5
 8000f2c:	d205      	bcs.n	8000f3a <uavcan_node_Version_1_0_serialize_+0xf2>
 8000f2e:	4b3a      	ldr	r3, [pc, #232]	@ (8001018 <uavcan_node_Version_1_0_serialize_+0x1d0>)
 8000f30:	4a37      	ldr	r2, [pc, #220]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000f32:	2184      	movs	r1, #132	@ 0x84
 8000f34:	4837      	ldr	r0, [pc, #220]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000f36:	f005 ff87 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->minor);  // C std, 6.3.1.3 Signed and unsigned integers
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f3c:	08db      	lsrs	r3, r3, #3
 8000f3e:	6a3a      	ldr	r2, [r7, #32]
 8000f40:	4413      	add	r3, r2
 8000f42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000f44:	7852      	ldrb	r2, [r2, #1]
 8000f46:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8000f48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f4a:	3308      	adds	r3, #8
 8000f4c:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f50:	f003 0307 	and.w	r3, r3, #7
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d03a      	beq.n	8000fce <uavcan_node_Version_1_0_serialize_+0x186>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8000f58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	f003 0307 	and.w	r3, r3, #7
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	f1c3 0308 	rsb	r3, r3, #8
 8000f66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        NUNAVUT_ASSERT(_pad0_ > 0);
 8000f6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d105      	bne.n	8000f7e <uavcan_node_Version_1_0_serialize_+0x136>
 8000f72:	4b2a      	ldr	r3, [pc, #168]	@ (800101c <uavcan_node_Version_1_0_serialize_+0x1d4>)
 8000f74:	4a26      	ldr	r2, [pc, #152]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000f76:	218c      	movs	r1, #140	@ 0x8c
 8000f78:	4826      	ldr	r0, [pc, #152]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000f7a:	f005 ff65 	bl	8006e48 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000f7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f82:	9302      	str	r3, [sp, #8]
 8000f84:	f04f 0200 	mov.w	r2, #0
 8000f88:	f04f 0300 	mov.w	r3, #0
 8000f8c:	e9cd 2300 	strd	r2, r3, [sp]
 8000f90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000f92:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8000f94:	6a38      	ldr	r0, [r7, #32]
 8000f96:	f7ff fb25 	bl	80005e4 <nunavutSetUxx>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        if (_err0_ < 0)
 8000fa0:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	da02      	bge.n	8000fae <uavcan_node_Version_1_0_serialize_+0x166>
        {
            return _err0_;
 8000fa8:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 8000fac:	e028      	b.n	8001000 <uavcan_node_Version_1_0_serialize_+0x1b8>
        }
        offset_bits += _pad0_;
 8000fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000fb2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000fb4:	4413      	add	r3, r2
 8000fb6:	637b      	str	r3, [r7, #52]	@ 0x34
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d005      	beq.n	8000fce <uavcan_node_Version_1_0_serialize_+0x186>
 8000fc2:	4b12      	ldr	r3, [pc, #72]	@ (800100c <uavcan_node_Version_1_0_serialize_+0x1c4>)
 8000fc4:	4a12      	ldr	r2, [pc, #72]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000fc6:	2193      	movs	r1, #147	@ 0x93
 8000fc8:	4812      	ldr	r0, [pc, #72]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000fca:	f005 ff3d 	bl	8006e48 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 16ULL);
 8000fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fd0:	2b10      	cmp	r3, #16
 8000fd2:	d005      	beq.n	8000fe0 <uavcan_node_Version_1_0_serialize_+0x198>
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <uavcan_node_Version_1_0_serialize_+0x1d8>)
 8000fd6:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000fd8:	2196      	movs	r1, #150	@ 0x96
 8000fda:	480e      	ldr	r0, [pc, #56]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000fdc:	f005 ff34 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000fe0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000fe2:	f003 0307 	and.w	r3, r3, #7
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d005      	beq.n	8000ff6 <uavcan_node_Version_1_0_serialize_+0x1ae>
 8000fea:	4b08      	ldr	r3, [pc, #32]	@ (800100c <uavcan_node_Version_1_0_serialize_+0x1c4>)
 8000fec:	4a08      	ldr	r2, [pc, #32]	@ (8001010 <uavcan_node_Version_1_0_serialize_+0x1c8>)
 8000fee:	2197      	movs	r1, #151	@ 0x97
 8000ff0:	4808      	ldr	r0, [pc, #32]	@ (8001014 <uavcan_node_Version_1_0_serialize_+0x1cc>)
 8000ff2:	f005 ff29 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ff8:	08da      	lsrs	r2, r3, #3
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8000ffe:	2300      	movs	r3, #0
}
 8001000:	4618      	mov	r0, r3
 8001002:	3738      	adds	r7, #56	@ 0x38
 8001004:	46bd      	mov	sp, r7
 8001006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800100a:	bf00      	nop
 800100c:	08007fd0 	.word	0x08007fd0
 8001010:	080090ec 	.word	0x080090ec
 8001014:	080082ac 	.word	0x080082ac
 8001018:	08008174 	.word	0x08008174
 800101c:	08008060 	.word	0x08008060
 8001020:	080082f8 	.word	0x080082f8

08001024 <uavcan_node_GetInfo_Request_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Request_1_0_deserialize_(
    uavcan_node_GetInfo_Request_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	60f8      	str	r0, [r7, #12]
 800102c:	60b9      	str	r1, [r7, #8]
 800102e:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d009      	beq.n	800104a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d006      	beq.n	800104a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x26>
 800103c:	68bb      	ldr	r3, [r7, #8]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d106      	bne.n	8001050 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 800104a:	f06f 0301 	mvn.w	r3, #1
 800104e:	e008      	b.n	8001062 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x3e>
    }
    if (buffer == NULL)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <uavcan_node_GetInfo_Request_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <uavcan_node_GetInfo_Request_1_0_deserialize_+0x4c>)
 8001058:	60bb      	str	r3, [r7, #8]
    }
    *inout_buffer_size_bytes = 0U;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001060:	2300      	movs	r3, #0
}
 8001062:	4618      	mov	r0, r3
 8001064:	3714      	adds	r7, #20
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	08008310 	.word	0x08008310

08001074 <uavcan_node_GetInfo_Response_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_GetInfo_Response_1_0_serialize_(
    const uavcan_node_GetInfo_Response_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8001074:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001078:	b0ba      	sub	sp, #232	@ 0xe8
 800107a:	af04      	add	r7, sp, #16
 800107c:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
 8001080:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8001084:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8001088:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800108c:	2b00      	cmp	r3, #0
 800108e:	d007      	beq.n	80010a0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2c>
 8001090:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2c>
 8001098:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x34>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80010a0:	f06f 0301 	mvn.w	r3, #1
 80010a4:	f000 bcfd 	b.w	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80010a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if ((8U * (size_t) capacity_bytes) < 2504UL)
 80010b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80010b6:	00da      	lsls	r2, r3, #3
 80010b8:	f640 13c7 	movw	r3, #2503	@ 0x9c7
 80010bc:	429a      	cmp	r2, r3
 80010be:	d803      	bhi.n	80010c8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x54>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80010c0:	f06f 0302 	mvn.w	r3, #2
 80010c4:	f000 bced 	b.w	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80010c8:	2300      	movs	r3, #0
 80010ca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    {   // uavcan.node.Version.1.0 protocol_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80010ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010d2:	f003 0307 	and.w	r3, r3, #7
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d006      	beq.n	80010e8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x74>
 80010da:	4bc8      	ldr	r3, [pc, #800]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 80010dc:	4ac8      	ldr	r2, [pc, #800]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80010de:	f44f 718b 	mov.w	r1, #278	@ 0x116
 80010e2:	48c8      	ldr	r0, [pc, #800]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80010e4:	f005 feb0 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80010e8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80010ec:	f003 0307 	and.w	r3, r3, #7
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d006      	beq.n	8001102 <uavcan_node_GetInfo_Response_1_0_serialize_+0x8e>
 80010f4:	4bc1      	ldr	r3, [pc, #772]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 80010f6:	4ac2      	ldr	r2, [pc, #776]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80010f8:	f240 1117 	movw	r1, #279	@ 0x117
 80010fc:	48c1      	ldr	r0, [pc, #772]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80010fe:	f005 fea3 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 8001102:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001106:	2200      	movs	r2, #0
 8001108:	4698      	mov	r8, r3
 800110a:	4691      	mov	r9, r2
 800110c:	f118 0410 	adds.w	r4, r8, #16
 8001110:	f149 0500 	adc.w	r5, r9, #0
 8001114:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	2200      	movs	r2, #0
 800111c:	469a      	mov	sl, r3
 800111e:	4693      	mov	fp, r2
 8001120:	45a2      	cmp	sl, r4
 8001122:	eb7b 0305 	sbcs.w	r3, fp, r5
 8001126:	d206      	bcs.n	8001136 <uavcan_node_GetInfo_Response_1_0_serialize_+0xc2>
 8001128:	4bb7      	ldr	r3, [pc, #732]	@ (8001408 <uavcan_node_GetInfo_Response_1_0_serialize_+0x394>)
 800112a:	4ab5      	ldr	r2, [pc, #724]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 800112c:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8001130:	48b4      	ldr	r0, [pc, #720]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 8001132:	f005 fe89 	bl	8006e48 <__assert_func>
        size_t _size_bytes0_ = 2UL;  // Nested object (max) size, in bytes.
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800113c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	2b00      	cmp	r3, #0
 8001146:	d006      	beq.n	8001156 <uavcan_node_GetInfo_Response_1_0_serialize_+0xe2>
 8001148:	4bac      	ldr	r3, [pc, #688]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 800114a:	4aad      	ldr	r2, [pc, #692]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 800114c:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8001150:	48ac      	ldr	r0, [pc, #688]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 8001152:	f005 fe79 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8001156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800115a:	08da      	lsrs	r2, r3, #3
 800115c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001160:	441a      	add	r2, r3
 8001162:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001166:	4293      	cmp	r3, r2
 8001168:	d206      	bcs.n	8001178 <uavcan_node_GetInfo_Response_1_0_serialize_+0x104>
 800116a:	4ba8      	ldr	r3, [pc, #672]	@ (800140c <uavcan_node_GetInfo_Response_1_0_serialize_+0x398>)
 800116c:	4aa4      	ldr	r2, [pc, #656]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 800116e:	f240 111b 	movw	r1, #283	@ 0x11b
 8001172:	48a4      	ldr	r0, [pc, #656]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 8001174:	f005 fe68 	bl	8006e48 <__assert_func>
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8001178:	f8d7 00b4 	ldr.w	r0, [r7, #180]	@ 0xb4
            &obj->protocol_version, &buffer[offset_bits / 8U], &_size_bytes0_);
 800117c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001180:	08da      	lsrs	r2, r3, #3
 8001182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001186:	1899      	adds	r1, r3, r2
        int8_t _err0_ = uavcan_node_Version_1_0_serialize_(
 8001188:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800118c:	461a      	mov	r2, r3
 800118e:	f7ff fe5b 	bl	8000e48 <uavcan_node_Version_1_0_serialize_>
 8001192:	4603      	mov	r3, r0
 8001194:	f887 30cf 	strb.w	r3, [r7, #207]	@ 0xcf
        if (_err0_ < 0)
 8001198:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 800119c:	2b00      	cmp	r3, #0
 800119e:	da03      	bge.n	80011a8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x134>
        {
            return _err0_;
 80011a0:	f997 30cf 	ldrsb.w	r3, [r7, #207]	@ 0xcf
 80011a4:	f000 bc7d 	b.w	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 16ULL);
 80011a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d006      	beq.n	80011c0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x14c>
 80011b2:	4b97      	ldr	r3, [pc, #604]	@ (8001410 <uavcan_node_GetInfo_Response_1_0_serialize_+0x39c>)
 80011b4:	4a92      	ldr	r2, [pc, #584]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80011b6:	f240 1123 	movw	r1, #291	@ 0x123
 80011ba:	4892      	ldr	r0, [pc, #584]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80011bc:	f005 fe44 	bl	8006e48 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 80011c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80011c4:	00da      	lsls	r2, r3, #3
 80011c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011ca:	4413      	add	r3, r2
 80011cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80011d0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80011d4:	00da      	lsls	r2, r3, #3
 80011d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011da:	4293      	cmp	r3, r2
 80011dc:	d906      	bls.n	80011ec <uavcan_node_GetInfo_Response_1_0_serialize_+0x178>
 80011de:	4b8d      	ldr	r3, [pc, #564]	@ (8001414 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3a0>)
 80011e0:	4a87      	ldr	r2, [pc, #540]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80011e2:	f240 1125 	movw	r1, #293	@ 0x125
 80011e6:	4887      	ldr	r0, [pc, #540]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80011e8:	f005 fe2e 	bl	8006e48 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80011ec:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d044      	beq.n	8001282 <uavcan_node_GetInfo_Response_1_0_serialize_+0x20e>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80011f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80011fc:	b2db      	uxtb	r3, r3
 80011fe:	f003 0307 	and.w	r3, r3, #7
 8001202:	b2db      	uxtb	r3, r3
 8001204:	f1c3 0308 	rsb	r3, r3, #8
 8001208:	f887 30ce 	strb.w	r3, [r7, #206]	@ 0xce
        NUNAVUT_ASSERT(_pad0_ > 0);
 800120c:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8001210:	2b00      	cmp	r3, #0
 8001212:	d106      	bne.n	8001222 <uavcan_node_GetInfo_Response_1_0_serialize_+0x1ae>
 8001214:	4b80      	ldr	r3, [pc, #512]	@ (8001418 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3a4>)
 8001216:	4a7a      	ldr	r2, [pc, #488]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001218:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 800121c:	4879      	ldr	r0, [pc, #484]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 800121e:	f005 fe13 	bl	8006e48 <__assert_func>
        const int8_t _err1_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001222:	f897 30ce 	ldrb.w	r3, [r7, #206]	@ 0xce
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	f04f 0200 	mov.w	r2, #0
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	e9cd 2300 	strd	r2, r3, [sp]
 8001234:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001238:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 800123c:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001240:	f7ff f9d0 	bl	80005e4 <nunavutSetUxx>
 8001244:	4603      	mov	r3, r0
 8001246:	f887 30cd 	strb.w	r3, [r7, #205]	@ 0xcd
        if (_err1_ < 0)
 800124a:	f997 30cd 	ldrsb.w	r3, [r7, #205]	@ 0xcd
 800124e:	2b00      	cmp	r3, #0
 8001250:	da03      	bge.n	800125a <uavcan_node_GetInfo_Response_1_0_serialize_+0x1e6>
        {
            return _err1_;
 8001252:	f997 30cd 	ldrsb.w	r3, [r7, #205]	@ 0xcd
 8001256:	f000 bc24 	b.w	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        offset_bits += _pad0_;
 800125a:	f897 20ce 	ldrb.w	r2, [r7, #206]	@ 0xce
 800125e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001262:	4413      	add	r3, r2
 8001264:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001268:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <uavcan_node_GetInfo_Response_1_0_serialize_+0x20e>
 8001274:	4b61      	ldr	r3, [pc, #388]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 8001276:	4a62      	ldr	r2, [pc, #392]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001278:	f240 1131 	movw	r1, #305	@ 0x131
 800127c:	4861      	ldr	r0, [pc, #388]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 800127e:	f005 fde3 	bl	8006e48 <__assert_func>
    }
    {   // uavcan.node.Version.1.0 hardware_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001282:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001286:	f003 0307 	and.w	r3, r3, #7
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <uavcan_node_GetInfo_Response_1_0_serialize_+0x228>
 800128e:	4b5b      	ldr	r3, [pc, #364]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 8001290:	4a5b      	ldr	r2, [pc, #364]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001292:	f44f 719a 	mov.w	r1, #308	@ 0x134
 8001296:	485b      	ldr	r0, [pc, #364]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 8001298:	f005 fdd6 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800129c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012a0:	f003 0307 	and.w	r3, r3, #7
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d006      	beq.n	80012b6 <uavcan_node_GetInfo_Response_1_0_serialize_+0x242>
 80012a8:	4b54      	ldr	r3, [pc, #336]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 80012aa:	4a55      	ldr	r2, [pc, #340]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80012ac:	f240 1135 	movw	r1, #309	@ 0x135
 80012b0:	4854      	ldr	r0, [pc, #336]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80012b2:	f005 fdc9 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 80012b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80012ba:	2200      	movs	r2, #0
 80012bc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80012c0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80012c4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80012c8:	460b      	mov	r3, r1
 80012ca:	3310      	adds	r3, #16
 80012cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80012d0:	4613      	mov	r3, r2
 80012d2:	f143 0300 	adc.w	r3, r3, #0
 80012d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	2200      	movs	r2, #0
 80012e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80012e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80012ea:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80012ee:	4623      	mov	r3, r4
 80012f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80012f4:	4602      	mov	r2, r0
 80012f6:	4293      	cmp	r3, r2
 80012f8:	462b      	mov	r3, r5
 80012fa:	460a      	mov	r2, r1
 80012fc:	4193      	sbcs	r3, r2
 80012fe:	d206      	bcs.n	800130e <uavcan_node_GetInfo_Response_1_0_serialize_+0x29a>
 8001300:	4b41      	ldr	r3, [pc, #260]	@ (8001408 <uavcan_node_GetInfo_Response_1_0_serialize_+0x394>)
 8001302:	4a3f      	ldr	r2, [pc, #252]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001304:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8001308:	483e      	ldr	r0, [pc, #248]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 800130a:	f005 fd9d 	bl	8006e48 <__assert_func>
        size_t _size_bytes1_ = 2UL;  // Nested object (max) size, in bytes.
 800130e:	2302      	movs	r3, #2
 8001310:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001314:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001318:	f003 0307 	and.w	r3, r3, #7
 800131c:	2b00      	cmp	r3, #0
 800131e:	d006      	beq.n	800132e <uavcan_node_GetInfo_Response_1_0_serialize_+0x2ba>
 8001320:	4b36      	ldr	r3, [pc, #216]	@ (80013fc <uavcan_node_GetInfo_Response_1_0_serialize_+0x388>)
 8001322:	4a37      	ldr	r2, [pc, #220]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001324:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8001328:	4836      	ldr	r0, [pc, #216]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 800132a:	f005 fd8d 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 800132e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001332:	08da      	lsrs	r2, r3, #3
 8001334:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001338:	441a      	add	r2, r3
 800133a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800133e:	4293      	cmp	r3, r2
 8001340:	d206      	bcs.n	8001350 <uavcan_node_GetInfo_Response_1_0_serialize_+0x2dc>
 8001342:	4b36      	ldr	r3, [pc, #216]	@ (800141c <uavcan_node_GetInfo_Response_1_0_serialize_+0x3a8>)
 8001344:	4a2e      	ldr	r2, [pc, #184]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 8001346:	f240 1139 	movw	r1, #313	@ 0x139
 800134a:	482e      	ldr	r0, [pc, #184]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 800134c:	f005 fd7c 	bl	8006e48 <__assert_func>
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8001350:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001354:	1c98      	adds	r0, r3, #2
            &obj->hardware_version, &buffer[offset_bits / 8U], &_size_bytes1_);
 8001356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001360:	1899      	adds	r1, r3, r2
        int8_t _err2_ = uavcan_node_Version_1_0_serialize_(
 8001362:	f107 03bc 	add.w	r3, r7, #188	@ 0xbc
 8001366:	461a      	mov	r2, r3
 8001368:	f7ff fd6e 	bl	8000e48 <uavcan_node_Version_1_0_serialize_>
 800136c:	4603      	mov	r3, r0
 800136e:	f887 30cc 	strb.w	r3, [r7, #204]	@ 0xcc
        if (_err2_ < 0)
 8001372:	f997 30cc 	ldrsb.w	r3, [r7, #204]	@ 0xcc
 8001376:	2b00      	cmp	r3, #0
 8001378:	da02      	bge.n	8001380 <uavcan_node_GetInfo_Response_1_0_serialize_+0x30c>
        {
            return _err2_;
 800137a:	f997 30cc 	ldrsb.w	r3, [r7, #204]	@ 0xcc
 800137e:	e390      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 16ULL);
 8001380:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8001384:	00db      	lsls	r3, r3, #3
 8001386:	2b10      	cmp	r3, #16
 8001388:	d006      	beq.n	8001398 <uavcan_node_GetInfo_Response_1_0_serialize_+0x324>
 800138a:	4b25      	ldr	r3, [pc, #148]	@ (8001420 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3ac>)
 800138c:	4a1c      	ldr	r2, [pc, #112]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 800138e:	f240 1141 	movw	r1, #321	@ 0x141
 8001392:	481c      	ldr	r0, [pc, #112]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 8001394:	f005 fd58 	bl	8006e48 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8001398:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800139c:	00da      	lsls	r2, r3, #3
 800139e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013a2:	4413      	add	r3, r2
 80013a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80013a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80013ac:	00da      	lsls	r2, r3, #3
 80013ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d906      	bls.n	80013c4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x350>
 80013b6:	4b17      	ldr	r3, [pc, #92]	@ (8001414 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3a0>)
 80013b8:	4a11      	ldr	r2, [pc, #68]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80013ba:	f240 1143 	movw	r1, #323	@ 0x143
 80013be:	4811      	ldr	r0, [pc, #68]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80013c0:	f005 fd42 	bl	8006e48 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80013c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013c8:	f003 0307 	and.w	r3, r3, #7
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d05a      	beq.n	8001486 <uavcan_node_GetInfo_Response_1_0_serialize_+0x412>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 80013d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	f1c3 0308 	rsb	r3, r3, #8
 80013e0:	f887 30cb 	strb.w	r3, [r7, #203]	@ 0xcb
        NUNAVUT_ASSERT(_pad1_ > 0);
 80013e4:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d11d      	bne.n	8001428 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3b4>
 80013ec:	4b0d      	ldr	r3, [pc, #52]	@ (8001424 <uavcan_node_GetInfo_Response_1_0_serialize_+0x3b0>)
 80013ee:	4a04      	ldr	r2, [pc, #16]	@ (8001400 <uavcan_node_GetInfo_Response_1_0_serialize_+0x38c>)
 80013f0:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 80013f4:	4803      	ldr	r0, [pc, #12]	@ (8001404 <uavcan_node_GetInfo_Response_1_0_serialize_+0x390>)
 80013f6:	f005 fd27 	bl	8006e48 <__assert_func>
 80013fa:	bf00      	nop
 80013fc:	08007fd0 	.word	0x08007fd0
 8001400:	080090c0 	.word	0x080090c0
 8001404:	08008314 	.word	0x08008314
 8001408:	08008360 	.word	0x08008360
 800140c:	080081a4 	.word	0x080081a4
 8001410:	08008390 	.word	0x08008390
 8001414:	080081fc 	.word	0x080081fc
 8001418:	08008060 	.word	0x08008060
 800141c:	08008230 	.word	0x08008230
 8001420:	080083b0 	.word	0x080083b0
 8001424:	08008224 	.word	0x08008224
        const int8_t _err3_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8001428:	f897 30cb 	ldrb.w	r3, [r7, #203]	@ 0xcb
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	f04f 0200 	mov.w	r2, #0
 8001432:	f04f 0300 	mov.w	r3, #0
 8001436:	e9cd 2300 	strd	r2, r3, [sp]
 800143a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 800143e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001442:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001446:	f7ff f8cd 	bl	80005e4 <nunavutSetUxx>
 800144a:	4603      	mov	r3, r0
 800144c:	f887 30ca 	strb.w	r3, [r7, #202]	@ 0xca
        if (_err3_ < 0)
 8001450:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 8001454:	2b00      	cmp	r3, #0
 8001456:	da02      	bge.n	800145e <uavcan_node_GetInfo_Response_1_0_serialize_+0x3ea>
        {
            return _err3_;
 8001458:	f997 30ca 	ldrsb.w	r3, [r7, #202]	@ 0xca
 800145c:	e321      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        offset_bits += _pad1_;
 800145e:	f897 20cb 	ldrb.w	r2, [r7, #203]	@ 0xcb
 8001462:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001466:	4413      	add	r3, r2
 8001468:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800146c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001470:	f003 0307 	and.w	r3, r3, #7
 8001474:	2b00      	cmp	r3, #0
 8001476:	d006      	beq.n	8001486 <uavcan_node_GetInfo_Response_1_0_serialize_+0x412>
 8001478:	4bc4      	ldr	r3, [pc, #784]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 800147a:	4ac5      	ldr	r2, [pc, #788]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 800147c:	f240 114f 	movw	r1, #335	@ 0x14f
 8001480:	48c4      	ldr	r0, [pc, #784]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 8001482:	f005 fce1 	bl	8006e48 <__assert_func>
    }
    {   // uavcan.node.Version.1.0 software_version
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800148a:	f003 0307 	and.w	r3, r3, #7
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x42c>
 8001492:	4bbe      	ldr	r3, [pc, #760]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 8001494:	4abe      	ldr	r2, [pc, #760]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001496:	f44f 71a9 	mov.w	r1, #338	@ 0x152
 800149a:	48be      	ldr	r0, [pc, #760]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 800149c:	f005 fcd4 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80014a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014a4:	f003 0307 	and.w	r3, r3, #7
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d006      	beq.n	80014ba <uavcan_node_GetInfo_Response_1_0_serialize_+0x446>
 80014ac:	4bb7      	ldr	r3, [pc, #732]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 80014ae:	4ab8      	ldr	r2, [pc, #736]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 80014b0:	f240 1153 	movw	r1, #339	@ 0x153
 80014b4:	48b7      	ldr	r0, [pc, #732]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 80014b6:	f005 fcc7 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 16ULL) <= (capacity_bytes * 8U));
 80014ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80014be:	2200      	movs	r2, #0
 80014c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014c8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80014cc:	460b      	mov	r3, r1
 80014ce:	3310      	adds	r3, #16
 80014d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014d4:	4613      	mov	r3, r2
 80014d6:	f143 0300 	adc.w	r3, r3, #0
 80014da:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80014de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80014e2:	00db      	lsls	r3, r3, #3
 80014e4:	2200      	movs	r2, #0
 80014e6:	67bb      	str	r3, [r7, #120]	@ 0x78
 80014e8:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80014ea:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014ee:	4623      	mov	r3, r4
 80014f0:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80014f4:	4602      	mov	r2, r0
 80014f6:	4293      	cmp	r3, r2
 80014f8:	462b      	mov	r3, r5
 80014fa:	460a      	mov	r2, r1
 80014fc:	4193      	sbcs	r3, r2
 80014fe:	d206      	bcs.n	800150e <uavcan_node_GetInfo_Response_1_0_serialize_+0x49a>
 8001500:	4ba5      	ldr	r3, [pc, #660]	@ (8001798 <uavcan_node_GetInfo_Response_1_0_serialize_+0x724>)
 8001502:	4aa3      	ldr	r2, [pc, #652]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001504:	f44f 71aa 	mov.w	r1, #340	@ 0x154
 8001508:	48a2      	ldr	r0, [pc, #648]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 800150a:	f005 fc9d 	bl	8006e48 <__assert_func>
        size_t _size_bytes2_ = 2UL;  // Nested object (max) size, in bytes.
 800150e:	2302      	movs	r3, #2
 8001510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001514:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001518:	f003 0307 	and.w	r3, r3, #7
 800151c:	2b00      	cmp	r3, #0
 800151e:	d006      	beq.n	800152e <uavcan_node_GetInfo_Response_1_0_serialize_+0x4ba>
 8001520:	4b9a      	ldr	r3, [pc, #616]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 8001522:	4a9b      	ldr	r2, [pc, #620]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001524:	f44f 71ab 	mov.w	r1, #342	@ 0x156
 8001528:	489a      	ldr	r0, [pc, #616]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 800152a:	f005 fc8d 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes2_) <= capacity_bytes);
 800152e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001538:	441a      	add	r2, r3
 800153a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800153e:	4293      	cmp	r3, r2
 8001540:	d206      	bcs.n	8001550 <uavcan_node_GetInfo_Response_1_0_serialize_+0x4dc>
 8001542:	4b96      	ldr	r3, [pc, #600]	@ (800179c <uavcan_node_GetInfo_Response_1_0_serialize_+0x728>)
 8001544:	4a92      	ldr	r2, [pc, #584]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001546:	f240 1157 	movw	r1, #343	@ 0x157
 800154a:	4892      	ldr	r0, [pc, #584]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 800154c:	f005 fc7c 	bl	8006e48 <__assert_func>
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8001550:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001554:	1d18      	adds	r0, r3, #4
            &obj->software_version, &buffer[offset_bits / 8U], &_size_bytes2_);
 8001556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800155a:	08da      	lsrs	r2, r3, #3
 800155c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001560:	1899      	adds	r1, r3, r2
        int8_t _err4_ = uavcan_node_Version_1_0_serialize_(
 8001562:	f107 03b8 	add.w	r3, r7, #184	@ 0xb8
 8001566:	461a      	mov	r2, r3
 8001568:	f7ff fc6e 	bl	8000e48 <uavcan_node_Version_1_0_serialize_>
 800156c:	4603      	mov	r3, r0
 800156e:	f887 30c9 	strb.w	r3, [r7, #201]	@ 0xc9
        if (_err4_ < 0)
 8001572:	f997 30c9 	ldrsb.w	r3, [r7, #201]	@ 0xc9
 8001576:	2b00      	cmp	r3, #0
 8001578:	da02      	bge.n	8001580 <uavcan_node_GetInfo_Response_1_0_serialize_+0x50c>
        {
            return _err4_;
 800157a:	f997 30c9 	ldrsb.w	r3, [r7, #201]	@ 0xc9
 800157e:	e290      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes2_ * 8U) == 16ULL);
 8001580:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001584:	00db      	lsls	r3, r3, #3
 8001586:	2b10      	cmp	r3, #16
 8001588:	d006      	beq.n	8001598 <uavcan_node_GetInfo_Response_1_0_serialize_+0x524>
 800158a:	4b85      	ldr	r3, [pc, #532]	@ (80017a0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x72c>)
 800158c:	4a80      	ldr	r2, [pc, #512]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 800158e:	f240 115f 	movw	r1, #351	@ 0x15f
 8001592:	4880      	ldr	r0, [pc, #512]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 8001594:	f005 fc58 	bl	8006e48 <__assert_func>
        offset_bits += _size_bytes2_ * 8U;  // Advance by the size of the nested object.
 8001598:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800159c:	00da      	lsls	r2, r3, #3
 800159e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80015a2:	4413      	add	r3, r2
 80015a4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 80015a8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80015ac:	00da      	lsls	r2, r3, #3
 80015ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d906      	bls.n	80015c4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x550>
 80015b6:	4b7b      	ldr	r3, [pc, #492]	@ (80017a4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x730>)
 80015b8:	4a75      	ldr	r2, [pc, #468]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 80015ba:	f240 1161 	movw	r1, #353	@ 0x161
 80015be:	4875      	ldr	r0, [pc, #468]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 80015c0:	f005 fc42 	bl	8006e48 <__assert_func>
    }
    {   // saturated uint64 software_vcs_revision_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80015c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80015c8:	f003 0307 	and.w	r3, r3, #7
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d006      	beq.n	80015de <uavcan_node_GetInfo_Response_1_0_serialize_+0x56a>
 80015d0:	4b6e      	ldr	r3, [pc, #440]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 80015d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 80015d4:	f44f 71b2 	mov.w	r1, #356	@ 0x164
 80015d8:	486e      	ldr	r0, [pc, #440]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 80015da:	f005 fc35 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 64ULL) <= (capacity_bytes * 8U));
 80015de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80015e2:	2200      	movs	r2, #0
 80015e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80015e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80015e8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80015ec:	460b      	mov	r3, r1
 80015ee:	3340      	adds	r3, #64	@ 0x40
 80015f0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80015f2:	4613      	mov	r3, r2
 80015f4:	f143 0300 	adc.w	r3, r3, #0
 80015f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80015fa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	2200      	movs	r2, #0
 8001602:	663b      	str	r3, [r7, #96]	@ 0x60
 8001604:	667a      	str	r2, [r7, #100]	@ 0x64
 8001606:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800160a:	4623      	mov	r3, r4
 800160c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8001610:	4602      	mov	r2, r0
 8001612:	4293      	cmp	r3, r2
 8001614:	462b      	mov	r3, r5
 8001616:	460a      	mov	r2, r1
 8001618:	4193      	sbcs	r3, r2
 800161a:	d206      	bcs.n	800162a <uavcan_node_GetInfo_Response_1_0_serialize_+0x5b6>
 800161c:	4b62      	ldr	r3, [pc, #392]	@ (80017a8 <uavcan_node_GetInfo_Response_1_0_serialize_+0x734>)
 800161e:	4a5c      	ldr	r2, [pc, #368]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001620:	f240 1165 	movw	r1, #357	@ 0x165
 8001624:	485b      	ldr	r0, [pc, #364]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 8001626:	f005 fc0f 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->software_vcs_revision_id, 8U);
 800162a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800162e:	08da      	lsrs	r2, r3, #3
 8001630:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001634:	1898      	adds	r0, r3, r2
 8001636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800163a:	3308      	adds	r3, #8
 800163c:	2208      	movs	r2, #8
 800163e:	4619      	mov	r1, r3
 8001640:	f005 fdf5 	bl	800722e <memmove>
        offset_bits += 64U;
 8001644:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001648:	3340      	adds	r3, #64	@ 0x40
 800164a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    {   // saturated uint8[16] unique_id
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800164e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001652:	f003 0307 	and.w	r3, r3, #7
 8001656:	2b00      	cmp	r3, #0
 8001658:	d006      	beq.n	8001668 <uavcan_node_GetInfo_Response_1_0_serialize_+0x5f4>
 800165a:	4b4c      	ldr	r3, [pc, #304]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 800165c:	4a4c      	ldr	r2, [pc, #304]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 800165e:	f240 116b 	movw	r1, #363	@ 0x16b
 8001662:	484c      	ldr	r0, [pc, #304]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 8001664:	f005 fbf0 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 128ULL) <= (capacity_bytes * 8U));
 8001668:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800166c:	2200      	movs	r2, #0
 800166e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001670:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001672:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8001676:	460b      	mov	r3, r1
 8001678:	3380      	adds	r3, #128	@ 0x80
 800167a:	653b      	str	r3, [r7, #80]	@ 0x50
 800167c:	4613      	mov	r3, r2
 800167e:	f143 0300 	adc.w	r3, r3, #0
 8001682:	657b      	str	r3, [r7, #84]	@ 0x54
 8001684:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001688:	00db      	lsls	r3, r3, #3
 800168a:	2200      	movs	r2, #0
 800168c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800168e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001690:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8001694:	4623      	mov	r3, r4
 8001696:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 800169a:	4602      	mov	r2, r0
 800169c:	4293      	cmp	r3, r2
 800169e:	462b      	mov	r3, r5
 80016a0:	460a      	mov	r2, r1
 80016a2:	4193      	sbcs	r3, r2
 80016a4:	d206      	bcs.n	80016b4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x640>
 80016a6:	4b41      	ldr	r3, [pc, #260]	@ (80017ac <uavcan_node_GetInfo_Response_1_0_serialize_+0x738>)
 80016a8:	4a39      	ldr	r2, [pc, #228]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 80016aa:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80016ae:	4839      	ldr	r0, [pc, #228]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 80016b0:	f005 fbca 	bl	8006e48 <__assert_func>
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, 16UL * 8U, &obj->unique_id[0], 0U);
 80016b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80016b8:	f103 0210 	add.w	r2, r3, #16
 80016bc:	2300      	movs	r3, #0
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	4613      	mov	r3, r2
 80016c2:	2280      	movs	r2, #128	@ 0x80
 80016c4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80016c8:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80016cc:	f7fe fe02 	bl	80002d4 <nunavutCopyBits>
        offset_bits += 16UL * 8U;
 80016d0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80016d4:	3380      	adds	r3, #128	@ 0x80
 80016d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    {   // saturated uint8[<=50] name
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80016da:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d006      	beq.n	80016f4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x680>
 80016e6:	4b29      	ldr	r3, [pc, #164]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 80016e8:	4a29      	ldr	r2, [pc, #164]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 80016ea:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 80016ee:	4829      	ldr	r0, [pc, #164]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 80016f0:	f005 fbaa 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 408ULL) <= (capacity_bytes * 8U));
 80016f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80016f8:	2200      	movs	r2, #0
 80016fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80016fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80016fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8001702:	460b      	mov	r3, r1
 8001704:	f513 73cc 	adds.w	r3, r3, #408	@ 0x198
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
 800170a:	4613      	mov	r3, r2
 800170c:	f143 0300 	adc.w	r3, r3, #0
 8001710:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001712:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001716:	00db      	lsls	r3, r3, #3
 8001718:	2200      	movs	r2, #0
 800171a:	633b      	str	r3, [r7, #48]	@ 0x30
 800171c:	637a      	str	r2, [r7, #52]	@ 0x34
 800171e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001722:	4623      	mov	r3, r4
 8001724:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8001728:	4602      	mov	r2, r0
 800172a:	4293      	cmp	r3, r2
 800172c:	462b      	mov	r3, r5
 800172e:	460a      	mov	r2, r1
 8001730:	4193      	sbcs	r3, r2
 8001732:	d206      	bcs.n	8001742 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6ce>
 8001734:	4b1e      	ldr	r3, [pc, #120]	@ (80017b0 <uavcan_node_GetInfo_Response_1_0_serialize_+0x73c>)
 8001736:	4a16      	ldr	r2, [pc, #88]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001738:	f240 1173 	movw	r1, #371	@ 0x173
 800173c:	4815      	ldr	r0, [pc, #84]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 800173e:	f005 fb83 	bl	8006e48 <__assert_func>
        if (obj->name.count > 50)
 8001742:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001748:	2b32      	cmp	r3, #50	@ 0x32
 800174a:	d902      	bls.n	8001752 <uavcan_node_GetInfo_Response_1_0_serialize_+0x6de>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800174c:	f06f 0309 	mvn.w	r3, #9
 8001750:	e1a7      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->name.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8001752:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001756:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8001758:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800175c:	08da      	lsrs	r2, r3, #3
 800175e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8001762:	441a      	add	r2, r3
 8001764:	b2cb      	uxtb	r3, r1
 8001766:	7013      	strb	r3, [r2, #0]
        offset_bits += 8U;
 8001768:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800176c:	3308      	adds	r3, #8
 800176e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001772:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x740>
 800177e:	4b03      	ldr	r3, [pc, #12]	@ (800178c <uavcan_node_GetInfo_Response_1_0_serialize_+0x718>)
 8001780:	4a03      	ldr	r2, [pc, #12]	@ (8001790 <uavcan_node_GetInfo_Response_1_0_serialize_+0x71c>)
 8001782:	f240 117b 	movw	r1, #379	@ 0x17b
 8001786:	4803      	ldr	r0, [pc, #12]	@ (8001794 <uavcan_node_GetInfo_Response_1_0_serialize_+0x720>)
 8001788:	f005 fb5e 	bl	8006e48 <__assert_func>
 800178c:	08007fd0 	.word	0x08007fd0
 8001790:	080090c0 	.word	0x080090c0
 8001794:	08008314 	.word	0x08008314
 8001798:	08008360 	.word	0x08008360
 800179c:	080083d0 	.word	0x080083d0
 80017a0:	08008408 	.word	0x08008408
 80017a4:	080081fc 	.word	0x080081fc
 80017a8:	08008428 	.word	0x08008428
 80017ac:	08008458 	.word	0x08008458
 80017b0:	08008488 	.word	0x08008488
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->name.count * 8U, &obj->name.elements[0], 0U);
 80017b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ba:	00d9      	lsls	r1, r3, #3
 80017bc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017c0:	f103 0220 	add.w	r2, r3, #32
 80017c4:	2300      	movs	r3, #0
 80017c6:	9300      	str	r3, [sp, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	460a      	mov	r2, r1
 80017cc:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80017d0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80017d4:	f7fe fd7e 	bl	80002d4 <nunavutCopyBits>
        offset_bits += obj->name.count * 8U;
 80017d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80017dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80017e4:	4413      	add	r3, r2
 80017e6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    {   // saturated uint64[<=1] software_image_crc
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80017ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80017ee:	f003 0307 	and.w	r3, r3, #7
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <uavcan_node_GetInfo_Response_1_0_serialize_+0x790>
 80017f6:	4bad      	ldr	r3, [pc, #692]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 80017f8:	4aad      	ldr	r2, [pc, #692]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 80017fa:	f240 1181 	movw	r1, #385	@ 0x181
 80017fe:	48ad      	ldr	r0, [pc, #692]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001800:	f005 fb22 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 72ULL) <= (capacity_bytes * 8U));
 8001804:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001808:	2200      	movs	r2, #0
 800180a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800180c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800180e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8001812:	460b      	mov	r3, r1
 8001814:	3348      	adds	r3, #72	@ 0x48
 8001816:	623b      	str	r3, [r7, #32]
 8001818:	4613      	mov	r3, r2
 800181a:	f143 0300 	adc.w	r3, r3, #0
 800181e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001820:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001824:	00db      	lsls	r3, r3, #3
 8001826:	2200      	movs	r2, #0
 8001828:	61bb      	str	r3, [r7, #24]
 800182a:	61fa      	str	r2, [r7, #28]
 800182c:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8001830:	4623      	mov	r3, r4
 8001832:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001836:	4602      	mov	r2, r0
 8001838:	4293      	cmp	r3, r2
 800183a:	462b      	mov	r3, r5
 800183c:	460a      	mov	r2, r1
 800183e:	4193      	sbcs	r3, r2
 8001840:	d206      	bcs.n	8001850 <uavcan_node_GetInfo_Response_1_0_serialize_+0x7dc>
 8001842:	4b9d      	ldr	r3, [pc, #628]	@ (8001ab8 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa44>)
 8001844:	4a9a      	ldr	r2, [pc, #616]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001846:	f44f 71c1 	mov.w	r1, #386	@ 0x182
 800184a:	489a      	ldr	r0, [pc, #616]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 800184c:	f005 fafc 	bl	8006e48 <__assert_func>
        if (obj->software_image_crc.count > 1)
 8001850:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001854:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001856:	2b01      	cmp	r3, #1
 8001858:	d902      	bls.n	8001860 <uavcan_node_GetInfo_Response_1_0_serialize_+0x7ec>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800185a:	f06f 0309 	mvn.w	r3, #9
 800185e:	e120      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->software_image_crc.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8001860:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001864:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 8001866:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800186a:	08db      	lsrs	r3, r3, #3
 800186c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001870:	4413      	add	r3, r2
 8001872:	b2ca      	uxtb	r2, r1
 8001874:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001876:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800187a:	3308      	adds	r3, #8
 800187c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001880:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	2b00      	cmp	r3, #0
 800188a:	d006      	beq.n	800189a <uavcan_node_GetInfo_Response_1_0_serialize_+0x826>
 800188c:	4b87      	ldr	r3, [pc, #540]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 800188e:	4a88      	ldr	r2, [pc, #544]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001890:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8001894:	4887      	ldr	r0, [pc, #540]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001896:	f005 fad7 	bl	8006e48 <__assert_func>
        // Saturation code not emitted -- assume the native representation is conformant.
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->software_image_crc.count * 64UL, &obj->software_image_crc.elements[0], 0U);
 800189a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800189e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a0:	019a      	lsls	r2, r3, #6
 80018a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018a6:	3358      	adds	r3, #88	@ 0x58
 80018a8:	2100      	movs	r1, #0
 80018aa:	9100      	str	r1, [sp, #0]
 80018ac:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 80018b0:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 80018b4:	f7fe fd0e 	bl	80002d4 <nunavutCopyBits>
        offset_bits += obj->software_image_crc.count * 64UL;
 80018b8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80018bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018be:	019b      	lsls	r3, r3, #6
 80018c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018c4:	4413      	add	r3, r2
 80018c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    {   // saturated uint8[<=222] certificate_of_authenticity
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80018ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d006      	beq.n	80018e4 <uavcan_node_GetInfo_Response_1_0_serialize_+0x870>
 80018d6:	4b75      	ldr	r3, [pc, #468]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 80018d8:	4a75      	ldr	r2, [pc, #468]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 80018da:	f240 1191 	movw	r1, #401	@ 0x191
 80018de:	4875      	ldr	r0, [pc, #468]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 80018e0:	f005 fab2 	bl	8006e48 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 1784ULL) <= (capacity_bytes * 8U));
 80018e4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80018e8:	2200      	movs	r2, #0
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	617a      	str	r2, [r7, #20]
 80018ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80018f2:	460b      	mov	r3, r1
 80018f4:	f513 63df 	adds.w	r3, r3, #1784	@ 0x6f8
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4613      	mov	r3, r2
 80018fc:	f143 0300 	adc.w	r3, r3, #0
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001906:	00db      	lsls	r3, r3, #3
 8001908:	2200      	movs	r2, #0
 800190a:	603b      	str	r3, [r7, #0]
 800190c:	607a      	str	r2, [r7, #4]
 800190e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001912:	4623      	mov	r3, r4
 8001914:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001918:	4602      	mov	r2, r0
 800191a:	4293      	cmp	r3, r2
 800191c:	462b      	mov	r3, r5
 800191e:	460a      	mov	r2, r1
 8001920:	4193      	sbcs	r3, r2
 8001922:	d206      	bcs.n	8001932 <uavcan_node_GetInfo_Response_1_0_serialize_+0x8be>
 8001924:	4b65      	ldr	r3, [pc, #404]	@ (8001abc <uavcan_node_GetInfo_Response_1_0_serialize_+0xa48>)
 8001926:	4a62      	ldr	r2, [pc, #392]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001928:	f44f 71c9 	mov.w	r1, #402	@ 0x192
 800192c:	4861      	ldr	r0, [pc, #388]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 800192e:	f005 fa8b 	bl	8006e48 <__assert_func>
        if (obj->certificate_of_authenticity.count > 222)
 8001932:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001936:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 800193a:	2bde      	cmp	r3, #222	@ 0xde
 800193c:	d902      	bls.n	8001944 <uavcan_node_GetInfo_Response_1_0_serialize_+0x8d0>
        {
            return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 800193e:	f06f 0309 	mvn.w	r3, #9
 8001942:	e0ae      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        // Array length prefix: truncated uint8
        buffer[offset_bits / 8U] = (uint8_t)(obj->certificate_of_authenticity.count);  // C std, 6.3.1.3 Signed and unsigned integers
 8001944:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001948:	f8d3 1148 	ldr.w	r1, [r3, #328]	@ 0x148
 800194c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001950:	08db      	lsrs	r3, r3, #3
 8001952:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8001956:	4413      	add	r3, r2
 8001958:	b2ca      	uxtb	r2, r1
 800195a:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 800195c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001960:	3308      	adds	r3, #8
 8001962:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001966:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	2b00      	cmp	r3, #0
 8001970:	d006      	beq.n	8001980 <uavcan_node_GetInfo_Response_1_0_serialize_+0x90c>
 8001972:	4b4e      	ldr	r3, [pc, #312]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 8001974:	4a4e      	ldr	r2, [pc, #312]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001976:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800197a:	484e      	ldr	r0, [pc, #312]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 800197c:	f005 fa64 	bl	8006e48 <__assert_func>
        // Optimization prospect: this item is aligned at the byte boundary, so it is possible to use memmove().
        nunavutCopyBits(&buffer[0], offset_bits, obj->certificate_of_authenticity.count * 8U, &obj->certificate_of_authenticity.elements[0], 0U);
 8001980:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001984:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 8001988:	00da      	lsls	r2, r3, #3
 800198a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800198e:	3368      	adds	r3, #104	@ 0x68
 8001990:	2100      	movs	r1, #0
 8001992:	9100      	str	r1, [sp, #0]
 8001994:	f8d7 10d4 	ldr.w	r1, [r7, #212]	@ 0xd4
 8001998:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 800199c:	f7fe fc9a 	bl	80002d4 <nunavutCopyBits>
        offset_bits += obj->certificate_of_authenticity.count * 8U;
 80019a0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80019a4:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
 80019a8:	00db      	lsls	r3, r3, #3
 80019aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80019ae:	4413      	add	r3, r2
 80019b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80019b4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019b8:	f003 0307 	and.w	r3, r3, #7
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d043      	beq.n	8001a48 <uavcan_node_GetInfo_Response_1_0_serialize_+0x9d4>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 80019c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	f003 0307 	and.w	r3, r3, #7
 80019ca:	b2db      	uxtb	r3, r3
 80019cc:	f1c3 0308 	rsb	r3, r3, #8
 80019d0:	f887 30c8 	strb.w	r3, [r7, #200]	@ 0xc8
        NUNAVUT_ASSERT(_pad2_ > 0);
 80019d4:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d106      	bne.n	80019ea <uavcan_node_GetInfo_Response_1_0_serialize_+0x976>
 80019dc:	4b38      	ldr	r3, [pc, #224]	@ (8001ac0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa4c>)
 80019de:	4a34      	ldr	r2, [pc, #208]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 80019e0:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80019e4:	4833      	ldr	r0, [pc, #204]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 80019e6:	f005 fa2f 	bl	8006e48 <__assert_func>
        const int8_t _err5_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 80019ea:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	f04f 0200 	mov.w	r2, #0
 80019f4:	f04f 0300 	mov.w	r3, #0
 80019f8:	e9cd 2300 	strd	r2, r3, [sp]
 80019fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a00:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8001a04:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8001a08:	f7fe fdec 	bl	80005e4 <nunavutSetUxx>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
        if (_err5_ < 0)
 8001a12:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	da02      	bge.n	8001a20 <uavcan_node_GetInfo_Response_1_0_serialize_+0x9ac>
        {
            return _err5_;
 8001a1a:	f997 30c7 	ldrsb.w	r3, [r7, #199]	@ 0xc7
 8001a1e:	e040      	b.n	8001aa2 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa2e>
        }
        offset_bits += _pad2_;
 8001a20:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8001a24:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a28:	4413      	add	r3, r2
 8001a2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001a2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a32:	f003 0307 	and.w	r3, r3, #7
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <uavcan_node_GetInfo_Response_1_0_serialize_+0x9d4>
 8001a3a:	4b1c      	ldr	r3, [pc, #112]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 8001a3c:	4a1c      	ldr	r2, [pc, #112]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001a3e:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8001a42:	481c      	ldr	r0, [pc, #112]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001a44:	f005 fa00 	bl	8006e48 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits >= 264ULL);
 8001a48:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a4c:	f5b3 7f84 	cmp.w	r3, #264	@ 0x108
 8001a50:	d206      	bcs.n	8001a60 <uavcan_node_GetInfo_Response_1_0_serialize_+0x9ec>
 8001a52:	4b1c      	ldr	r3, [pc, #112]	@ (8001ac4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa50>)
 8001a54:	4a16      	ldr	r2, [pc, #88]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001a56:	f44f 71d6 	mov.w	r1, #428	@ 0x1ac
 8001a5a:	4816      	ldr	r0, [pc, #88]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001a5c:	f005 f9f4 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits <= 2504ULL);
 8001a60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a64:	f640 12c8 	movw	r2, #2504	@ 0x9c8
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d906      	bls.n	8001a7a <uavcan_node_GetInfo_Response_1_0_serialize_+0xa06>
 8001a6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ac8 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa54>)
 8001a6e:	4a10      	ldr	r2, [pc, #64]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001a70:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8001a74:	480f      	ldr	r0, [pc, #60]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001a76:	f005 f9e7 	bl	8006e48 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001a7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa20>
 8001a86:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <uavcan_node_GetInfo_Response_1_0_serialize_+0xa38>)
 8001a88:	4a09      	ldr	r2, [pc, #36]	@ (8001ab0 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa3c>)
 8001a8a:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 8001a8e:	4809      	ldr	r0, [pc, #36]	@ (8001ab4 <uavcan_node_GetInfo_Response_1_0_serialize_+0xa40>)
 8001a90:	f005 f9da 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8001a94:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001a98:	08da      	lsrs	r2, r3, #3
 8001a9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a9e:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	37d8      	adds	r7, #216	@ 0xd8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001aac:	08007fd0 	.word	0x08007fd0
 8001ab0:	080090c0 	.word	0x080090c0
 8001ab4:	08008314 	.word	0x08008314
 8001ab8:	080084b8 	.word	0x080084b8
 8001abc:	080084e8 	.word	0x080084e8
 8001ac0:	08008288 	.word	0x08008288
 8001ac4:	0800851c 	.word	0x0800851c
 8001ac8:	08008534 	.word	0x08008534

08001acc <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b08a      	sub	sp, #40	@ 0x28
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	60b9      	str	r1, [r7, #8]
 8001ad6:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d009      	beq.n	8001af2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d006      	beq.n	8001af2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d106      	bne.n	8001af8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d002      	beq.n	8001af8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8001af2:	f06f 0301 	mvn.w	r3, #1
 8001af6:	e076      	b.n	8001be6 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    if (buffer == NULL)
 8001af8:	68bb      	ldr	r3, [r7, #8]
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8001afe:	4b3c      	ldr	r3, [pc, #240]	@ (8001bf0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x124>)
 8001b00:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d005      	beq.n	8001b28 <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8001b1c:	4b35      	ldr	r3, [pc, #212]	@ (8001bf4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8001b1e:	4a36      	ldr	r2, [pc, #216]	@ (8001bf8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8001b20:	21c7      	movs	r1, #199	@ 0xc7
 8001b22:	4836      	ldr	r0, [pc, #216]	@ (8001bfc <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8001b24:	f005 f990 	bl	8006e48 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	3308      	adds	r3, #8
 8001b2c:	69ba      	ldr	r2, [r7, #24]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d309      	bcc.n	8001b46 <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	4413      	add	r3, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	461a      	mov	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8001b44:	e003      	b.n	8001b4e <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2200      	movs	r2, #0
 8001b4a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	3308      	adds	r3, #8
 8001b52:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b5a:	2b20      	cmp	r3, #32
 8001b5c:	d902      	bls.n	8001b64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8001b5e:	f06f 0309 	mvn.w	r3, #9
 8001b62:	e040      	b.n	8001be6 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 8001b6e:	4b21      	ldr	r3, [pc, #132]	@ (8001bf4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8001b70:	4a21      	ldr	r2, [pc, #132]	@ (8001bf8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8001b72:	21d6      	movs	r1, #214	@ 0xd6
 8001b74:	4821      	ldr	r0, [pc, #132]	@ (8001bfc <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8001b76:	f005 f967 	bl	8006e48 <__assert_func>
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8001b7a:	68f8      	ldr	r0, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b82:	019b      	lsls	r3, r3, #6
 8001b84:	9300      	str	r3, [sp, #0]
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	69fa      	ldr	r2, [r7, #28]
 8001b8a:	68b9      	ldr	r1, [r7, #8]
 8001b8c:	f7fe fce8 	bl	8000560 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8001b96:	019b      	lsls	r3, r3, #6
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	4413      	add	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3307      	adds	r3, #7
 8001ba2:	f023 0307 	bic.w	r3, r3, #7
 8001ba6:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	f003 0307 	and.w	r3, r3, #7
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d005      	beq.n	8001bbe <uavcan_primitive_array_Real64_1_0_deserialize_+0xf2>
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8001bb4:	4a10      	ldr	r2, [pc, #64]	@ (8001bf8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8001bb6:	21dc      	movs	r1, #220	@ 0xdc
 8001bb8:	4810      	ldr	r0, [pc, #64]	@ (8001bfc <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8001bba:	f005 f945 	bl	8006e48 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	6978      	ldr	r0, [r7, #20]
 8001bc2:	f7fe fb5d 	bl	8000280 <nunavutChooseMin>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	08da      	lsrs	r2, r3, #3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	69fa      	ldr	r2, [r7, #28]
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d205      	bcs.n	8001be4 <uavcan_primitive_array_Real64_1_0_deserialize_+0x118>
 8001bd8:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <uavcan_primitive_array_Real64_1_0_deserialize_+0x134>)
 8001bda:	4a07      	ldr	r2, [pc, #28]	@ (8001bf8 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8001bdc:	21de      	movs	r1, #222	@ 0xde
 8001bde:	4807      	ldr	r0, [pc, #28]	@ (8001bfc <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8001be0:	f005 f932 	bl	8006e48 <__assert_func>
    return NUNAVUT_SUCCESS;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3720      	adds	r7, #32
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08008310 	.word	0x08008310
 8001bf4:	08007fd0 	.word	0x08007fd0
 8001bf8:	08009110 	.word	0x08009110
 8001bfc:	0800854c 	.word	0x0800854c
 8001c00:	080085a0 	.word	0x080085a0

08001c04 <micros>:
// Placeholder - Implement this using HAL_GetUIDw0(), HAL_GetUIDw1(), HAL_GetUIDw2()
void get_unique_id(uint8_t* unique_id_buffer); // Takes a 16-byte buffer

// return useconds - !! IMPORTANT: NEEDS REAL IMPLEMENTATION !!
uint64_t micros(void) // Changed to uint64_t for standard libcanard usage
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  // Replace with HAL_GetTick() or preferably a hardware timer (e.g., TIM) based microsecond counter
  // Example using HAL_GetTick() (millisecond resolution, multiply by 1000)
  // return (uint64_t)HAL_GetTick() * 1000ULL;
  // For now, returning 0 - THIS WILL CAUSE ISSUES WITH TIMEOUTS
  return 0;
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	f04f 0300 	mov.w	r3, #0
}
 8001c10:	4610      	mov	r0, r2
 8001c12:	4619      	mov	r1, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr

08001c1c <get_unique_id>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
// Placeholder implementation for unique ID
void get_unique_id(uint8_t* unique_id_buffer) {
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
    // On STM32, the unique ID is typically 96 bits (12 bytes)
    // The GetInfo response expects 128 bits (16 bytes)
    // Read the 12 bytes using HAL functions and pad the rest (e.g., with zeros)
    memset(unique_id_buffer, 0, 16); // Clear buffer first
 8001c24:	2210      	movs	r2, #16
 8001c26:	2100      	movs	r1, #0
 8001c28:	6878      	ldr	r0, [r7, #4]
 8001c2a:	f005 fb1a 	bl	8007262 <memset>
    // memcpy(unique_id_buffer + 8, &uid_w2, sizeof(uid_w2));
    // The remaining 4 bytes are left as 0

    // --- For testing without HAL ---
    // Fill with a dummy pattern if HAL_GetUID isn't available/implemented yet
    for (int i = 0; i < 16; ++i) {
 8001c2e:	2300      	movs	r3, #0
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	e00a      	b.n	8001c4a <get_unique_id+0x2e>
        unique_id_buffer[i] = (uint8_t)(i + 1); // Example dummy pattern
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3201      	adds	r2, #1
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 16; ++i) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2b0f      	cmp	r3, #15
 8001c4e:	ddf1      	ble.n	8001c34 <get_unique_id+0x18>
    }
}
 8001c50:	bf00      	nop
 8001c52:	bf00      	nop
 8001c54:	3710      	adds	r7, #16
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c5c:	b5b0      	push	{r4, r5, r7, lr}
 8001c5e:	b09c      	sub	sp, #112	@ 0x70
 8001c60:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c62:	f000 fdd2 	bl	800280a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c66:	f000 f8df 	bl	8001e28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c6a:	f000 f959 	bl	8001f20 <MX_GPIO_Init>
  MX_CAN1_Init();
 8001c6e:	f000 f921 	bl	8001eb4 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8001c72:	4861      	ldr	r0, [pc, #388]	@ (8001df8 <main+0x19c>)
 8001c74:	f001 f827 	bl	8002cc6 <HAL_CAN_Start>
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING | CAN_IT_TX_MAILBOX_EMPTY) != HAL_OK)
 8001c78:	2103      	movs	r1, #3
 8001c7a:	485f      	ldr	r0, [pc, #380]	@ (8001df8 <main+0x19c>)
 8001c7c:	f001 fa8e 	bl	800319c <HAL_CAN_ActivateNotification>
 8001c80:	4603      	mov	r3, r0
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d001      	beq.n	8001c8a <main+0x2e>
  {
      Error_Handler();
 8001c86:	f000 fbd8 	bl	800243a <Error_Handler>
  }
  CAN_FilterTypeDef Filter;
  Filter.FilterIdHigh = 0x0000;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	637b      	str	r3, [r7, #52]	@ 0x34
  Filter.FilterIdLow = 0x0000;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	63bb      	str	r3, [r7, #56]	@ 0x38
  Filter.FilterMaskIdHigh = 0x0000;
 8001c92:	2300      	movs	r3, #0
 8001c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
  Filter.FilterMaskIdLow = 0x0000;
 8001c96:	2300      	movs	r3, #0
 8001c98:	643b      	str	r3, [r7, #64]	@ 0x40
  Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	647b      	str	r3, [r7, #68]	@ 0x44
  Filter.FilterBank = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	64bb      	str	r3, [r7, #72]	@ 0x48
  Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	653b      	str	r3, [r7, #80]	@ 0x50
  Filter.FilterActivation = ENABLE;
 8001caa:	2301      	movs	r3, #1
 8001cac:	657b      	str	r3, [r7, #84]	@ 0x54
  Filter.SlaveStartFilterBank = 0;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	65bb      	str	r3, [r7, #88]	@ 0x58
  HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8001cb2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	484f      	ldr	r0, [pc, #316]	@ (8001df8 <main+0x19c>)
 8001cba:	f000 ff3a 	bl	8002b32 <HAL_CAN_ConfigFilter>

  // Initialize Libcanard
  canard = canardInit(&memAllocate, &memFree);
 8001cbe:	4c4f      	ldr	r4, [pc, #316]	@ (8001dfc <main+0x1a0>)
 8001cc0:	463b      	mov	r3, r7
 8001cc2:	4a4f      	ldr	r2, [pc, #316]	@ (8001e00 <main+0x1a4>)
 8001cc4:	494f      	ldr	r1, [pc, #316]	@ (8001e04 <main+0x1a8>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f004 fe28 	bl	800691c <canardInit>
 8001ccc:	4625      	mov	r5, r4
 8001cce:	463c      	mov	r4, r7
 8001cd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cd4:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001cd8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
  canard.node_id = 5; // This node's ID
 8001cdc:	4b47      	ldr	r3, [pc, #284]	@ (8001dfc <main+0x1a0>)
 8001cde:	2205      	movs	r2, #5
 8001ce0:	711a      	strb	r2, [r3, #4]

  // Initialize the TX queue
  queue = canardTxInit(100, CANARD_MTU_CAN_CLASSIC);
 8001ce2:	4c49      	ldr	r4, [pc, #292]	@ (8001e08 <main+0x1ac>)
 8001ce4:	463b      	mov	r3, r7
 8001ce6:	2208      	movs	r2, #8
 8001ce8:	2164      	movs	r1, #100	@ 0x64
 8001cea:	4618      	mov	r0, r3
 8001cec:	f004 fe54 	bl	8006998 <canardTxInit>
 8001cf0:	4625      	mov	r5, r4
 8001cf2:	463c      	mov	r4, r7
 8001cf4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cf6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cf8:	6823      	ldr	r3, [r4, #0]
 8001cfa:	602b      	str	r3, [r5, #0]

  // --- Subscribe to incoming Real64 array messages ---
  if (canardRxSubscribe((CanardInstance* const)&canard,
 8001cfc:	f240 6154 	movw	r1, #1620	@ 0x654
 8001d00:	4b42      	ldr	r3, [pc, #264]	@ (8001e0c <main+0x1b0>)
 8001d02:	9302      	str	r3, [sp, #8]
 8001d04:	4a42      	ldr	r2, [pc, #264]	@ (8001e10 <main+0x1b4>)
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	e9cd 2300 	strd	r2, r3, [sp]
 8001d0e:	f240 1301 	movw	r3, #257	@ 0x101
 8001d12:	460a      	mov	r2, r1
 8001d14:	2100      	movs	r1, #0
 8001d16:	4839      	ldr	r0, [pc, #228]	@ (8001dfc <main+0x1a0>)
 8001d18:	f004 ffac 	bl	8006c74 <canardRxSubscribe>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d001      	beq.n	8001d26 <main+0xca>
                        MSG_PORT_ID, // 1620U
                        uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &real64_subscription) != 1) // Store subscription state
  {
      Error_Handler(); // Failed to subscribe
 8001d22:	f000 fb8a 	bl	800243a <Error_Handler>
  }

  // --- Subscribe to incoming uavcan.node.GetInfo requests ---
  // We want to *receive* requests for this service
  if (canardRxSubscribe((CanardInstance* const)&canard,
 8001d26:	4b3b      	ldr	r3, [pc, #236]	@ (8001e14 <main+0x1b8>)
 8001d28:	9302      	str	r3, [sp, #8]
 8001d2a:	4a39      	ldr	r2, [pc, #228]	@ (8001e10 <main+0x1b4>)
 8001d2c:	f04f 0300 	mov.w	r3, #0
 8001d30:	e9cd 2300 	strd	r2, r3, [sp]
 8001d34:	2300      	movs	r3, #0
 8001d36:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	482f      	ldr	r0, [pc, #188]	@ (8001dfc <main+0x1a0>)
 8001d3e:	f004 ff99 	bl	8006c74 <canardRxSubscribe>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d001      	beq.n	8001d4c <main+0xf0>
                        uavcan_node_GetInfo_1_0_FIXED_PORT_ID_, // Fixed Port ID for GetInfo
                        uavcan_node_GetInfo_Request_1_0_EXTENT_BYTES_, // Max size of request payload (0)
                        CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                        &getinfo_request_subscription) != 1) // Store subscription state
   {
       Error_Handler(); // Failed to subscribe
 8001d48:	f000 fb77 	bl	800243a <Error_Handler>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // --- Publish Heartbeat ---
      uavcan_node_Heartbeat_1_0 test_heartbeat = {
 8001d4c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d50:	2200      	movs	r2, #0
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	605a      	str	r2, [r3, #4]
 8001d56:	4b30      	ldr	r3, [pc, #192]	@ (8001e18 <main+0x1bc>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
          .uptime = test_uptimeSec,
          .health = {uavcan_node_Health_1_0_NOMINAL},
          .mode = {uavcan_node_Mode_1_0_OPERATIONAL}
      };
      hbeat_ser_buf_size = uavcan_node_Heartbeat_1_0_EXTENT_BYTES_; // Reset size before serializing
 8001d5c:	4b2f      	ldr	r3, [pc, #188]	@ (8001e1c <main+0x1c0>)
 8001d5e:	220c      	movs	r2, #12
 8001d60:	601a      	str	r2, [r3, #0]
      if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) >= 0)
 8001d62:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d66:	4a2d      	ldr	r2, [pc, #180]	@ (8001e1c <main+0x1c0>)
 8001d68:	492d      	ldr	r1, [pc, #180]	@ (8001e20 <main+0x1c4>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7fe fde0 	bl	8000930 <uavcan_node_Heartbeat_1_0_serialize_>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	db26      	blt.n	8001dc4 <main+0x168>
      {
          const CanardTransferMetadata transfer_metadata = {
 8001d76:	2304      	movs	r3, #4
 8001d78:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8001d82:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8001d86:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001d88:	23ff      	movs	r3, #255	@ 0xff
 8001d8a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8001d8e:	4b25      	ldr	r3, [pc, #148]	@ (8001e24 <main+0x1c8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
              .transfer_kind = CanardTransferKindMessage,
              .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
              .remote_node_id = CANARD_NODE_ID_UNSET, // Broadcast
              .transfer_id = my_message_transfer_id,
          };
          canardTxPush(&queue, &canard, 0, &transfer_metadata, hbeat_ser_buf_size, hbeat_ser_buf);
 8001d96:	4b21      	ldr	r3, [pc, #132]	@ (8001e1c <main+0x1c0>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a21      	ldr	r2, [pc, #132]	@ (8001e20 <main+0x1c4>)
 8001d9c:	9202      	str	r2, [sp, #8]
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	f04f 0200 	mov.w	r2, #0
 8001daa:	f04f 0300 	mov.w	r3, #0
 8001dae:	4913      	ldr	r1, [pc, #76]	@ (8001dfc <main+0x1a0>)
 8001db0:	4815      	ldr	r0, [pc, #84]	@ (8001e08 <main+0x1ac>)
 8001db2:	f004 fe0f 	bl	80069d4 <canardTxPush>
          my_message_transfer_id++; // Increment only if push is attempted (or successful)
 8001db6:	4b1b      	ldr	r3, [pc, #108]	@ (8001e24 <main+0x1c8>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	3301      	adds	r3, #1
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b19      	ldr	r3, [pc, #100]	@ (8001e24 <main+0x1c8>)
 8001dc0:	701a      	strb	r2, [r3, #0]
 8001dc2:	e001      	b.n	8001dc8 <main+0x16c>
      } else {
          // Serialization error
          Error_Handler();
 8001dc4:	f000 fb39 	bl	800243a <Error_Handler>
           }
       }
		*/

      // --- Process TX Queue and Delay ---
      uint32_t timestamp = HAL_GetTick();
 8001dc8:	f000 fd88 	bl	80028dc <HAL_GetTick>
 8001dcc:	65f8      	str	r0, [r7, #92]	@ 0x5c
      while (HAL_GetTick() < timestamp + 1000u)
 8001dce:	e004      	b.n	8001dda <main+0x17e>
      {
          process_canard_TX_queue();
 8001dd0:	f000 f960 	bl	8002094 <process_canard_TX_queue>
          // Check for received frames periodically within the delay
          // The interrupt handler HAL_CAN_RxFifo0MsgPendingCallback will process incoming frames
          HAL_Delay(10); // Yield CPU
 8001dd4:	200a      	movs	r0, #10
 8001dd6:	f000 fd8d 	bl	80028f4 <HAL_Delay>
      while (HAL_GetTick() < timestamp + 1000u)
 8001dda:	f000 fd7f 	bl	80028dc <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001de2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001de6:	429a      	cmp	r2, r3
 8001de8:	d3f2      	bcc.n	8001dd0 <main+0x174>
      }

      test_uptimeSec++; // Increment uptime
 8001dea:	4b0b      	ldr	r3, [pc, #44]	@ (8001e18 <main+0x1bc>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	4a09      	ldr	r2, [pc, #36]	@ (8001e18 <main+0x1bc>)
 8001df2:	6013      	str	r3, [r2, #0]
  {
 8001df4:	e7aa      	b.n	8001d4c <main+0xf0>
 8001df6:	bf00      	nop
 8001df8:	2000008c 	.word	0x2000008c
 8001dfc:	200000b4 	.word	0x200000b4
 8001e00:	08002423 	.word	0x08002423
 8001e04:	08002409 	.word	0x08002409
 8001e08:	200000d0 	.word	0x200000d0
 8001e0c:	200002b8 	.word	0x200002b8
 8001e10:	001e8480 	.word	0x001e8480
 8001e14:	200004e0 	.word	0x200004e0
 8001e18:	200000e8 	.word	0x200000e8
 8001e1c:	20000000 	.word	0x20000000
 8001e20:	200000ec 	.word	0x200000ec
 8001e24:	200000e4 	.word	0x200000e4

08001e28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b096      	sub	sp, #88	@ 0x58
 8001e2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e2e:	f107 0314 	add.w	r3, r7, #20
 8001e32:	2244      	movs	r2, #68	@ 0x44
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f005 fa13 	bl	8007262 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e3c:	463b      	mov	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
 8001e48:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001e4a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001e4e:	f001 fe99 	bl	8003b84 <HAL_PWREx_ControlVoltageScaling>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d001      	beq.n	8001e5c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001e58:	f000 faef 	bl	800243a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001e5c:	2310      	movs	r3, #16
 8001e5e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001e60:	2301      	movs	r3, #1
 8001e62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001e68:	2360      	movs	r3, #96	@ 0x60
 8001e6a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e70:	f107 0314 	add.w	r3, r7, #20
 8001e74:	4618      	mov	r0, r3
 8001e76:	f001 fedb 	bl	8003c30 <HAL_RCC_OscConfig>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001e80:	f000 fadb 	bl	800243a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e84:	230f      	movs	r3, #15
 8001e86:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e90:	2300      	movs	r3, #0
 8001e92:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e98:	463b      	mov	r3, r7
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f002 fadb 	bl	8004458 <HAL_RCC_ClockConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ea8:	f000 fac7 	bl	800243a <Error_Handler>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3758      	adds	r7, #88	@ 0x58
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}

08001eb4 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001eb8:	4b17      	ldr	r3, [pc, #92]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001eba:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <MX_CAN1_Init+0x68>)
 8001ebc:	601a      	str	r2, [r3, #0]
  // Baud rate calculation: Clock/(SyncJumpWidth+TimeSeg1+TimeSeg2)/Prescaler
  // Assuming System Clock is 4MHz (MSI Range 6 default)
  // 4MHz / (1+13+2) / 1 = 4MHz / 16 / 1 = 250 kbit/s
  // Adjust Prescaler if clock is different or different baud rate needed
  hcan1.Init.Prescaler = 1;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001eca:	4b13      	ldr	r3, [pc, #76]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ed2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8001ed6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8001ed8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001eda:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001ede:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE; // Consider enabling for robustness
 8001ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001eec:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001eee:	2200      	movs	r2, #0
 8001ef0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE; // Cyphal handles retransmission at transfer layer if needed
 8001ef2:	4b09      	ldr	r3, [pc, #36]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE; // Allow overwrite on overrun
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8001efe:	4b06      	ldr	r3, [pc, #24]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001f04:	4804      	ldr	r0, [pc, #16]	@ (8001f18 <MX_CAN1_Init+0x64>)
 8001f06:	f000 fd19 	bl	800293c <HAL_CAN_Init>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d001      	beq.n	8001f14 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001f10:	f000 fa93 	bl	800243a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001f14:	bf00      	nop
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	2000008c 	.word	0x2000008c
 8001f1c:	40006400 	.word	0x40006400

08001f20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f26:	1d3b      	adds	r3, r7, #4
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
 8001f32:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f34:	4b11      	ldr	r3, [pc, #68]	@ (8001f7c <MX_GPIO_Init+0x5c>)
 8001f36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f38:	4a10      	ldr	r2, [pc, #64]	@ (8001f7c <MX_GPIO_Init+0x5c>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f40:	4b0e      	ldr	r3, [pc, #56]	@ (8001f7c <MX_GPIO_Init+0x5c>)
 8001f42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Assuming PA5 is LED
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2120      	movs	r1, #32
 8001f50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f54:	f001 fdd6 	bl	8003b04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001f58:	2320      	movs	r3, #32
 8001f5a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f60:	2300      	movs	r3, #0
 8001f62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	1d3b      	adds	r3, r7, #4
 8001f6a:	4619      	mov	r1, r3
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f70:	f001 fc5e 	bl	8003830 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f74:	bf00      	nop
 8001f76:	3718      	adds	r7, #24
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40021000 	.word	0x40021000

08001f80 <HAL_CAN_TxMailbox0CompleteCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f80:	b590      	push	{r4, r7, lr}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a0f      	ldr	r2, [pc, #60]	@ (8001fcc <HAL_CAN_TxMailbox0CompleteCallback+0x4c>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d118      	bne.n	8001fc4 <HAL_CAN_TxMailbox0CompleteCallback+0x44>
        if (is_can_tx_pending) { // 確保我們確實有一個待處理的發送
 8001f92:	4b0f      	ldr	r3, [pc, #60]	@ (8001fd0 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_CAN_TxMailbox0CompleteCallback+0x44>
            const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8001f9c:	480d      	ldr	r0, [pc, #52]	@ (8001fd4 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8001f9e:	f004 fda3 	bl	8006ae8 <canardTxPeek>
 8001fa2:	60f8      	str	r0, [r7, #12]
            if (ti != NULL) { // 確保 Libcanard 佇列的隊首確實有幀
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d009      	beq.n	8001fbe <HAL_CAN_TxMailbox0CompleteCallback+0x3e>
                canard.memory_free(&canard, canardTxPop(&queue, ti));
 8001faa:	4b0b      	ldr	r3, [pc, #44]	@ (8001fd8 <HAL_CAN_TxMailbox0CompleteCallback+0x58>)
 8001fac:	68dc      	ldr	r4, [r3, #12]
 8001fae:	68f9      	ldr	r1, [r7, #12]
 8001fb0:	4808      	ldr	r0, [pc, #32]	@ (8001fd4 <HAL_CAN_TxMailbox0CompleteCallback+0x54>)
 8001fb2:	f004 fdae 	bl	8006b12 <canardTxPop>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4807      	ldr	r0, [pc, #28]	@ (8001fd8 <HAL_CAN_TxMailbox0CompleteCallback+0x58>)
 8001fbc:	47a0      	blx	r4
            }
            is_can_tx_pending = false; // 清除標誌，允許 process_canard_TX_queue 發送下一個
 8001fbe:	4b04      	ldr	r3, [pc, #16]	@ (8001fd0 <HAL_CAN_TxMailbox0CompleteCallback+0x50>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
        }
        // 可選：如果您的應用響應非常快，可以在這裡嘗試調用 process_canard_TX_queue()
        // 但通常在主循環中調用更安全，以避免中斷風暴或棧溢出。
        // process_canard_TX_queue();
    }
}
 8001fc4:	bf00      	nop
 8001fc6:	3714      	adds	r7, #20
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	40006400 	.word	0x40006400
 8001fd0:	20000708 	.word	0x20000708
 8001fd4:	200000d0 	.word	0x200000d0
 8001fd8:	200000b4 	.word	0x200000b4

08001fdc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8002028 <HAL_CAN_TxMailbox1CompleteCallback+0x4c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d118      	bne.n	8002020 <HAL_CAN_TxMailbox1CompleteCallback+0x44>
        if (is_can_tx_pending) {
 8001fee:	4b0f      	ldr	r3, [pc, #60]	@ (800202c <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d013      	beq.n	8002020 <HAL_CAN_TxMailbox1CompleteCallback+0x44>
            const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8001ff8:	480d      	ldr	r0, [pc, #52]	@ (8002030 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 8001ffa:	f004 fd75 	bl	8006ae8 <canardTxPeek>
 8001ffe:	60f8      	str	r0, [r7, #12]
            if (ti != NULL) {
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_CAN_TxMailbox1CompleteCallback+0x3e>
                canard.memory_free(&canard, canardTxPop(&queue, ti));
 8002006:	4b0b      	ldr	r3, [pc, #44]	@ (8002034 <HAL_CAN_TxMailbox1CompleteCallback+0x58>)
 8002008:	68dc      	ldr	r4, [r3, #12]
 800200a:	68f9      	ldr	r1, [r7, #12]
 800200c:	4808      	ldr	r0, [pc, #32]	@ (8002030 <HAL_CAN_TxMailbox1CompleteCallback+0x54>)
 800200e:	f004 fd80 	bl	8006b12 <canardTxPop>
 8002012:	4603      	mov	r3, r0
 8002014:	4619      	mov	r1, r3
 8002016:	4807      	ldr	r0, [pc, #28]	@ (8002034 <HAL_CAN_TxMailbox1CompleteCallback+0x58>)
 8002018:	47a0      	blx	r4
            }
            is_can_tx_pending = false;
 800201a:	4b04      	ldr	r3, [pc, #16]	@ (800202c <HAL_CAN_TxMailbox1CompleteCallback+0x50>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	bd90      	pop	{r4, r7, pc}
 8002028:	40006400 	.word	0x40006400
 800202c:	20000708 	.word	0x20000708
 8002030:	200000d0 	.word	0x200000d0
 8002034:	200000b4 	.word	0x200000b4

08002038 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002038:	b590      	push	{r4, r7, lr}
 800203a:	b085      	sub	sp, #20
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a0f      	ldr	r2, [pc, #60]	@ (8002084 <HAL_CAN_TxMailbox2CompleteCallback+0x4c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d118      	bne.n	800207c <HAL_CAN_TxMailbox2CompleteCallback+0x44>
        if (is_can_tx_pending) {
 800204a:	4b0f      	ldr	r3, [pc, #60]	@ (8002088 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b00      	cmp	r3, #0
 8002052:	d013      	beq.n	800207c <HAL_CAN_TxMailbox2CompleteCallback+0x44>
            const CanardTxQueueItem* ti = canardTxPeek(&queue);
 8002054:	480d      	ldr	r0, [pc, #52]	@ (800208c <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 8002056:	f004 fd47 	bl	8006ae8 <canardTxPeek>
 800205a:	60f8      	str	r0, [r7, #12]
            if (ti != NULL) {
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_CAN_TxMailbox2CompleteCallback+0x3e>
                canard.memory_free(&canard, canardTxPop(&queue, ti));
 8002062:	4b0b      	ldr	r3, [pc, #44]	@ (8002090 <HAL_CAN_TxMailbox2CompleteCallback+0x58>)
 8002064:	68dc      	ldr	r4, [r3, #12]
 8002066:	68f9      	ldr	r1, [r7, #12]
 8002068:	4808      	ldr	r0, [pc, #32]	@ (800208c <HAL_CAN_TxMailbox2CompleteCallback+0x54>)
 800206a:	f004 fd52 	bl	8006b12 <canardTxPop>
 800206e:	4603      	mov	r3, r0
 8002070:	4619      	mov	r1, r3
 8002072:	4807      	ldr	r0, [pc, #28]	@ (8002090 <HAL_CAN_TxMailbox2CompleteCallback+0x58>)
 8002074:	47a0      	blx	r4
            }
            is_can_tx_pending = false;
 8002076:	4b04      	ldr	r3, [pc, #16]	@ (8002088 <HAL_CAN_TxMailbox2CompleteCallback+0x50>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
        }
    }
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	bd90      	pop	{r4, r7, pc}
 8002084:	40006400 	.word	0x40006400
 8002088:	20000708 	.word	0x20000708
 800208c:	200000d0 	.word	0x200000d0
 8002090:	200000b4 	.word	0x200000b4

08002094 <process_canard_TX_queue>:
// Function to process the TX queue
void process_canard_TX_queue(void)
{
 8002094:	b590      	push	{r4, r7, lr}
 8002096:	b089      	sub	sp, #36	@ 0x24
 8002098:	af00      	add	r7, sp, #0
    // 關鍵：只有在沒有幀正在等待硬體發送 (is_can_tx_pending == false)
    // 並且硬體至少有一個空閒信箱時，才嘗試從 Libcanard 佇列取幀並提交。
    if (!is_can_tx_pending && (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0))
 800209a:	4b20      	ldr	r3, [pc, #128]	@ (800211c <process_canard_TX_queue+0x88>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	f083 0301 	eor.w	r3, r3, #1
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d034      	beq.n	8002114 <process_canard_TX_queue+0x80>
 80020aa:	481d      	ldr	r0, [pc, #116]	@ (8002120 <process_canard_TX_queue+0x8c>)
 80020ac:	f000 ff1f 	bl	8002eee <HAL_CAN_GetTxMailboxesFreeLevel>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d02e      	beq.n	8002114 <process_canard_TX_queue+0x80>
    {
        const CanardTxQueueItem* ti = canardTxPeek(&queue);
 80020b6:	481b      	ldr	r0, [pc, #108]	@ (8002124 <process_canard_TX_queue+0x90>)
 80020b8:	f004 fd16 	bl	8006ae8 <canardTxPeek>
 80020bc:	61f8      	str	r0, [r7, #28]
        if (ti != NULL)
 80020be:	69fb      	ldr	r3, [r7, #28]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d027      	beq.n	8002114 <process_canard_TX_queue+0x80>
        {
            // 可以添加截止時間檢查 (需要 micros() 正常工作)
            // if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))

            CAN_TxHeaderTypeDef TxHeader;
            TxHeader.IDE = CAN_ID_EXT;
 80020c4:	2304      	movs	r3, #4
 80020c6:	60fb      	str	r3, [r7, #12]
            TxHeader.RTR = CAN_RTR_DATA;
 80020c8:	2300      	movs	r3, #0
 80020ca:	613b      	str	r3, [r7, #16]
            TxHeader.DLC = ti->frame.payload_size;
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d0:	617b      	str	r3, [r7, #20]
            TxHeader.ExtId = ti->frame.extended_can_id;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	60bb      	str	r3, [r7, #8]
            TxHeader.TransmitGlobalTime = DISABLE;
 80020d8:	2300      	movs	r3, #0
 80020da:	763b      	strb	r3, [r7, #24]

            if (ti->frame.payload_size <= 8) {
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e0:	2b08      	cmp	r3, #8
 80020e2:	d80d      	bhi.n	8002100 <process_canard_TX_queue+0x6c>
                // 嘗試將幀添加到硬體 TX 信箱
                if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, (uint8_t*)ti->frame.payload, NULL) == HAL_OK)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80020e8:	1d39      	adds	r1, r7, #4
 80020ea:	2300      	movs	r3, #0
 80020ec:	480c      	ldr	r0, [pc, #48]	@ (8002120 <process_canard_TX_queue+0x8c>)
 80020ee:	f000 fe2e 	bl	8002d4e <HAL_CAN_AddTxMessage>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d10d      	bne.n	8002114 <process_canard_TX_queue+0x80>
                {
                    // 成功提交給硬體
                    is_can_tx_pending = true; // 標記一個幀已提交，等待 TX 完成中斷
 80020f8:	4b08      	ldr	r3, [pc, #32]	@ (800211c <process_canard_TX_queue+0x88>)
 80020fa:	2201      	movs	r2, #1
 80020fc:	701a      	strb	r2, [r3, #0]
            // {
            //    canard.memory_free(&canard, canardTxPop(&queue, ti));
            // }
        }
    }
}
 80020fe:	e009      	b.n	8002114 <process_canard_TX_queue+0x80>
                canard.memory_free(&canard, canardTxPop(&queue, ti)); // 丟棄無效幀
 8002100:	4b09      	ldr	r3, [pc, #36]	@ (8002128 <process_canard_TX_queue+0x94>)
 8002102:	68dc      	ldr	r4, [r3, #12]
 8002104:	69f9      	ldr	r1, [r7, #28]
 8002106:	4807      	ldr	r0, [pc, #28]	@ (8002124 <process_canard_TX_queue+0x90>)
 8002108:	f004 fd03 	bl	8006b12 <canardTxPop>
 800210c:	4603      	mov	r3, r0
 800210e:	4619      	mov	r1, r3
 8002110:	4805      	ldr	r0, [pc, #20]	@ (8002128 <process_canard_TX_queue+0x94>)
 8002112:	47a0      	blx	r4
}
 8002114:	bf00      	nop
 8002116:	3724      	adds	r7, #36	@ 0x24
 8002118:	46bd      	mov	sp, r7
 800211a:	bd90      	pop	{r4, r7, pc}
 800211c:	20000708 	.word	0x20000708
 8002120:	2000008c 	.word	0x2000008c
 8002124:	200000d0 	.word	0x200000d0
 8002128:	200000b4 	.word	0x200000b4

0800212c <handle_received_transfer>:



// Central handler for successfully received transfers from canardRxAccept
void handle_received_transfer(CanardRxTransfer* transfer)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b0e2      	sub	sp, #392	@ 0x188
 8002130:	af04      	add	r7, sp, #16
 8002132:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002136:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800213a:	6018      	str	r0, [r3, #0]
    // --- Handle GetInfo Request ---
    if (transfer->metadata.transfer_kind == CanardTransferKindRequest &&
 800213c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002140:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	785b      	ldrb	r3, [r3, #1]
 8002148:	2b02      	cmp	r3, #2
 800214a:	f040 80ce 	bne.w	80022ea <handle_received_transfer+0x1be>
        transfer->metadata.port_id == uavcan_node_GetInfo_1_0_FIXED_PORT_ID_)
 800214e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002152:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	885b      	ldrh	r3, [r3, #2]
    if (transfer->metadata.transfer_kind == CanardTransferKindRequest &&
 800215a:	f5b3 7fd7 	cmp.w	r3, #430	@ 0x1ae
 800215e:	f040 80c4 	bne.w	80022ea <handle_received_transfer+0x1be>
    {
        // Received a GetInfo request targeted at us (or broadcast)

        // 1. (Optional) Deserialize the request payload (it should be empty)
        uavcan_node_GetInfo_Request_1_0 req;
        size_t req_payload_size = transfer->payload_size;
 8002162:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002166:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
        if (uavcan_node_GetInfo_Request_1_0_deserialize_(&req, transfer->payload, &req_payload_size) < 0) {
 8002172:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002176:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6959      	ldr	r1, [r3, #20]
 800217e:	f507 72b4 	add.w	r2, r7, #360	@ 0x168
 8002182:	f507 73b6 	add.w	r3, r7, #364	@ 0x16c
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe ff4c 	bl	8001024 <uavcan_node_GetInfo_Request_1_0_deserialize_>
            // Deserialization failed (though payload is empty, this check might catch framing issues)
            // Log error, but maybe still proceed to respond? Or ignore.
        }

        // 2. Prepare the response payload
        uavcan_node_GetInfo_Response_1_0 response = {0}; // Initialize all fields to zero/empty
 800218c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002190:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002194:	4618      	mov	r0, r3
 8002196:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800219a:	461a      	mov	r2, r3
 800219c:	2100      	movs	r1, #0
 800219e:	f005 f860 	bl	8007262 <memset>

        // -- Populate mandatory fields --
        response.protocol_version.major = CANARD_CYPHAL_SPECIFICATION_VERSION_MAJOR;
 80021a2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021a6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021aa:	2201      	movs	r2, #1
 80021ac:	701a      	strb	r2, [r3, #0]
        response.protocol_version.minor = CANARD_CYPHAL_SPECIFICATION_VERSION_MINOR;
 80021ae:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021b2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021b6:	2200      	movs	r2, #0
 80021b8:	705a      	strb	r2, [r3, #1]

        response.hardware_version.major = MY_HW_VERSION_MAJOR;
 80021ba:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021be:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021c2:	2200      	movs	r2, #0
 80021c4:	709a      	strb	r2, [r3, #2]
        response.hardware_version.minor = MY_HW_VERSION_MINOR;
 80021c6:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021ca:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021ce:	2201      	movs	r2, #1
 80021d0:	70da      	strb	r2, [r3, #3]

        response.software_version.major = MY_SW_VERSION_MAJOR;
 80021d2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021d6:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021da:	2201      	movs	r2, #1
 80021dc:	711a      	strb	r2, [r3, #4]
        response.software_version.minor = MY_SW_VERSION_MINOR;
 80021de:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021e2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80021e6:	2200      	movs	r2, #0
 80021e8:	715a      	strb	r2, [r3, #5]

        // -- Populate optional fields --
        response.software_vcs_revision_id = 0; // Or use actual Git commit hash ID if available
 80021ea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80021ee:	f5a3 71b8 	sub.w	r1, r3, #368	@ 0x170
 80021f2:	f04f 0200 	mov.w	r2, #0
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	e9c1 2302 	strd	r2, r3, [r1, #8]

        get_unique_id(response.unique_id); // Fill the 16-byte unique ID array
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	3310      	adds	r3, #16
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fd09 	bl	8001c1c <get_unique_id>

        // Set the node name (ensure null termination and check length)
        const char* src_node_name = MY_NODE_NAME;
 800220a:	4b57      	ldr	r3, [pc, #348]	@ (8002368 <handle_received_transfer+0x23c>)
 800220c:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        size_t name_len = strlen(src_node_name);
 8002210:	f8d7 0170 	ldr.w	r0, [r7, #368]	@ 0x170
 8002214:	f7fd ffdc 	bl	80001d0 <strlen>
 8002218:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
        //response.name.elements[sizeof(response.name.elements) - 1] = '\0'; // Ensure null termination
        if (name_len > sizeof(response.name.elements)) {
 800221c:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002220:	2b32      	cmp	r3, #50	@ 0x32
 8002222:	d902      	bls.n	800222a <handle_received_transfer+0xfe>
            name_len = sizeof(response.name.elements); // 如果源名稱太長，則截斷
 8002224:	2332      	movs	r3, #50	@ 0x32
 8002226:	f8c7 3174 	str.w	r3, [r7, #372]	@ 0x174
        }
        memcpy(response.name.elements, src_node_name, name_len);
 800222a:	f107 0308 	add.w	r3, r7, #8
 800222e:	3320      	adds	r3, #32
 8002230:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002234:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002238:	4618      	mov	r0, r3
 800223a:	f005 f89e 	bl	800737a <memcpy>
        response.name.count = (uint8_t)name_len;
 800223e:	f8d7 3174 	ldr.w	r3, [r7, #372]	@ 0x174
 8002242:	b2db      	uxtb	r3, r3
 8002244:	461a      	mov	r2, r3
 8002246:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 800224a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800224e:	655a      	str	r2, [r3, #84]	@ 0x54

        // software_image_crc and certificate_of_authenticity are optional
        response.software_image_crc.count = 0; // No CRC available
 8002250:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002254:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002258:	2200      	movs	r2, #0
 800225a:	661a      	str	r2, [r3, #96]	@ 0x60
        response.certificate_of_authenticity.count = 0; // No CoA available
 800225c:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002260:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8002264:	2200      	movs	r2, #0
 8002266:	f8c3 2148 	str.w	r2, [r3, #328]	@ 0x148


        // 3. Serialize the response
        getinfo_response_ser_buf_size = sizeof(getinfo_response_ser_buf); // Reset size before use
 800226a:	4b40      	ldr	r3, [pc, #256]	@ (800236c <handle_received_transfer+0x240>)
 800226c:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8002270:	601a      	str	r2, [r3, #0]
        int8_t ser_res = uavcan_node_GetInfo_Response_1_0_serialize_(&response, getinfo_response_ser_buf, &getinfo_response_ser_buf_size);
 8002272:	f107 0308 	add.w	r3, r7, #8
 8002276:	4a3d      	ldr	r2, [pc, #244]	@ (800236c <handle_received_transfer+0x240>)
 8002278:	493d      	ldr	r1, [pc, #244]	@ (8002370 <handle_received_transfer+0x244>)
 800227a:	4618      	mov	r0, r3
 800227c:	f7fe fefa 	bl	8001074 <uavcan_node_GetInfo_Response_1_0_serialize_>
 8002280:	4603      	mov	r3, r0
 8002282:	f887 316f 	strb.w	r3, [r7, #367]	@ 0x16f

        if (ser_res >= 0)
 8002286:	f997 316f 	ldrsb.w	r3, [r7, #367]	@ 0x16f
 800228a:	2b00      	cmp	r3, #0
 800228c:	db2a      	blt.n	80022e4 <handle_received_transfer+0x1b8>
        {
            // 4. Prepare response metadata
            CanardTransferMetadata response_metadata = {
 800228e:	2304      	movs	r3, #4
 8002290:	f887 3160 	strb.w	r3, [r7, #352]	@ 0x160
 8002294:	2301      	movs	r3, #1
 8002296:	f887 3161 	strb.w	r3, [r7, #353]	@ 0x161
 800229a:	f44f 73d7 	mov.w	r3, #430	@ 0x1ae
 800229e:	f8a7 3162 	strh.w	r3, [r7, #354]	@ 0x162
                .priority = CanardPriorityNominal, // Respond with nominal priority
                .transfer_kind = CanardTransferKindResponse, // *** This is a RESPONSE ***
                .port_id = uavcan_node_GetInfo_1_0_FIXED_PORT_ID_, // Use the same service Port ID
                .remote_node_id = transfer->metadata.remote_node_id, // *** Respond TO the requester ***
 80022a2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022a6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	791b      	ldrb	r3, [r3, #4]
            CanardTransferMetadata response_metadata = {
 80022ae:	f887 3164 	strb.w	r3, [r7, #356]	@ 0x164
                .transfer_id = transfer->metadata.transfer_id, // *** Use the SAME transfer ID ***
 80022b2:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022b6:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	795b      	ldrb	r3, [r3, #5]
            CanardTransferMetadata response_metadata = {
 80022be:	f887 3165 	strb.w	r3, [r7, #357]	@ 0x165
            };

            // 5. Push response to the TX queue
            canardTxPush(&queue, &canard, 0, &response_metadata, getinfo_response_ser_buf_size, getinfo_response_ser_buf);
 80022c2:	4b2a      	ldr	r3, [pc, #168]	@ (800236c <handle_received_transfer+0x240>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a2a      	ldr	r2, [pc, #168]	@ (8002370 <handle_received_transfer+0x244>)
 80022c8:	9202      	str	r2, [sp, #8]
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f04f 0200 	mov.w	r2, #0
 80022d6:	f04f 0300 	mov.w	r3, #0
 80022da:	4926      	ldr	r1, [pc, #152]	@ (8002374 <handle_received_transfer+0x248>)
 80022dc:	4826      	ldr	r0, [pc, #152]	@ (8002378 <handle_received_transfer+0x24c>)
 80022de:	f004 fb79 	bl	80069d4 <canardTxPush>
    {
 80022e2:	e031      	b.n	8002348 <handle_received_transfer+0x21c>
        }
        else
        {
            // Response serialization failed
            // Log error
        	Error_Handler();
 80022e4:	f000 f8a9 	bl	800243a <Error_Handler>
    {
 80022e8:	e02e      	b.n	8002348 <handle_received_transfer+0x21c>
        }
    }
    // --- Handle Real64 Array Message ---
    else if (transfer->metadata.transfer_kind == CanardTransferKindMessage &&
 80022ea:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022ee:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	785b      	ldrb	r3, [r3, #1]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d126      	bne.n	8002348 <handle_received_transfer+0x21c>
             transfer->metadata.port_id == MSG_PORT_ID) // 1620U
 80022fa:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 80022fe:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	885b      	ldrh	r3, [r3, #2]
 8002306:	f240 6254 	movw	r2, #1620	@ 0x654
    else if (transfer->metadata.transfer_kind == CanardTransferKindMessage &&
 800230a:	4293      	cmp	r3, r2
 800230c:	d11c      	bne.n	8002348 <handle_received_transfer+0x21c>
    {
        uavcan_primitive_array_Real64_1_0 array;
        size_t array_ser_buf_size = transfer->payload_size; // Use actual received size for deserialization
 800230e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002312:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	691b      	ldr	r3, [r3, #16]
 800231a:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c

        if (uavcan_primitive_array_Real64_1_0_deserialize_(&array, transfer->payload, &array_ser_buf_size) >= 0)
 800231e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002322:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6959      	ldr	r1, [r3, #20]
 800232a:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 800232e:	f107 0308 	add.w	r3, r7, #8
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fbca 	bl	8001acc <uavcan_primitive_array_Real64_1_0_deserialize_>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	db04      	blt.n	8002348 <handle_received_transfer+0x21c>
        {
            // Successfully deserialized - process the 'array' data here
            // Example: Toggle LED
            HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800233e:	2120      	movs	r1, #32
 8002340:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002344:	f001 fbf6 	bl	8003b34 <HAL_GPIO_TogglePin>
        // Log warning?
    }

    // --- IMPORTANT: Free the received payload buffer ---
    // Must be done for ALL successfully accepted transfers handled here
    canard.memory_free(&canard, transfer->payload);
 8002348:	4b0a      	ldr	r3, [pc, #40]	@ (8002374 <handle_received_transfer+0x248>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8002350:	f5a2 72ba 	sub.w	r2, r2, #372	@ 0x174
 8002354:	6812      	ldr	r2, [r2, #0]
 8002356:	6952      	ldr	r2, [r2, #20]
 8002358:	4611      	mov	r1, r2
 800235a:	4806      	ldr	r0, [pc, #24]	@ (8002374 <handle_received_transfer+0x248>)
 800235c:	4798      	blx	r3
}
 800235e:	bf00      	nop
 8002360:	f507 77bc 	add.w	r7, r7, #376	@ 0x178
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	080085cc 	.word	0x080085cc
 800236c:	20000004 	.word	0x20000004
 8002370:	200000f8 	.word	0x200000f8
 8002374:	200000b4 	.word	0x200000b4
 8002378:	200000d0 	.word	0x200000d0

0800237c <HAL_CAN_RxFifo0MsgPendingCallback>:


//#pragma optimize=s none // Keep optimization low for ISR debugging if needed
#pragma optimize=s none // 可以移除或註解掉這一行
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b09c      	sub	sp, #112	@ 0x70
 8002380:	af04      	add	r7, sp, #16
 8002382:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1) // Check if the interrupt is for the correct CAN instance
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a1d      	ldr	r2, [pc, #116]	@ (8002400 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d133      	bne.n	80023f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
    {
        CAN_RxHeaderTypeDef RxHeader;
        uint8_t RxData[8]; // Max payload for Classic CAN

        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 800238e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8002392:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 8002396:	2100      	movs	r1, #0
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f000 fddd 	bl	8002f58 <HAL_CAN_GetRxMessage>
 800239e:	4603      	mov	r3, r0
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d128      	bne.n	80023f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
        {
            // Check if it's an Extended ID frame (Cyphal uses Extended IDs)
            if (RxHeader.IDE == CAN_ID_EXT)
 80023a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80023a6:	2b04      	cmp	r3, #4
 80023a8:	d125      	bne.n	80023f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
            {
                CanardFrame rxf;
                // rxf.timestamp_usec = micros(); // !! REMOVE THIS LINE !!

                // Populate the CanardFrame structure without the timestamp
                rxf.extended_can_id = RxHeader.ExtId;
 80023aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80023ac:	627b      	str	r3, [r7, #36]	@ 0x24
                rxf.payload_size = (size_t)RxHeader.DLC;
 80023ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80023b0:	62bb      	str	r3, [r7, #40]	@ 0x28
                rxf.payload = (void*)RxData;
 80023b2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

                CanardRxTransfer transfer;
                CanardMicrosecond timestamp = micros(); // !! Get timestamp here !!
 80023b8:	f7ff fc24 	bl	8001c04 <micros>
 80023bc:	e9c7 0116 	strd	r0, r1, [r7, #88]	@ 0x58

                // --- CORRECTED CALL to canardRxAccept ---
                int8_t accept_res = canardRxAccept(&canard,        // 1. Instance
 80023c0:	2300      	movs	r3, #0
 80023c2:	9303      	str	r3, [sp, #12]
 80023c4:	f107 0308 	add.w	r3, r7, #8
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	2300      	movs	r3, #0
 80023cc:	9301      	str	r3, [sp, #4]
 80023ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d2:	9300      	str	r3, [sp, #0]
 80023d4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80023d8:	480a      	ldr	r0, [pc, #40]	@ (8002404 <HAL_CAN_RxFifo0MsgPendingCallback+0x88>)
 80023da:	f004 fbbb 	bl	8006b54 <canardRxAccept>
 80023de:	4603      	mov	r3, r0
 80023e0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                                                   &rxf,           // 3. Frame pointer (const CanardFrame*)
                                                   0,              // 4. Redundant interface index (uint8_t)
                                                   &transfer,      // 5. Output transfer pointer (CanardRxTransfer*)
                                                   NULL);          // 6. Output subscription pointer (CanardRxSubscription**) - NULL if not needed

                if (accept_res == 1) // A complete transfer has been received
 80023e4:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d104      	bne.n	80023f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
                {
                    // Call the central handler function
                    handle_received_transfer(&transfer);
 80023ec:	f107 0308 	add.w	r3, r7, #8
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff fe9b 	bl	800212c <handle_received_transfer>
            }
            // else: Standard ID frame - Ignore for Cyphal
        }
        // else: HAL_CAN_GetRxMessage failed - Handle error (e.g., log)
    }
}
 80023f6:	bf00      	nop
 80023f8:	3760      	adds	r7, #96	@ 0x60
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40006400 	.word	0x40006400
 8002404:	200000b4 	.word	0x200000b4

08002408 <memAllocate>:



// --- Memory Allocator Wrappers ---
static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	6039      	str	r1, [r7, #0]
    (void) ins;
    return malloc(amount);
 8002412:	6838      	ldr	r0, [r7, #0]
 8002414:	f004 fd36 	bl	8006e84 <malloc>
 8002418:	4603      	mov	r3, r0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	6078      	str	r0, [r7, #4]
 800242a:	6039      	str	r1, [r7, #0]
    (void) ins;
    free(pointer);
 800242c:	6838      	ldr	r0, [r7, #0]
 800242e:	f004 fd31 	bl	8006e94 <free>
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800243a:	b480      	push	{r7}
 800243c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800243e:	b672      	cpsid	i
}
 8002440:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  // Maybe flash LED rapidly or send error over another interface
  while (1)
 8002442:	bf00      	nop
 8002444:	e7fd      	b.n	8002442 <Error_Handler+0x8>
	...

08002448 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_MspInit+0x44>)
 8002450:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002452:	4a0e      	ldr	r2, [pc, #56]	@ (800248c <HAL_MspInit+0x44>)
 8002454:	f043 0301 	orr.w	r3, r3, #1
 8002458:	6613      	str	r3, [r2, #96]	@ 0x60
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_MspInit+0x44>)
 800245c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b09      	ldr	r3, [pc, #36]	@ (800248c <HAL_MspInit+0x44>)
 8002468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800246a:	4a08      	ldr	r2, [pc, #32]	@ (800248c <HAL_MspInit+0x44>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002470:	6593      	str	r3, [r2, #88]	@ 0x58
 8002472:	4b06      	ldr	r3, [pc, #24]	@ (800248c <HAL_MspInit+0x44>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002476:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800247a:	603b      	str	r3, [r7, #0]
 800247c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800247e:	bf00      	nop
 8002480:	370c      	adds	r7, #12
 8002482:	46bd      	mov	sp, r7
 8002484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002488:	4770      	bx	lr
 800248a:	bf00      	nop
 800248c:	40021000 	.word	0x40021000

08002490 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b08a      	sub	sp, #40	@ 0x28
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002498:	f107 0314 	add.w	r3, r7, #20
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	605a      	str	r2, [r3, #4]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	60da      	str	r2, [r3, #12]
 80024a6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a28      	ldr	r2, [pc, #160]	@ (8002550 <HAL_CAN_MspInit+0xc0>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d149      	bne.n	8002546 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80024b2:	4b28      	ldr	r3, [pc, #160]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b6:	4a27      	ldr	r2, [pc, #156]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024b8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80024bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80024be:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024c6:	613b      	str	r3, [r7, #16]
 80024c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ca:	4b22      	ldr	r3, [pc, #136]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ce:	4a21      	ldr	r2, [pc, #132]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024d0:	f043 0301 	orr.w	r3, r3, #1
 80024d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024d6:	4b1f      	ldr	r3, [pc, #124]	@ (8002554 <HAL_CAN_MspInit+0xc4>)
 80024d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	60fb      	str	r3, [r7, #12]
 80024e0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80024e2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80024e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80024f4:	2309      	movs	r3, #9
 80024f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	4619      	mov	r1, r3
 80024fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002502:	f001 f995 	bl	8003830 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8002506:	2200      	movs	r2, #0
 8002508:	2100      	movs	r1, #0
 800250a:	2013      	movs	r0, #19
 800250c:	f001 f959 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8002510:	2013      	movs	r0, #19
 8002512:	f001 f972 	bl	80037fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8002516:	2200      	movs	r2, #0
 8002518:	2100      	movs	r1, #0
 800251a:	2014      	movs	r0, #20
 800251c:	f001 f951 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002520:	2014      	movs	r0, #20
 8002522:	f001 f96a 	bl	80037fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	2015      	movs	r0, #21
 800252c:	f001 f949 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8002530:	2015      	movs	r0, #21
 8002532:	f001 f962 	bl	80037fa <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8002536:	2200      	movs	r2, #0
 8002538:	2100      	movs	r1, #0
 800253a:	2016      	movs	r0, #22
 800253c:	f001 f941 	bl	80037c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8002540:	2016      	movs	r0, #22
 8002542:	f001 f95a 	bl	80037fa <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8002546:	bf00      	nop
 8002548:	3728      	adds	r7, #40	@ 0x28
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
 800254e:	bf00      	nop
 8002550:	40006400 	.word	0x40006400
 8002554:	40021000 	.word	0x40021000

08002558 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <NMI_Handler+0x4>

08002560 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002564:	bf00      	nop
 8002566:	e7fd      	b.n	8002564 <HardFault_Handler+0x4>

08002568 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800256c:	bf00      	nop
 800256e:	e7fd      	b.n	800256c <MemManage_Handler+0x4>

08002570 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002574:	bf00      	nop
 8002576:	e7fd      	b.n	8002574 <BusFault_Handler+0x4>

08002578 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800257c:	bf00      	nop
 800257e:	e7fd      	b.n	800257c <UsageFault_Handler+0x4>

08002580 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002584:	bf00      	nop
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800258e:	b480      	push	{r7}
 8002590:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002592:	bf00      	nop
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr

080025aa <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80025aa:	b580      	push	{r7, lr}
 80025ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80025ae:	f000 f981 	bl	80028b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
	...

080025b8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025bc:	4802      	ldr	r0, [pc, #8]	@ (80025c8 <CAN1_TX_IRQHandler+0x10>)
 80025be:	f000 fe13 	bl	80031e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	2000008c 	.word	0x2000008c

080025cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025d0:	4802      	ldr	r0, [pc, #8]	@ (80025dc <CAN1_RX0_IRQHandler+0x10>)
 80025d2:	f000 fe09 	bl	80031e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	2000008c 	.word	0x2000008c

080025e0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025e4:	4802      	ldr	r0, [pc, #8]	@ (80025f0 <CAN1_RX1_IRQHandler+0x10>)
 80025e6:	f000 fdff 	bl	80031e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80025ea:	bf00      	nop
 80025ec:	bd80      	pop	{r7, pc}
 80025ee:	bf00      	nop
 80025f0:	2000008c 	.word	0x2000008c

080025f4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80025f8:	4802      	ldr	r0, [pc, #8]	@ (8002604 <CAN1_SCE_IRQHandler+0x10>)
 80025fa:	f000 fdf5 	bl	80031e8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80025fe:	bf00      	nop
 8002600:	bd80      	pop	{r7, pc}
 8002602:	bf00      	nop
 8002604:	2000008c 	.word	0x2000008c

08002608 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  return 1;
 800260c:	2301      	movs	r3, #1
}
 800260e:	4618      	mov	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002616:	4770      	bx	lr

08002618 <_kill>:

int _kill(int pid, int sig)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002622:	f004 fe7d 	bl	8007320 <__errno>
 8002626:	4603      	mov	r3, r0
 8002628:	2216      	movs	r2, #22
 800262a:	601a      	str	r2, [r3, #0]
  return -1;
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002630:	4618      	mov	r0, r3
 8002632:	3708      	adds	r7, #8
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <_exit>:

void _exit (int status)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002640:	f04f 31ff 	mov.w	r1, #4294967295
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f7ff ffe7 	bl	8002618 <_kill>
  while (1) {}    /* Make sure we hang here */
 800264a:	bf00      	nop
 800264c:	e7fd      	b.n	800264a <_exit+0x12>

0800264e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800264e:	b580      	push	{r7, lr}
 8002650:	b086      	sub	sp, #24
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800265a:	2300      	movs	r3, #0
 800265c:	617b      	str	r3, [r7, #20]
 800265e:	e00a      	b.n	8002676 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002660:	f3af 8000 	nop.w
 8002664:	4601      	mov	r1, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	60ba      	str	r2, [r7, #8]
 800266c:	b2ca      	uxtb	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	3301      	adds	r3, #1
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	429a      	cmp	r2, r3
 800267c:	dbf0      	blt.n	8002660 <_read+0x12>
  }

  return len;
 800267e:	687b      	ldr	r3, [r7, #4]
}
 8002680:	4618      	mov	r0, r3
 8002682:	3718      	adds	r7, #24
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b086      	sub	sp, #24
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]
 8002698:	e009      	b.n	80026ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	1c5a      	adds	r2, r3, #1
 800269e:	60ba      	str	r2, [r7, #8]
 80026a0:	781b      	ldrb	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	3301      	adds	r3, #1
 80026ac:	617b      	str	r3, [r7, #20]
 80026ae:	697a      	ldr	r2, [r7, #20]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	429a      	cmp	r2, r3
 80026b4:	dbf1      	blt.n	800269a <_write+0x12>
  }
  return len;
 80026b6:	687b      	ldr	r3, [r7, #4]
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3718      	adds	r7, #24
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <_close>:

int _close(int file)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80026c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026e8:	605a      	str	r2, [r3, #4]
  return 0;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <_isatty>:

int _isatty(int file)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002700:	2301      	movs	r3, #1
}
 8002702:	4618      	mov	r0, r3
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800270e:	b480      	push	{r7}
 8002710:	b085      	sub	sp, #20
 8002712:	af00      	add	r7, sp, #0
 8002714:	60f8      	str	r0, [r7, #12]
 8002716:	60b9      	str	r1, [r7, #8]
 8002718:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002730:	4a14      	ldr	r2, [pc, #80]	@ (8002784 <_sbrk+0x5c>)
 8002732:	4b15      	ldr	r3, [pc, #84]	@ (8002788 <_sbrk+0x60>)
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800273c:	4b13      	ldr	r3, [pc, #76]	@ (800278c <_sbrk+0x64>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d102      	bne.n	800274a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002744:	4b11      	ldr	r3, [pc, #68]	@ (800278c <_sbrk+0x64>)
 8002746:	4a12      	ldr	r2, [pc, #72]	@ (8002790 <_sbrk+0x68>)
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800274a:	4b10      	ldr	r3, [pc, #64]	@ (800278c <_sbrk+0x64>)
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4413      	add	r3, r2
 8002752:	693a      	ldr	r2, [r7, #16]
 8002754:	429a      	cmp	r2, r3
 8002756:	d207      	bcs.n	8002768 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002758:	f004 fde2 	bl	8007320 <__errno>
 800275c:	4603      	mov	r3, r0
 800275e:	220c      	movs	r2, #12
 8002760:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002762:	f04f 33ff 	mov.w	r3, #4294967295
 8002766:	e009      	b.n	800277c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002768:	4b08      	ldr	r3, [pc, #32]	@ (800278c <_sbrk+0x64>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800276e:	4b07      	ldr	r3, [pc, #28]	@ (800278c <_sbrk+0x64>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	4a05      	ldr	r2, [pc, #20]	@ (800278c <_sbrk+0x64>)
 8002778:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800277a:	68fb      	ldr	r3, [r7, #12]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3718      	adds	r7, #24
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}
 8002784:	20010000 	.word	0x20010000
 8002788:	00000400 	.word	0x00000400
 800278c:	2000070c 	.word	0x2000070c
 8002790:	20000860 	.word	0x20000860

08002794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002794:	b480      	push	{r7}
 8002796:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002798:	4b06      	ldr	r3, [pc, #24]	@ (80027b4 <SystemInit+0x20>)
 800279a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800279e:	4a05      	ldr	r2, [pc, #20]	@ (80027b4 <SystemInit+0x20>)
 80027a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80027a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80027a8:	bf00      	nop
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	e000ed00 	.word	0xe000ed00

080027b8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80027b8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027f0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80027bc:	f7ff ffea 	bl	8002794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	@ (80027f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	@ (80027f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <LoopForever+0xe>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	@ (8002800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	@ (8002804 <LoopForever+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027e6:	f004 fda1 	bl	800732c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80027ea:	f7ff fa37 	bl	8001c5c <main>

080027ee <LoopForever>:

LoopForever:
    b LoopForever
 80027ee:	e7fe      	b.n	80027ee <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80027f0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80027fc:	080096d4 	.word	0x080096d4
  ldr r2, =_sbss
 8002800:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8002804:	20000860 	.word	0x20000860

08002808 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_IRQHandler>

0800280a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280a:	b580      	push	{r7, lr}
 800280c:	b082      	sub	sp, #8
 800280e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002810:	2300      	movs	r3, #0
 8002812:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002814:	2003      	movs	r0, #3
 8002816:	f000 ffc9 	bl	80037ac <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800281a:	200f      	movs	r0, #15
 800281c:	f000 f80e 	bl	800283c <HAL_InitTick>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	71fb      	strb	r3, [r7, #7]
 800282a:	e001      	b.n	8002830 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800282c:	f7ff fe0c 	bl	8002448 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002830:	79fb      	ldrb	r3, [r7, #7]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3708      	adds	r7, #8
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002844:	2300      	movs	r3, #0
 8002846:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002848:	4b17      	ldr	r3, [pc, #92]	@ (80028a8 <HAL_InitTick+0x6c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d023      	beq.n	8002898 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002850:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <HAL_InitTick+0x70>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b14      	ldr	r3, [pc, #80]	@ (80028a8 <HAL_InitTick+0x6c>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4619      	mov	r1, r3
 800285a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800285e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002862:	fbb2 f3f3 	udiv	r3, r2, r3
 8002866:	4618      	mov	r0, r3
 8002868:	f000 ffd5 	bl	8003816 <HAL_SYSTICK_Config>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10f      	bne.n	8002892 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b0f      	cmp	r3, #15
 8002876:	d809      	bhi.n	800288c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002878:	2200      	movs	r2, #0
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	f04f 30ff 	mov.w	r0, #4294967295
 8002880:	f000 ff9f 	bl	80037c2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002884:	4a0a      	ldr	r2, [pc, #40]	@ (80028b0 <HAL_InitTick+0x74>)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6013      	str	r3, [r2, #0]
 800288a:	e007      	b.n	800289c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800288c:	2301      	movs	r3, #1
 800288e:	73fb      	strb	r3, [r7, #15]
 8002890:	e004      	b.n	800289c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	73fb      	strb	r3, [r7, #15]
 8002896:	e001      	b.n	800289c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}
 80028a6:	bf00      	nop
 80028a8:	20000010 	.word	0x20000010
 80028ac:	20000008 	.word	0x20000008
 80028b0:	2000000c 	.word	0x2000000c

080028b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b4:	b480      	push	{r7}
 80028b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80028b8:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_IncTick+0x20>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	461a      	mov	r2, r3
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4413      	add	r3, r2
 80028c4:	4a04      	ldr	r2, [pc, #16]	@ (80028d8 <HAL_IncTick+0x24>)
 80028c6:	6013      	str	r3, [r2, #0]
}
 80028c8:	bf00      	nop
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000010 	.word	0x20000010
 80028d8:	20000710 	.word	0x20000710

080028dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028dc:	b480      	push	{r7}
 80028de:	af00      	add	r7, sp, #0
  return uwTick;
 80028e0:	4b03      	ldr	r3, [pc, #12]	@ (80028f0 <HAL_GetTick+0x14>)
 80028e2:	681b      	ldr	r3, [r3, #0]
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	20000710 	.word	0x20000710

080028f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028fc:	f7ff ffee 	bl	80028dc <HAL_GetTick>
 8002900:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800290c:	d005      	beq.n	800291a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800290e:	4b0a      	ldr	r3, [pc, #40]	@ (8002938 <HAL_Delay+0x44>)
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	4413      	add	r3, r2
 8002918:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800291a:	bf00      	nop
 800291c:	f7ff ffde 	bl	80028dc <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	68fa      	ldr	r2, [r7, #12]
 8002928:	429a      	cmp	r2, r3
 800292a:	d8f7      	bhi.n	800291c <HAL_Delay+0x28>
  {
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	20000010 	.word	0x20000010

0800293c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d101      	bne.n	800294e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	e0ed      	b.n	8002b2a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002954:	b2db      	uxtb	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d102      	bne.n	8002960 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fd98 	bl	8002490 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0201 	orr.w	r2, r2, #1
 800296e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002970:	f7ff ffb4 	bl	80028dc <HAL_GetTick>
 8002974:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002976:	e012      	b.n	800299e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002978:	f7ff ffb0 	bl	80028dc <HAL_GetTick>
 800297c:	4602      	mov	r2, r0
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	2b0a      	cmp	r3, #10
 8002984:	d90b      	bls.n	800299e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2205      	movs	r2, #5
 8002996:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e0c5      	b.n	8002b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d0e5      	beq.n	8002978 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f022 0202 	bic.w	r2, r2, #2
 80029ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029bc:	f7ff ff8e 	bl	80028dc <HAL_GetTick>
 80029c0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029c2:	e012      	b.n	80029ea <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80029c4:	f7ff ff8a 	bl	80028dc <HAL_GetTick>
 80029c8:	4602      	mov	r2, r0
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	1ad3      	subs	r3, r2, r3
 80029ce:	2b0a      	cmp	r3, #10
 80029d0:	d90b      	bls.n	80029ea <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2205      	movs	r2, #5
 80029e2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e09f      	b.n	8002b2a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1e5      	bne.n	80029c4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	7e1b      	ldrb	r3, [r3, #24]
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d108      	bne.n	8002a12 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002a0e:	601a      	str	r2, [r3, #0]
 8002a10:	e007      	b.n	8002a22 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	681a      	ldr	r2, [r3, #0]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a20:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	7e5b      	ldrb	r3, [r3, #25]
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d108      	bne.n	8002a3c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681a      	ldr	r2, [r3, #0]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a38:	601a      	str	r2, [r3, #0]
 8002a3a:	e007      	b.n	8002a4c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	7e9b      	ldrb	r3, [r3, #26]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d108      	bne.n	8002a66 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0220 	orr.w	r2, r2, #32
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	e007      	b.n	8002a76 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0220 	bic.w	r2, r2, #32
 8002a74:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	7edb      	ldrb	r3, [r3, #27]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d108      	bne.n	8002a90 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 0210 	bic.w	r2, r2, #16
 8002a8c:	601a      	str	r2, [r3, #0]
 8002a8e:	e007      	b.n	8002aa0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681a      	ldr	r2, [r3, #0]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0210 	orr.w	r2, r2, #16
 8002a9e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	7f1b      	ldrb	r3, [r3, #28]
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d108      	bne.n	8002aba <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0208 	orr.w	r2, r2, #8
 8002ab6:	601a      	str	r2, [r3, #0]
 8002ab8:	e007      	b.n	8002aca <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0208 	bic.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	7f5b      	ldrb	r3, [r3, #29]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d108      	bne.n	8002ae4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f042 0204 	orr.w	r2, r2, #4
 8002ae0:	601a      	str	r2, [r3, #0]
 8002ae2:	e007      	b.n	8002af4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f022 0204 	bic.w	r2, r2, #4
 8002af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689a      	ldr	r2, [r3, #8]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	68db      	ldr	r3, [r3, #12]
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	431a      	orrs	r2, r3
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	695b      	ldr	r3, [r3, #20]
 8002b08:	ea42 0103 	orr.w	r1, r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	1e5a      	subs	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002b28:	2300      	movs	r3, #0
}
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002b32:	b480      	push	{r7}
 8002b34:	b087      	sub	sp, #28
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	6078      	str	r0, [r7, #4]
 8002b3a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b48:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8002b4a:	7cfb      	ldrb	r3, [r7, #19]
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d003      	beq.n	8002b58 <HAL_CAN_ConfigFilter+0x26>
 8002b50:	7cfb      	ldrb	r3, [r7, #19]
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	f040 80aa 	bne.w	8002cac <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002b5e:	f043 0201 	orr.w	r2, r3, #1
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	695b      	ldr	r3, [r3, #20]
 8002b6c:	f003 031f 	and.w	r3, r3, #31
 8002b70:	2201      	movs	r2, #1
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	43db      	mvns	r3, r3
 8002b82:	401a      	ands	r2, r3
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d123      	bne.n	8002bda <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	401a      	ands	r2, r3
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8002bb4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	3248      	adds	r2, #72	@ 0x48
 8002bba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002bce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002bd0:	6979      	ldr	r1, [r7, #20]
 8002bd2:	3348      	adds	r3, #72	@ 0x48
 8002bd4:	00db      	lsls	r3, r3, #3
 8002bd6:	440b      	add	r3, r1
 8002bd8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d122      	bne.n	8002c28 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	431a      	orrs	r2, r3
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002c02:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	3248      	adds	r2, #72	@ 0x48
 8002c08:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002c1c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002c1e:	6979      	ldr	r1, [r7, #20]
 8002c20:	3348      	adds	r3, #72	@ 0x48
 8002c22:	00db      	lsls	r3, r3, #3
 8002c24:	440b      	add	r3, r1
 8002c26:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d109      	bne.n	8002c44 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	43db      	mvns	r3, r3
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002c42:	e007      	b.n	8002c54 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	43db      	mvns	r3, r3
 8002c66:	401a      	ands	r2, r3
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002c6e:	e007      	b.n	8002c80 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	6a1b      	ldr	r3, [r3, #32]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d107      	bne.n	8002c98 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	431a      	orrs	r2, r3
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8002c9e:	f023 0201 	bic.w	r2, r3, #1
 8002ca2:	697b      	ldr	r3, [r7, #20]
 8002ca4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	e006      	b.n	8002cba <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cb0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
  }
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	371c      	adds	r7, #28
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr

08002cc6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002cc6:	b580      	push	{r7, lr}
 8002cc8:	b084      	sub	sp, #16
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	2b01      	cmp	r3, #1
 8002cd8:	d12e      	bne.n	8002d38 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2202      	movs	r2, #2
 8002cde:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681a      	ldr	r2, [r3, #0]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0201 	bic.w	r2, r2, #1
 8002cf0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002cf2:	f7ff fdf3 	bl	80028dc <HAL_GetTick>
 8002cf6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002cf8:	e012      	b.n	8002d20 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002cfa:	f7ff fdef 	bl	80028dc <HAL_GetTick>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	1ad3      	subs	r3, r2, r3
 8002d04:	2b0a      	cmp	r3, #10
 8002d06:	d90b      	bls.n	8002d20 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2205      	movs	r2, #5
 8002d18:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e012      	b.n	8002d46 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f003 0301 	and.w	r3, r3, #1
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1e5      	bne.n	8002cfa <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002d34:	2300      	movs	r3, #0
 8002d36:	e006      	b.n	8002d46 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002d44:	2301      	movs	r3, #1
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3710      	adds	r7, #16
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}

08002d4e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b089      	sub	sp, #36	@ 0x24
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	60f8      	str	r0, [r7, #12]
 8002d56:	60b9      	str	r1, [r7, #8]
 8002d58:	607a      	str	r2, [r7, #4]
 8002d5a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d62:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002d6c:	7ffb      	ldrb	r3, [r7, #31]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d003      	beq.n	8002d7a <HAL_CAN_AddTxMessage+0x2c>
 8002d72:	7ffb      	ldrb	r3, [r7, #31]
 8002d74:	2b02      	cmp	r3, #2
 8002d76:	f040 80ad 	bne.w	8002ed4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d7a:	69bb      	ldr	r3, [r7, #24]
 8002d7c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10a      	bne.n	8002d9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d84:	69bb      	ldr	r3, [r7, #24]
 8002d86:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d105      	bne.n	8002d9a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8095 	beq.w	8002ec4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	0e1b      	lsrs	r3, r3, #24
 8002d9e:	f003 0303 	and.w	r3, r3, #3
 8002da2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002da4:	2201      	movs	r2, #1
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	409a      	lsls	r2, r3
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10d      	bne.n	8002dd2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002dc0:	68f9      	ldr	r1, [r7, #12]
 8002dc2:	6809      	ldr	r1, [r1, #0]
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	3318      	adds	r3, #24
 8002dca:	011b      	lsls	r3, r3, #4
 8002dcc:	440b      	add	r3, r1
 8002dce:	601a      	str	r2, [r3, #0]
 8002dd0:	e00f      	b.n	8002df2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002ddc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002dde:	68bb      	ldr	r3, [r7, #8]
 8002de0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002de2:	68f9      	ldr	r1, [r7, #12]
 8002de4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002de6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	3318      	adds	r3, #24
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	440b      	add	r3, r1
 8002df0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6819      	ldr	r1, [r3, #0]
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	691a      	ldr	r2, [r3, #16]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	011b      	lsls	r3, r3, #4
 8002e00:	440b      	add	r3, r1
 8002e02:	3304      	adds	r3, #4
 8002e04:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	7d1b      	ldrb	r3, [r3, #20]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d111      	bne.n	8002e32 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	3318      	adds	r3, #24
 8002e16:	011b      	lsls	r3, r3, #4
 8002e18:	4413      	add	r3, r2
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68fa      	ldr	r2, [r7, #12]
 8002e20:	6811      	ldr	r1, [r2, #0]
 8002e22:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	3318      	adds	r3, #24
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	440b      	add	r3, r1
 8002e2e:	3304      	adds	r3, #4
 8002e30:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3307      	adds	r3, #7
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	061a      	lsls	r2, r3, #24
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	3306      	adds	r3, #6
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	041b      	lsls	r3, r3, #16
 8002e42:	431a      	orrs	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3305      	adds	r3, #5
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	687a      	ldr	r2, [r7, #4]
 8002e50:	3204      	adds	r2, #4
 8002e52:	7812      	ldrb	r2, [r2, #0]
 8002e54:	4610      	mov	r0, r2
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	6811      	ldr	r1, [r2, #0]
 8002e5a:	ea43 0200 	orr.w	r2, r3, r0
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	440b      	add	r3, r1
 8002e64:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002e68:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	3303      	adds	r3, #3
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	061a      	lsls	r2, r3, #24
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	3302      	adds	r3, #2
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	041b      	lsls	r3, r3, #16
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	4313      	orrs	r3, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	7812      	ldrb	r2, [r2, #0]
 8002e8a:	4610      	mov	r0, r2
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	6811      	ldr	r1, [r2, #0]
 8002e90:	ea43 0200 	orr.w	r2, r3, r0
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	011b      	lsls	r3, r3, #4
 8002e98:	440b      	add	r3, r1
 8002e9a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8002e9e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	3318      	adds	r3, #24
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	4413      	add	r3, r2
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68fa      	ldr	r2, [r7, #12]
 8002eb0:	6811      	ldr	r1, [r2, #0]
 8002eb2:	f043 0201 	orr.w	r2, r3, #1
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	3318      	adds	r3, #24
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	440b      	add	r3, r1
 8002ebe:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	e00e      	b.n	8002ee2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	e006      	b.n	8002ee2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
  }
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3724      	adds	r7, #36	@ 0x24
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f00:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002f02:	7afb      	ldrb	r3, [r7, #11]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d002      	beq.n	8002f0e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002f08:	7afb      	ldrb	r3, [r7, #11]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d11d      	bne.n	8002f4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	689b      	ldr	r3, [r3, #8]
 8002f14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d002      	beq.n	8002f22 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	3301      	adds	r3, #1
 8002f20:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d002      	beq.n	8002f36 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	3301      	adds	r3, #1
 8002f34:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d002      	beq.n	8002f4a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	3301      	adds	r3, #1
 8002f48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3714      	adds	r7, #20
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b087      	sub	sp, #28
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	607a      	str	r2, [r7, #4]
 8002f64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002f6e:	7dfb      	ldrb	r3, [r7, #23]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d003      	beq.n	8002f7c <HAL_CAN_GetRxMessage+0x24>
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	f040 8103 	bne.w	8003182 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d10e      	bne.n	8002fa0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	f003 0303 	and.w	r3, r3, #3
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d116      	bne.n	8002fbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e0f7      	b.n	8003190 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691b      	ldr	r3, [r3, #16]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d107      	bne.n	8002fbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0e8      	b.n	8003190 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	331b      	adds	r3, #27
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	4413      	add	r3, r2
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0204 	and.w	r2, r3, #4
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d10c      	bne.n	8002ff6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	331b      	adds	r3, #27
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	4413      	add	r3, r2
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	0d5b      	lsrs	r3, r3, #21
 8002fec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	601a      	str	r2, [r3, #0]
 8002ff4:	e00b      	b.n	800300e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	331b      	adds	r3, #27
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	4413      	add	r3, r2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	08db      	lsrs	r3, r3, #3
 8003006:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	331b      	adds	r3, #27
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	4413      	add	r3, r2
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 0202 	and.w	r2, r3, #2
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	331b      	adds	r3, #27
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	4413      	add	r3, r2
 8003030:	3304      	adds	r3, #4
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0308 	and.w	r3, r3, #8
 8003038:	2b00      	cmp	r3, #0
 800303a:	d003      	beq.n	8003044 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2208      	movs	r2, #8
 8003040:	611a      	str	r2, [r3, #16]
 8003042:	e00b      	b.n	800305c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	331b      	adds	r3, #27
 800304c:	011b      	lsls	r3, r3, #4
 800304e:	4413      	add	r3, r2
 8003050:	3304      	adds	r3, #4
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 020f 	and.w	r2, r3, #15
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	331b      	adds	r3, #27
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	4413      	add	r3, r2
 8003068:	3304      	adds	r3, #4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0a1b      	lsrs	r3, r3, #8
 800306e:	b2da      	uxtb	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681a      	ldr	r2, [r3, #0]
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	331b      	adds	r3, #27
 800307c:	011b      	lsls	r3, r3, #4
 800307e:	4413      	add	r3, r2
 8003080:	3304      	adds	r3, #4
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	0c1b      	lsrs	r3, r3, #16
 8003086:	b29a      	uxth	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	011b      	lsls	r3, r3, #4
 8003094:	4413      	add	r3, r2
 8003096:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	b2da      	uxtb	r2, r3
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	4413      	add	r3, r2
 80030ac:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	0a1a      	lsrs	r2, r3, #8
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	3301      	adds	r3, #1
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	4413      	add	r3, r2
 80030c6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	0c1a      	lsrs	r2, r3, #16
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	3302      	adds	r3, #2
 80030d2:	b2d2      	uxtb	r2, r2
 80030d4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	011b      	lsls	r3, r3, #4
 80030de:	4413      	add	r3, r2
 80030e0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	0e1a      	lsrs	r2, r3, #24
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	3303      	adds	r3, #3
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	3304      	adds	r3, #4
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	4413      	add	r3, r2
 8003112:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	0a1a      	lsrs	r2, r3, #8
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	3305      	adds	r3, #5
 800311e:	b2d2      	uxtb	r2, r2
 8003120:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	4413      	add	r3, r2
 800312c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	0c1a      	lsrs	r2, r3, #16
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	3306      	adds	r3, #6
 8003138:	b2d2      	uxtb	r2, r2
 800313a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	011b      	lsls	r3, r3, #4
 8003144:	4413      	add	r3, r2
 8003146:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e1a      	lsrs	r2, r3, #24
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	3307      	adds	r3, #7
 8003152:	b2d2      	uxtb	r2, r2
 8003154:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d108      	bne.n	800316e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f042 0220 	orr.w	r2, r2, #32
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	e007      	b.n	800317e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f042 0220 	orr.w	r2, r2, #32
 800317c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e006      	b.n	8003190 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003186:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800318e:	2301      	movs	r3, #1
  }
}
 8003190:	4618      	mov	r0, r3
 8003192:	371c      	adds	r7, #28
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ac:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80031ae:	7bfb      	ldrb	r3, [r7, #15]
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d002      	beq.n	80031ba <HAL_CAN_ActivateNotification+0x1e>
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b02      	cmp	r3, #2
 80031b8:	d109      	bne.n	80031ce <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6959      	ldr	r1, [r3, #20]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	683a      	ldr	r2, [r7, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	e006      	b.n	80031dc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031d2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
  }
}
 80031dc:	4618      	mov	r0, r3
 80031de:	3714      	adds	r7, #20
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr

080031e8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b08a      	sub	sp, #40	@ 0x28
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80031f0:	2300      	movs	r3, #0
 80031f2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	695b      	ldr	r3, [r3, #20]
 80031fa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	691b      	ldr	r3, [r3, #16]
 800321a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d07c      	beq.n	8003328 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d023      	beq.n	8003280 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2201      	movs	r2, #1
 800323e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d003      	beq.n	8003252 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800324a:	6878      	ldr	r0, [r7, #4]
 800324c:	f7fe fe98 	bl	8001f80 <HAL_CAN_TxMailbox0CompleteCallback>
 8003250:	e016      	b.n	8003280 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	f003 0304 	and.w	r3, r3, #4
 8003258:	2b00      	cmp	r3, #0
 800325a:	d004      	beq.n	8003266 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800325c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800325e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003262:	627b      	str	r3, [r7, #36]	@ 0x24
 8003264:	e00c      	b.n	8003280 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d004      	beq.n	800327a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003272:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003276:	627b      	str	r3, [r7, #36]	@ 0x24
 8003278:	e002      	b.n	8003280 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f000 f96b 	bl	8003556 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d024      	beq.n	80032d4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003292:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800329a:	2b00      	cmp	r3, #0
 800329c:	d003      	beq.n	80032a6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f7fe fe9c 	bl	8001fdc <HAL_CAN_TxMailbox1CompleteCallback>
 80032a4:	e016      	b.n	80032d4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80032a6:	69bb      	ldr	r3, [r7, #24]
 80032a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d004      	beq.n	80032ba <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80032b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80032b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032b8:	e00c      	b.n	80032d4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80032c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80032ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80032cc:	e002      	b.n	80032d4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f94b 	bl	800356a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80032d4:	69bb      	ldr	r3, [r7, #24]
 80032d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d024      	beq.n	8003328 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80032e6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7fe fea0 	bl	8002038 <HAL_CAN_TxMailbox2CompleteCallback>
 80032f8:	e016      	b.n	8003328 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003306:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800330a:	627b      	str	r3, [r7, #36]	@ 0x24
 800330c:	e00c      	b.n	8003328 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d004      	beq.n	8003322 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800331a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800331e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003320:	e002      	b.n	8003328 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f000 f92b 	bl	800357e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	f003 0308 	and.w	r3, r3, #8
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00c      	beq.n	800334c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d007      	beq.n	800334c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800333c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003342:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	2210      	movs	r2, #16
 800334a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800334c:	6a3b      	ldr	r3, [r7, #32]
 800334e:	f003 0304 	and.w	r3, r3, #4
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0308 	and.w	r3, r3, #8
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2208      	movs	r2, #8
 8003366:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f912 	bl	8003592 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	f003 0302 	and.w	r3, r3, #2
 8003374:	2b00      	cmp	r3, #0
 8003376:	d009      	beq.n	800338c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	68db      	ldr	r3, [r3, #12]
 800337e:	f003 0303 	and.w	r3, r3, #3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d002      	beq.n	800338c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003386:	6878      	ldr	r0, [r7, #4]
 8003388:	f7fe fff8 	bl	800237c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800338c:	6a3b      	ldr	r3, [r7, #32]
 800338e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00c      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d007      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80033a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2210      	movs	r2, #16
 80033ae:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f003 0320 	and.w	r3, r3, #32
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00b      	beq.n	80033d2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	f003 0308 	and.w	r3, r3, #8
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d006      	beq.n	80033d2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 f8f4 	bl	80035ba <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80033d2:	6a3b      	ldr	r3, [r7, #32]
 80033d4:	f003 0310 	and.w	r3, r3, #16
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d002      	beq.n	80033f0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 f8db 	bl	80035a6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80033f0:	6a3b      	ldr	r3, [r7, #32]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d00b      	beq.n	8003412 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80033fa:	69fb      	ldr	r3, [r7, #28]
 80033fc:	f003 0310 	and.w	r3, r3, #16
 8003400:	2b00      	cmp	r3, #0
 8003402:	d006      	beq.n	8003412 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2210      	movs	r2, #16
 800340a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8de 	bl	80035ce <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003412:	6a3b      	ldr	r3, [r7, #32]
 8003414:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d00b      	beq.n	8003434 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0308 	and.w	r3, r3, #8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d006      	beq.n	8003434 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 f8d7 	bl	80035e2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003434:	6a3b      	ldr	r3, [r7, #32]
 8003436:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d07b      	beq.n	8003536 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800343e:	69fb      	ldr	r3, [r7, #28]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d072      	beq.n	800352e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003448:	6a3b      	ldr	r3, [r7, #32]
 800344a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800344e:	2b00      	cmp	r3, #0
 8003450:	d008      	beq.n	8003464 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800345c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003464:	6a3b      	ldr	r3, [r7, #32]
 8003466:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8003478:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800347a:	f043 0302 	orr.w	r3, r3, #2
 800347e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003486:	2b00      	cmp	r3, #0
 8003488:	d008      	beq.n	800349c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003496:	f043 0304 	orr.w	r3, r3, #4
 800349a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d043      	beq.n	800352e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d03e      	beq.n	800352e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80034b6:	2b60      	cmp	r3, #96	@ 0x60
 80034b8:	d02b      	beq.n	8003512 <HAL_CAN_IRQHandler+0x32a>
 80034ba:	2b60      	cmp	r3, #96	@ 0x60
 80034bc:	d82e      	bhi.n	800351c <HAL_CAN_IRQHandler+0x334>
 80034be:	2b50      	cmp	r3, #80	@ 0x50
 80034c0:	d022      	beq.n	8003508 <HAL_CAN_IRQHandler+0x320>
 80034c2:	2b50      	cmp	r3, #80	@ 0x50
 80034c4:	d82a      	bhi.n	800351c <HAL_CAN_IRQHandler+0x334>
 80034c6:	2b40      	cmp	r3, #64	@ 0x40
 80034c8:	d019      	beq.n	80034fe <HAL_CAN_IRQHandler+0x316>
 80034ca:	2b40      	cmp	r3, #64	@ 0x40
 80034cc:	d826      	bhi.n	800351c <HAL_CAN_IRQHandler+0x334>
 80034ce:	2b30      	cmp	r3, #48	@ 0x30
 80034d0:	d010      	beq.n	80034f4 <HAL_CAN_IRQHandler+0x30c>
 80034d2:	2b30      	cmp	r3, #48	@ 0x30
 80034d4:	d822      	bhi.n	800351c <HAL_CAN_IRQHandler+0x334>
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d002      	beq.n	80034e0 <HAL_CAN_IRQHandler+0x2f8>
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d005      	beq.n	80034ea <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80034de:	e01d      	b.n	800351c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80034e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034e2:	f043 0308 	orr.w	r3, r3, #8
 80034e6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034e8:	e019      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80034ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034f2:	e014      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80034f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f6:	f043 0320 	orr.w	r3, r3, #32
 80034fa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80034fc:	e00f      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80034fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003506:	e00a      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8003508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800350a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800350e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003510:	e005      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003514:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003518:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800351a:	e000      	b.n	800351e <HAL_CAN_IRQHandler+0x336>
            break;
 800351c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699a      	ldr	r2, [r3, #24]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800352c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2204      	movs	r2, #4
 8003534:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003536:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8003548:	6878      	ldr	r0, [r7, #4]
 800354a:	f000 f854 	bl	80035f6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800354e:	bf00      	nop
 8003550:	3728      	adds	r7, #40	@ 0x28
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}

08003556 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800359a:	bf00      	nop
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr

080035ba <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b083      	sub	sp, #12
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80035ea:	bf00      	nop
 80035ec:	370c      	adds	r7, #12
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr

080035f6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80035f6:	b480      	push	{r7}
 80035f8:	b083      	sub	sp, #12
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
	...

0800360c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800360c:	b480      	push	{r7}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	f003 0307 	and.w	r3, r3, #7
 800361a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800361c:	4b0c      	ldr	r3, [pc, #48]	@ (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003622:	68ba      	ldr	r2, [r7, #8]
 8003624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003628:	4013      	ands	r3, r2
 800362a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800363c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363e:	4a04      	ldr	r2, [pc, #16]	@ (8003650 <__NVIC_SetPriorityGrouping+0x44>)
 8003640:	68bb      	ldr	r3, [r7, #8]
 8003642:	60d3      	str	r3, [r2, #12]
}
 8003644:	bf00      	nop
 8003646:	3714      	adds	r7, #20
 8003648:	46bd      	mov	sp, r7
 800364a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364e:	4770      	bx	lr
 8003650:	e000ed00 	.word	0xe000ed00

08003654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003654:	b480      	push	{r7}
 8003656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003658:	4b04      	ldr	r3, [pc, #16]	@ (800366c <__NVIC_GetPriorityGrouping+0x18>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	0a1b      	lsrs	r3, r3, #8
 800365e:	f003 0307 	and.w	r3, r3, #7
}
 8003662:	4618      	mov	r0, r3
 8003664:	46bd      	mov	sp, r7
 8003666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366a:	4770      	bx	lr
 800366c:	e000ed00 	.word	0xe000ed00

08003670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800367a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367e:	2b00      	cmp	r3, #0
 8003680:	db0b      	blt.n	800369a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4907      	ldr	r1, [pc, #28]	@ (80036a8 <__NVIC_EnableIRQ+0x38>)
 800368a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368e:	095b      	lsrs	r3, r3, #5
 8003690:	2001      	movs	r0, #1
 8003692:	fa00 f202 	lsl.w	r2, r0, r2
 8003696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800369a:	bf00      	nop
 800369c:	370c      	adds	r7, #12
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	e000e100 	.word	0xe000e100

080036ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036ac:	b480      	push	{r7}
 80036ae:	b083      	sub	sp, #12
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	6039      	str	r1, [r7, #0]
 80036b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	db0a      	blt.n	80036d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	b2da      	uxtb	r2, r3
 80036c4:	490c      	ldr	r1, [pc, #48]	@ (80036f8 <__NVIC_SetPriority+0x4c>)
 80036c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036ca:	0112      	lsls	r2, r2, #4
 80036cc:	b2d2      	uxtb	r2, r2
 80036ce:	440b      	add	r3, r1
 80036d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d4:	e00a      	b.n	80036ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	4908      	ldr	r1, [pc, #32]	@ (80036fc <__NVIC_SetPriority+0x50>)
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	3b04      	subs	r3, #4
 80036e4:	0112      	lsls	r2, r2, #4
 80036e6:	b2d2      	uxtb	r2, r2
 80036e8:	440b      	add	r3, r1
 80036ea:	761a      	strb	r2, [r3, #24]
}
 80036ec:	bf00      	nop
 80036ee:	370c      	adds	r7, #12
 80036f0:	46bd      	mov	sp, r7
 80036f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f6:	4770      	bx	lr
 80036f8:	e000e100 	.word	0xe000e100
 80036fc:	e000ed00 	.word	0xe000ed00

08003700 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003700:	b480      	push	{r7}
 8003702:	b089      	sub	sp, #36	@ 0x24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f003 0307 	and.w	r3, r3, #7
 8003712:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1c3 0307 	rsb	r3, r3, #7
 800371a:	2b04      	cmp	r3, #4
 800371c:	bf28      	it	cs
 800371e:	2304      	movcs	r3, #4
 8003720:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	3304      	adds	r3, #4
 8003726:	2b06      	cmp	r3, #6
 8003728:	d902      	bls.n	8003730 <NVIC_EncodePriority+0x30>
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	3b03      	subs	r3, #3
 800372e:	e000      	b.n	8003732 <NVIC_EncodePriority+0x32>
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003734:	f04f 32ff 	mov.w	r2, #4294967295
 8003738:	69bb      	ldr	r3, [r7, #24]
 800373a:	fa02 f303 	lsl.w	r3, r2, r3
 800373e:	43da      	mvns	r2, r3
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	401a      	ands	r2, r3
 8003744:	697b      	ldr	r3, [r7, #20]
 8003746:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003748:	f04f 31ff 	mov.w	r1, #4294967295
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	fa01 f303 	lsl.w	r3, r1, r3
 8003752:	43d9      	mvns	r1, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003758:	4313      	orrs	r3, r2
         );
}
 800375a:	4618      	mov	r0, r3
 800375c:	3724      	adds	r7, #36	@ 0x24
 800375e:	46bd      	mov	sp, r7
 8003760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003764:	4770      	bx	lr
	...

08003768 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	3b01      	subs	r3, #1
 8003774:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003778:	d301      	bcc.n	800377e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800377a:	2301      	movs	r3, #1
 800377c:	e00f      	b.n	800379e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377e:	4a0a      	ldr	r2, [pc, #40]	@ (80037a8 <SysTick_Config+0x40>)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3b01      	subs	r3, #1
 8003784:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003786:	210f      	movs	r1, #15
 8003788:	f04f 30ff 	mov.w	r0, #4294967295
 800378c:	f7ff ff8e 	bl	80036ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003790:	4b05      	ldr	r3, [pc, #20]	@ (80037a8 <SysTick_Config+0x40>)
 8003792:	2200      	movs	r2, #0
 8003794:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003796:	4b04      	ldr	r3, [pc, #16]	@ (80037a8 <SysTick_Config+0x40>)
 8003798:	2207      	movs	r2, #7
 800379a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	e000e010 	.word	0xe000e010

080037ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b4:	6878      	ldr	r0, [r7, #4]
 80037b6:	f7ff ff29 	bl	800360c <__NVIC_SetPriorityGrouping>
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}

080037c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037c2:	b580      	push	{r7, lr}
 80037c4:	b086      	sub	sp, #24
 80037c6:	af00      	add	r7, sp, #0
 80037c8:	4603      	mov	r3, r0
 80037ca:	60b9      	str	r1, [r7, #8]
 80037cc:	607a      	str	r2, [r7, #4]
 80037ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037d0:	2300      	movs	r3, #0
 80037d2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80037d4:	f7ff ff3e 	bl	8003654 <__NVIC_GetPriorityGrouping>
 80037d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	68b9      	ldr	r1, [r7, #8]
 80037de:	6978      	ldr	r0, [r7, #20]
 80037e0:	f7ff ff8e 	bl	8003700 <NVIC_EncodePriority>
 80037e4:	4602      	mov	r2, r0
 80037e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037ea:	4611      	mov	r1, r2
 80037ec:	4618      	mov	r0, r3
 80037ee:	f7ff ff5d 	bl	80036ac <__NVIC_SetPriority>
}
 80037f2:	bf00      	nop
 80037f4:	3718      	adds	r7, #24
 80037f6:	46bd      	mov	sp, r7
 80037f8:	bd80      	pop	{r7, pc}

080037fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037fa:	b580      	push	{r7, lr}
 80037fc:	b082      	sub	sp, #8
 80037fe:	af00      	add	r7, sp, #0
 8003800:	4603      	mov	r3, r0
 8003802:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003804:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003808:	4618      	mov	r0, r3
 800380a:	f7ff ff31 	bl	8003670 <__NVIC_EnableIRQ>
}
 800380e:	bf00      	nop
 8003810:	3708      	adds	r7, #8
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b082      	sub	sp, #8
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ffa2 	bl	8003768 <SysTick_Config>
 8003824:	4603      	mov	r3, r0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800383a:	2300      	movs	r3, #0
 800383c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800383e:	e148      	b.n	8003ad2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	2101      	movs	r1, #1
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	fa01 f303 	lsl.w	r3, r1, r3
 800384c:	4013      	ands	r3, r2
 800384e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 813a 	beq.w	8003acc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	f003 0303 	and.w	r3, r3, #3
 8003860:	2b01      	cmp	r3, #1
 8003862:	d005      	beq.n	8003870 <HAL_GPIO_Init+0x40>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b02      	cmp	r3, #2
 800386e:	d130      	bne.n	80038d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	005b      	lsls	r3, r3, #1
 800387a:	2203      	movs	r2, #3
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	43db      	mvns	r3, r3
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	4013      	ands	r3, r2
 8003886:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	68da      	ldr	r2, [r3, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	005b      	lsls	r3, r3, #1
 8003890:	fa02 f303 	lsl.w	r3, r2, r3
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038a6:	2201      	movs	r2, #1
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	fa02 f303 	lsl.w	r3, r2, r3
 80038ae:	43db      	mvns	r3, r3
 80038b0:	693a      	ldr	r2, [r7, #16]
 80038b2:	4013      	ands	r3, r2
 80038b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	091b      	lsrs	r3, r3, #4
 80038bc:	f003 0201 	and.w	r2, r3, #1
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	2b03      	cmp	r3, #3
 80038dc:	d017      	beq.n	800390e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	68db      	ldr	r3, [r3, #12]
 80038e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	2203      	movs	r2, #3
 80038ea:	fa02 f303 	lsl.w	r3, r2, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	4013      	ands	r3, r2
 80038f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	689a      	ldr	r2, [r3, #8]
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	4313      	orrs	r3, r2
 8003906:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	f003 0303 	and.w	r3, r3, #3
 8003916:	2b02      	cmp	r3, #2
 8003918:	d123      	bne.n	8003962 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	08da      	lsrs	r2, r3, #3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	3208      	adds	r2, #8
 8003922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003926:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	220f      	movs	r2, #15
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	43db      	mvns	r3, r3
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	691a      	ldr	r2, [r3, #16]
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	f003 0307 	and.w	r3, r3, #7
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	fa02 f303 	lsl.w	r3, r2, r3
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	08da      	lsrs	r2, r3, #3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	3208      	adds	r2, #8
 800395c:	6939      	ldr	r1, [r7, #16]
 800395e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003968:	697b      	ldr	r3, [r7, #20]
 800396a:	005b      	lsls	r3, r3, #1
 800396c:	2203      	movs	r2, #3
 800396e:	fa02 f303 	lsl.w	r3, r2, r3
 8003972:	43db      	mvns	r3, r3
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	4013      	ands	r3, r2
 8003978:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	f003 0203 	and.w	r2, r3, #3
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	005b      	lsls	r3, r3, #1
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	693a      	ldr	r2, [r7, #16]
 800398c:	4313      	orrs	r3, r2
 800398e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	f000 8094 	beq.w	8003acc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039a4:	4b52      	ldr	r3, [pc, #328]	@ (8003af0 <HAL_GPIO_Init+0x2c0>)
 80039a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039a8:	4a51      	ldr	r2, [pc, #324]	@ (8003af0 <HAL_GPIO_Init+0x2c0>)
 80039aa:	f043 0301 	orr.w	r3, r3, #1
 80039ae:	6613      	str	r3, [r2, #96]	@ 0x60
 80039b0:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <HAL_GPIO_Init+0x2c0>)
 80039b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80039bc:	4a4d      	ldr	r2, [pc, #308]	@ (8003af4 <HAL_GPIO_Init+0x2c4>)
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	089b      	lsrs	r3, r3, #2
 80039c2:	3302      	adds	r3, #2
 80039c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	f003 0303 	and.w	r3, r3, #3
 80039d0:	009b      	lsls	r3, r3, #2
 80039d2:	220f      	movs	r2, #15
 80039d4:	fa02 f303 	lsl.w	r3, r2, r3
 80039d8:	43db      	mvns	r3, r3
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80039e6:	d00d      	beq.n	8003a04 <HAL_GPIO_Init+0x1d4>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	4a43      	ldr	r2, [pc, #268]	@ (8003af8 <HAL_GPIO_Init+0x2c8>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d007      	beq.n	8003a00 <HAL_GPIO_Init+0x1d0>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	4a42      	ldr	r2, [pc, #264]	@ (8003afc <HAL_GPIO_Init+0x2cc>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d101      	bne.n	80039fc <HAL_GPIO_Init+0x1cc>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e004      	b.n	8003a06 <HAL_GPIO_Init+0x1d6>
 80039fc:	2307      	movs	r3, #7
 80039fe:	e002      	b.n	8003a06 <HAL_GPIO_Init+0x1d6>
 8003a00:	2301      	movs	r3, #1
 8003a02:	e000      	b.n	8003a06 <HAL_GPIO_Init+0x1d6>
 8003a04:	2300      	movs	r3, #0
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	f002 0203 	and.w	r2, r2, #3
 8003a0c:	0092      	lsls	r2, r2, #2
 8003a0e:	4093      	lsls	r3, r2
 8003a10:	693a      	ldr	r2, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003a16:	4937      	ldr	r1, [pc, #220]	@ (8003af4 <HAL_GPIO_Init+0x2c4>)
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	089b      	lsrs	r3, r3, #2
 8003a1c:	3302      	adds	r3, #2
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a24:	4b36      	ldr	r3, [pc, #216]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a26:	689b      	ldr	r3, [r3, #8]
 8003a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8003a40:	693a      	ldr	r2, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a48:	4a2d      	ldr	r2, [pc, #180]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8003a6a:	693a      	ldr	r2, [r7, #16]
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a72:	4a23      	ldr	r2, [pc, #140]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a78:	4b21      	ldr	r3, [pc, #132]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	4013      	ands	r3, r2
 8003a86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a9c:	4a18      	ldr	r2, [pc, #96]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003aa2:	4b17      	ldr	r3, [pc, #92]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003ac6:	4a0e      	ldr	r2, [pc, #56]	@ (8003b00 <HAL_GPIO_Init+0x2d0>)
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	fa22 f303 	lsr.w	r3, r2, r3
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	f47f aeaf 	bne.w	8003840 <HAL_GPIO_Init+0x10>
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	bf00      	nop
 8003ae6:	371c      	adds	r7, #28
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aee:	4770      	bx	lr
 8003af0:	40021000 	.word	0x40021000
 8003af4:	40010000 	.word	0x40010000
 8003af8:	48000400 	.word	0x48000400
 8003afc:	48000800 	.word	0x48000800
 8003b00:	40010400 	.word	0x40010400

08003b04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	807b      	strh	r3, [r7, #2]
 8003b10:	4613      	mov	r3, r2
 8003b12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b14:	787b      	ldrb	r3, [r7, #1]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b20:	e002      	b.n	8003b28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003b46:	887a      	ldrh	r2, [r7, #2]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4013      	ands	r3, r2
 8003b4c:	041a      	lsls	r2, r3, #16
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	43d9      	mvns	r1, r3
 8003b52:	887b      	ldrh	r3, [r7, #2]
 8003b54:	400b      	ands	r3, r1
 8003b56:	431a      	orrs	r2, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	619a      	str	r2, [r3, #24]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b6c:	4b04      	ldr	r3, [pc, #16]	@ (8003b80 <HAL_PWREx_GetVoltageRange+0x18>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40007000 	.word	0x40007000

08003b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b92:	d130      	bne.n	8003bf6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b94:	4b23      	ldr	r3, [pc, #140]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ba0:	d038      	beq.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba2:	4b20      	ldr	r3, [pc, #128]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003baa:	4a1e      	ldr	r2, [pc, #120]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bac:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bb2:	4b1d      	ldr	r3, [pc, #116]	@ (8003c28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2232      	movs	r2, #50	@ 0x32
 8003bb8:	fb02 f303 	mul.w	r3, r2, r3
 8003bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8003c2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc2:	0c9b      	lsrs	r3, r3, #18
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc8:	e002      	b.n	8003bd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	3b01      	subs	r3, #1
 8003bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bd0:	4b14      	ldr	r3, [pc, #80]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bdc:	d102      	bne.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d1f2      	bne.n	8003bca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003be4:	4b0f      	ldr	r3, [pc, #60]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be6:	695b      	ldr	r3, [r3, #20]
 8003be8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bf0:	d110      	bne.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e00f      	b.n	8003c16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bf6:	4b0b      	ldr	r3, [pc, #44]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c02:	d007      	beq.n	8003c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c04:	4b07      	ldr	r3, [pc, #28]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c0c:	4a05      	ldr	r2, [pc, #20]	@ (8003c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003c0e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003c14:	2300      	movs	r3, #0
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40007000 	.word	0x40007000
 8003c28:	20000008 	.word	0x20000008
 8003c2c:	431bde83 	.word	0x431bde83

08003c30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	f000 bc02 	b.w	8004448 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c44:	4b96      	ldr	r3, [pc, #600]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	f003 030c 	and.w	r3, r3, #12
 8003c4c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c4e:	4b94      	ldr	r3, [pc, #592]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 0310 	and.w	r3, r3, #16
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80e4 	beq.w	8003e2e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d007      	beq.n	8003c7c <HAL_RCC_OscConfig+0x4c>
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b0c      	cmp	r3, #12
 8003c70:	f040 808b 	bne.w	8003d8a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	f040 8087 	bne.w	8003d8a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c7c:	4b88      	ldr	r3, [pc, #544]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f003 0302 	and.w	r3, r3, #2
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d005      	beq.n	8003c94 <HAL_RCC_OscConfig+0x64>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	699b      	ldr	r3, [r3, #24]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e3d9      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1a      	ldr	r2, [r3, #32]
 8003c98:	4b81      	ldr	r3, [pc, #516]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 0308 	and.w	r3, r3, #8
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d004      	beq.n	8003cae <HAL_RCC_OscConfig+0x7e>
 8003ca4:	4b7e      	ldr	r3, [pc, #504]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cac:	e005      	b.n	8003cba <HAL_RCC_OscConfig+0x8a>
 8003cae:	4b7c      	ldr	r3, [pc, #496]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003cb4:	091b      	lsrs	r3, r3, #4
 8003cb6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d223      	bcs.n	8003d06 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a1b      	ldr	r3, [r3, #32]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f000 fd54 	bl	8004770 <RCC_SetFlashLatencyFromMSIRange>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e3ba      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cd2:	4b73      	ldr	r3, [pc, #460]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a72      	ldr	r2, [pc, #456]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	6013      	str	r3, [r2, #0]
 8003cde:	4b70      	ldr	r3, [pc, #448]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a1b      	ldr	r3, [r3, #32]
 8003cea:	496d      	ldr	r1, [pc, #436]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cec:	4313      	orrs	r3, r2
 8003cee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cf0:	4b6b      	ldr	r3, [pc, #428]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	69db      	ldr	r3, [r3, #28]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	4968      	ldr	r1, [pc, #416]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	604b      	str	r3, [r1, #4]
 8003d04:	e025      	b.n	8003d52 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d06:	4b66      	ldr	r3, [pc, #408]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a65      	ldr	r2, [pc, #404]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d0c:	f043 0308 	orr.w	r3, r3, #8
 8003d10:	6013      	str	r3, [r2, #0]
 8003d12:	4b63      	ldr	r3, [pc, #396]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	4960      	ldr	r1, [pc, #384]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003d24:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	021b      	lsls	r3, r3, #8
 8003d32:	495b      	ldr	r1, [pc, #364]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f000 fd14 	bl	8004770 <RCC_SetFlashLatencyFromMSIRange>
 8003d48:	4603      	mov	r3, r0
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d001      	beq.n	8003d52 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e37a      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d52:	f000 fc81 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8003d56:	4602      	mov	r2, r0
 8003d58:	4b51      	ldr	r3, [pc, #324]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	091b      	lsrs	r3, r3, #4
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	4950      	ldr	r1, [pc, #320]	@ (8003ea4 <HAL_RCC_OscConfig+0x274>)
 8003d64:	5ccb      	ldrb	r3, [r1, r3]
 8003d66:	f003 031f 	and.w	r3, r3, #31
 8003d6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d6e:	4a4e      	ldr	r2, [pc, #312]	@ (8003ea8 <HAL_RCC_OscConfig+0x278>)
 8003d70:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d72:	4b4e      	ldr	r3, [pc, #312]	@ (8003eac <HAL_RCC_OscConfig+0x27c>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7fe fd60 	bl	800283c <HAL_InitTick>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d80:	7bfb      	ldrb	r3, [r7, #15]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d052      	beq.n	8003e2c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003d86:	7bfb      	ldrb	r3, [r7, #15]
 8003d88:	e35e      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d032      	beq.n	8003df8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d92:	4b43      	ldr	r3, [pc, #268]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a42      	ldr	r2, [pc, #264]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d9e:	f7fe fd9d 	bl	80028dc <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003da4:	e008      	b.n	8003db8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003da6:	f7fe fd99 	bl	80028dc <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d901      	bls.n	8003db8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e347      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003db8:	4b39      	ldr	r3, [pc, #228]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d0f0      	beq.n	8003da6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003dc4:	4b36      	ldr	r3, [pc, #216]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a35      	ldr	r2, [pc, #212]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dca:	f043 0308 	orr.w	r3, r3, #8
 8003dce:	6013      	str	r3, [r2, #0]
 8003dd0:	4b33      	ldr	r3, [pc, #204]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	4930      	ldr	r1, [pc, #192]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003de2:	4b2f      	ldr	r3, [pc, #188]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003de4:	685b      	ldr	r3, [r3, #4]
 8003de6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	492b      	ldr	r1, [pc, #172]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003df2:	4313      	orrs	r3, r2
 8003df4:	604b      	str	r3, [r1, #4]
 8003df6:	e01a      	b.n	8003e2e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003df8:	4b29      	ldr	r3, [pc, #164]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a28      	ldr	r2, [pc, #160]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003e04:	f7fe fd6a 	bl	80028dc <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003e0c:	f7fe fd66 	bl	80028dc <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e314      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003e1e:	4b20      	ldr	r3, [pc, #128]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d1f0      	bne.n	8003e0c <HAL_RCC_OscConfig+0x1dc>
 8003e2a:	e000      	b.n	8003e2e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e2c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0301 	and.w	r3, r3, #1
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d073      	beq.n	8003f22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d005      	beq.n	8003e4c <HAL_RCC_OscConfig+0x21c>
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	2b0c      	cmp	r3, #12
 8003e44:	d10e      	bne.n	8003e64 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	2b03      	cmp	r3, #3
 8003e4a:	d10b      	bne.n	8003e64 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4c:	4b14      	ldr	r3, [pc, #80]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d063      	beq.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d15f      	bne.n	8003f20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e60:	2301      	movs	r3, #1
 8003e62:	e2f1      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e6c:	d106      	bne.n	8003e7c <HAL_RCC_OscConfig+0x24c>
 8003e6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a0b      	ldr	r2, [pc, #44]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e74:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e78:	6013      	str	r3, [r2, #0]
 8003e7a:	e025      	b.n	8003ec8 <HAL_RCC_OscConfig+0x298>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e84:	d114      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x280>
 8003e86:	4b06      	ldr	r3, [pc, #24]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a05      	ldr	r2, [pc, #20]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b03      	ldr	r3, [pc, #12]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a02      	ldr	r2, [pc, #8]	@ (8003ea0 <HAL_RCC_OscConfig+0x270>)
 8003e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e013      	b.n	8003ec8 <HAL_RCC_OscConfig+0x298>
 8003ea0:	40021000 	.word	0x40021000
 8003ea4:	08009150 	.word	0x08009150
 8003ea8:	20000008 	.word	0x20000008
 8003eac:	2000000c 	.word	0x2000000c
 8003eb0:	4ba0      	ldr	r3, [pc, #640]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a9f      	ldr	r2, [pc, #636]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eba:	6013      	str	r3, [r2, #0]
 8003ebc:	4b9d      	ldr	r3, [pc, #628]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a9c      	ldr	r2, [pc, #624]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003ec2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d013      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed0:	f7fe fd04 	bl	80028dc <HAL_GetTick>
 8003ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ed6:	e008      	b.n	8003eea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ed8:	f7fe fd00 	bl	80028dc <HAL_GetTick>
 8003edc:	4602      	mov	r2, r0
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	1ad3      	subs	r3, r2, r3
 8003ee2:	2b64      	cmp	r3, #100	@ 0x64
 8003ee4:	d901      	bls.n	8003eea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	e2ae      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eea:	4b92      	ldr	r3, [pc, #584]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d0f0      	beq.n	8003ed8 <HAL_RCC_OscConfig+0x2a8>
 8003ef6:	e014      	b.n	8003f22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe fcf0 	bl	80028dc <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe fcec 	bl	80028dc <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	@ 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e29a      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003f12:	4b88      	ldr	r3, [pc, #544]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d1f0      	bne.n	8003f00 <HAL_RCC_OscConfig+0x2d0>
 8003f1e:	e000      	b.n	8003f22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f003 0302 	and.w	r3, r3, #2
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d060      	beq.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	2b04      	cmp	r3, #4
 8003f32:	d005      	beq.n	8003f40 <HAL_RCC_OscConfig+0x310>
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d119      	bne.n	8003f6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d116      	bne.n	8003f6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f40:	4b7c      	ldr	r3, [pc, #496]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d005      	beq.n	8003f58 <HAL_RCC_OscConfig+0x328>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e277      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f58:	4b76      	ldr	r3, [pc, #472]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	691b      	ldr	r3, [r3, #16]
 8003f64:	061b      	lsls	r3, r3, #24
 8003f66:	4973      	ldr	r1, [pc, #460]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f6c:	e040      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d023      	beq.n	8003fbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f76:	4b6f      	ldr	r3, [pc, #444]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4a6e      	ldr	r2, [pc, #440]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fcab 	bl	80028dc <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fca7 	bl	80028dc <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e255      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f9c:	4b65      	ldr	r3, [pc, #404]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b62      	ldr	r3, [pc, #392]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	061b      	lsls	r3, r3, #24
 8003fb6:	495f      	ldr	r1, [pc, #380]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	604b      	str	r3, [r1, #4]
 8003fbc:	e018      	b.n	8003ff0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b5d      	ldr	r3, [pc, #372]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a5c      	ldr	r2, [pc, #368]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003fc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fca:	f7fe fc87 	bl	80028dc <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fd2:	f7fe fc83 	bl	80028dc <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e231      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fe4:	4b53      	ldr	r3, [pc, #332]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1f0      	bne.n	8003fd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0308 	and.w	r3, r3, #8
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d03c      	beq.n	8004076 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	695b      	ldr	r3, [r3, #20]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d01c      	beq.n	800403e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004004:	4b4b      	ldr	r3, [pc, #300]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 800400c:	f043 0301 	orr.w	r3, r3, #1
 8004010:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004014:	f7fe fc62 	bl	80028dc <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800401c:	f7fe fc5e 	bl	80028dc <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b02      	cmp	r3, #2
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e20c      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800402e:	4b41      	ldr	r3, [pc, #260]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d0ef      	beq.n	800401c <HAL_RCC_OscConfig+0x3ec>
 800403c:	e01b      	b.n	8004076 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800403e:	4b3d      	ldr	r3, [pc, #244]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004040:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004044:	4a3b      	ldr	r2, [pc, #236]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004046:	f023 0301 	bic.w	r3, r3, #1
 800404a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800404e:	f7fe fc45 	bl	80028dc <HAL_GetTick>
 8004052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004056:	f7fe fc41 	bl	80028dc <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	693b      	ldr	r3, [r7, #16]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e1ef      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004068:	4b32      	ldr	r3, [pc, #200]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 800406a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d1ef      	bne.n	8004056 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 0304 	and.w	r3, r3, #4
 800407e:	2b00      	cmp	r3, #0
 8004080:	f000 80a6 	beq.w	80041d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004084:	2300      	movs	r3, #0
 8004086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004088:	4b2a      	ldr	r3, [pc, #168]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 800408a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800408c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004090:	2b00      	cmp	r3, #0
 8004092:	d10d      	bne.n	80040b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004094:	4b27      	ldr	r3, [pc, #156]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004096:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004098:	4a26      	ldr	r2, [pc, #152]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 800409a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800409e:	6593      	str	r3, [r2, #88]	@ 0x58
 80040a0:	4b24      	ldr	r3, [pc, #144]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 80040a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ac:	2301      	movs	r3, #1
 80040ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b0:	4b21      	ldr	r3, [pc, #132]	@ (8004138 <HAL_RCC_OscConfig+0x508>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d118      	bne.n	80040ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040bc:	4b1e      	ldr	r3, [pc, #120]	@ (8004138 <HAL_RCC_OscConfig+0x508>)
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004138 <HAL_RCC_OscConfig+0x508>)
 80040c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040c8:	f7fe fc08 	bl	80028dc <HAL_GetTick>
 80040cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040ce:	e008      	b.n	80040e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040d0:	f7fe fc04 	bl	80028dc <HAL_GetTick>
 80040d4:	4602      	mov	r2, r0
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	1ad3      	subs	r3, r2, r3
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d901      	bls.n	80040e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040de:	2303      	movs	r3, #3
 80040e0:	e1b2      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040e2:	4b15      	ldr	r3, [pc, #84]	@ (8004138 <HAL_RCC_OscConfig+0x508>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d0f0      	beq.n	80040d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d108      	bne.n	8004108 <HAL_RCC_OscConfig+0x4d8>
 80040f6:	4b0f      	ldr	r3, [pc, #60]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 80040f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040fc:	4a0d      	ldr	r2, [pc, #52]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 80040fe:	f043 0301 	orr.w	r3, r3, #1
 8004102:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004106:	e029      	b.n	800415c <HAL_RCC_OscConfig+0x52c>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b05      	cmp	r3, #5
 800410e:	d115      	bne.n	800413c <HAL_RCC_OscConfig+0x50c>
 8004110:	4b08      	ldr	r3, [pc, #32]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004116:	4a07      	ldr	r2, [pc, #28]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004118:	f043 0304 	orr.w	r3, r3, #4
 800411c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004120:	4b04      	ldr	r3, [pc, #16]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	4a03      	ldr	r2, [pc, #12]	@ (8004134 <HAL_RCC_OscConfig+0x504>)
 8004128:	f043 0301 	orr.w	r3, r3, #1
 800412c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004130:	e014      	b.n	800415c <HAL_RCC_OscConfig+0x52c>
 8004132:	bf00      	nop
 8004134:	40021000 	.word	0x40021000
 8004138:	40007000 	.word	0x40007000
 800413c:	4b9a      	ldr	r3, [pc, #616]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 800413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004142:	4a99      	ldr	r2, [pc, #612]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004144:	f023 0301 	bic.w	r3, r3, #1
 8004148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800414c:	4b96      	ldr	r3, [pc, #600]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	4a95      	ldr	r2, [pc, #596]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004154:	f023 0304 	bic.w	r3, r3, #4
 8004158:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	689b      	ldr	r3, [r3, #8]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d016      	beq.n	8004192 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004164:	f7fe fbba 	bl	80028dc <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fbb6 	bl	80028dc <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e162      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004182:	4b89      	ldr	r3, [pc, #548]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d0ed      	beq.n	800416c <HAL_RCC_OscConfig+0x53c>
 8004190:	e015      	b.n	80041be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004192:	f7fe fba3 	bl	80028dc <HAL_GetTick>
 8004196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004198:	e00a      	b.n	80041b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800419a:	f7fe fb9f 	bl	80028dc <HAL_GetTick>
 800419e:	4602      	mov	r2, r0
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	1ad3      	subs	r3, r2, r3
 80041a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e14b      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80041b0:	4b7d      	ldr	r3, [pc, #500]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041b6:	f003 0302 	and.w	r3, r3, #2
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d1ed      	bne.n	800419a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041be:	7ffb      	ldrb	r3, [r7, #31]
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d105      	bne.n	80041d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041c4:	4b78      	ldr	r3, [pc, #480]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80041c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c8:	4a77      	ldr	r2, [pc, #476]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80041ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041ce:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0320 	and.w	r3, r3, #32
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d03c      	beq.n	8004256 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01c      	beq.n	800421e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80041e4:	4b70      	ldr	r3, [pc, #448]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80041e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ea:	4a6f      	ldr	r2, [pc, #444]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80041ec:	f043 0301 	orr.w	r3, r3, #1
 80041f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041f4:	f7fe fb72 	bl	80028dc <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041fc:	f7fe fb6e 	bl	80028dc <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b02      	cmp	r3, #2
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e11c      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800420e:	4b66      	ldr	r3, [pc, #408]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0ef      	beq.n	80041fc <HAL_RCC_OscConfig+0x5cc>
 800421c:	e01b      	b.n	8004256 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800421e:	4b62      	ldr	r3, [pc, #392]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004220:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004224:	4a60      	ldr	r2, [pc, #384]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004226:	f023 0301 	bic.w	r3, r3, #1
 800422a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800422e:	f7fe fb55 	bl	80028dc <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004236:	f7fe fb51 	bl	80028dc <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e0ff      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004248:	4b57      	ldr	r3, [pc, #348]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 800424a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1ef      	bne.n	8004236 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800425a:	2b00      	cmp	r3, #0
 800425c:	f000 80f3 	beq.w	8004446 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004264:	2b02      	cmp	r3, #2
 8004266:	f040 80c9 	bne.w	80043fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800426a:	4b4f      	ldr	r3, [pc, #316]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	f003 0203 	and.w	r2, r3, #3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800427a:	429a      	cmp	r2, r3
 800427c:	d12c      	bne.n	80042d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004288:	3b01      	subs	r3, #1
 800428a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800428c:	429a      	cmp	r2, r3
 800428e:	d123      	bne.n	80042d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800429a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800429c:	429a      	cmp	r2, r3
 800429e:	d11b      	bne.n	80042d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d113      	bne.n	80042d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042ba:	085b      	lsrs	r3, r3, #1
 80042bc:	3b01      	subs	r3, #1
 80042be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d109      	bne.n	80042d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	3b01      	subs	r3, #1
 80042d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d06b      	beq.n	80043b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	2b0c      	cmp	r3, #12
 80042dc:	d062      	beq.n	80043a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80042de:	4b32      	ldr	r3, [pc, #200]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d001      	beq.n	80042ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e0ac      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80042ee:	4b2e      	ldr	r3, [pc, #184]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a2d      	ldr	r2, [pc, #180]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 80042f4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042fa:	f7fe faef 	bl	80028dc <HAL_GetTick>
 80042fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004300:	e008      	b.n	8004314 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004302:	f7fe faeb 	bl	80028dc <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	1ad3      	subs	r3, r2, r3
 800430c:	2b02      	cmp	r3, #2
 800430e:	d901      	bls.n	8004314 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8004310:	2303      	movs	r3, #3
 8004312:	e099      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004314:	4b24      	ldr	r3, [pc, #144]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d1f0      	bne.n	8004302 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004320:	4b21      	ldr	r3, [pc, #132]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004322:	68da      	ldr	r2, [r3, #12]
 8004324:	4b21      	ldr	r3, [pc, #132]	@ (80043ac <HAL_RCC_OscConfig+0x77c>)
 8004326:	4013      	ands	r3, r2
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004330:	3a01      	subs	r2, #1
 8004332:	0112      	lsls	r2, r2, #4
 8004334:	4311      	orrs	r1, r2
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800433a:	0212      	lsls	r2, r2, #8
 800433c:	4311      	orrs	r1, r2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004342:	0852      	lsrs	r2, r2, #1
 8004344:	3a01      	subs	r2, #1
 8004346:	0552      	lsls	r2, r2, #21
 8004348:	4311      	orrs	r1, r2
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800434e:	0852      	lsrs	r2, r2, #1
 8004350:	3a01      	subs	r2, #1
 8004352:	0652      	lsls	r2, r2, #25
 8004354:	4311      	orrs	r1, r2
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800435a:	06d2      	lsls	r2, r2, #27
 800435c:	430a      	orrs	r2, r1
 800435e:	4912      	ldr	r1, [pc, #72]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004360:	4313      	orrs	r3, r2
 8004362:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004364:	4b10      	ldr	r3, [pc, #64]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a0f      	ldr	r2, [pc, #60]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 800436a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800436e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004370:	4b0d      	ldr	r3, [pc, #52]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	4a0c      	ldr	r2, [pc, #48]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004376:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800437a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800437c:	f7fe faae 	bl	80028dc <HAL_GetTick>
 8004380:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004382:	e008      	b.n	8004396 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004384:	f7fe faaa 	bl	80028dc <HAL_GetTick>
 8004388:	4602      	mov	r2, r0
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	1ad3      	subs	r3, r2, r3
 800438e:	2b02      	cmp	r3, #2
 8004390:	d901      	bls.n	8004396 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8004392:	2303      	movs	r3, #3
 8004394:	e058      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004396:	4b04      	ldr	r3, [pc, #16]	@ (80043a8 <HAL_RCC_OscConfig+0x778>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d0f0      	beq.n	8004384 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043a2:	e050      	b.n	8004446 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e04f      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
 80043a8:	40021000 	.word	0x40021000
 80043ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043b0:	4b27      	ldr	r3, [pc, #156]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d144      	bne.n	8004446 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80043bc:	4b24      	ldr	r3, [pc, #144]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a23      	ldr	r2, [pc, #140]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80043c8:	4b21      	ldr	r3, [pc, #132]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	4a20      	ldr	r2, [pc, #128]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80043d4:	f7fe fa82 	bl	80028dc <HAL_GetTick>
 80043d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043da:	e008      	b.n	80043ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043dc:	f7fe fa7e 	bl	80028dc <HAL_GetTick>
 80043e0:	4602      	mov	r2, r0
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d901      	bls.n	80043ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80043ea:	2303      	movs	r3, #3
 80043ec:	e02c      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ee:	4b18      	ldr	r3, [pc, #96]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d0f0      	beq.n	80043dc <HAL_RCC_OscConfig+0x7ac>
 80043fa:	e024      	b.n	8004446 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b0c      	cmp	r3, #12
 8004400:	d01f      	beq.n	8004442 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004402:	4b13      	ldr	r3, [pc, #76]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	4a12      	ldr	r2, [pc, #72]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 8004408:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800440c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800440e:	f7fe fa65 	bl	80028dc <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004414:	e008      	b.n	8004428 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004416:	f7fe fa61 	bl	80028dc <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	2b02      	cmp	r3, #2
 8004422:	d901      	bls.n	8004428 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8004424:	2303      	movs	r3, #3
 8004426:	e00f      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004428:	4b09      	ldr	r3, [pc, #36]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1f0      	bne.n	8004416 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8004434:	4b06      	ldr	r3, [pc, #24]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	4905      	ldr	r1, [pc, #20]	@ (8004450 <HAL_RCC_OscConfig+0x820>)
 800443a:	4b06      	ldr	r3, [pc, #24]	@ (8004454 <HAL_RCC_OscConfig+0x824>)
 800443c:	4013      	ands	r3, r2
 800443e:	60cb      	str	r3, [r1, #12]
 8004440:	e001      	b.n	8004446 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3720      	adds	r7, #32
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	40021000 	.word	0x40021000
 8004454:	feeefffc 	.word	0xfeeefffc

08004458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0e7      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800446c:	4b75      	ldr	r3, [pc, #468]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d910      	bls.n	800449c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b72      	ldr	r3, [pc, #456]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4970      	ldr	r1, [pc, #448]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b6e      	ldr	r3, [pc, #440]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d001      	beq.n	800449c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0cf      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0302 	and.w	r3, r3, #2
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	4b66      	ldr	r3, [pc, #408]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80044ae:	689b      	ldr	r3, [r3, #8]
 80044b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044b4:	429a      	cmp	r2, r3
 80044b6:	d908      	bls.n	80044ca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b8:	4b63      	ldr	r3, [pc, #396]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	4960      	ldr	r1, [pc, #384]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80044c6:	4313      	orrs	r3, r2
 80044c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d04c      	beq.n	8004570 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	2b03      	cmp	r3, #3
 80044dc:	d107      	bne.n	80044ee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80044de:	4b5a      	ldr	r3, [pc, #360]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d121      	bne.n	800452e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0a6      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044f6:	4b54      	ldr	r3, [pc, #336]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d115      	bne.n	800452e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e09a      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800450e:	4b4e      	ldr	r3, [pc, #312]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 0302 	and.w	r3, r3, #2
 8004516:	2b00      	cmp	r3, #0
 8004518:	d109      	bne.n	800452e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e08e      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800451e:	4b4a      	ldr	r3, [pc, #296]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e086      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800452e:	4b46      	ldr	r3, [pc, #280]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	f023 0203 	bic.w	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	4943      	ldr	r1, [pc, #268]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 800453c:	4313      	orrs	r3, r2
 800453e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004540:	f7fe f9cc 	bl	80028dc <HAL_GetTick>
 8004544:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	e00a      	b.n	800455e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004548:	f7fe f9c8 	bl	80028dc <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004556:	4293      	cmp	r3, r2
 8004558:	d901      	bls.n	800455e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e06e      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455e:	4b3a      	ldr	r3, [pc, #232]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 020c 	and.w	r2, r3, #12
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	685b      	ldr	r3, [r3, #4]
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	429a      	cmp	r2, r3
 800456e:	d1eb      	bne.n	8004548 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d010      	beq.n	800459e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689a      	ldr	r2, [r3, #8]
 8004580:	4b31      	ldr	r3, [pc, #196]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004588:	429a      	cmp	r2, r3
 800458a:	d208      	bcs.n	800459e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800458c:	4b2e      	ldr	r3, [pc, #184]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	492b      	ldr	r1, [pc, #172]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800459e:	4b29      	ldr	r3, [pc, #164]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	683a      	ldr	r2, [r7, #0]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d210      	bcs.n	80045ce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ac:	4b25      	ldr	r3, [pc, #148]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f023 0207 	bic.w	r2, r3, #7
 80045b4:	4923      	ldr	r1, [pc, #140]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045bc:	4b21      	ldr	r3, [pc, #132]	@ (8004644 <HAL_RCC_ClockConfig+0x1ec>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 0307 	and.w	r3, r3, #7
 80045c4:	683a      	ldr	r2, [r7, #0]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d001      	beq.n	80045ce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e036      	b.n	800463c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d008      	beq.n	80045ec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045da:	4b1b      	ldr	r3, [pc, #108]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80045dc:	689b      	ldr	r3, [r3, #8]
 80045de:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	4918      	ldr	r1, [pc, #96]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80045e8:	4313      	orrs	r3, r2
 80045ea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0308 	and.w	r3, r3, #8
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d009      	beq.n	800460c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045f8:	4b13      	ldr	r3, [pc, #76]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	00db      	lsls	r3, r3, #3
 8004606:	4910      	ldr	r1, [pc, #64]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004608:	4313      	orrs	r3, r2
 800460a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800460c:	f000 f824 	bl	8004658 <HAL_RCC_GetSysClockFreq>
 8004610:	4602      	mov	r2, r0
 8004612:	4b0d      	ldr	r3, [pc, #52]	@ (8004648 <HAL_RCC_ClockConfig+0x1f0>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	091b      	lsrs	r3, r3, #4
 8004618:	f003 030f 	and.w	r3, r3, #15
 800461c:	490b      	ldr	r1, [pc, #44]	@ (800464c <HAL_RCC_ClockConfig+0x1f4>)
 800461e:	5ccb      	ldrb	r3, [r1, r3]
 8004620:	f003 031f 	and.w	r3, r3, #31
 8004624:	fa22 f303 	lsr.w	r3, r2, r3
 8004628:	4a09      	ldr	r2, [pc, #36]	@ (8004650 <HAL_RCC_ClockConfig+0x1f8>)
 800462a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800462c:	4b09      	ldr	r3, [pc, #36]	@ (8004654 <HAL_RCC_ClockConfig+0x1fc>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4618      	mov	r0, r3
 8004632:	f7fe f903 	bl	800283c <HAL_InitTick>
 8004636:	4603      	mov	r3, r0
 8004638:	72fb      	strb	r3, [r7, #11]

  return status;
 800463a:	7afb      	ldrb	r3, [r7, #11]
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}
 8004644:	40022000 	.word	0x40022000
 8004648:	40021000 	.word	0x40021000
 800464c:	08009150 	.word	0x08009150
 8004650:	20000008 	.word	0x20000008
 8004654:	2000000c 	.word	0x2000000c

08004658 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004658:	b480      	push	{r7}
 800465a:	b089      	sub	sp, #36	@ 0x24
 800465c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
 8004662:	2300      	movs	r3, #0
 8004664:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004666:	4b3e      	ldr	r3, [pc, #248]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004670:	4b3b      	ldr	r3, [pc, #236]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f003 0303 	and.w	r3, r3, #3
 8004678:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x34>
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	2b0c      	cmp	r3, #12
 8004684:	d121      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2b01      	cmp	r3, #1
 800468a:	d11e      	bne.n	80046ca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800468c:	4b34      	ldr	r3, [pc, #208]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d107      	bne.n	80046a8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004698:	4b31      	ldr	r3, [pc, #196]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 800469a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800469e:	0a1b      	lsrs	r3, r3, #8
 80046a0:	f003 030f 	and.w	r3, r3, #15
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e005      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80046a8:	4b2d      	ldr	r3, [pc, #180]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	091b      	lsrs	r3, r3, #4
 80046ae:	f003 030f 	and.w	r3, r3, #15
 80046b2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80046b4:	4a2b      	ldr	r2, [pc, #172]	@ (8004764 <HAL_RCC_GetSysClockFreq+0x10c>)
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80046bc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10d      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80046c4:	69fb      	ldr	r3, [r7, #28]
 80046c6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b04      	cmp	r3, #4
 80046ce:	d102      	bne.n	80046d6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80046d0:	4b25      	ldr	r3, [pc, #148]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x110>)
 80046d2:	61bb      	str	r3, [r7, #24]
 80046d4:	e004      	b.n	80046e0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	2b08      	cmp	r3, #8
 80046da:	d101      	bne.n	80046e0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80046dc:	4b23      	ldr	r3, [pc, #140]	@ (800476c <HAL_RCC_GetSysClockFreq+0x114>)
 80046de:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0c      	cmp	r3, #12
 80046e4:	d134      	bne.n	8004750 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80046e6:	4b1e      	ldr	r3, [pc, #120]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d003      	beq.n	80046fe <HAL_RCC_GetSysClockFreq+0xa6>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	2b03      	cmp	r3, #3
 80046fa:	d003      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0xac>
 80046fc:	e005      	b.n	800470a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80046fe:	4b1a      	ldr	r3, [pc, #104]	@ (8004768 <HAL_RCC_GetSysClockFreq+0x110>)
 8004700:	617b      	str	r3, [r7, #20]
      break;
 8004702:	e005      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004704:	4b19      	ldr	r3, [pc, #100]	@ (800476c <HAL_RCC_GetSysClockFreq+0x114>)
 8004706:	617b      	str	r3, [r7, #20]
      break;
 8004708:	e002      	b.n	8004710 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800470a:	69fb      	ldr	r3, [r7, #28]
 800470c:	617b      	str	r3, [r7, #20]
      break;
 800470e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004710:	4b13      	ldr	r3, [pc, #76]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	091b      	lsrs	r3, r3, #4
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	3301      	adds	r3, #1
 800471c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800471e:	4b10      	ldr	r3, [pc, #64]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	0a1b      	lsrs	r3, r3, #8
 8004724:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	fb03 f202 	mul.w	r2, r3, r2
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004736:	4b0a      	ldr	r3, [pc, #40]	@ (8004760 <HAL_RCC_GetSysClockFreq+0x108>)
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	0e5b      	lsrs	r3, r3, #25
 800473c:	f003 0303 	and.w	r3, r3, #3
 8004740:	3301      	adds	r3, #1
 8004742:	005b      	lsls	r3, r3, #1
 8004744:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	fbb2 f3f3 	udiv	r3, r2, r3
 800474e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004750:	69bb      	ldr	r3, [r7, #24]
}
 8004752:	4618      	mov	r0, r3
 8004754:	3724      	adds	r7, #36	@ 0x24
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
 800475e:	bf00      	nop
 8004760:	40021000 	.word	0x40021000
 8004764:	08009160 	.word	0x08009160
 8004768:	00f42400 	.word	0x00f42400
 800476c:	007a1200 	.word	0x007a1200

08004770 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004778:	2300      	movs	r3, #0
 800477a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800477c:	4b2a      	ldr	r3, [pc, #168]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004788:	f7ff f9ee 	bl	8003b68 <HAL_PWREx_GetVoltageRange>
 800478c:	6178      	str	r0, [r7, #20]
 800478e:	e014      	b.n	80047ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004790:	4b25      	ldr	r3, [pc, #148]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004792:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004794:	4a24      	ldr	r2, [pc, #144]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004796:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800479a:	6593      	str	r3, [r2, #88]	@ 0x58
 800479c:	4b22      	ldr	r3, [pc, #136]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047a4:	60fb      	str	r3, [r7, #12]
 80047a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80047a8:	f7ff f9de 	bl	8003b68 <HAL_PWREx_GetVoltageRange>
 80047ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80047ae:	4b1e      	ldr	r3, [pc, #120]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004828 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80047b4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80047b8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80047c0:	d10b      	bne.n	80047da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b80      	cmp	r3, #128	@ 0x80
 80047c6:	d919      	bls.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2ba0      	cmp	r3, #160	@ 0xa0
 80047cc:	d902      	bls.n	80047d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047ce:	2302      	movs	r3, #2
 80047d0:	613b      	str	r3, [r7, #16]
 80047d2:	e013      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d4:	2301      	movs	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
 80047d8:	e010      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2b80      	cmp	r3, #128	@ 0x80
 80047de:	d902      	bls.n	80047e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047e0:	2303      	movs	r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e00a      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b80      	cmp	r3, #128	@ 0x80
 80047ea:	d102      	bne.n	80047f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047ec:	2302      	movs	r3, #2
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	e004      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b70      	cmp	r3, #112	@ 0x70
 80047f6:	d101      	bne.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047f8:	2301      	movs	r3, #1
 80047fa:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047fc:	4b0b      	ldr	r3, [pc, #44]	@ (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f023 0207 	bic.w	r2, r3, #7
 8004804:	4909      	ldr	r1, [pc, #36]	@ (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800480c:	4b07      	ldr	r3, [pc, #28]	@ (800482c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	429a      	cmp	r2, r3
 8004818:	d001      	beq.n	800481e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40021000 	.word	0x40021000
 800482c:	40022000 	.word	0x40022000

08004830 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8004830:	b480      	push	{r7}
 8004832:	b085      	sub	sp, #20
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	460b      	mov	r3, r1
 800483a:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8004844:	e007      	b.n	8004856 <cavlFindExtremum+0x26>
    {
        result = c;
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 800484a:	78fb      	ldrb	r3, [r7, #3]
 800484c:	68ba      	ldr	r2, [r7, #8]
 800484e:	009b      	lsls	r3, r3, #2
 8004850:	4413      	add	r3, r2
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1f4      	bne.n	8004846 <cavlFindExtremum+0x16>
    }
    return result;
 800485c:	68fb      	ldr	r3, [r7, #12]
}
 800485e:	4618      	mov	r0, r3
 8004860:	3714      	adds	r7, #20
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
	...

0800486c <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	460b      	mov	r3, r1
 8004876:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d014      	beq.n	80048a8 <cavlPrivateRotate+0x3c>
 800487e:	78fb      	ldrb	r3, [r7, #3]
 8004880:	f083 0301 	eor.w	r3, r3, #1
 8004884:	b2db      	uxtb	r3, r3
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	009b      	lsls	r3, r3, #2
 800488a:	4413      	add	r3, r2
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d00a      	beq.n	80048a8 <cavlPrivateRotate+0x3c>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800489c:	db04      	blt.n	80048a8 <cavlPrivateRotate+0x3c>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80048a4:	2b01      	cmp	r3, #1
 80048a6:	dd05      	ble.n	80048b4 <cavlPrivateRotate+0x48>
 80048a8:	4b2a      	ldr	r3, [pc, #168]	@ (8004954 <cavlPrivateRotate+0xe8>)
 80048aa:	4a2b      	ldr	r2, [pc, #172]	@ (8004958 <cavlPrivateRotate+0xec>)
 80048ac:	2162      	movs	r1, #98	@ 0x62
 80048ae:	482b      	ldr	r0, [pc, #172]	@ (800495c <cavlPrivateRotate+0xf0>)
 80048b0:	f002 faca 	bl	8006e48 <__assert_func>
    Cavl* const z = x->lr[!r];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f083 0301 	eor.w	r3, r3, #1
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	009b      	lsls	r3, r3, #2
 80048c0:	4413      	add	r3, r2
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d00e      	beq.n	80048ec <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4299      	cmp	r1, r3
 80048dc:	bf0c      	ite	eq
 80048de:	2301      	moveq	r3, #1
 80048e0:	2300      	movne	r3, #0
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	4413      	add	r3, r2
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	601a      	str	r2, [r3, #0]
    x->up     = z;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	78fa      	ldrb	r2, [r7, #3]
 80048fe:	f082 0201 	eor.w	r2, r2, #1
 8004902:	b2d2      	uxtb	r2, r2
 8004904:	4610      	mov	r0, r2
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	009b      	lsls	r3, r3, #2
 800490a:	4413      	add	r3, r2
 800490c:	685a      	ldr	r2, [r3, #4]
 800490e:	6879      	ldr	r1, [r7, #4]
 8004910:	0083      	lsls	r3, r0, #2
 8004912:	440b      	add	r3, r1
 8004914:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8004916:	78fb      	ldrb	r3, [r7, #3]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	009b      	lsls	r3, r3, #2
 8004922:	4413      	add	r3, r2
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d009      	beq.n	800493e <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f083 0301 	eor.w	r3, r3, #1
 8004930:	b2db      	uxtb	r3, r3
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	4413      	add	r3, r2
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800493e:	78fb      	ldrb	r3, [r7, #3]
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	009b      	lsls	r3, r3, #2
 8004944:	4413      	add	r3, r2
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	605a      	str	r2, [r3, #4]
}
 800494a:	bf00      	nop
 800494c:	3710      	adds	r7, #16
 800494e:	46bd      	mov	sp, r7
 8004950:	bd80      	pop	{r7, pc}
 8004952:	bf00      	nop
 8004954:	080085dc 	.word	0x080085dc
 8004958:	080094fc 	.word	0x080094fc
 800495c:	08008634 	.word	0x08008634

08004960 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	460b      	mov	r3, r1
 800496a:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <cavlPrivateAdjustBalance+0x28>
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800497c:	db04      	blt.n	8004988 <cavlPrivateAdjustBalance+0x28>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004984:	2b01      	cmp	r3, #1
 8004986:	dd05      	ble.n	8004994 <cavlPrivateAdjustBalance+0x34>
 8004988:	4b61      	ldr	r3, [pc, #388]	@ (8004b10 <cavlPrivateAdjustBalance+0x1b0>)
 800498a:	4a62      	ldr	r2, [pc, #392]	@ (8004b14 <cavlPrivateAdjustBalance+0x1b4>)
 800498c:	2177      	movs	r1, #119	@ 0x77
 800498e:	4862      	ldr	r0, [pc, #392]	@ (8004b18 <cavlPrivateAdjustBalance+0x1b8>)
 8004990:	f002 fa5a 	bl	8006e48 <__assert_func>
    Cavl*        out    = x;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	78fa      	ldrb	r2, [r7, #3]
 80049a2:	2a00      	cmp	r2, #0
 80049a4:	d001      	beq.n	80049aa <cavlPrivateAdjustBalance+0x4a>
 80049a6:	2201      	movs	r2, #1
 80049a8:	e000      	b.n	80049ac <cavlPrivateAdjustBalance+0x4c>
 80049aa:	22ff      	movs	r2, #255	@ 0xff
 80049ac:	4413      	add	r3, r2
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 80049b2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80049b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ba:	db04      	blt.n	80049c6 <cavlPrivateAdjustBalance+0x66>
 80049bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80049c0:	2b01      	cmp	r3, #1
 80049c2:	f340 809c 	ble.w	8004afe <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 80049c6:	7cfb      	ldrb	r3, [r7, #19]
 80049c8:	09db      	lsrs	r3, r3, #7
 80049ca:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 80049cc:	7cbb      	ldrb	r3, [r7, #18]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <cavlPrivateAdjustBalance+0x76>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e001      	b.n	80049da <cavlPrivateAdjustBalance+0x7a>
 80049d6:	f04f 33ff 	mov.w	r3, #4294967295
 80049da:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 80049dc:	7cbb      	ldrb	r3, [r7, #18]
 80049de:	f083 0301 	eor.w	r3, r3, #1
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	687a      	ldr	r2, [r7, #4]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d105      	bne.n	8004a00 <cavlPrivateAdjustBalance+0xa0>
 80049f4:	4b49      	ldr	r3, [pc, #292]	@ (8004b1c <cavlPrivateAdjustBalance+0x1bc>)
 80049f6:	4a47      	ldr	r2, [pc, #284]	@ (8004b14 <cavlPrivateAdjustBalance+0x1b4>)
 80049f8:	217f      	movs	r1, #127	@ 0x7f
 80049fa:	4847      	ldr	r0, [pc, #284]	@ (8004b18 <cavlPrivateAdjustBalance+0x1b8>)
 80049fc:	f002 fa24 	bl	8006e48 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004a06:	461a      	mov	r2, r3
 8004a08:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004a0c:	fb02 f303 	mul.w	r3, r2, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	dc1c      	bgt.n	8004a4e <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8004a18:	7cbb      	ldrb	r3, [r7, #18]
 8004a1a:	4619      	mov	r1, r3
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	f7ff ff25 	bl	800486c <cavlPrivateRotate>
            if (0 == z->bf)
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d109      	bne.n	8004a40 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8004a2c:	7c7b      	ldrb	r3, [r7, #17]
 8004a2e:	425b      	negs	r3, r3
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	b25a      	sxtb	r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	7c7a      	ldrb	r2, [r7, #17]
 8004a3c:	731a      	strb	r2, [r3, #12]
    {
 8004a3e:	e061      	b.n	8004b04 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2200      	movs	r2, #0
 8004a44:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	731a      	strb	r2, [r3, #12]
    {
 8004a4c:	e05a      	b.n	8004b04 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8004a4e:	7cbb      	ldrb	r3, [r7, #18]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	009b      	lsls	r3, r3, #2
 8004a54:	4413      	add	r3, r2
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d105      	bne.n	8004a6c <cavlPrivateAdjustBalance+0x10c>
 8004a60:	4b2f      	ldr	r3, [pc, #188]	@ (8004b20 <cavlPrivateAdjustBalance+0x1c0>)
 8004a62:	4a2c      	ldr	r2, [pc, #176]	@ (8004b14 <cavlPrivateAdjustBalance+0x1b4>)
 8004a64:	2192      	movs	r1, #146	@ 0x92
 8004a66:	482c      	ldr	r0, [pc, #176]	@ (8004b18 <cavlPrivateAdjustBalance+0x1b8>)
 8004a68:	f002 f9ee 	bl	8006e48 <__assert_func>
            out = y;
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8004a70:	7cbb      	ldrb	r3, [r7, #18]
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	bf14      	ite	ne
 8004a76:	2301      	movne	r3, #1
 8004a78:	2300      	moveq	r3, #0
 8004a7a:	b2db      	uxtb	r3, r3
 8004a7c:	f083 0301 	eor.w	r3, r3, #1
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	f003 0301 	and.w	r3, r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	4619      	mov	r1, r3
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f7ff feee 	bl	800486c <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8004a90:	7cbb      	ldrb	r3, [r7, #18]
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f7ff fee9 	bl	800486c <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004aa6:	fb02 f303 	mul.w	r3, r2, r3
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	da09      	bge.n	8004ac2 <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	7c7a      	ldrb	r2, [r7, #17]
 8004ab2:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2200      	movs	r2, #0
 8004abe:	731a      	strb	r2, [r3, #12]
    {
 8004ac0:	e020      	b.n	8004b04 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004ac8:	461a      	mov	r2, r3
 8004aca:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8004ace:	fb02 f303 	mul.w	r3, r2, r3
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	dd0c      	ble.n	8004af0 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8004ae2:	7c7b      	ldrb	r3, [r7, #17]
 8004ae4:	425b      	negs	r3, r3
 8004ae6:	b2db      	uxtb	r3, r3
 8004ae8:	b25a      	sxtb	r2, r3
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	731a      	strb	r2, [r3, #12]
    {
 8004aee:	e009      	b.n	8004b04 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2200      	movs	r2, #0
 8004af4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	731a      	strb	r2, [r3, #12]
    {
 8004afc:	e002      	b.n	8004b04 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	7cfa      	ldrb	r2, [r7, #19]
 8004b02:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8004b04:	697b      	ldr	r3, [r7, #20]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3718      	adds	r7, #24
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}
 8004b0e:	bf00      	nop
 8004b10:	08008650 	.word	0x08008650
 8004b14:	080094e0 	.word	0x080094e0
 8004b18:	08008634 	.word	0x08008634
 8004b1c:	08008688 	.word	0x08008688
 8004b20:	0800869c 	.word	0x0800869c

08004b24 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d004      	beq.n	8004b3c <cavlPrivateRetraceOnGrowth+0x18>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <cavlPrivateRetraceOnGrowth+0x24>
 8004b3c:	4b23      	ldr	r3, [pc, #140]	@ (8004bcc <cavlPrivateRetraceOnGrowth+0xa8>)
 8004b3e:	4a24      	ldr	r2, [pc, #144]	@ (8004bd0 <cavlPrivateRetraceOnGrowth+0xac>)
 8004b40:	21b5      	movs	r1, #181	@ 0xb5
 8004b42:	4824      	ldr	r0, [pc, #144]	@ (8004bd4 <cavlPrivateRetraceOnGrowth+0xb0>)
 8004b44:	f002 f980 	bl	8006e48 <__assert_func>
    Cavl* c = added;      // Child
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8004b52:	e023      	b.n	8004b9c <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	697a      	ldr	r2, [r7, #20]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	bf0c      	ite	eq
 8004b5e:	2301      	moveq	r3, #1
 8004b60:	2300      	movne	r3, #0
 8004b62:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8004b64:	7bfb      	ldrb	r3, [r7, #15]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	009b      	lsls	r3, r3, #2
 8004b6a:	4413      	add	r3, r2
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d005      	beq.n	8004b80 <cavlPrivateRetraceOnGrowth+0x5c>
 8004b74:	4b18      	ldr	r3, [pc, #96]	@ (8004bd8 <cavlPrivateRetraceOnGrowth+0xb4>)
 8004b76:	4a16      	ldr	r2, [pc, #88]	@ (8004bd0 <cavlPrivateRetraceOnGrowth+0xac>)
 8004b78:	21bb      	movs	r1, #187	@ 0xbb
 8004b7a:	4816      	ldr	r0, [pc, #88]	@ (8004bd4 <cavlPrivateRetraceOnGrowth+0xb0>)
 8004b7c:	f002 f964 	bl	8006e48 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8004b80:	7bfb      	ldrb	r3, [r7, #15]
 8004b82:	4619      	mov	r1, r3
 8004b84:	6938      	ldr	r0, [r7, #16]
 8004b86:	f7ff feeb 	bl	8004960 <cavlPrivateAdjustBalance>
 8004b8a:	6178      	str	r0, [r7, #20]
        p = c->up;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d003      	beq.n	8004ba4 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1d8      	bne.n	8004b54 <cavlPrivateRetraceOnGrowth+0x30>
 8004ba2:	e000      	b.n	8004ba6 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 8004ba4:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d105      	bne.n	8004bb8 <cavlPrivateRetraceOnGrowth+0x94>
 8004bac:	4b0b      	ldr	r3, [pc, #44]	@ (8004bdc <cavlPrivateRetraceOnGrowth+0xb8>)
 8004bae:	4a08      	ldr	r2, [pc, #32]	@ (8004bd0 <cavlPrivateRetraceOnGrowth+0xac>)
 8004bb0:	21c3      	movs	r1, #195	@ 0xc3
 8004bb2:	4808      	ldr	r0, [pc, #32]	@ (8004bd4 <cavlPrivateRetraceOnGrowth+0xb0>)
 8004bb4:	f002 f948 	bl	8006e48 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <cavlPrivateRetraceOnGrowth+0x9e>
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	e000      	b.n	8004bc4 <cavlPrivateRetraceOnGrowth+0xa0>
 8004bc2:	2300      	movs	r3, #0
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	3718      	adds	r7, #24
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	080086b0 	.word	0x080086b0
 8004bd0:	080094c4 	.word	0x080094c4
 8004bd4:	08008634 	.word	0x08008634
 8004bd8:	080086dc 	.word	0x080086dc
 8004bdc:	080086ec 	.word	0x080086ec

08004be0 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	@ 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8004bee:	2300      	movs	r3, #0
 8004bf0:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d065      	beq.n	8004cc4 <cavlSearch+0xe4>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d062      	beq.n	8004cc4 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8004c08:	e02f      	b.n	8004c6a <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4611      	mov	r1, r2
 8004c12:	68b8      	ldr	r0, [r7, #8]
 8004c14:	4798      	blx	r3
 8004c16:	4603      	mov	r3, r0
 8004c18:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8004c1a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d103      	bne.n	8004c2a <cavlSearch+0x4a>
            {
                out = *n;
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8004c28:	e023      	b.n	8004c72 <cavlSearch+0x92>
            }
            up = *n;
 8004c2a:	69fb      	ldr	r3, [r7, #28]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8004c30:	69fb      	ldr	r3, [r7, #28]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	bfcc      	ite	gt
 8004c3c:	2301      	movgt	r3, #1
 8004c3e:	2300      	movle	r3, #0
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	3304      	adds	r3, #4
 8004c48:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d00b      	beq.n	8004c6a <cavlSearch+0x8a>
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6a3a      	ldr	r2, [r7, #32]
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d005      	beq.n	8004c6a <cavlSearch+0x8a>
 8004c5e:	4b1c      	ldr	r3, [pc, #112]	@ (8004cd0 <cavlSearch+0xf0>)
 8004c60:	4a1c      	ldr	r2, [pc, #112]	@ (8004cd4 <cavlSearch+0xf4>)
 8004c62:	21db      	movs	r1, #219	@ 0xdb
 8004c64:	481c      	ldr	r0, [pc, #112]	@ (8004cd8 <cavlSearch+0xf8>)
 8004c66:	f002 f8ef 	bl	8006e48 <__assert_func>
        while (*n != NULL)
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1cb      	bne.n	8004c0a <cavlSearch+0x2a>
        }
        if (NULL == out)
 8004c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d125      	bne.n	8004cc4 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d004      	beq.n	8004c88 <cavlSearch+0xa8>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	68b8      	ldr	r0, [r7, #8]
 8004c82:	4798      	blx	r3
 8004c84:	4603      	mov	r3, r0
 8004c86:	e000      	b.n	8004c8a <cavlSearch+0xaa>
 8004c88:	2300      	movs	r3, #0
 8004c8a:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d018      	beq.n	8004cc4 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c96:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8004ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ca6:	6a3a      	ldr	r2, [r7, #32]
 8004ca8:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8004caa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cac:	2200      	movs	r2, #0
 8004cae:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8004cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb2:	f7ff ff37 	bl	8004b24 <cavlPrivateRetraceOnGrowth>
 8004cb6:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <cavlSearch+0xe4>
                {
                    *root = rt;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	697a      	ldr	r2, [r7, #20]
 8004cc2:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3728      	adds	r7, #40	@ 0x28
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	08008700 	.word	0x08008700
 8004cd4:	080094b8 	.word	0x080094b8
 8004cd8:	08008634 	.word	0x08008634

08004cdc <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	f000 8116 	beq.w	8004f1a <cavlRemove+0x23e>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	f000 8112 	beq.w	8004f1a <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d105      	bne.n	8004d0a <cavlRemove+0x2e>
 8004cfe:	4b89      	ldr	r3, [pc, #548]	@ (8004f24 <cavlRemove+0x248>)
 8004d00:	4a89      	ldr	r2, [pc, #548]	@ (8004f28 <cavlRemove+0x24c>)
 8004d02:	21f6      	movs	r1, #246	@ 0xf6
 8004d04:	4889      	ldr	r0, [pc, #548]	@ (8004f2c <cavlRemove+0x250>)
 8004d06:	f002 f89f 	bl	8006e48 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10a      	bne.n	8004d28 <cavlRemove+0x4c>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d005      	beq.n	8004d28 <cavlRemove+0x4c>
 8004d1c:	4b84      	ldr	r3, [pc, #528]	@ (8004f30 <cavlRemove+0x254>)
 8004d1e:	4a82      	ldr	r2, [pc, #520]	@ (8004f28 <cavlRemove+0x24c>)
 8004d20:	21f7      	movs	r1, #247	@ 0xf7
 8004d22:	4882      	ldr	r0, [pc, #520]	@ (8004f2c <cavlRemove+0x250>)
 8004d24:	f002 f890 	bl	8006e48 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d073      	beq.n	8004e20 <cavlRemove+0x144>
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d06f      	beq.n	8004e20 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2100      	movs	r1, #0
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7ff fd72 	bl	8004830 <cavlFindExtremum>
 8004d4c:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d007      	beq.n	8004d64 <cavlRemove+0x88>
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d103      	bne.n	8004d64 <cavlRemove+0x88>
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d105      	bne.n	8004d70 <cavlRemove+0x94>
 8004d64:	4b73      	ldr	r3, [pc, #460]	@ (8004f34 <cavlRemove+0x258>)
 8004d66:	4a70      	ldr	r2, [pc, #448]	@ (8004f28 <cavlRemove+0x24c>)
 8004d68:	21ff      	movs	r1, #255	@ 0xff
 8004d6a:	4870      	ldr	r0, [pc, #448]	@ (8004f2c <cavlRemove+0x250>)
 8004d6c:	f002 f86c 	bl	8006e48 <__assert_func>
            re->bf        = node->bf;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685a      	ldr	r2, [r3, #4]
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	697a      	ldr	r2, [r7, #20]
 8004d88:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	683a      	ldr	r2, [r7, #0]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d025      	beq.n	8004de0 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d006      	beq.n	8004db2 <cavlRemove+0xd6>
 8004da4:	4b64      	ldr	r3, [pc, #400]	@ (8004f38 <cavlRemove+0x25c>)
 8004da6:	4a60      	ldr	r2, [pc, #384]	@ (8004f28 <cavlRemove+0x24c>)
 8004da8:	f44f 7183 	mov.w	r1, #262	@ 0x106
 8004dac:	485f      	ldr	r0, [pc, #380]	@ (8004f2c <cavlRemove+0x250>)
 8004dae:	f002 f84b 	bl	8006e48 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	689a      	ldr	r2, [r3, #8]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d003      	beq.n	8004dca <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 8004dc2:	69fb      	ldr	r3, [r7, #28]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	689a      	ldr	r2, [r3, #8]
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	601a      	str	r2, [r3, #0]
                r             = false;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	76fb      	strb	r3, [r7, #27]
 8004dde:	e003      	b.n	8004de8 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8004de0:	697b      	ldr	r3, [r7, #20]
 8004de2:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 8004de4:	2301      	movs	r3, #1
 8004de6:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681a      	ldr	r2, [r3, #0]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00f      	beq.n	8004e18 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	6839      	ldr	r1, [r7, #0]
 8004e04:	4299      	cmp	r1, r3
 8004e06:	bf0c      	ite	eq
 8004e08:	2301      	moveq	r3, #1
 8004e0a:	2300      	movne	r3, #0
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	605a      	str	r2, [r3, #4]
        {
 8004e16:	e046      	b.n	8004ea6 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	601a      	str	r2, [r3, #0]
        {
 8004e1e:	e042      	b.n	8004ea6 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8004e34:	7cfb      	ldrb	r3, [r7, #19]
 8004e36:	683a      	ldr	r2, [r7, #0]
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	685b      	ldr	r3, [r3, #4]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d006      	beq.n	8004e50 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 8004e42:	7cfb      	ldrb	r3, [r7, #19]
 8004e44:	683a      	ldr	r2, [r7, #0]
 8004e46:	009b      	lsls	r3, r3, #2
 8004e48:	4413      	add	r3, r2
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	69fa      	ldr	r2, [r7, #28]
 8004e4e:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d020      	beq.n	8004e98 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	689b      	ldr	r3, [r3, #8]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	bf0c      	ite	eq
 8004e60:	2301      	moveq	r3, #1
 8004e62:	2300      	movne	r3, #0
 8004e64:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8004e66:	7cfb      	ldrb	r3, [r7, #19]
 8004e68:	7ef8      	ldrb	r0, [r7, #27]
 8004e6a:	683a      	ldr	r2, [r7, #0]
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	4413      	add	r3, r2
 8004e70:	685a      	ldr	r2, [r3, #4]
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	0083      	lsls	r3, r0, #2
 8004e76:	440b      	add	r3, r1
 8004e78:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8004e7a:	7efb      	ldrb	r3, [r7, #27]
 8004e7c:	69fa      	ldr	r2, [r7, #28]
 8004e7e:	009b      	lsls	r3, r3, #2
 8004e80:	4413      	add	r3, r2
 8004e82:	685b      	ldr	r3, [r3, #4]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d00e      	beq.n	8004ea6 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8004e88:	7efb      	ldrb	r3, [r7, #27]
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	69fa      	ldr	r2, [r7, #28]
 8004e94:	601a      	str	r2, [r3, #0]
 8004e96:	e006      	b.n	8004ea6 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8004e98:	7cfb      	ldrb	r3, [r7, #19]
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	4413      	add	r3, r2
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 8004ea6:	69fb      	ldr	r3, [r7, #28]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d036      	beq.n	8004f1a <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 8004eac:	2300      	movs	r3, #0
 8004eae:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 8004eb0:	7efb      	ldrb	r3, [r7, #27]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	bf14      	ite	ne
 8004eb6:	2301      	movne	r3, #1
 8004eb8:	2300      	moveq	r3, #0
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f083 0301 	eor.w	r3, r3, #1
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	4619      	mov	r1, r3
 8004eca:	69f8      	ldr	r0, [r7, #28]
 8004ecc:	f7ff fd48 	bl	8004960 <cavlPrivateAdjustBalance>
 8004ed0:	60f8      	str	r0, [r7, #12]
                p = c->up;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <cavlRemove+0x21e>
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d008      	beq.n	8004efa <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	bf0c      	ite	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	2300      	movne	r3, #0
 8004ef6:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8004ef8:	e7da      	b.n	8004eb0 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10c      	bne.n	8004f1a <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d106      	bne.n	8004f14 <cavlRemove+0x238>
 8004f06:	4b0d      	ldr	r3, [pc, #52]	@ (8004f3c <cavlRemove+0x260>)
 8004f08:	4a07      	ldr	r2, [pc, #28]	@ (8004f28 <cavlRemove+0x24c>)
 8004f0a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004f0e:	4807      	ldr	r0, [pc, #28]	@ (8004f2c <cavlRemove+0x250>)
 8004f10:	f001 ff9a 	bl	8006e48 <__assert_func>
                *root = c;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68fa      	ldr	r2, [r7, #12]
 8004f18:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8004f1a:	bf00      	nop
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	08008728 	.word	0x08008728
 8004f28:	08009540 	.word	0x08009540
 8004f2c:	08008634 	.word	0x08008634
 8004f30:	08008740 	.word	0x08008740
 8004f34:	08008770 	.word	0x08008770
 8004f38:	080087c0 	.word	0x080087c0
 8004f3c:	080086ec 	.word	0x080086ec

08004f40 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8004f48:	687b      	ldr	r3, [r7, #4]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	370c      	adds	r7, #12
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f54:	4770      	bx	lr
	...

08004f58 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	460a      	mov	r2, r1
 8004f62:	80fb      	strh	r3, [r7, #6]
 8004f64:	4613      	mov	r3, r2
 8004f66:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8004f68:	88fb      	ldrh	r3, [r7, #6]
 8004f6a:	021b      	lsls	r3, r3, #8
 8004f6c:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 8004f6e:	88fb      	ldrh	r3, [r7, #6]
 8004f70:	0a1b      	lsrs	r3, r3, #8
 8004f72:	b299      	uxth	r1, r3
 8004f74:	797b      	ldrb	r3, [r7, #5]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	404b      	eors	r3, r1
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	4905      	ldr	r1, [pc, #20]	@ (8004f94 <crcAddByte+0x3c>)
 8004f80:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8004f84:	4053      	eors	r3, r2
 8004f86:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	370c      	adds	r7, #12
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr
 8004f94:	08009190 	.word	0x08009190

08004f98 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d108      	bne.n	8004fbe <crcAdd+0x26>
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <crcAdd+0x26>
 8004fb2:	4b12      	ldr	r3, [pc, #72]	@ (8004ffc <crcAdd+0x64>)
 8004fb4:	4a12      	ldr	r2, [pc, #72]	@ (8005000 <crcAdd+0x68>)
 8004fb6:	2189      	movs	r1, #137	@ 0x89
 8004fb8:	4812      	ldr	r0, [pc, #72]	@ (8005004 <crcAdd+0x6c>)
 8004fba:	f001 ff45 	bl	8006e48 <__assert_func>
    TransferCRC    out = crc;
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	617b      	str	r3, [r7, #20]
 8004fca:	e00e      	b.n	8004fea <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	781a      	ldrb	r2, [r3, #0]
 8004fd0:	8bfb      	ldrh	r3, [r7, #30]
 8004fd2:	4611      	mov	r1, r2
 8004fd4:	4618      	mov	r0, r3
 8004fd6:	f7ff ffbf 	bl	8004f58 <crcAddByte>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	83fb      	strh	r3, [r7, #30]
        ++p;
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d3ec      	bcc.n	8004fcc <crcAdd+0x34>
    }
    return out;
 8004ff2:	8bfb      	ldrh	r3, [r7, #30]
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	080087d0 	.word	0x080087d0
 8005000:	0800940c 	.word	0x0800940c
 8005004:	080087f8 	.word	0x080087f8

08005008 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	460a      	mov	r2, r1
 8005012:	80fb      	strh	r3, [r7, #6]
 8005014:	4613      	mov	r3, r2
 8005016:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8005018:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800501c:	2b00      	cmp	r3, #0
 800501e:	da05      	bge.n	800502c <txMakeMessageSessionSpecifier+0x24>
 8005020:	4b0e      	ldr	r3, [pc, #56]	@ (800505c <txMakeMessageSessionSpecifier+0x54>)
 8005022:	4a0f      	ldr	r2, [pc, #60]	@ (8005060 <txMakeMessageSessionSpecifier+0x58>)
 8005024:	21ab      	movs	r1, #171	@ 0xab
 8005026:	480f      	ldr	r0, [pc, #60]	@ (8005064 <txMakeMessageSessionSpecifier+0x5c>)
 8005028:	f001 ff0e 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 800502c:	88fb      	ldrh	r3, [r7, #6]
 800502e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005032:	d305      	bcc.n	8005040 <txMakeMessageSessionSpecifier+0x38>
 8005034:	4b0c      	ldr	r3, [pc, #48]	@ (8005068 <txMakeMessageSessionSpecifier+0x60>)
 8005036:	4a0a      	ldr	r2, [pc, #40]	@ (8005060 <txMakeMessageSessionSpecifier+0x58>)
 8005038:	21ac      	movs	r1, #172	@ 0xac
 800503a:	480a      	ldr	r0, [pc, #40]	@ (8005064 <txMakeMessageSessionSpecifier+0x5c>)
 800503c:	f001 ff04 	bl	8006e48 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8005040:	88fb      	ldrh	r3, [r7, #6]
 8005042:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8005046:	b29b      	uxth	r3, r3
 8005048:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 800504a:	797a      	ldrb	r2, [r7, #5]
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	021b      	lsls	r3, r3, #8
 8005050:	4313      	orrs	r3, r2
}
 8005052:	4618      	mov	r0, r3
 8005054:	3710      	adds	r7, #16
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	08008810 	.word	0x08008810
 8005060:	08009414 	.word	0x08009414
 8005064:	080087f8 	.word	0x080087f8
 8005068:	08008824 	.word	0x08008824

0800506c <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 800506c:	b590      	push	{r4, r7, lr}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	461a      	mov	r2, r3
 800507a:	4623      	mov	r3, r4
 800507c:	80fb      	strh	r3, [r7, #6]
 800507e:	4603      	mov	r3, r0
 8005080:	717b      	strb	r3, [r7, #5]
 8005082:	460b      	mov	r3, r1
 8005084:	713b      	strb	r3, [r7, #4]
 8005086:	4613      	mov	r3, r2
 8005088:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 800508a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800508e:	2b00      	cmp	r3, #0
 8005090:	da05      	bge.n	800509e <txMakeServiceSessionSpecifier+0x32>
 8005092:	4b17      	ldr	r3, [pc, #92]	@ (80050f0 <txMakeServiceSessionSpecifier+0x84>)
 8005094:	4a17      	ldr	r2, [pc, #92]	@ (80050f4 <txMakeServiceSessionSpecifier+0x88>)
 8005096:	21b6      	movs	r1, #182	@ 0xb6
 8005098:	4817      	ldr	r0, [pc, #92]	@ (80050f8 <txMakeServiceSessionSpecifier+0x8c>)
 800509a:	f001 fed5 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 800509e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	da05      	bge.n	80050b2 <txMakeServiceSessionSpecifier+0x46>
 80050a6:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <txMakeServiceSessionSpecifier+0x90>)
 80050a8:	4a12      	ldr	r2, [pc, #72]	@ (80050f4 <txMakeServiceSessionSpecifier+0x88>)
 80050aa:	21b7      	movs	r1, #183	@ 0xb7
 80050ac:	4812      	ldr	r0, [pc, #72]	@ (80050f8 <txMakeServiceSessionSpecifier+0x8c>)
 80050ae:	f001 fecb 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 80050b2:	88fb      	ldrh	r3, [r7, #6]
 80050b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050b8:	d305      	bcc.n	80050c6 <txMakeServiceSessionSpecifier+0x5a>
 80050ba:	4b11      	ldr	r3, [pc, #68]	@ (8005100 <txMakeServiceSessionSpecifier+0x94>)
 80050bc:	4a0d      	ldr	r2, [pc, #52]	@ (80050f4 <txMakeServiceSessionSpecifier+0x88>)
 80050be:	21b8      	movs	r1, #184	@ 0xb8
 80050c0:	480d      	ldr	r0, [pc, #52]	@ (80050f8 <txMakeServiceSessionSpecifier+0x8c>)
 80050c2:	f001 fec1 	bl	8006e48 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 80050c6:	793a      	ldrb	r2, [r7, #4]
 80050c8:	78fb      	ldrb	r3, [r7, #3]
 80050ca:	01db      	lsls	r3, r3, #7
 80050cc:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 80050d2:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 80050d4:	797a      	ldrb	r2, [r7, #5]
 80050d6:	2a00      	cmp	r2, #0
 80050d8:	d002      	beq.n	80050e0 <txMakeServiceSessionSpecifier+0x74>
 80050da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050de:	e000      	b.n	80050e2 <txMakeServiceSessionSpecifier+0x76>
 80050e0:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 80050e2:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 80050e4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd90      	pop	{r4, r7, pc}
 80050f0:	08008810 	.word	0x08008810
 80050f4:	08009434 	.word	0x08009434
 80050f8:	080087f8 	.word	0x080087f8
 80050fc:	08008838 	.word	0x08008838
 8005100:	0800884c 	.word	0x0800884c

08005104 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 800510c:	2340      	movs	r3, #64	@ 0x40
 800510e:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8005110:	2300      	movs	r3, #0
 8005112:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b07      	cmp	r3, #7
 8005118:	d802      	bhi.n	8005120 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 800511a:	2308      	movs	r3, #8
 800511c:	60fb      	str	r3, [r7, #12]
 800511e:	e014      	b.n	800514a <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	429a      	cmp	r2, r3
 8005126:	d808      	bhi.n	800513a <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8005128:	4a0c      	ldr	r2, [pc, #48]	@ (800515c <adjustPresentationLayerMTU+0x58>)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4413      	add	r3, r2
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	461a      	mov	r2, r3
 8005132:	4b0b      	ldr	r3, [pc, #44]	@ (8005160 <adjustPresentationLayerMTU+0x5c>)
 8005134:	5c9b      	ldrb	r3, [r3, r2]
 8005136:	60fb      	str	r3, [r7, #12]
 8005138:	e007      	b.n	800514a <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 800513a:	4a08      	ldr	r2, [pc, #32]	@ (800515c <adjustPresentationLayerMTU+0x58>)
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	4413      	add	r3, r2
 8005140:	781b      	ldrb	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <adjustPresentationLayerMTU+0x5c>)
 8005146:	5c9b      	ldrb	r3, [r3, r2]
 8005148:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	3b01      	subs	r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	080093a0 	.word	0x080093a0
 8005160:	08009390 	.word	0x08009390

08005164 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b08a      	sub	sp, #40	@ 0x28
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
 8005170:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d105      	bne.n	8005184 <txMakeCANID+0x20>
 8005178:	4b60      	ldr	r3, [pc, #384]	@ (80052fc <txMakeCANID+0x198>)
 800517a:	4a61      	ldr	r2, [pc, #388]	@ (8005300 <txMakeCANID+0x19c>)
 800517c:	21d8      	movs	r1, #216	@ 0xd8
 800517e:	4861      	ldr	r0, [pc, #388]	@ (8005304 <txMakeCANID+0x1a0>)
 8005180:	f001 fe62 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8005184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005186:	2b00      	cmp	r3, #0
 8005188:	d105      	bne.n	8005196 <txMakeCANID+0x32>
 800518a:	4b5f      	ldr	r3, [pc, #380]	@ (8005308 <txMakeCANID+0x1a4>)
 800518c:	4a5c      	ldr	r2, [pc, #368]	@ (8005300 <txMakeCANID+0x19c>)
 800518e:	21d9      	movs	r1, #217	@ 0xd9
 8005190:	485c      	ldr	r0, [pc, #368]	@ (8005304 <txMakeCANID+0x1a0>)
 8005192:	f001 fe59 	bl	8006e48 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005196:	f06f 0301 	mvn.w	r3, #1
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	785b      	ldrb	r3, [r3, #1]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d157      	bne.n	8005254 <txMakeCANID+0xf0>
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	791b      	ldrb	r3, [r3, #4]
 80051a8:	2bff      	cmp	r3, #255	@ 0xff
 80051aa:	d153      	bne.n	8005254 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 80051b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051b4:	d24e      	bcs.n	8005254 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80051b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	db11      	blt.n	80051e2 <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	885b      	ldrh	r3, [r3, #2]
 80051c2:	78fa      	ldrb	r2, [r7, #3]
 80051c4:	4611      	mov	r1, r2
 80051c6:	4618      	mov	r0, r3
 80051c8:	f7ff ff1e 	bl	8005008 <txMakeMessageSessionSpecifier>
 80051cc:	4603      	mov	r3, r0
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 80051d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	da75      	bge.n	80052c2 <txMakeCANID+0x15e>
 80051d6:	4b4d      	ldr	r3, [pc, #308]	@ (800530c <txMakeCANID+0x1a8>)
 80051d8:	4a49      	ldr	r2, [pc, #292]	@ (8005300 <txMakeCANID+0x19c>)
 80051da:	21e1      	movs	r1, #225	@ 0xe1
 80051dc:	4849      	ldr	r0, [pc, #292]	@ (8005304 <txMakeCANID+0x1a0>)
 80051de:	f001 fe33 	bl	8006e48 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e6:	429a      	cmp	r2, r3
 80051e8:	d830      	bhi.n	800524c <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d108      	bne.n	8005202 <txMakeCANID+0x9e>
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <txMakeCANID+0x9e>
 80051f6:	4b46      	ldr	r3, [pc, #280]	@ (8005310 <txMakeCANID+0x1ac>)
 80051f8:	4a41      	ldr	r2, [pc, #260]	@ (8005300 <txMakeCANID+0x19c>)
 80051fa:	21e5      	movs	r1, #229	@ 0xe5
 80051fc:	4841      	ldr	r0, [pc, #260]	@ (8005304 <txMakeCANID+0x1a0>)
 80051fe:	f001 fe23 	bl	8006e48 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	68b9      	ldr	r1, [r7, #8]
 8005206:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800520a:	f7ff fec5 	bl	8004f98 <crcAdd>
 800520e:	4603      	mov	r3, r0
 8005210:	b2db      	uxtb	r3, r3
 8005212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005216:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	885b      	ldrh	r3, [r3, #2]
 800521e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8005222:	4611      	mov	r1, r2
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff feef 	bl	8005008 <txMakeMessageSessionSpecifier>
 800522a:	4603      	mov	r3, r0
 800522c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005230:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005238:	d305      	bcc.n	8005246 <txMakeCANID+0xe2>
 800523a:	4b36      	ldr	r3, [pc, #216]	@ (8005314 <txMakeCANID+0x1b0>)
 800523c:	4a30      	ldr	r2, [pc, #192]	@ (8005300 <txMakeCANID+0x19c>)
 800523e:	21e8      	movs	r1, #232	@ 0xe8
 8005240:	4830      	ldr	r0, [pc, #192]	@ (8005304 <txMakeCANID+0x1a0>)
 8005242:	f001 fe01 	bl	8006e48 <__assert_func>
            out = (int32_t) spec;
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800524a:	e03a      	b.n	80052c2 <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 800524c:	f06f 0301 	mvn.w	r3, #1
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8005252:	e036      	b.n	80052c2 <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	785b      	ldrb	r3, [r3, #1]
 8005258:	2b02      	cmp	r3, #2
 800525a:	d003      	beq.n	8005264 <txMakeCANID+0x100>
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	785b      	ldrb	r3, [r3, #1]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d12a      	bne.n	80052ba <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	791b      	ldrb	r3, [r3, #4]
 8005268:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	db25      	blt.n	80052ba <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	885b      	ldrh	r3, [r3, #2]
 8005272:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005276:	d220      	bcs.n	80052ba <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8005278:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800527c:	2b00      	cmp	r3, #0
 800527e:	db18      	blt.n	80052b2 <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8005288:	2b02      	cmp	r3, #2
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8005296:	78fa      	ldrb	r2, [r7, #3]
 8005298:	f7ff fee8 	bl	800506c <txMakeServiceSessionSpecifier>
 800529c:	4603      	mov	r3, r0
 800529e:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 80052a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	da0f      	bge.n	80052c6 <txMakeCANID+0x162>
 80052a6:	4b19      	ldr	r3, [pc, #100]	@ (800530c <txMakeCANID+0x1a8>)
 80052a8:	4a15      	ldr	r2, [pc, #84]	@ (8005300 <txMakeCANID+0x19c>)
 80052aa:	21f9      	movs	r1, #249	@ 0xf9
 80052ac:	4815      	ldr	r0, [pc, #84]	@ (8005304 <txMakeCANID+0x1a0>)
 80052ae:	f001 fdcb 	bl	8006e48 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 80052b2:	f06f 0301 	mvn.w	r3, #1
 80052b6:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80052b8:	e005      	b.n	80052c6 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 80052ba:	f06f 0301 	mvn.w	r3, #1
 80052be:	627b      	str	r3, [r7, #36]	@ 0x24
 80052c0:	e002      	b.n	80052c8 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80052c2:	bf00      	nop
 80052c4:	e000      	b.n	80052c8 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80052c6:	bf00      	nop
    }

    if (out >= 0)
 80052c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	db10      	blt.n	80052f0 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	781b      	ldrb	r3, [r3, #0]
 80052d2:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	2b07      	cmp	r3, #7
 80052d8:	d807      	bhi.n	80052ea <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 80052da:	69bb      	ldr	r3, [r7, #24]
 80052dc:	069a      	lsls	r2, r3, #26
 80052de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80052e8:	e002      	b.n	80052f0 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 80052ea:	f06f 0301 	mvn.w	r3, #1
 80052ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 80052f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3728      	adds	r7, #40	@ 0x28
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	08008860 	.word	0x08008860
 8005300:	08009400 	.word	0x08009400
 8005304:	080087f8 	.word	0x080087f8
 8005308:	08008874 	.word	0x08008874
 800530c:	08008890 	.word	0x08008890
 8005310:	0800889c 	.word	0x0800889c
 8005314:	080088d0 	.word	0x080088d0

08005318 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8005318:	b590      	push	{r4, r7, lr}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	4604      	mov	r4, r0
 8005320:	4608      	mov	r0, r1
 8005322:	4611      	mov	r1, r2
 8005324:	461a      	mov	r2, r3
 8005326:	4623      	mov	r3, r4
 8005328:	71fb      	strb	r3, [r7, #7]
 800532a:	4603      	mov	r3, r0
 800532c:	71bb      	strb	r3, [r7, #6]
 800532e:	460b      	mov	r3, r1
 8005330:	717b      	strb	r3, [r7, #5]
 8005332:	4613      	mov	r3, r2
 8005334:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8005336:	79fb      	ldrb	r3, [r7, #7]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <txMakeTailByte+0x38>
 800533c:	797b      	ldrb	r3, [r7, #5]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d006      	beq.n	8005350 <txMakeTailByte+0x38>
 8005342:	4b13      	ldr	r3, [pc, #76]	@ (8005390 <txMakeTailByte+0x78>)
 8005344:	4a13      	ldr	r2, [pc, #76]	@ (8005394 <txMakeTailByte+0x7c>)
 8005346:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 800534a:	4813      	ldr	r0, [pc, #76]	@ (8005398 <txMakeTailByte+0x80>)
 800534c:	f001 fd7c 	bl	8006e48 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8005350:	79fb      	ldrb	r3, [r7, #7]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <txMakeTailByte+0x42>
 8005356:	2280      	movs	r2, #128	@ 0x80
 8005358:	e000      	b.n	800535c <txMakeTailByte+0x44>
 800535a:	2200      	movs	r2, #0
 800535c:	79bb      	ldrb	r3, [r7, #6]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d001      	beq.n	8005366 <txMakeTailByte+0x4e>
 8005362:	2340      	movs	r3, #64	@ 0x40
 8005364:	e000      	b.n	8005368 <txMakeTailByte+0x50>
 8005366:	2300      	movs	r3, #0
 8005368:	4313      	orrs	r3, r2
 800536a:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 800536c:	797a      	ldrb	r2, [r7, #5]
 800536e:	2a00      	cmp	r2, #0
 8005370:	d001      	beq.n	8005376 <txMakeTailByte+0x5e>
 8005372:	2220      	movs	r2, #32
 8005374:	e000      	b.n	8005378 <txMakeTailByte+0x60>
 8005376:	2200      	movs	r2, #0
 8005378:	4313      	orrs	r3, r2
 800537a:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 800537c:	793b      	ldrb	r3, [r7, #4]
 800537e:	f003 031f 	and.w	r3, r3, #31
 8005382:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8005384:	4313      	orrs	r3, r2
 8005386:	b2db      	uxtb	r3, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	bd90      	pop	{r4, r7, pc}
 8005390:	080088ec 	.word	0x080088ec
 8005394:	080094a8 	.word	0x080094a8
 8005398:	080087f8 	.word	0x080087f8

0800539c <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b084      	sub	sp, #16
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b40      	cmp	r3, #64	@ 0x40
 80053a8:	d906      	bls.n	80053b8 <txRoundFramePayloadSizeUp+0x1c>
 80053aa:	4b0f      	ldr	r3, [pc, #60]	@ (80053e8 <txRoundFramePayloadSizeUp+0x4c>)
 80053ac:	4a0f      	ldr	r2, [pc, #60]	@ (80053ec <txRoundFramePayloadSizeUp+0x50>)
 80053ae:	f240 1123 	movw	r1, #291	@ 0x123
 80053b2:	480f      	ldr	r0, [pc, #60]	@ (80053f0 <txRoundFramePayloadSizeUp+0x54>)
 80053b4:	f001 fd48 	bl	8006e48 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 80053b8:	4a0e      	ldr	r2, [pc, #56]	@ (80053f4 <txRoundFramePayloadSizeUp+0x58>)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b0f      	cmp	r3, #15
 80053c6:	d906      	bls.n	80053d6 <txRoundFramePayloadSizeUp+0x3a>
 80053c8:	4b0b      	ldr	r3, [pc, #44]	@ (80053f8 <txRoundFramePayloadSizeUp+0x5c>)
 80053ca:	4a08      	ldr	r2, [pc, #32]	@ (80053ec <txRoundFramePayloadSizeUp+0x50>)
 80053cc:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80053d0:	4807      	ldr	r0, [pc, #28]	@ (80053f0 <txRoundFramePayloadSizeUp+0x54>)
 80053d2:	f001 fd39 	bl	8006e48 <__assert_func>
    return CanardCANDLCToLength[y];
 80053d6:	4a09      	ldr	r2, [pc, #36]	@ (80053fc <txRoundFramePayloadSizeUp+0x60>)
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	781b      	ldrb	r3, [r3, #0]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	08008914 	.word	0x08008914
 80053ec:	08009478 	.word	0x08009478
 80053f0:	080087f8 	.word	0x080087f8
 80053f4:	080093a0 	.word	0x080093a0
 80053f8:	0800895c 	.word	0x0800895c
 80053fc:	08009390 	.word	0x08009390

08005400 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8005400:	b580      	push	{r7, lr}
 8005402:	b086      	sub	sp, #24
 8005404:	af00      	add	r7, sp, #0
 8005406:	60f8      	str	r0, [r7, #12]
 8005408:	60b9      	str	r1, [r7, #8]
 800540a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d106      	bne.n	8005422 <txAllocateQueueItem+0x22>
 8005414:	4b1f      	ldr	r3, [pc, #124]	@ (8005494 <txAllocateQueueItem+0x94>)
 8005416:	4a20      	ldr	r2, [pc, #128]	@ (8005498 <txAllocateQueueItem+0x98>)
 8005418:	f44f 7198 	mov.w	r1, #304	@ 0x130
 800541c:	481f      	ldr	r0, [pc, #124]	@ (800549c <txAllocateQueueItem+0x9c>)
 800541e:	f001 fd13 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8005422:	6a3b      	ldr	r3, [r7, #32]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d106      	bne.n	8005436 <txAllocateQueueItem+0x36>
 8005428:	4b1d      	ldr	r3, [pc, #116]	@ (80054a0 <txAllocateQueueItem+0xa0>)
 800542a:	4a1b      	ldr	r2, [pc, #108]	@ (8005498 <txAllocateQueueItem+0x98>)
 800542c:	f240 1131 	movw	r1, #305	@ 0x131
 8005430:	481a      	ldr	r0, [pc, #104]	@ (800549c <txAllocateQueueItem+0x9c>)
 8005432:	f001 fd09 	bl	8006e48 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	6a3a      	ldr	r2, [r7, #32]
 800543c:	3230      	adds	r2, #48	@ 0x30
 800543e:	4611      	mov	r1, r2
 8005440:	68f8      	ldr	r0, [r7, #12]
 8005442:	4798      	blx	r3
 8005444:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	2b00      	cmp	r3, #0
 800544a:	d01e      	beq.n	800548a <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2200      	movs	r2, #0
 8005456:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	2200      	movs	r2, #0
 8005462:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 800546a:	6979      	ldr	r1, [r7, #20]
 800546c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005470:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	6a3a      	ldr	r2, [r7, #32]
 8005478:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	68ba      	ldr	r2, [r7, #8]
 8005488:	621a      	str	r2, [r3, #32]
    }
    return out;
 800548a:	697b      	ldr	r3, [r7, #20]
}
 800548c:	4618      	mov	r0, r3
 800548e:	3718      	adds	r7, #24
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	080089a4 	.word	0x080089a4
 8005498:	08009494 	.word	0x08009494
 800549c:	080087f8 	.word	0x080087f8
 80054a0:	080089b8 	.word	0x080089b8

080054a4 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b084      	sub	sp, #16
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	6078      	str	r0, [r7, #4]
 80054ac:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d002      	beq.n	80054c2 <txAVLPredicate+0x1e>
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <txAVLPredicate+0x2c>
 80054c2:	4b0a      	ldr	r3, [pc, #40]	@ (80054ec <txAVLPredicate+0x48>)
 80054c4:	4a0a      	ldr	r2, [pc, #40]	@ (80054f0 <txAVLPredicate+0x4c>)
 80054c6:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80054ca:	480a      	ldr	r0, [pc, #40]	@ (80054f4 <txAVLPredicate+0x50>)
 80054cc:	f001 fcbc 	bl	8006e48 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1a      	ldr	r2, [r3, #32]
 80054d4:	68bb      	ldr	r3, [r7, #8]
 80054d6:	6a1b      	ldr	r3, [r3, #32]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d301      	bcc.n	80054e0 <txAVLPredicate+0x3c>
 80054dc:	2301      	movs	r3, #1
 80054de:	e001      	b.n	80054e4 <txAVLPredicate+0x40>
 80054e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	080089cc 	.word	0x080089cc
 80054f0:	08009468 	.word	0x08009468
 80054f4:	080087f8 	.word	0x080087f8

080054f8 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b08d      	sub	sp, #52	@ 0x34
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <txPushSingleFrame+0x22>
 800550c:	4b5c      	ldr	r3, [pc, #368]	@ (8005680 <txPushSingleFrame+0x188>)
 800550e:	4a5d      	ldr	r2, [pc, #372]	@ (8005684 <txPushSingleFrame+0x18c>)
 8005510:	f240 1159 	movw	r1, #345	@ 0x159
 8005514:	485c      	ldr	r0, [pc, #368]	@ (8005688 <txPushSingleFrame+0x190>)
 8005516:	f001 fc97 	bl	8006e48 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 800551a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800551c:	2b00      	cmp	r3, #0
 800551e:	d109      	bne.n	8005534 <txPushSingleFrame+0x3c>
 8005520:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005522:	2b00      	cmp	r3, #0
 8005524:	d006      	beq.n	8005534 <txPushSingleFrame+0x3c>
 8005526:	4b59      	ldr	r3, [pc, #356]	@ (800568c <txPushSingleFrame+0x194>)
 8005528:	4a56      	ldr	r2, [pc, #344]	@ (8005684 <txPushSingleFrame+0x18c>)
 800552a:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 800552e:	4856      	ldr	r0, [pc, #344]	@ (8005688 <txPushSingleFrame+0x190>)
 8005530:	f001 fc8a 	bl	8006e48 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8005534:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005536:	3301      	adds	r3, #1
 8005538:	4618      	mov	r0, r3
 800553a:	f7ff ff2f 	bl	800539c <txRoundFramePayloadSizeUp>
 800553e:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8005540:	6a3a      	ldr	r2, [r7, #32]
 8005542:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005544:	429a      	cmp	r2, r3
 8005546:	d806      	bhi.n	8005556 <txPushSingleFrame+0x5e>
 8005548:	4b51      	ldr	r3, [pc, #324]	@ (8005690 <txPushSingleFrame+0x198>)
 800554a:	4a4e      	ldr	r2, [pc, #312]	@ (8005684 <txPushSingleFrame+0x18c>)
 800554c:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8005550:	484d      	ldr	r0, [pc, #308]	@ (8005688 <txPushSingleFrame+0x190>)
 8005552:	f001 fc79 	bl	8006e48 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8005556:	6a3a      	ldr	r2, [r7, #32]
 8005558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	3b01      	subs	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8005560:	69fa      	ldr	r2, [r7, #28]
 8005562:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005564:	4413      	add	r3, r2
 8005566:	3301      	adds	r3, #1
 8005568:	6a3a      	ldr	r2, [r7, #32]
 800556a:	429a      	cmp	r2, r3
 800556c:	d006      	beq.n	800557c <txPushSingleFrame+0x84>
 800556e:	4b49      	ldr	r3, [pc, #292]	@ (8005694 <txPushSingleFrame+0x19c>)
 8005570:	4a44      	ldr	r2, [pc, #272]	@ (8005684 <txPushSingleFrame+0x18c>)
 8005572:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005576:	4844      	ldr	r0, [pc, #272]	@ (8005688 <txPushSingleFrame+0x190>)
 8005578:	f001 fc66 	bl	8006e48 <__assert_func>
    int32_t       out = 0;
 800557c:	2300      	movs	r3, #0
 800557e:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	689a      	ldr	r2, [r3, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	429a      	cmp	r2, r3
 800558a:	d209      	bcs.n	80055a0 <txPushSingleFrame+0xa8>
 800558c:	6a3b      	ldr	r3, [r7, #32]
 800558e:	9300      	str	r3, [sp, #0]
 8005590:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005594:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005596:	68b8      	ldr	r0, [r7, #8]
 8005598:	f7ff ff32 	bl	8005400 <txAllocateQueueItem>
 800559c:	4603      	mov	r3, r0
 800559e:	e000      	b.n	80055a2 <txPushSingleFrame+0xaa>
 80055a0:	2300      	movs	r3, #0
    TxItem* const tqi =
 80055a2:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 80055a4:	69bb      	ldr	r3, [r7, #24]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d054      	beq.n	8005654 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 80055aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 80055b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d106      	bne.n	80055c4 <txPushSingleFrame+0xcc>
 80055b6:	4b38      	ldr	r3, [pc, #224]	@ (8005698 <txPushSingleFrame+0x1a0>)
 80055b8:	4a32      	ldr	r2, [pc, #200]	@ (8005684 <txPushSingleFrame+0x18c>)
 80055ba:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 80055be:	4832      	ldr	r0, [pc, #200]	@ (8005688 <txPushSingleFrame+0x190>)
 80055c0:	f001 fc42 	bl	8006e48 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	3330      	adds	r3, #48	@ 0x30
 80055c8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80055ca:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80055cc:	4618      	mov	r0, r3
 80055ce:	f001 fed4 	bl	800737a <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 80055d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80055d4:	3330      	adds	r3, #48	@ 0x30
 80055d6:	69ba      	ldr	r2, [r7, #24]
 80055d8:	4413      	add	r3, r2
 80055da:	69fa      	ldr	r2, [r7, #28]
 80055dc:	2100      	movs	r1, #0
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fe3f 	bl	8007262 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	1e5c      	subs	r4, r3, #1
 80055e8:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80055ec:	2201      	movs	r2, #1
 80055ee:	2101      	movs	r1, #1
 80055f0:	2001      	movs	r0, #1
 80055f2:	f7ff fe91 	bl	8005318 <txMakeTailByte>
 80055f6:	4603      	mov	r3, r0
 80055f8:	461a      	mov	r2, r3
 80055fa:	69bb      	ldr	r3, [r7, #24]
 80055fc:	4423      	add	r3, r4
 80055fe:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f103 000c 	add.w	r0, r3, #12
 8005608:	69b9      	ldr	r1, [r7, #24]
 800560a:	4b24      	ldr	r3, [pc, #144]	@ (800569c <txPushSingleFrame+0x1a4>)
 800560c:	4a24      	ldr	r2, [pc, #144]	@ (80056a0 <txPushSingleFrame+0x1a8>)
 800560e:	f7ff fae7 	bl	8004be0 <cavlSearch>
 8005612:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8005614:	69bb      	ldr	r3, [r7, #24]
 8005616:	697a      	ldr	r2, [r7, #20]
 8005618:	429a      	cmp	r2, r3
 800561a:	d006      	beq.n	800562a <txPushSingleFrame+0x132>
 800561c:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <txPushSingleFrame+0x1ac>)
 800561e:	4a19      	ldr	r2, [pc, #100]	@ (8005684 <txPushSingleFrame+0x18c>)
 8005620:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8005624:	4818      	ldr	r0, [pc, #96]	@ (8005688 <txPushSingleFrame+0x190>)
 8005626:	f001 fc0f 	bl	8006e48 <__assert_func>
        que->size++;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	1c5a      	adds	r2, r3, #1
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	689a      	ldr	r2, [r3, #8]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d906      	bls.n	800564e <txPushSingleFrame+0x156>
 8005640:	4b19      	ldr	r3, [pc, #100]	@ (80056a8 <txPushSingleFrame+0x1b0>)
 8005642:	4a10      	ldr	r2, [pc, #64]	@ (8005684 <txPushSingleFrame+0x18c>)
 8005644:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8005648:	480f      	ldr	r0, [pc, #60]	@ (8005688 <txPushSingleFrame+0x190>)
 800564a:	f001 fbfd 	bl	8006e48 <__assert_func>
        out = 1;  // One frame enqueued.
 800564e:	2301      	movs	r3, #1
 8005650:	627b      	str	r3, [r7, #36]	@ 0x24
 8005652:	e002      	b.n	800565a <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8005654:	f06f 0302 	mvn.w	r3, #2
 8005658:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	2b00      	cmp	r3, #0
 800565e:	db09      	blt.n	8005674 <txPushSingleFrame+0x17c>
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	2b01      	cmp	r3, #1
 8005664:	d006      	beq.n	8005674 <txPushSingleFrame+0x17c>
 8005666:	4b11      	ldr	r3, [pc, #68]	@ (80056ac <txPushSingleFrame+0x1b4>)
 8005668:	4a06      	ldr	r2, [pc, #24]	@ (8005684 <txPushSingleFrame+0x18c>)
 800566a:	f240 117b 	movw	r1, #379	@ 0x17b
 800566e:	4806      	ldr	r0, [pc, #24]	@ (8005688 <txPushSingleFrame+0x190>)
 8005670:	f001 fbea 	bl	8006e48 <__assert_func>
    return out;
 8005674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005676:	4618      	mov	r0, r3
 8005678:	372c      	adds	r7, #44	@ 0x2c
 800567a:	46bd      	mov	sp, r7
 800567c:	bd90      	pop	{r4, r7, pc}
 800567e:	bf00      	nop
 8005680:	080089a4 	.word	0x080089a4
 8005684:	08009454 	.word	0x08009454
 8005688:	080087f8 	.word	0x080087f8
 800568c:	08008a00 	.word	0x08008a00
 8005690:	08008a30 	.word	0x08008a30
 8005694:	08008a54 	.word	0x08008a54
 8005698:	08008a90 	.word	0x08008a90
 800569c:	08004f41 	.word	0x08004f41
 80056a0:	080054a5 	.word	0x080054a5
 80056a4:	08008aa8 	.word	0x08008aa8
 80056a8:	08008ac0 	.word	0x08008ac0
 80056ac:	08008adc 	.word	0x08008adc

080056b0 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80056b0:	b590      	push	{r4, r7, lr}
 80056b2:	b093      	sub	sp, #76	@ 0x4c
 80056b4:	af02      	add	r7, sp, #8
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	60b9      	str	r1, [r7, #8]
 80056ba:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d106      	bne.n	80056d0 <txGenerateMultiFrameChain+0x20>
 80056c2:	4b93      	ldr	r3, [pc, #588]	@ (8005910 <txGenerateMultiFrameChain+0x260>)
 80056c4:	4a93      	ldr	r2, [pc, #588]	@ (8005914 <txGenerateMultiFrameChain+0x264>)
 80056c6:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80056ca:	4893      	ldr	r0, [pc, #588]	@ (8005918 <txGenerateMultiFrameChain+0x268>)
 80056cc:	f001 fbbc 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <txGenerateMultiFrameChain+0x34>
 80056d6:	4b91      	ldr	r3, [pc, #580]	@ (800591c <txGenerateMultiFrameChain+0x26c>)
 80056d8:	4a8e      	ldr	r2, [pc, #568]	@ (8005914 <txGenerateMultiFrameChain+0x264>)
 80056da:	f240 1189 	movw	r1, #393	@ 0x189
 80056de:	488e      	ldr	r0, [pc, #568]	@ (8005918 <txGenerateMultiFrameChain+0x268>)
 80056e0:	f001 fbb2 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80056e4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d806      	bhi.n	80056fa <txGenerateMultiFrameChain+0x4a>
 80056ec:	4b8c      	ldr	r3, [pc, #560]	@ (8005920 <txGenerateMultiFrameChain+0x270>)
 80056ee:	4a89      	ldr	r2, [pc, #548]	@ (8005914 <txGenerateMultiFrameChain+0x264>)
 80056f0:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80056f4:	4888      	ldr	r0, [pc, #544]	@ (8005918 <txGenerateMultiFrameChain+0x268>)
 80056f6:	f001 fba7 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 80056fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d106      	bne.n	800570e <txGenerateMultiFrameChain+0x5e>
 8005700:	4b88      	ldr	r3, [pc, #544]	@ (8005924 <txGenerateMultiFrameChain+0x274>)
 8005702:	4a84      	ldr	r2, [pc, #528]	@ (8005914 <txGenerateMultiFrameChain+0x264>)
 8005704:	f240 118b 	movw	r1, #395	@ 0x18b
 8005708:	4883      	ldr	r0, [pc, #524]	@ (8005918 <txGenerateMultiFrameChain+0x268>)
 800570a:	f001 fb9d 	bl	8006e48 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800570e:	2300      	movs	r3, #0
 8005710:	613b      	str	r3, [r7, #16]
 8005712:	2300      	movs	r3, #0
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	2300      	movs	r3, #0
 8005718:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800571a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800571c:	3302      	adds	r3, #2
 800571e:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8005724:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005726:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005728:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800572c:	f7ff fc34 	bl	8004f98 <crcAdd>
 8005730:	4603      	mov	r3, r0
 8005732:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8005734:	2301      	movs	r3, #1
 8005736:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 800573a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800573c:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800573e:	e0d4      	b.n	80058ea <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8005740:	69bb      	ldr	r3, [r7, #24]
 8005742:	3301      	adds	r3, #1
 8005744:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8005746:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800574a:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 800574c:	687a      	ldr	r2, [r7, #4]
 800574e:	429a      	cmp	r2, r3
 8005750:	d908      	bls.n	8005764 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8005752:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	3301      	adds	r3, #1
 800575a:	4618      	mov	r0, r3
 800575c:	f7ff fe1e 	bl	800539c <txRoundFramePayloadSizeUp>
 8005760:	4603      	mov	r3, r0
 8005762:	e001      	b.n	8005768 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	9300      	str	r3, [sp, #0]
 800576e:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005772:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005774:	68b8      	ldr	r0, [r7, #8]
 8005776:	f7ff fe43 	bl	8005400 <txAllocateQueueItem>
 800577a:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d102      	bne.n	8005788 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	613b      	str	r3, [r7, #16]
 8005786:	e002      	b.n	800578e <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8005788:	697b      	ldr	r3, [r7, #20]
 800578a:	6a3a      	ldr	r2, [r7, #32]
 800578c:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800578e:	6a3b      	ldr	r3, [r7, #32]
 8005790:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2b00      	cmp	r3, #0
 8005796:	f000 80ae 	beq.w	80058f6 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 800579a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579c:	3b01      	subs	r3, #1
 800579e:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 80057a0:	2300      	movs	r3, #0
 80057a2:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80057a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057a6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d21c      	bcs.n	80057e6 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80057ac:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80057ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 80057b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	429a      	cmp	r2, r3
 80057ba:	d901      	bls.n	80057c0 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	3330      	adds	r3, #48	@ 0x30
 80057c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057c6:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80057c8:	4618      	mov	r0, r3
 80057ca:	f001 fdd6 	bl	800737a <memcpy>
            frame_offset = frame_offset + move_size;
 80057ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057d2:	4413      	add	r3, r2
 80057d4:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 80057d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057da:	4413      	add	r3, r2
 80057dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 80057de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e2:	4413      	add	r3, r2
 80057e4:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 80057e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d343      	bcc.n	8005876 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 80057ee:	e00f      	b.n	8005810 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f4:	4413      	add	r3, r2
 80057f6:	3330      	adds	r3, #48	@ 0x30
 80057f8:	2200      	movs	r2, #0
 80057fa:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80057fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057fe:	3301      	adds	r3, #1
 8005800:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8005802:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8005804:	2100      	movs	r1, #0
 8005806:	4618      	mov	r0, r3
 8005808:	f7ff fba6 	bl	8004f58 <crcAddByte>
 800580c:	4603      	mov	r3, r0
 800580e:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8005810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005812:	3302      	adds	r3, #2
 8005814:	69fa      	ldr	r2, [r7, #28]
 8005816:	429a      	cmp	r2, r3
 8005818:	d8ea      	bhi.n	80057f0 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 800581a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	429a      	cmp	r2, r3
 8005820:	d213      	bcs.n	800584a <txGenerateMultiFrameChain+0x19a>
 8005822:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005824:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005826:	429a      	cmp	r2, r3
 8005828:	d10f      	bne.n	800584a <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 800582a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800582c:	0a1b      	lsrs	r3, r3, #8
 800582e:	b29b      	uxth	r3, r3
 8005830:	697a      	ldr	r2, [r7, #20]
 8005832:	b2d9      	uxtb	r1, r3
 8005834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005836:	4413      	add	r3, r2
 8005838:	3330      	adds	r3, #48	@ 0x30
 800583a:	460a      	mov	r2, r1
 800583c:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	3301      	adds	r3, #1
 8005842:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8005844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005846:	3301      	adds	r3, #1
 8005848:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 800584a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	429a      	cmp	r2, r3
 8005850:	d211      	bcs.n	8005876 <txGenerateMultiFrameChain+0x1c6>
 8005852:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005854:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005856:	429a      	cmp	r2, r3
 8005858:	d90d      	bls.n	8005876 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 800585a:	697a      	ldr	r2, [r7, #20]
 800585c:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800585e:	b2d9      	uxtb	r1, r3
 8005860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005862:	4413      	add	r3, r2
 8005864:	3330      	adds	r3, #48	@ 0x30
 8005866:	460a      	mov	r2, r1
 8005868:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800586a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800586c:	3301      	adds	r3, #1
 800586e:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8005870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005872:	3301      	adds	r3, #1
 8005874:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8005876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005878:	1c5a      	adds	r2, r3, #1
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	429a      	cmp	r2, r3
 8005880:	d006      	beq.n	8005890 <txGenerateMultiFrameChain+0x1e0>
 8005882:	4b29      	ldr	r3, [pc, #164]	@ (8005928 <txGenerateMultiFrameChain+0x278>)
 8005884:	4a23      	ldr	r2, [pc, #140]	@ (8005914 <txGenerateMultiFrameChain+0x264>)
 8005886:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 800588a:	4823      	ldr	r0, [pc, #140]	@ (8005918 <txGenerateMultiFrameChain+0x268>)
 800588c:	f001 fadc 	bl	8006e48 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8005890:	693a      	ldr	r2, [r7, #16]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	429a      	cmp	r2, r3
 8005896:	bf0c      	ite	eq
 8005898:	2301      	moveq	r3, #1
 800589a:	2300      	movne	r3, #0
 800589c:	b2d8      	uxtb	r0, r3
 800589e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a2:	429a      	cmp	r2, r3
 80058a4:	bf2c      	ite	cs
 80058a6:	2301      	movcs	r3, #1
 80058a8:	2300      	movcc	r3, #0
 80058aa:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80058ac:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80058ae:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80058b2:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80058b6:	f7ff fd2f 	bl	8005318 <txMakeTailByte>
 80058ba:	4603      	mov	r3, r0
 80058bc:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80058be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c0:	4423      	add	r3, r4
 80058c2:	3330      	adds	r3, #48	@ 0x30
 80058c4:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 80058c6:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	bf14      	ite	ne
 80058ce:	2301      	movne	r3, #1
 80058d0:	2300      	moveq	r3, #0
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	f083 0301 	eor.w	r3, r3, #1
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80058de:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 80058ea:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	429a      	cmp	r2, r3
 80058f0:	f4ff af26 	bcc.w	8005740 <txGenerateMultiFrameChain+0x90>
 80058f4:	e000      	b.n	80058f8 <txGenerateMultiFrameChain+0x248>
            break;
 80058f6:	bf00      	nop
    }
    return out;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	461c      	mov	r4, r3
 80058fc:	f107 0310 	add.w	r3, r7, #16
 8005900:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005904:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005908:	68f8      	ldr	r0, [r7, #12]
 800590a:	3744      	adds	r7, #68	@ 0x44
 800590c:	46bd      	mov	sp, r7
 800590e:	bd90      	pop	{r4, r7, pc}
 8005910:	080089a4 	.word	0x080089a4
 8005914:	08009524 	.word	0x08009524
 8005918:	080087f8 	.word	0x080087f8
 800591c:	08008af4 	.word	0x08008af4
 8005920:	08008b10 	.word	0x08008b10
 8005924:	08008a90 	.word	0x08008a90
 8005928:	08008b38 	.word	0x08008b38

0800592c <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b094      	sub	sp, #80	@ 0x50
 8005930:	af06      	add	r7, sp, #24
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d002      	beq.n	8005944 <txPushMultiFrame+0x18>
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d106      	bne.n	8005952 <txPushMultiFrame+0x26>
 8005944:	4b65      	ldr	r3, [pc, #404]	@ (8005adc <txPushMultiFrame+0x1b0>)
 8005946:	4a66      	ldr	r2, [pc, #408]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005948:	f240 11ed 	movw	r1, #493	@ 0x1ed
 800594c:	4865      	ldr	r0, [pc, #404]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 800594e:	f001 fa7b 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d106      	bne.n	8005966 <txPushMultiFrame+0x3a>
 8005958:	4b63      	ldr	r3, [pc, #396]	@ (8005ae8 <txPushMultiFrame+0x1bc>)
 800595a:	4a61      	ldr	r2, [pc, #388]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 800595c:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8005960:	4860      	ldr	r0, [pc, #384]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005962:	f001 fa71 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8005966:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	429a      	cmp	r2, r3
 800596c:	d806      	bhi.n	800597c <txPushMultiFrame+0x50>
 800596e:	4b5f      	ldr	r3, [pc, #380]	@ (8005aec <txPushMultiFrame+0x1c0>)
 8005970:	4a5b      	ldr	r2, [pc, #364]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005972:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8005976:	485b      	ldr	r0, [pc, #364]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005978:	f001 fa66 	bl	8006e48 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 800597c:	2300      	movs	r3, #0
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8005980:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005982:	3302      	adds	r3, #2
 8005984:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8005986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4413      	add	r3, r2
 800598c:	1e5a      	subs	r2, r3, #1
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	fbb2 f3f3 	udiv	r3, r2, r3
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	2b01      	cmp	r3, #1
 800599a:	d806      	bhi.n	80059aa <txPushMultiFrame+0x7e>
 800599c:	4b54      	ldr	r3, [pc, #336]	@ (8005af0 <txPushMultiFrame+0x1c4>)
 800599e:	4a50      	ldr	r2, [pc, #320]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 80059a0:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80059a4:	484f      	ldr	r0, [pc, #316]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 80059a6:	f001 fa4f 	bl	8006e48 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	689a      	ldr	r2, [r3, #8]
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	441a      	add	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d87b      	bhi.n	8005ab2 <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 80059ba:	f107 0010 	add.w	r0, r7, #16
 80059be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059c0:	9305      	str	r3, [sp, #20]
 80059c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80059c4:	9304      	str	r3, [sp, #16]
 80059c6:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80059ca:	9303      	str	r3, [sp, #12]
 80059cc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059ce:	9302      	str	r3, [sp, #8]
 80059d0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80059d4:	e9cd 2300 	strd	r2, r3, [sp]
 80059d8:	687a      	ldr	r2, [r7, #4]
 80059da:	68b9      	ldr	r1, [r7, #8]
 80059dc:	f7ff fe68 	bl	80056b0 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d051      	beq.n	8005a8a <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f103 000c 	add.w	r0, r3, #12
 80059f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059f2:	4b40      	ldr	r3, [pc, #256]	@ (8005af4 <txPushMultiFrame+0x1c8>)
 80059f4:	4a40      	ldr	r2, [pc, #256]	@ (8005af8 <txPushMultiFrame+0x1cc>)
 80059f6:	f7ff f8f3 	bl	8004be0 <cavlSearch>
 80059fa:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d006      	beq.n	8005a12 <txPushMultiFrame+0xe6>
 8005a04:	4b3d      	ldr	r3, [pc, #244]	@ (8005afc <txPushMultiFrame+0x1d0>)
 8005a06:	4a36      	ldr	r2, [pc, #216]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005a08:	f240 2106 	movw	r1, #518	@ 0x206
 8005a0c:	4835      	ldr	r0, [pc, #212]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005a0e:	f001 fa1b 	bl	8006e48 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	68db      	ldr	r3, [r3, #12]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d106      	bne.n	8005a28 <txPushMultiFrame+0xfc>
 8005a1a:	4b39      	ldr	r3, [pc, #228]	@ (8005b00 <txPushMultiFrame+0x1d4>)
 8005a1c:	4a30      	ldr	r2, [pc, #192]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005a1e:	f240 2107 	movw	r1, #519	@ 0x207
 8005a22:	4830      	ldr	r0, [pc, #192]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005a24:	f001 fa10 	bl	8006e48 <__assert_func>
                next = next->next_in_transfer;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1da      	bne.n	80059ea <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8005a34:	69bb      	ldr	r3, [r7, #24]
 8005a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d006      	beq.n	8005a4a <txPushMultiFrame+0x11e>
 8005a3c:	4b31      	ldr	r3, [pc, #196]	@ (8005b04 <txPushMultiFrame+0x1d8>)
 8005a3e:	4a28      	ldr	r2, [pc, #160]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005a40:	f240 210a 	movw	r1, #522	@ 0x20a
 8005a44:	4827      	ldr	r0, [pc, #156]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005a46:	f001 f9ff 	bl	8006e48 <__assert_func>
            que->size += sq.size;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	689a      	ldr	r2, [r3, #8]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	441a      	add	r2, r3
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	689a      	ldr	r2, [r3, #8]
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d906      	bls.n	8005a70 <txPushMultiFrame+0x144>
 8005a62:	4b29      	ldr	r3, [pc, #164]	@ (8005b08 <txPushMultiFrame+0x1dc>)
 8005a64:	4a1e      	ldr	r2, [pc, #120]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005a66:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8005a6a:	481e      	ldr	r0, [pc, #120]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005a6c:	f001 f9ec 	bl	8006e48 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8005a70:	69bb      	ldr	r3, [r7, #24]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	da06      	bge.n	8005a84 <txPushMultiFrame+0x158>
 8005a76:	4b25      	ldr	r3, [pc, #148]	@ (8005b0c <txPushMultiFrame+0x1e0>)
 8005a78:	4a19      	ldr	r2, [pc, #100]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005a7a:	f240 210d 	movw	r1, #525	@ 0x20d
 8005a7e:	4819      	ldr	r0, [pc, #100]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005a80:	f001 f9e2 	bl	8006e48 <__assert_func>
            out = (int32_t) sq.size;
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a88:	e016      	b.n	8005ab8 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8005a8a:	f06f 0302 	mvn.w	r3, #2
 8005a8e:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8005a94:	e009      	b.n	8005aaa <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8005a96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005aa2:	68b8      	ldr	r0, [r7, #8]
 8005aa4:	4798      	blx	r3
                head = next;
 8005aa6:	6a3b      	ldr	r3, [r7, #32]
 8005aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8005aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1f2      	bne.n	8005a96 <txPushMultiFrame+0x16a>
 8005ab0:	e002      	b.n	8005ab8 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8005ab2:	f06f 0302 	mvn.w	r3, #2
 8005ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8005ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	db09      	blt.n	8005ad2 <txPushMultiFrame+0x1a6>
 8005abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	dc06      	bgt.n	8005ad2 <txPushMultiFrame+0x1a6>
 8005ac4:	4b12      	ldr	r3, [pc, #72]	@ (8005b10 <txPushMultiFrame+0x1e4>)
 8005ac6:	4a06      	ldr	r2, [pc, #24]	@ (8005ae0 <txPushMultiFrame+0x1b4>)
 8005ac8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8005acc:	4805      	ldr	r0, [pc, #20]	@ (8005ae4 <txPushMultiFrame+0x1b8>)
 8005ace:	f001 f9bb 	bl	8006e48 <__assert_func>
    return out;
 8005ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3738      	adds	r7, #56	@ 0x38
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}
 8005adc:	08008b74 	.word	0x08008b74
 8005ae0:	08009510 	.word	0x08009510
 8005ae4:	080087f8 	.word	0x080087f8
 8005ae8:	08008af4 	.word	0x08008af4
 8005aec:	08008b10 	.word	0x08008b10
 8005af0:	08008ba4 	.word	0x08008ba4
 8005af4:	08004f41 	.word	0x08004f41
 8005af8:	080054a5 	.word	0x080054a5
 8005afc:	08008bb4 	.word	0x08008bb4
 8005b00:	08008bc8 	.word	0x08008bc8
 8005b04:	08008be4 	.word	0x08008be4
 8005b08:	08008ac0 	.word	0x08008ac0
 8005b0c:	08008bfc 	.word	0x08008bfc
 8005b10:	08008c20 	.word	0x08008c20

08005b14 <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b088      	sub	sp, #32
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d106      	bne.n	8005b36 <rxTryParseFrame+0x22>
 8005b28:	4b96      	ldr	r3, [pc, #600]	@ (8005d84 <rxTryParseFrame+0x270>)
 8005b2a:	4a97      	ldr	r2, [pc, #604]	@ (8005d88 <rxTryParseFrame+0x274>)
 8005b2c:	f240 214f 	movw	r1, #591	@ 0x24f
 8005b30:	4896      	ldr	r0, [pc, #600]	@ (8005d8c <rxTryParseFrame+0x278>)
 8005b32:	f001 f989 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b3e:	d306      	bcc.n	8005b4e <rxTryParseFrame+0x3a>
 8005b40:	4b93      	ldr	r3, [pc, #588]	@ (8005d90 <rxTryParseFrame+0x27c>)
 8005b42:	4a91      	ldr	r2, [pc, #580]	@ (8005d88 <rxTryParseFrame+0x274>)
 8005b44:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8005b48:	4890      	ldr	r0, [pc, #576]	@ (8005d8c <rxTryParseFrame+0x278>)
 8005b4a:	f001 f97d 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(out != NULL);
 8005b4e:	683b      	ldr	r3, [r7, #0]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d106      	bne.n	8005b62 <rxTryParseFrame+0x4e>
 8005b54:	4b8f      	ldr	r3, [pc, #572]	@ (8005d94 <rxTryParseFrame+0x280>)
 8005b56:	4a8c      	ldr	r2, [pc, #560]	@ (8005d88 <rxTryParseFrame+0x274>)
 8005b58:	f240 2151 	movw	r1, #593	@ 0x251
 8005b5c:	488b      	ldr	r0, [pc, #556]	@ (8005d8c <rxTryParseFrame+0x278>)
 8005b5e:	f001 f973 	bl	8006e48 <__assert_func>
    bool valid = false;
 8005b62:	2300      	movs	r3, #0
 8005b64:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8105 	beq.w	8005d7a <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d106      	bne.n	8005b86 <rxTryParseFrame+0x72>
 8005b78:	4b87      	ldr	r3, [pc, #540]	@ (8005d98 <rxTryParseFrame+0x284>)
 8005b7a:	4a83      	ldr	r2, [pc, #524]	@ (8005d88 <rxTryParseFrame+0x274>)
 8005b7c:	f240 2155 	movw	r1, #597	@ 0x255
 8005b80:	4882      	ldr	r0, [pc, #520]	@ (8005d8c <rxTryParseFrame+0x278>)
 8005b82:	f001 f961 	bl	8006e48 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005b8c:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 8005b96:	69bb      	ldr	r3, [r7, #24]
 8005b98:	0e9b      	lsrs	r3, r3, #26
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f003 0307 	and.w	r3, r3, #7
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005bae:	b2da      	uxtb	r2, r3
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d128      	bne.n	8005c10 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8005bc4:	69bb      	ldr	r3, [r7, #24]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005bce:	b29a      	uxth	r2, r3
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8005bd4:	69bb      	ldr	r3, [r7, #24]
 8005bd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d002      	beq.n	8005be4 <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	22ff      	movs	r2, #255	@ 0xff
 8005be2:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	22ff      	movs	r2, #255	@ 0xff
 8005be8:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d106      	bne.n	8005c02 <rxTryParseFrame+0xee>
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d101      	bne.n	8005c02 <rxTryParseFrame+0xee>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <rxTryParseFrame+0xf0>
 8005c02:	2300      	movs	r3, #0
 8005c04:	77fb      	strb	r3, [r7, #31]
 8005c06:	7ffb      	ldrb	r3, [r7, #31]
 8005c08:	f003 0301 	and.w	r3, r3, #1
 8005c0c:	77fb      	strb	r3, [r7, #31]
 8005c0e:	e02c      	b.n	8005c6a <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <rxTryParseFrame+0x10a>
 8005c1a:	2202      	movs	r2, #2
 8005c1c:	e000      	b.n	8005c20 <rxTryParseFrame+0x10c>
 8005c1e:	2201      	movs	r2, #1
            out->transfer_kind =
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	0b9b      	lsrs	r3, r3, #14
 8005c28:	b29b      	uxth	r3, r3
 8005c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	09db      	lsrs	r3, r3, #7
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d107      	bne.n	8005c5e <rxTryParseFrame+0x14a>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	7b1a      	ldrb	r2, [r3, #12]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	7b5b      	ldrb	r3, [r3, #13]
 8005c56:	429a      	cmp	r2, r3
 8005c58:	d001      	beq.n	8005c5e <rxTryParseFrame+0x14a>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <rxTryParseFrame+0x14c>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	7ffb      	ldrb	r3, [r7, #31]
 8005c64:	f003 0301 	and.w	r3, r3, #1
 8005c68:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	1e5a      	subs	r2, r3, #1
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689a      	ldr	r2, [r3, #8]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	699a      	ldr	r2, [r3, #24]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	695b      	ldr	r3, [r3, #20]
 8005c84:	4413      	add	r3, r2
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	b2da      	uxtb	r2, r3
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 8005c96:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	09db      	lsrs	r3, r3, #7
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8005ca4:	7dfb      	ldrb	r3, [r7, #23]
 8005ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	bf14      	ite	ne
 8005cae:	2301      	movne	r3, #1
 8005cb0:	2300      	moveq	r3, #0
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8005cb8:	7dfb      	ldrb	r3, [r7, #23]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	bf14      	ite	ne
 8005cc2:	2301      	movne	r3, #1
 8005cc4:	2300      	moveq	r3, #0
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8005ccc:	7ffb      	ldrb	r3, [r7, #31]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00c      	beq.n	8005cec <rxTryParseFrame+0x1d8>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	7bdb      	ldrb	r3, [r3, #15]
 8005cd6:	f083 0301 	eor.w	r3, r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d103      	bne.n	8005ce8 <rxTryParseFrame+0x1d4>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	7c5b      	ldrb	r3, [r3, #17]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <rxTryParseFrame+0x1d8>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e000      	b.n	8005cee <rxTryParseFrame+0x1da>
 8005cec:	2300      	movs	r3, #0
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	7ffb      	ldrb	r3, [r7, #31]
 8005cf2:	f003 0301 	and.w	r3, r3, #1
 8005cf6:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8005cf8:	7ffb      	ldrb	r3, [r7, #31]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00d      	beq.n	8005d1a <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d003      	beq.n	8005d0e <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	7c1b      	ldrb	r3, [r3, #16]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d103      	bne.n	8005d16 <rxTryParseFrame+0x202>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	7b1b      	ldrb	r3, [r3, #12]
 8005d12:	2bff      	cmp	r3, #255	@ 0xff
 8005d14:	d001      	beq.n	8005d1a <rxTryParseFrame+0x206>
        valid = valid &&
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <rxTryParseFrame+0x208>
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	77fb      	strb	r3, [r7, #31]
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 8005d26:	7ffb      	ldrb	r3, [r7, #31]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d009      	beq.n	8005d40 <rxTryParseFrame+0x22c>
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	2b06      	cmp	r3, #6
 8005d32:	d803      	bhi.n	8005d3c <rxTryParseFrame+0x228>
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	7c1b      	ldrb	r3, [r3, #16]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <rxTryParseFrame+0x22c>
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <rxTryParseFrame+0x22e>
 8005d40:	2300      	movs	r3, #0
 8005d42:	77fb      	strb	r3, [r7, #31]
 8005d44:	7ffb      	ldrb	r3, [r7, #31]
 8005d46:	f003 0301 	and.w	r3, r3, #1
 8005d4a:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8005d4c:	7ffb      	ldrb	r3, [r7, #31]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00d      	beq.n	8005d6e <rxTryParseFrame+0x25a>
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d107      	bne.n	8005d6a <rxTryParseFrame+0x256>
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	7bdb      	ldrb	r3, [r3, #15]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d005      	beq.n	8005d6e <rxTryParseFrame+0x25a>
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	7c1b      	ldrb	r3, [r3, #16]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d001      	beq.n	8005d6e <rxTryParseFrame+0x25a>
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	e000      	b.n	8005d70 <rxTryParseFrame+0x25c>
 8005d6e:	2300      	movs	r3, #0
 8005d70:	77fb      	strb	r3, [r7, #31]
 8005d72:	7ffb      	ldrb	r3, [r7, #31]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 8005d7a:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3720      	adds	r7, #32
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}
 8005d84:	08008c38 	.word	0x08008c38
 8005d88:	08009560 	.word	0x08009560
 8005d8c:	080087f8 	.word	0x080087f8
 8005d90:	08008c50 	.word	0x08008c50
 8005d94:	08008c80 	.word	0x08008c80
 8005d98:	08008c94 	.word	0x08008c94

08005d9c <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b082      	sub	sp, #8
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d106      	bne.n	8005dba <rxInitTransferMetadataFromFrame+0x1e>
 8005dac:	4b19      	ldr	r3, [pc, #100]	@ (8005e14 <rxInitTransferMetadataFromFrame+0x78>)
 8005dae:	4a1a      	ldr	r2, [pc, #104]	@ (8005e18 <rxInitTransferMetadataFromFrame+0x7c>)
 8005db0:	f44f 7124 	mov.w	r1, #656	@ 0x290
 8005db4:	4819      	ldr	r0, [pc, #100]	@ (8005e1c <rxInitTransferMetadataFromFrame+0x80>)
 8005db6:	f001 f847 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	699b      	ldr	r3, [r3, #24]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d106      	bne.n	8005dd0 <rxInitTransferMetadataFromFrame+0x34>
 8005dc2:	4b17      	ldr	r3, [pc, #92]	@ (8005e20 <rxInitTransferMetadataFromFrame+0x84>)
 8005dc4:	4a14      	ldr	r2, [pc, #80]	@ (8005e18 <rxInitTransferMetadataFromFrame+0x7c>)
 8005dc6:	f240 2191 	movw	r1, #657	@ 0x291
 8005dca:	4814      	ldr	r0, [pc, #80]	@ (8005e1c <rxInitTransferMetadataFromFrame+0x80>)
 8005dcc:	f001 f83c 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d106      	bne.n	8005de4 <rxInitTransferMetadataFromFrame+0x48>
 8005dd6:	4b13      	ldr	r3, [pc, #76]	@ (8005e24 <rxInitTransferMetadataFromFrame+0x88>)
 8005dd8:	4a0f      	ldr	r2, [pc, #60]	@ (8005e18 <rxInitTransferMetadataFromFrame+0x7c>)
 8005dda:	f240 2192 	movw	r1, #658	@ 0x292
 8005dde:	480f      	ldr	r0, [pc, #60]	@ (8005e1c <rxInitTransferMetadataFromFrame+0x80>)
 8005de0:	f001 f832 	bl	8006e48 <__assert_func>
    out_transfer->priority       = frame->priority;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	7a1a      	ldrb	r2, [r3, #8]
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	7a5a      	ldrb	r2, [r3, #9]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	895a      	ldrh	r2, [r3, #10]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	7b1a      	ldrb	r2, [r3, #12]
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	7b9a      	ldrb	r2, [r3, #14]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	715a      	strb	r2, [r3, #5]
}
 8005e0c:	bf00      	nop
 8005e0e:	3708      	adds	r7, #8
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}
 8005e14:	08008c38 	.word	0x08008c38
 8005e18:	0800960c 	.word	0x0800960c
 8005e1c:	080087f8 	.word	0x080087f8
 8005e20:	08008c94 	.word	0x08008c94
 8005e24:	08008cb4 	.word	0x08008cb4

08005e28 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b084      	sub	sp, #16
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	4603      	mov	r3, r0
 8005e30:	460a      	mov	r2, r1
 8005e32:	71fb      	strb	r3, [r7, #7]
 8005e34:	4613      	mov	r3, r2
 8005e36:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8005e38:	79fb      	ldrb	r3, [r7, #7]
 8005e3a:	2b1f      	cmp	r3, #31
 8005e3c:	d906      	bls.n	8005e4c <rxComputeTransferIDDifference+0x24>
 8005e3e:	4b15      	ldr	r3, [pc, #84]	@ (8005e94 <rxComputeTransferIDDifference+0x6c>)
 8005e40:	4a15      	ldr	r2, [pc, #84]	@ (8005e98 <rxComputeTransferIDDifference+0x70>)
 8005e42:	f240 219d 	movw	r1, #669	@ 0x29d
 8005e46:	4815      	ldr	r0, [pc, #84]	@ (8005e9c <rxComputeTransferIDDifference+0x74>)
 8005e48:	f000 fffe 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8005e4c:	79bb      	ldrb	r3, [r7, #6]
 8005e4e:	2b1f      	cmp	r3, #31
 8005e50:	d906      	bls.n	8005e60 <rxComputeTransferIDDifference+0x38>
 8005e52:	4b13      	ldr	r3, [pc, #76]	@ (8005ea0 <rxComputeTransferIDDifference+0x78>)
 8005e54:	4a10      	ldr	r2, [pc, #64]	@ (8005e98 <rxComputeTransferIDDifference+0x70>)
 8005e56:	f240 219e 	movw	r1, #670	@ 0x29e
 8005e5a:	4810      	ldr	r0, [pc, #64]	@ (8005e9c <rxComputeTransferIDDifference+0x74>)
 8005e5c:	f000 fff4 	bl	8006e48 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8005e60:	79fb      	ldrb	r3, [r7, #7]
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	79bb      	ldrb	r3, [r7, #6]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 8005e6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	da07      	bge.n	8005e86 <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 8005e76:	2320      	movs	r3, #32
 8005e78:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 8005e7a:	7b7b      	ldrb	r3, [r7, #13]
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	89fb      	ldrh	r3, [r7, #14]
 8005e80:	4413      	add	r3, r2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 8005e86:	89fb      	ldrh	r3, [r7, #14]
 8005e88:	b2db      	uxtb	r3, r3
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3710      	adds	r7, #16
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	08008cd0 	.word	0x08008cd0
 8005e98:	080095a8 	.word	0x080095a8
 8005e9c:	080087f8 	.word	0x080087f8
 8005ea0:	08008ce8 	.word	0x08008ce8

08005ea4 <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	60f8      	str	r0, [r7, #12]
 8005eac:	60b9      	str	r1, [r7, #8]
 8005eae:	607a      	str	r2, [r7, #4]
 8005eb0:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d106      	bne.n	8005ec6 <rxSessionWritePayload+0x22>
 8005eb8:	4b67      	ldr	r3, [pc, #412]	@ (8006058 <rxSessionWritePayload+0x1b4>)
 8005eba:	4a68      	ldr	r2, [pc, #416]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005ebc:	f240 21ae 	movw	r1, #686	@ 0x2ae
 8005ec0:	4867      	ldr	r0, [pc, #412]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005ec2:	f000 ffc1 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d106      	bne.n	8005eda <rxSessionWritePayload+0x36>
 8005ecc:	4b65      	ldr	r3, [pc, #404]	@ (8006064 <rxSessionWritePayload+0x1c0>)
 8005ece:	4a63      	ldr	r2, [pc, #396]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005ed0:	f240 21af 	movw	r1, #687	@ 0x2af
 8005ed4:	4862      	ldr	r0, [pc, #392]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005ed6:	f000 ffb7 	bl	8006e48 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8005eda:	6a3b      	ldr	r3, [r7, #32]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d109      	bne.n	8005ef4 <rxSessionWritePayload+0x50>
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d006      	beq.n	8005ef4 <rxSessionWritePayload+0x50>
 8005ee6:	4b60      	ldr	r3, [pc, #384]	@ (8006068 <rxSessionWritePayload+0x1c4>)
 8005ee8:	4a5c      	ldr	r2, [pc, #368]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005eea:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8005eee:	485c      	ldr	r0, [pc, #368]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005ef0:	f000 ffaa 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	68db      	ldr	r3, [r3, #12]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d206      	bcs.n	8005f0c <rxSessionWritePayload+0x68>
 8005efe:	4b5b      	ldr	r3, [pc, #364]	@ (800606c <rxSessionWritePayload+0x1c8>)
 8005f00:	4a56      	ldr	r2, [pc, #344]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005f02:	f240 21b1 	movw	r1, #689	@ 0x2b1
 8005f06:	4856      	ldr	r0, [pc, #344]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005f08:	f000 ff9e 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	68da      	ldr	r2, [r3, #12]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d906      	bls.n	8005f26 <rxSessionWritePayload+0x82>
 8005f18:	4b55      	ldr	r3, [pc, #340]	@ (8006070 <rxSessionWritePayload+0x1cc>)
 8005f1a:	4a50      	ldr	r2, [pc, #320]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005f1c:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8005f20:	484f      	ldr	r0, [pc, #316]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005f22:	f000 ff91 	bl	8006e48 <__assert_func>

    rxs->total_payload_size += payload_size;
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	441a      	add	r2, r3
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	691b      	ldr	r3, [r3, #16]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d115      	bne.n	8005f66 <rxSessionWritePayload+0xc2>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d006      	beq.n	8005f56 <rxSessionWritePayload+0xb2>
 8005f48:	4b4a      	ldr	r3, [pc, #296]	@ (8006074 <rxSessionWritePayload+0x1d0>)
 8005f4a:	4a44      	ldr	r2, [pc, #272]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005f4c:	f240 21b9 	movw	r1, #697	@ 0x2b9
 8005f50:	4843      	ldr	r0, [pc, #268]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005f52:	f000 ff79 	bl	8006e48 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	689b      	ldr	r3, [r3, #8]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	68f8      	ldr	r0, [r7, #12]
 8005f5e:	4798      	blx	r3
 8005f60:	4602      	mov	r2, r0
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d04e      	beq.n	8006010 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	687a      	ldr	r2, [r7, #4]
 8005f80:	429a      	cmp	r2, r3
 8005f82:	d229      	bcs.n	8005fd8 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	429a      	cmp	r2, r3
 8005f8c:	d206      	bcs.n	8005f9c <rxSessionWritePayload+0xf8>
 8005f8e:	4b37      	ldr	r3, [pc, #220]	@ (800606c <rxSessionWritePayload+0x1c8>)
 8005f90:	4a32      	ldr	r2, [pc, #200]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005f92:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 8005f96:	4832      	ldr	r0, [pc, #200]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005f98:	f000 ff56 	bl	8006e48 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	68da      	ldr	r2, [r3, #12]
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	4413      	add	r3, r2
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	d006      	beq.n	8005fc2 <rxSessionWritePayload+0x11e>
 8005fb4:	4b30      	ldr	r3, [pc, #192]	@ (8006078 <rxSessionWritePayload+0x1d4>)
 8005fb6:	4a29      	ldr	r2, [pc, #164]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005fb8:	f240 21c6 	movw	r1, #710	@ 0x2c6
 8005fbc:	4828      	ldr	r0, [pc, #160]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005fbe:	f000 ff43 	bl	8006e48 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 8005fc2:	693a      	ldr	r2, [r7, #16]
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d306      	bcc.n	8005fd8 <rxSessionWritePayload+0x134>
 8005fca:	4b2c      	ldr	r3, [pc, #176]	@ (800607c <rxSessionWritePayload+0x1d8>)
 8005fcc:	4a23      	ldr	r2, [pc, #140]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8005fce:	f240 21c7 	movw	r1, #711	@ 0x2c7
 8005fd2:	4823      	ldr	r0, [pc, #140]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8005fd4:	f000 ff38 	bl	8006e48 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	4413      	add	r3, r2
 8005fe2:	693a      	ldr	r2, [r7, #16]
 8005fe4:	6a39      	ldr	r1, [r7, #32]
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f001 f9c7 	bl	800737a <memcpy>
        rxs->payload_size += bytes_to_copy;
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	441a      	add	r2, r3
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	429a      	cmp	r2, r3
 8006000:	d219      	bcs.n	8006036 <rxSessionWritePayload+0x192>
 8006002:	4b1a      	ldr	r3, [pc, #104]	@ (800606c <rxSessionWritePayload+0x1c8>)
 8006004:	4a15      	ldr	r2, [pc, #84]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8006006:	f240 21d1 	movw	r1, #721	@ 0x2d1
 800600a:	4815      	ldr	r0, [pc, #84]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 800600c:	f000 ff1c 	bl	8006e48 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d006      	beq.n	8006026 <rxSessionWritePayload+0x182>
 8006018:	4b16      	ldr	r3, [pc, #88]	@ (8006074 <rxSessionWritePayload+0x1d0>)
 800601a:	4a10      	ldr	r2, [pc, #64]	@ (800605c <rxSessionWritePayload+0x1b8>)
 800601c:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8006020:	480f      	ldr	r0, [pc, #60]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8006022:	f000 ff11 	bl	8006e48 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d002      	beq.n	8006032 <rxSessionWritePayload+0x18e>
 800602c:	f06f 0302 	mvn.w	r3, #2
 8006030:	e000      	b.n	8006034 <rxSessionWritePayload+0x190>
 8006032:	2300      	movs	r3, #0
 8006034:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 8006036:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800603a:	2b00      	cmp	r3, #0
 800603c:	dd06      	ble.n	800604c <rxSessionWritePayload+0x1a8>
 800603e:	4b10      	ldr	r3, [pc, #64]	@ (8006080 <rxSessionWritePayload+0x1dc>)
 8006040:	4a06      	ldr	r2, [pc, #24]	@ (800605c <rxSessionWritePayload+0x1b8>)
 8006042:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8006046:	4806      	ldr	r0, [pc, #24]	@ (8006060 <rxSessionWritePayload+0x1bc>)
 8006048:	f000 fefe 	bl	8006e48 <__assert_func>
    return out;
 800604c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006050:	4618      	mov	r0, r3
 8006052:	3718      	adds	r7, #24
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	080089a4 	.word	0x080089a4
 800605c:	080095e0 	.word	0x080095e0
 8006060:	080087f8 	.word	0x080087f8
 8006064:	08008d00 	.word	0x08008d00
 8006068:	0800889c 	.word	0x0800889c
 800606c:	08008d14 	.word	0x08008d14
 8006070:	08008d30 	.word	0x08008d30
 8006074:	08008d60 	.word	0x08008d60
 8006078:	08008d78 	.word	0x08008d78
 800607c:	08008da8 	.word	0x08008da8
 8006080:	08008dc8 	.word	0x08008dc8

08006084 <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b082      	sub	sp, #8
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d106      	bne.n	80060a2 <rxSessionRestart+0x1e>
 8006094:	4b1a      	ldr	r3, [pc, #104]	@ (8006100 <rxSessionRestart+0x7c>)
 8006096:	4a1b      	ldr	r2, [pc, #108]	@ (8006104 <rxSessionRestart+0x80>)
 8006098:	f240 21de 	movw	r1, #734	@ 0x2de
 800609c:	481a      	ldr	r0, [pc, #104]	@ (8006108 <rxSessionRestart+0x84>)
 800609e:	f000 fed3 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d106      	bne.n	80060b6 <rxSessionRestart+0x32>
 80060a8:	4b18      	ldr	r3, [pc, #96]	@ (800610c <rxSessionRestart+0x88>)
 80060aa:	4a16      	ldr	r2, [pc, #88]	@ (8006104 <rxSessionRestart+0x80>)
 80060ac:	f240 21df 	movw	r1, #735	@ 0x2df
 80060b0:	4815      	ldr	r0, [pc, #84]	@ (8006108 <rxSessionRestart+0x84>)
 80060b2:	f000 fec9 	bl	8006e48 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	6912      	ldr	r2, [r2, #16]
 80060be:	4611      	mov	r1, r2
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2200      	movs	r2, #0
 80060ce:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	2200      	movs	r2, #0
 80060d4:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 80060d6:	683b      	ldr	r3, [r7, #0]
 80060d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80060dc:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	7d9b      	ldrb	r3, [r3, #22]
 80060e2:	3301      	adds	r3, #1
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	b2da      	uxtb	r2, r3
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2201      	movs	r2, #1
 80060f4:	761a      	strb	r2, [r3, #24]
}
 80060f6:	bf00      	nop
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	080089a4 	.word	0x080089a4
 8006104:	080095f8 	.word	0x080095f8
 8006108:	080087f8 	.word	0x080087f8
 800610c:	08008d00 	.word	0x08008d00

08006110 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af02      	add	r7, sp, #8
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
 800611c:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d106      	bne.n	8006132 <rxSessionAcceptFrame+0x22>
 8006124:	4b81      	ldr	r3, [pc, #516]	@ (800632c <rxSessionAcceptFrame+0x21c>)
 8006126:	4a82      	ldr	r2, [pc, #520]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 8006128:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 800612c:	4881      	ldr	r0, [pc, #516]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 800612e:	f000 fe8b 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d106      	bne.n	8006146 <rxSessionAcceptFrame+0x36>
 8006138:	4b7f      	ldr	r3, [pc, #508]	@ (8006338 <rxSessionAcceptFrame+0x228>)
 800613a:	4a7d      	ldr	r2, [pc, #500]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 800613c:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8006140:	487c      	ldr	r0, [pc, #496]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 8006142:	f000 fe81 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d106      	bne.n	800615a <rxSessionAcceptFrame+0x4a>
 800614c:	4b7b      	ldr	r3, [pc, #492]	@ (800633c <rxSessionAcceptFrame+0x22c>)
 800614e:	4a78      	ldr	r2, [pc, #480]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 8006150:	f240 21f2 	movw	r1, #754	@ 0x2f2
 8006154:	4877      	ldr	r0, [pc, #476]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 8006156:	f000 fe77 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d106      	bne.n	8006170 <rxSessionAcceptFrame+0x60>
 8006162:	4b77      	ldr	r3, [pc, #476]	@ (8006340 <rxSessionAcceptFrame+0x230>)
 8006164:	4a72      	ldr	r2, [pc, #456]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 8006166:	f240 21f3 	movw	r1, #755	@ 0x2f3
 800616a:	4872      	ldr	r0, [pc, #456]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 800616c:	f000 fe6c 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	7b9b      	ldrb	r3, [r3, #14]
 8006174:	2b1f      	cmp	r3, #31
 8006176:	d906      	bls.n	8006186 <rxSessionAcceptFrame+0x76>
 8006178:	4b72      	ldr	r3, [pc, #456]	@ (8006344 <rxSessionAcceptFrame+0x234>)
 800617a:	4a6d      	ldr	r2, [pc, #436]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 800617c:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 8006180:	486c      	ldr	r0, [pc, #432]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 8006182:	f000 fe61 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d106      	bne.n	800619a <rxSessionAcceptFrame+0x8a>
 800618c:	4b6e      	ldr	r3, [pc, #440]	@ (8006348 <rxSessionAcceptFrame+0x238>)
 800618e:	4a68      	ldr	r2, [pc, #416]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 8006190:	f240 21f5 	movw	r1, #757	@ 0x2f5
 8006194:	4867      	ldr	r0, [pc, #412]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 8006196:	f000 fe57 	bl	8006e48 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7bdb      	ldrb	r3, [r3, #15]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d005      	beq.n	80061ae <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061a8:	68b9      	ldr	r1, [r7, #8]
 80061aa:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	7bdb      	ldrb	r3, [r3, #15]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d005      	beq.n	80061c2 <rxSessionAcceptFrame+0xb2>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	7c1b      	ldrb	r3, [r3, #16]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <rxSessionAcceptFrame+0xb2>
 80061be:	2301      	movs	r3, #1
 80061c0:	e000      	b.n	80061c4 <rxSessionAcceptFrame+0xb4>
 80061c2:	2300      	movs	r3, #0
 80061c4:	75bb      	strb	r3, [r7, #22]
 80061c6:	7dbb      	ldrb	r3, [r7, #22]
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 80061ce:	7dbb      	ldrb	r3, [r7, #22]
 80061d0:	f083 0301 	eor.w	r3, r3, #1
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00c      	beq.n	80061f4 <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	8a98      	ldrh	r0, [r3, #20]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6959      	ldr	r1, [r3, #20]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	461a      	mov	r2, r3
 80061e8:	f7fe fed6 	bl	8004f98 <crcAdd>
 80061ec:	4603      	mov	r3, r0
 80061ee:	461a      	mov	r2, r3
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	695a      	ldr	r2, [r3, #20]
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	9300      	str	r3, [sp, #0]
 80061fe:	4613      	mov	r3, r2
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	68f8      	ldr	r0, [r7, #12]
 8006206:	f7ff fe4d 	bl	8005ea4 <rxSessionWritePayload>
 800620a:	4603      	mov	r3, r0
 800620c:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 800620e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006212:	2b00      	cmp	r3, #0
 8006214:	da10      	bge.n	8006238 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 8006216:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800621a:	f113 0f03 	cmn.w	r3, #3
 800621e:	d006      	beq.n	800622e <rxSessionAcceptFrame+0x11e>
 8006220:	4b4a      	ldr	r3, [pc, #296]	@ (800634c <rxSessionAcceptFrame+0x23c>)
 8006222:	4a43      	ldr	r2, [pc, #268]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 8006224:	f240 3107 	movw	r1, #775	@ 0x307
 8006228:	4842      	ldr	r0, [pc, #264]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 800622a:	f000 fe0d 	bl	8006e48 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 800622e:	68b9      	ldr	r1, [r7, #8]
 8006230:	68f8      	ldr	r0, [r7, #12]
 8006232:	f7ff ff27 	bl	8006084 <rxSessionRestart>
 8006236:	e072      	b.n	800631e <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	7c1b      	ldrb	r3, [r3, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d05f      	beq.n	8006300 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8006240:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d006      	beq.n	8006256 <rxSessionAcceptFrame+0x146>
 8006248:	4b41      	ldr	r3, [pc, #260]	@ (8006350 <rxSessionAcceptFrame+0x240>)
 800624a:	4a39      	ldr	r2, [pc, #228]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 800624c:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8006250:	4838      	ldr	r0, [pc, #224]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 8006252:	f000 fdf9 	bl	8006e48 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 8006256:	7dbb      	ldrb	r3, [r7, #22]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d103      	bne.n	8006264 <rxSessionAcceptFrame+0x154>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	8a9b      	ldrh	r3, [r3, #20]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d148      	bne.n	80062f6 <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 8006264:	2301      	movs	r3, #1
 8006266:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8006268:	6a3b      	ldr	r3, [r7, #32]
 800626a:	4619      	mov	r1, r3
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fd95 	bl	8005d9c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006278:	6a39      	ldr	r1, [r7, #32]
 800627a:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	68da      	ldr	r2, [r3, #12]
 8006282:	6a3b      	ldr	r3, [r7, #32]
 8006284:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	691a      	ldr	r2, [r3, #16]
 800628a:	6a3b      	ldr	r3, [r7, #32]
 800628c:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	689a      	ldr	r2, [r3, #8]
 8006292:	68bb      	ldr	r3, [r7, #8]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	429a      	cmp	r2, r3
 8006298:	d206      	bcs.n	80062a8 <rxSessionAcceptFrame+0x198>
 800629a:	4b2e      	ldr	r3, [pc, #184]	@ (8006354 <rxSessionAcceptFrame+0x244>)
 800629c:	4a24      	ldr	r2, [pc, #144]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 800629e:	f240 3116 	movw	r1, #790	@ 0x316
 80062a2:	4824      	ldr	r0, [pc, #144]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 80062a4:	f000 fdd0 	bl	8006e48 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	689a      	ldr	r2, [r3, #8]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	68db      	ldr	r3, [r3, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 80062b4:	7dbb      	ldrb	r3, [r7, #22]
 80062b6:	f083 0301 	eor.w	r3, r3, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d017      	beq.n	80062f0 <rxSessionAcceptFrame+0x1e0>
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d814      	bhi.n	80062f0 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 80062c6:	6a3b      	ldr	r3, [r7, #32]
 80062c8:	691a      	ldr	r2, [r3, #16]
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	f1c3 0302 	rsb	r3, r3, #2
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d206      	bcs.n	80062e2 <rxSessionAcceptFrame+0x1d2>
 80062d4:	4b20      	ldr	r3, [pc, #128]	@ (8006358 <rxSessionAcceptFrame+0x248>)
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <rxSessionAcceptFrame+0x220>)
 80062d8:	f240 311a 	movw	r1, #794	@ 0x31a
 80062dc:	4815      	ldr	r0, [pc, #84]	@ (8006334 <rxSessionAcceptFrame+0x224>)
 80062de:	f000 fdb3 	bl	8006e48 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	691a      	ldr	r2, [r3, #16]
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	4413      	add	r3, r2
 80062ea:	1e9a      	subs	r2, r3, #2
 80062ec:	6a3b      	ldr	r3, [r7, #32]
 80062ee:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 80062f0:	68bb      	ldr	r3, [r7, #8]
 80062f2:	2200      	movs	r2, #0
 80062f4:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 80062f6:	68b9      	ldr	r1, [r7, #8]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fec3 	bl	8006084 <rxSessionRestart>
 80062fe:	e00e      	b.n	800631e <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8006300:	68bb      	ldr	r3, [r7, #8]
 8006302:	7e1b      	ldrb	r3, [r3, #24]
 8006304:	2b00      	cmp	r3, #0
 8006306:	bf14      	ite	ne
 8006308:	2301      	movne	r3, #1
 800630a:	2300      	moveq	r3, #0
 800630c:	b2db      	uxtb	r3, r3
 800630e:	f083 0301 	eor.w	r3, r3, #1
 8006312:	b2db      	uxtb	r3, r3
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	b2da      	uxtb	r2, r3
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	761a      	strb	r2, [r3, #24]
    }
    return out;
 800631e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3718      	adds	r7, #24
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	080089a4 	.word	0x080089a4
 8006330:	080095c8 	.word	0x080095c8
 8006334:	080087f8 	.word	0x080087f8
 8006338:	08008d00 	.word	0x08008d00
 800633c:	08008c38 	.word	0x08008c38
 8006340:	08008c94 	.word	0x08008c94
 8006344:	08008dd4 	.word	0x08008dd4
 8006348:	08008cb4 	.word	0x08008cb4
 800634c:	08008dfc 	.word	0x08008dfc
 8006350:	08008e08 	.word	0x08008e08
 8006354:	08008e14 	.word	0x08008e14
 8006358:	08008e44 	.word	0x08008e44

0800635c <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 800635c:	b5b0      	push	{r4, r5, r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	4613      	mov	r3, r2
 8006368:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d106      	bne.n	800637e <rxSessionSynchronize+0x22>
 8006370:	4b5c      	ldr	r3, [pc, #368]	@ (80064e4 <rxSessionSynchronize+0x188>)
 8006372:	4a5d      	ldr	r2, [pc, #372]	@ (80064e8 <rxSessionSynchronize+0x18c>)
 8006374:	f44f 7150 	mov.w	r1, #832	@ 0x340
 8006378:	485c      	ldr	r0, [pc, #368]	@ (80064ec <rxSessionSynchronize+0x190>)
 800637a:	f000 fd65 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d106      	bne.n	8006392 <rxSessionSynchronize+0x36>
 8006384:	4b5a      	ldr	r3, [pc, #360]	@ (80064f0 <rxSessionSynchronize+0x194>)
 8006386:	4a58      	ldr	r2, [pc, #352]	@ (80064e8 <rxSessionSynchronize+0x18c>)
 8006388:	f240 3141 	movw	r1, #833	@ 0x341
 800638c:	4857      	ldr	r0, [pc, #348]	@ (80064ec <rxSessionSynchronize+0x190>)
 800638e:	f000 fd5b 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	7d9b      	ldrb	r3, [r3, #22]
 8006396:	2b1f      	cmp	r3, #31
 8006398:	d906      	bls.n	80063a8 <rxSessionSynchronize+0x4c>
 800639a:	4b56      	ldr	r3, [pc, #344]	@ (80064f4 <rxSessionSynchronize+0x198>)
 800639c:	4a52      	ldr	r2, [pc, #328]	@ (80064e8 <rxSessionSynchronize+0x18c>)
 800639e:	f240 3142 	movw	r1, #834	@ 0x342
 80063a2:	4852      	ldr	r0, [pc, #328]	@ (80064ec <rxSessionSynchronize+0x190>)
 80063a4:	f000 fd50 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	7b9b      	ldrb	r3, [r3, #14]
 80063ac:	2b1f      	cmp	r3, #31
 80063ae:	d906      	bls.n	80063be <rxSessionSynchronize+0x62>
 80063b0:	4b51      	ldr	r3, [pc, #324]	@ (80064f8 <rxSessionSynchronize+0x19c>)
 80063b2:	4a4d      	ldr	r2, [pc, #308]	@ (80064e8 <rxSessionSynchronize+0x18c>)
 80063b4:	f240 3143 	movw	r1, #835	@ 0x343
 80063b8:	484c      	ldr	r0, [pc, #304]	@ (80064ec <rxSessionSynchronize+0x190>)
 80063ba:	f000 fd45 	bl	8006e48 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	7ddb      	ldrb	r3, [r3, #23]
 80063c2:	79fa      	ldrb	r2, [r7, #7]
 80063c4:	429a      	cmp	r2, r3
 80063c6:	bf0c      	ite	eq
 80063c8:	2301      	moveq	r3, #1
 80063ca:	2300      	movne	r3, #0
 80063cc:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	7d9a      	ldrb	r2, [r3, #22]
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	7b9b      	ldrb	r3, [r3, #14]
 80063d6:	429a      	cmp	r2, r3
 80063d8:	bf0c      	ite	eq
 80063da:	2301      	moveq	r3, #1
 80063dc:	2300      	movne	r3, #0
 80063de:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	7d9a      	ldrb	r2, [r3, #22]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	7b9b      	ldrb	r3, [r3, #14]
 80063e8:	4619      	mov	r1, r3
 80063ea:	4610      	mov	r0, r2
 80063ec:	f7ff fd1c 	bl	8005e28 <rxComputeTransferIDDifference>
 80063f0:	4603      	mov	r3, r0
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	bf8c      	ite	hi
 80063f6:	2301      	movhi	r3, #1
 80063f8:	2300      	movls	r3, #0
 80063fa:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006402:	68f9      	ldr	r1, [r7, #12]
 8006404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006408:	4290      	cmp	r0, r2
 800640a:	eb71 0303 	sbcs.w	r3, r1, r3
 800640e:	d20f      	bcs.n	8006430 <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641c:	1a84      	subs	r4, r0, r2
 800641e:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8006422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006426:	42a2      	cmp	r2, r4
 8006428:	41ab      	sbcs	r3, r5
 800642a:	d201      	bcs.n	8006430 <rxSessionSynchronize+0xd4>
 800642c:	2301      	movs	r3, #1
 800642e:	e000      	b.n	8006432 <rxSessionSynchronize+0xd6>
 8006430:	2300      	movs	r3, #0
 8006432:	753b      	strb	r3, [r7, #20]
 8006434:	7d3b      	ldrb	r3, [r7, #20]
 8006436:	f003 0301 	and.w	r3, r3, #1
 800643a:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	bf0c      	ite	eq
 8006444:	2301      	moveq	r3, #1
 8006446:	2300      	movne	r3, #0
 8006448:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 800644a:	7dfb      	ldrb	r3, [r7, #23]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d002      	beq.n	8006456 <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 8006450:	7d7b      	ldrb	r3, [r7, #21]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d114      	bne.n	8006480 <rxSessionSynchronize+0x124>
 8006456:	7dfb      	ldrb	r3, [r7, #23]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 800645c:	7d3b      	ldrb	r3, [r7, #20]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10e      	bne.n	8006480 <rxSessionSynchronize+0x124>
 8006462:	7d3b      	ldrb	r3, [r7, #20]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d002      	beq.n	800646e <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 8006468:	7d7b      	ldrb	r3, [r7, #21]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d108      	bne.n	8006480 <rxSessionSynchronize+0x124>
 800646e:	7d3b      	ldrb	r3, [r7, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 8006474:	7dbb      	ldrb	r3, [r7, #22]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d004      	beq.n	8006484 <rxSessionSynchronize+0x128>
 800647a:	7cfb      	ldrb	r3, [r7, #19]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d001      	beq.n	8006484 <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 8006480:	2301      	movs	r3, #1
 8006482:	e000      	b.n	8006486 <rxSessionSynchronize+0x12a>
 8006484:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 8006486:	74bb      	strb	r3, [r7, #18]
 8006488:	7cbb      	ldrb	r3, [r7, #18]
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	7bdb      	ldrb	r3, [r3, #15]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d021      	beq.n	80064dc <rxSessionSynchronize+0x180>
 8006498:	7cbb      	ldrb	r3, [r7, #18]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d01e      	beq.n	80064dc <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	7bdb      	ldrb	r3, [r3, #15]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d106      	bne.n	80064b4 <rxSessionSynchronize+0x158>
 80064a6:	4b15      	ldr	r3, [pc, #84]	@ (80064fc <rxSessionSynchronize+0x1a0>)
 80064a8:	4a0f      	ldr	r2, [pc, #60]	@ (80064e8 <rxSessionSynchronize+0x18c>)
 80064aa:	f240 3159 	movw	r1, #857	@ 0x359
 80064ae:	480f      	ldr	r0, [pc, #60]	@ (80064ec <rxSessionSynchronize+0x190>)
 80064b0:	f000 fcca 	bl	8006e48 <__assert_func>
        rxs->total_payload_size    = 0U;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2200      	movs	r2, #0
 80064b8:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80064c6:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	7b9a      	ldrb	r2, [r3, #14]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2201      	movs	r2, #1
 80064d4:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	79fa      	ldrb	r2, [r7, #7]
 80064da:	75da      	strb	r2, [r3, #23]
    }
}
 80064dc:	bf00      	nop
 80064de:	3718      	adds	r7, #24
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bdb0      	pop	{r4, r5, r7, pc}
 80064e4:	08008d00 	.word	0x08008d00
 80064e8:	08009590 	.word	0x08009590
 80064ec:	080087f8 	.word	0x080087f8
 80064f0:	08008c38 	.word	0x08008c38
 80064f4:	08008e7c 	.word	0x08008e7c
 80064f8:	08008dd4 	.word	0x08008dd4
 80064fc:	08008ea4 	.word	0x08008ea4

08006500 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b088      	sub	sp, #32
 8006504:	af02      	add	r7, sp, #8
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	60b9      	str	r1, [r7, #8]
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d106      	bne.n	8006522 <rxSessionUpdate+0x22>
 8006514:	4b48      	ldr	r3, [pc, #288]	@ (8006638 <rxSessionUpdate+0x138>)
 8006516:	4a49      	ldr	r2, [pc, #292]	@ (800663c <rxSessionUpdate+0x13c>)
 8006518:	f240 3172 	movw	r1, #882	@ 0x372
 800651c:	4848      	ldr	r0, [pc, #288]	@ (8006640 <rxSessionUpdate+0x140>)
 800651e:	f000 fc93 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d106      	bne.n	8006536 <rxSessionUpdate+0x36>
 8006528:	4b46      	ldr	r3, [pc, #280]	@ (8006644 <rxSessionUpdate+0x144>)
 800652a:	4a44      	ldr	r2, [pc, #272]	@ (800663c <rxSessionUpdate+0x13c>)
 800652c:	f240 3173 	movw	r1, #883	@ 0x373
 8006530:	4843      	ldr	r0, [pc, #268]	@ (8006640 <rxSessionUpdate+0x140>)
 8006532:	f000 fc89 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d106      	bne.n	800654a <rxSessionUpdate+0x4a>
 800653c:	4b42      	ldr	r3, [pc, #264]	@ (8006648 <rxSessionUpdate+0x148>)
 800653e:	4a3f      	ldr	r2, [pc, #252]	@ (800663c <rxSessionUpdate+0x13c>)
 8006540:	f44f 715d 	mov.w	r1, #884	@ 0x374
 8006544:	483e      	ldr	r0, [pc, #248]	@ (8006640 <rxSessionUpdate+0x140>)
 8006546:	f000 fc7f 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800654a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800654c:	2b00      	cmp	r3, #0
 800654e:	d106      	bne.n	800655e <rxSessionUpdate+0x5e>
 8006550:	4b3e      	ldr	r3, [pc, #248]	@ (800664c <rxSessionUpdate+0x14c>)
 8006552:	4a3a      	ldr	r2, [pc, #232]	@ (800663c <rxSessionUpdate+0x13c>)
 8006554:	f240 3175 	movw	r1, #885	@ 0x375
 8006558:	4839      	ldr	r0, [pc, #228]	@ (8006640 <rxSessionUpdate+0x140>)
 800655a:	f000 fc75 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	7d9b      	ldrb	r3, [r3, #22]
 8006562:	2b1f      	cmp	r3, #31
 8006564:	d906      	bls.n	8006574 <rxSessionUpdate+0x74>
 8006566:	4b3a      	ldr	r3, [pc, #232]	@ (8006650 <rxSessionUpdate+0x150>)
 8006568:	4a34      	ldr	r2, [pc, #208]	@ (800663c <rxSessionUpdate+0x13c>)
 800656a:	f240 3176 	movw	r1, #886	@ 0x376
 800656e:	4834      	ldr	r0, [pc, #208]	@ (8006640 <rxSessionUpdate+0x140>)
 8006570:	f000 fc6a 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	7b9b      	ldrb	r3, [r3, #14]
 8006578:	2b1f      	cmp	r3, #31
 800657a:	d906      	bls.n	800658a <rxSessionUpdate+0x8a>
 800657c:	4b35      	ldr	r3, [pc, #212]	@ (8006654 <rxSessionUpdate+0x154>)
 800657e:	4a2f      	ldr	r2, [pc, #188]	@ (800663c <rxSessionUpdate+0x13c>)
 8006580:	f240 3177 	movw	r1, #887	@ 0x377
 8006584:	482e      	ldr	r0, [pc, #184]	@ (8006640 <rxSessionUpdate+0x140>)
 8006586:	f000 fc5f 	bl	8006e48 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 800658a:	78f9      	ldrb	r1, [r7, #3]
 800658c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006590:	e9cd 2300 	strd	r2, r3, [sp]
 8006594:	460a      	mov	r2, r1
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	68b8      	ldr	r0, [r7, #8]
 800659a:	f7ff fedf 	bl	800635c <rxSessionSynchronize>
    int8_t out = 0;
 800659e:	2300      	movs	r3, #0
 80065a0:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	7ddb      	ldrb	r3, [r3, #23]
 80065a6:	78fa      	ldrb	r2, [r7, #3]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	bf0c      	ite	eq
 80065ac:	2301      	moveq	r3, #1
 80065ae:	2300      	movne	r3, #0
 80065b0:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	7c5a      	ldrb	r2, [r3, #17]
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	7e1b      	ldrb	r3, [r3, #24]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	bf0c      	ite	eq
 80065be:	2301      	moveq	r3, #1
 80065c0:	2300      	movne	r3, #0
 80065c2:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	7b9a      	ldrb	r2, [r3, #14]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	7d9b      	ldrb	r3, [r3, #22]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	bf0c      	ite	eq
 80065d0:	2301      	moveq	r3, #1
 80065d2:	2300      	movne	r3, #0
 80065d4:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d007      	beq.n	80065ee <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	bf0c      	ite	eq
 80065e6:	2301      	moveq	r3, #1
 80065e8:	2300      	movne	r3, #0
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	e006      	b.n	80065fc <rxSessionUpdate+0xfc>
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	689b      	ldr	r3, [r3, #8]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	bf14      	ite	ne
 80065f6:	2301      	movne	r3, #1
 80065f8:	2300      	moveq	r3, #0
 80065fa:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 80065fc:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 80065fe:	7dbb      	ldrb	r3, [r7, #22]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d012      	beq.n	800662a <rxSessionUpdate+0x12a>
 8006604:	7d7b      	ldrb	r3, [r7, #21]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d00f      	beq.n	800662a <rxSessionUpdate+0x12a>
 800660a:	7d3b      	ldrb	r3, [r7, #20]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00c      	beq.n	800662a <rxSessionUpdate+0x12a>
 8006610:	7cfb      	ldrb	r3, [r7, #19]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d009      	beq.n	800662a <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 8006616:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006618:	9300      	str	r3, [sp, #0]
 800661a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	68b9      	ldr	r1, [r7, #8]
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f7ff fd75 	bl	8006110 <rxSessionAcceptFrame>
 8006626:	4603      	mov	r3, r0
 8006628:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 800662a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800662e:	4618      	mov	r0, r3
 8006630:	3718      	adds	r7, #24
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	080089a4 	.word	0x080089a4
 800663c:	08009580 	.word	0x08009580
 8006640:	080087f8 	.word	0x080087f8
 8006644:	08008d00 	.word	0x08008d00
 8006648:	08008c38 	.word	0x08008c38
 800664c:	08008cb4 	.word	0x08008cb4
 8006650:	08008e7c 	.word	0x08008e7c
 8006654:	08008dd4 	.word	0x08008dd4

08006658 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8006658:	b5b0      	push	{r4, r5, r7, lr}
 800665a:	b08c      	sub	sp, #48	@ 0x30
 800665c:	af04      	add	r7, sp, #16
 800665e:	60f8      	str	r0, [r7, #12]
 8006660:	60b9      	str	r1, [r7, #8]
 8006662:	607a      	str	r2, [r7, #4]
 8006664:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d106      	bne.n	800667a <rxAcceptFrame+0x22>
 800666c:	4b85      	ldr	r3, [pc, #532]	@ (8006884 <rxAcceptFrame+0x22c>)
 800666e:	4a86      	ldr	r2, [pc, #536]	@ (8006888 <rxAcceptFrame+0x230>)
 8006670:	f240 3196 	movw	r1, #918	@ 0x396
 8006674:	4885      	ldr	r0, [pc, #532]	@ (800688c <rxAcceptFrame+0x234>)
 8006676:	f000 fbe7 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d106      	bne.n	800668e <rxAcceptFrame+0x36>
 8006680:	4b83      	ldr	r3, [pc, #524]	@ (8006890 <rxAcceptFrame+0x238>)
 8006682:	4a81      	ldr	r2, [pc, #516]	@ (8006888 <rxAcceptFrame+0x230>)
 8006684:	f240 3197 	movw	r1, #919	@ 0x397
 8006688:	4880      	ldr	r0, [pc, #512]	@ (800688c <rxAcceptFrame+0x234>)
 800668a:	f000 fbdd 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 800668e:	68bb      	ldr	r3, [r7, #8]
 8006690:	8b9a      	ldrh	r2, [r3, #28]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	895b      	ldrh	r3, [r3, #10]
 8006696:	429a      	cmp	r2, r3
 8006698:	d006      	beq.n	80066a8 <rxAcceptFrame+0x50>
 800669a:	4b7e      	ldr	r3, [pc, #504]	@ (8006894 <rxAcceptFrame+0x23c>)
 800669c:	4a7a      	ldr	r2, [pc, #488]	@ (8006888 <rxAcceptFrame+0x230>)
 800669e:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80066a2:	487a      	ldr	r0, [pc, #488]	@ (800688c <rxAcceptFrame+0x234>)
 80066a4:	f000 fbd0 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d106      	bne.n	80066bc <rxAcceptFrame+0x64>
 80066ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006898 <rxAcceptFrame+0x240>)
 80066b0:	4a75      	ldr	r2, [pc, #468]	@ (8006888 <rxAcceptFrame+0x230>)
 80066b2:	f240 3199 	movw	r1, #921	@ 0x399
 80066b6:	4875      	ldr	r0, [pc, #468]	@ (800688c <rxAcceptFrame+0x234>)
 80066b8:	f000 fbc6 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	699b      	ldr	r3, [r3, #24]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d106      	bne.n	80066d2 <rxAcceptFrame+0x7a>
 80066c4:	4b75      	ldr	r3, [pc, #468]	@ (800689c <rxAcceptFrame+0x244>)
 80066c6:	4a70      	ldr	r2, [pc, #448]	@ (8006888 <rxAcceptFrame+0x230>)
 80066c8:	f240 319a 	movw	r1, #922	@ 0x39a
 80066cc:	486f      	ldr	r0, [pc, #444]	@ (800688c <rxAcceptFrame+0x234>)
 80066ce:	f000 fbbb 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	7b9b      	ldrb	r3, [r3, #14]
 80066d6:	2b1f      	cmp	r3, #31
 80066d8:	d906      	bls.n	80066e8 <rxAcceptFrame+0x90>
 80066da:	4b71      	ldr	r3, [pc, #452]	@ (80068a0 <rxAcceptFrame+0x248>)
 80066dc:	4a6a      	ldr	r2, [pc, #424]	@ (8006888 <rxAcceptFrame+0x230>)
 80066de:	f240 319b 	movw	r1, #923	@ 0x39b
 80066e2:	486a      	ldr	r0, [pc, #424]	@ (800688c <rxAcceptFrame+0x234>)
 80066e4:	f000 fbb0 	bl	8006e48 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	7b5b      	ldrb	r3, [r3, #13]
 80066ec:	2bff      	cmp	r3, #255	@ 0xff
 80066ee:	d00c      	beq.n	800670a <rxAcceptFrame+0xb2>
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	791a      	ldrb	r2, [r3, #4]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	7b5b      	ldrb	r3, [r3, #13]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d006      	beq.n	800670a <rxAcceptFrame+0xb2>
 80066fc:	4b69      	ldr	r3, [pc, #420]	@ (80068a4 <rxAcceptFrame+0x24c>)
 80066fe:	4a62      	ldr	r2, [pc, #392]	@ (8006888 <rxAcceptFrame+0x230>)
 8006700:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8006704:	4861      	ldr	r0, [pc, #388]	@ (800688c <rxAcceptFrame+0x234>)
 8006706:	f000 fb9f 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 800670a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800670c:	2b00      	cmp	r3, #0
 800670e:	d106      	bne.n	800671e <rxAcceptFrame+0xc6>
 8006710:	4b65      	ldr	r3, [pc, #404]	@ (80068a8 <rxAcceptFrame+0x250>)
 8006712:	4a5d      	ldr	r2, [pc, #372]	@ (8006888 <rxAcceptFrame+0x230>)
 8006714:	f240 319d 	movw	r1, #925	@ 0x39d
 8006718:	485c      	ldr	r0, [pc, #368]	@ (800688c <rxAcceptFrame+0x234>)
 800671a:	f000 fb95 	bl	8006e48 <__assert_func>

    int8_t out = 0;
 800671e:	2300      	movs	r3, #0
 8006720:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	7b1b      	ldrb	r3, [r3, #12]
 8006726:	b25b      	sxtb	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	db6c      	blt.n	8006806 <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	7b1b      	ldrb	r3, [r3, #12]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	3308      	adds	r3, #8
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	685b      	ldr	r3, [r3, #4]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d134      	bne.n	80067a8 <rxAcceptFrame+0x150>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7bdb      	ldrb	r3, [r3, #15]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d030      	beq.n	80067a8 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	2120      	movs	r1, #32
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	4798      	blx	r3
 8006750:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7b1b      	ldrb	r3, [r3, #12]
 8006756:	68ba      	ldr	r2, [r7, #8]
 8006758:	3308      	adds	r3, #8
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	693a      	ldr	r2, [r7, #16]
 8006760:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01d      	beq.n	80067a4 <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	6939      	ldr	r1, [r7, #16]
 8006770:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2200      	movs	r2, #0
 8006778:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	2200      	movs	r2, #0
 800677e:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	2200      	movs	r2, #0
 8006784:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800678c:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	7b9a      	ldrb	r2, [r3, #14]
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	78fa      	ldrb	r2, [r7, #3]
 800679a:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	2201      	movs	r2, #1
 80067a0:	761a      	strb	r2, [r3, #24]
 80067a2:	e001      	b.n	80067a8 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 80067a4:	23fd      	movs	r3, #253	@ 0xfd
 80067a6:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	7b1b      	ldrb	r3, [r3, #12]
 80067ac:	68ba      	ldr	r2, [r7, #8]
 80067ae:	3308      	adds	r3, #8
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	4413      	add	r3, r2
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d05e      	beq.n	8006878 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 80067ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d006      	beq.n	80067d0 <rxAcceptFrame+0x178>
 80067c2:	4b3a      	ldr	r3, [pc, #232]	@ (80068ac <rxAcceptFrame+0x254>)
 80067c4:	4a30      	ldr	r2, [pc, #192]	@ (8006888 <rxAcceptFrame+0x230>)
 80067c6:	f44f 716f 	mov.w	r1, #956	@ 0x3bc
 80067ca:	4830      	ldr	r0, [pc, #192]	@ (800688c <rxAcceptFrame+0x234>)
 80067cc:	f000 fb3c 	bl	8006e48 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	7b1b      	ldrb	r3, [r3, #12]
 80067d4:	68ba      	ldr	r2, [r7, #8]
 80067d6:	3308      	adds	r3, #8
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	6989      	ldr	r1, [r1, #24]
 80067e8:	78fd      	ldrb	r5, [r7, #3]
 80067ea:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80067ec:	9003      	str	r0, [sp, #12]
 80067ee:	9102      	str	r1, [sp, #8]
 80067f0:	e9cd 2300 	strd	r2, r3, [sp]
 80067f4:	462b      	mov	r3, r5
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	4621      	mov	r1, r4
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff fe80 	bl	8006500 <rxSessionUpdate>
 8006800:	4603      	mov	r3, r0
 8006802:	77fb      	strb	r3, [r7, #31]
 8006804:	e038      	b.n	8006878 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	7b1b      	ldrb	r3, [r3, #12]
 800680a:	2bff      	cmp	r3, #255	@ 0xff
 800680c:	d006      	beq.n	800681c <rxAcceptFrame+0x1c4>
 800680e:	4b28      	ldr	r3, [pc, #160]	@ (80068b0 <rxAcceptFrame+0x258>)
 8006810:	4a1d      	ldr	r2, [pc, #116]	@ (8006888 <rxAcceptFrame+0x230>)
 8006812:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8006816:	481d      	ldr	r0, [pc, #116]	@ (800688c <rxAcceptFrame+0x234>)
 8006818:	f000 fb16 	bl	8006e48 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	695a      	ldr	r2, [r3, #20]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8006824:	4293      	cmp	r3, r2
 8006826:	bf28      	it	cs
 8006828:	4613      	movcs	r3, r2
 800682a:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	69b9      	ldr	r1, [r7, #24]
 8006832:	68f8      	ldr	r0, [r7, #12]
 8006834:	4798      	blx	r3
 8006836:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d01a      	beq.n	8006874 <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 800683e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006840:	4619      	mov	r1, r3
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f7ff faaa 	bl	8005d9c <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006850:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8006854:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006856:	69ba      	ldr	r2, [r7, #24]
 8006858:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 800685a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800685c:	697a      	ldr	r2, [r7, #20]
 800685e:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	699b      	ldr	r3, [r3, #24]
 8006864:	69ba      	ldr	r2, [r7, #24]
 8006866:	4619      	mov	r1, r3
 8006868:	6978      	ldr	r0, [r7, #20]
 800686a:	f000 fd86 	bl	800737a <memcpy>
            out = 1;
 800686e:	2301      	movs	r3, #1
 8006870:	77fb      	strb	r3, [r7, #31]
 8006872:	e001      	b.n	8006878 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8006874:	23fd      	movs	r3, #253	@ 0xfd
 8006876:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8006878:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800687c:	4618      	mov	r0, r3
 800687e:	3720      	adds	r7, #32
 8006880:	46bd      	mov	sp, r7
 8006882:	bdb0      	pop	{r4, r5, r7, pc}
 8006884:	080089a4 	.word	0x080089a4
 8006888:	08009570 	.word	0x08009570
 800688c:	080087f8 	.word	0x080087f8
 8006890:	08008ec0 	.word	0x08008ec0
 8006894:	08008edc 	.word	0x08008edc
 8006898:	08008c38 	.word	0x08008c38
 800689c:	08008c94 	.word	0x08008c94
 80068a0:	08008dd4 	.word	0x08008dd4
 80068a4:	08008f04 	.word	0x08008f04
 80068a8:	08008cb4 	.word	0x08008cb4
 80068ac:	08008f5c 	.word	0x08008f5c
 80068b0:	08008f68 	.word	0x08008f68

080068b4 <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	881b      	ldrh	r3, [r3, #0]
 80068c2:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	8b9b      	ldrh	r3, [r3, #28]
 80068c8:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 80068ca:	89fa      	ldrh	r2, [r7, #14]
 80068cc:	89bb      	ldrh	r3, [r7, #12]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d00a      	beq.n	80068e8 <rxSubscriptionPredicateOnPortID+0x34>
 80068d2:	89fa      	ldrh	r2, [r7, #14]
 80068d4:	89bb      	ldrh	r3, [r7, #12]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf8c      	ite	hi
 80068da:	2301      	movhi	r3, #1
 80068dc:	2300      	movls	r3, #0
 80068de:	b2db      	uxtb	r3, r3
 80068e0:	461a      	mov	r2, r3
 80068e2:	4b05      	ldr	r3, [pc, #20]	@ (80068f8 <rxSubscriptionPredicateOnPortID+0x44>)
 80068e4:	569b      	ldrsb	r3, [r3, r2]
 80068e6:	e000      	b.n	80068ea <rxSubscriptionPredicateOnPortID+0x36>
 80068e8:	2300      	movs	r3, #0
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3714      	adds	r7, #20
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr
 80068f6:	bf00      	nop
 80068f8:	0800955c 	.word	0x0800955c

080068fc <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	331c      	adds	r3, #28
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	4618      	mov	r0, r3
 800690e:	f7ff ffd1 	bl	80068b4 <rxSubscriptionPredicateOnPortID>
 8006912:	4603      	mov	r3, r0
}
 8006914:	4618      	mov	r0, r3
 8006916:	3708      	adds	r7, #8
 8006918:	46bd      	mov	sp, r7
 800691a:	bd80      	pop	{r7, pc}

0800691c <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 800691c:	b5b0      	push	{r4, r5, r7, lr}
 800691e:	b08c      	sub	sp, #48	@ 0x30
 8006920:	af00      	add	r7, sp, #0
 8006922:	60f8      	str	r0, [r7, #12]
 8006924:	60b9      	str	r1, [r7, #8]
 8006926:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d106      	bne.n	800693c <canardInit+0x20>
 800692e:	4b16      	ldr	r3, [pc, #88]	@ (8006988 <canardInit+0x6c>)
 8006930:	4a16      	ldr	r2, [pc, #88]	@ (800698c <canardInit+0x70>)
 8006932:	f240 4104 	movw	r1, #1028	@ 0x404
 8006936:	4816      	ldr	r0, [pc, #88]	@ (8006990 <canardInit+0x74>)
 8006938:	f000 fa86 	bl	8006e48 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d106      	bne.n	8006950 <canardInit+0x34>
 8006942:	4b14      	ldr	r3, [pc, #80]	@ (8006994 <canardInit+0x78>)
 8006944:	4a11      	ldr	r2, [pc, #68]	@ (800698c <canardInit+0x70>)
 8006946:	f240 4105 	movw	r1, #1029	@ 0x405
 800694a:	4811      	ldr	r0, [pc, #68]	@ (8006990 <canardInit+0x74>)
 800694c:	f000 fa7c 	bl	8006e48 <__assert_func>
    const CanardInstance out = {
 8006950:	2300      	movs	r3, #0
 8006952:	617b      	str	r3, [r7, #20]
 8006954:	23ff      	movs	r3, #255	@ 0xff
 8006956:	763b      	strb	r3, [r7, #24]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	623b      	str	r3, [r7, #32]
 8006960:	2300      	movs	r3, #0
 8006962:	627b      	str	r3, [r7, #36]	@ 0x24
 8006964:	2300      	movs	r3, #0
 8006966:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006968:	2300      	movs	r3, #0
 800696a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	461d      	mov	r5, r3
 8006970:	f107 0414 	add.w	r4, r7, #20
 8006974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006978:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800697c:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	3730      	adds	r7, #48	@ 0x30
 8006984:	46bd      	mov	sp, r7
 8006986:	bdb0      	pop	{r4, r5, r7, pc}
 8006988:	08008f88 	.word	0x08008f88
 800698c:	080093e4 	.word	0x080093e4
 8006990:	080087f8 	.word	0x080087f8
 8006994:	08008fa8 	.word	0x08008fa8

08006998 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8006998:	b4b0      	push	{r4, r5, r7}
 800699a:	b08b      	sub	sp, #44	@ 0x2c
 800699c:	af00      	add	r7, sp, #0
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	61bb      	str	r3, [r7, #24]
 80069ac:	2300      	movs	r3, #0
 80069ae:	61fb      	str	r3, [r7, #28]
 80069b0:	2300      	movs	r3, #0
 80069b2:	623b      	str	r3, [r7, #32]
 80069b4:	2300      	movs	r3, #0
 80069b6:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	461d      	mov	r5, r3
 80069bc:	f107 0414 	add.w	r4, r7, #20
 80069c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80069c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80069c4:	6823      	ldr	r3, [r4, #0]
 80069c6:	602b      	str	r3, [r5, #0]
}
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	372c      	adds	r7, #44	@ 0x2c
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bcb0      	pop	{r4, r5, r7}
 80069d0:	4770      	bx	lr
	...

080069d4 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b08e      	sub	sp, #56	@ 0x38
 80069d8:	af06      	add	r7, sp, #24
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	60b9      	str	r1, [r7, #8]
 80069de:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80069e2:	f06f 0301 	mvn.w	r3, #1
 80069e6:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d062      	beq.n	8006ab4 <canardTxPush+0xe0>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d05f      	beq.n	8006ab4 <canardTxPush+0xe0>
 80069f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d05c      	beq.n	8006ab4 <canardTxPush+0xe0>
 80069fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d102      	bne.n	8006a06 <canardTxPush+0x32>
 8006a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d156      	bne.n	8006ab4 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f7fe fb7a 	bl	8005104 <adjustPresentationLayerMTU>
 8006a10:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	791a      	ldrb	r2, [r3, #4]
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006a1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006a22:	f7fe fb9f 	bl	8005164 <txMakeCANID>
 8006a26:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	db40      	blt.n	8006ab0 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8006a2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a30:	69bb      	ldr	r3, [r7, #24]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d81c      	bhi.n	8006a70 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8006a36:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8006a38:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a3a:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8006a3c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a3e:	9103      	str	r1, [sp, #12]
 8006a40:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a42:	9102      	str	r1, [sp, #8]
 8006a44:	9201      	str	r2, [sp, #4]
 8006a46:	9300      	str	r3, [sp, #0]
 8006a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4c:	68b9      	ldr	r1, [r7, #8]
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fe fd52 	bl	80054f8 <txPushSingleFrame>
 8006a54:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db2b      	blt.n	8006ab4 <canardTxPush+0xe0>
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d028      	beq.n	8006ab4 <canardTxPush+0xe0>
 8006a62:	4b1c      	ldr	r3, [pc, #112]	@ (8006ad4 <canardTxPush+0x100>)
 8006a64:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <canardTxPush+0x104>)
 8006a66:	f240 4133 	movw	r1, #1075	@ 0x433
 8006a6a:	481c      	ldr	r0, [pc, #112]	@ (8006adc <canardTxPush+0x108>)
 8006a6c:	f000 f9ec 	bl	8006e48 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8006a70:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8006a72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006a74:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 8006a76:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006a78:	9105      	str	r1, [sp, #20]
 8006a7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006a7c:	9104      	str	r1, [sp, #16]
 8006a7e:	9203      	str	r2, [sp, #12]
 8006a80:	9302      	str	r3, [sp, #8]
 8006a82:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a86:	e9cd 2300 	strd	r2, r3, [sp]
 8006a8a:	69ba      	ldr	r2, [r7, #24]
 8006a8c:	68b9      	ldr	r1, [r7, #8]
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7fe ff4c 	bl	800592c <txPushMultiFrame>
 8006a94:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 8006a96:	69fb      	ldr	r3, [r7, #28]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	db0b      	blt.n	8006ab4 <canardTxPush+0xe0>
 8006a9c:	69fb      	ldr	r3, [r7, #28]
 8006a9e:	2b01      	cmp	r3, #1
 8006aa0:	dc08      	bgt.n	8006ab4 <canardTxPush+0xe0>
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ae0 <canardTxPush+0x10c>)
 8006aa4:	4a0c      	ldr	r2, [pc, #48]	@ (8006ad8 <canardTxPush+0x104>)
 8006aa6:	f240 413f 	movw	r1, #1087	@ 0x43f
 8006aaa:	480c      	ldr	r0, [pc, #48]	@ (8006adc <canardTxPush+0x108>)
 8006aac:	f000 f9cc 	bl	8006e48 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d106      	bne.n	8006ac8 <canardTxPush+0xf4>
 8006aba:	4b0a      	ldr	r3, [pc, #40]	@ (8006ae4 <canardTxPush+0x110>)
 8006abc:	4a06      	ldr	r2, [pc, #24]	@ (8006ad8 <canardTxPush+0x104>)
 8006abe:	f240 4147 	movw	r1, #1095	@ 0x447
 8006ac2:	4806      	ldr	r0, [pc, #24]	@ (8006adc <canardTxPush+0x108>)
 8006ac4:	f000 f9c0 	bl	8006e48 <__assert_func>
    return out;
 8006ac8:	69fb      	ldr	r3, [r7, #28]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3720      	adds	r7, #32
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	08008adc 	.word	0x08008adc
 8006ad8:	080093f0 	.word	0x080093f0
 8006adc:	080087f8 	.word	0x080087f8
 8006ae0:	08008c20 	.word	0x08008c20
 8006ae4:	08008fc4 	.word	0x08008fc4

08006ae8 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8006af0:	2300      	movs	r3, #0
 8006af2:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d006      	beq.n	8006b08 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	68db      	ldr	r3, [r3, #12]
 8006afe:	2100      	movs	r1, #0
 8006b00:	4618      	mov	r0, r3
 8006b02:	f7fd fe95 	bl	8004830 <cavlFindExtremum>
 8006b06:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}

08006b12 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8006b12:	b580      	push	{r7, lr}
 8006b14:	b084      	sub	sp, #16
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6078      	str	r0, [r7, #4]
 8006b1a:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d010      	beq.n	8006b48 <canardTxPop+0x36>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d00d      	beq.n	8006b48 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	330c      	adds	r3, #12
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	4611      	mov	r1, r2
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f7fe f8cf 	bl	8004cdc <cavlRemove>
        que->size--;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	1e5a      	subs	r2, r3, #1
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	609a      	str	r2, [r3, #8]
    }
    return out;
 8006b48:	68fb      	ldr	r3, [r7, #12]
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3710      	adds	r7, #16
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
	...

08006b54 <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b090      	sub	sp, #64	@ 0x40
 8006b58:	af02      	add	r7, sp, #8
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8006b60:	23fe      	movs	r3, #254	@ 0xfe
 8006b62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d068      	beq.n	8006c3e <canardRxAccept+0xea>
 8006b6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d065      	beq.n	8006c3e <canardRxAccept+0xea>
 8006b72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d062      	beq.n	8006c3e <canardRxAccept+0xea>
 8006b78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b80:	d25d      	bcs.n	8006c3e <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8006b82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b84:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d103      	bne.n	8006b92 <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8006b8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d155      	bne.n	8006c3e <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 8006b92:	f107 0310 	add.w	r3, r7, #16
 8006b96:	2220      	movs	r2, #32
 8006b98:	2100      	movs	r1, #0
 8006b9a:	4618      	mov	r0, r3
 8006b9c:	f000 fb61 	bl	8007262 <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8006ba0:	f107 0310 	add.w	r3, r7, #16
 8006ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ba6:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006baa:	f7fe ffb3 	bl	8005b14 <rxTryParseFrame>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d041      	beq.n	8006c38 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 8006bb4:	7f7b      	ldrb	r3, [r7, #29]
 8006bb6:	2bff      	cmp	r3, #255	@ 0xff
 8006bb8:	d004      	beq.n	8006bc4 <canardRxAccept+0x70>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	791a      	ldrb	r2, [r3, #4]
 8006bbe:	7f7b      	ldrb	r3, [r7, #29]
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	d135      	bne.n	8006c30 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8006bc4:	7e7b      	ldrb	r3, [r7, #25]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	009b      	lsls	r3, r3, #2
 8006bca:	68fa      	ldr	r2, [r7, #12]
 8006bcc:	18d0      	adds	r0, r2, r3
 8006bce:	f107 0310 	add.w	r3, r7, #16
 8006bd2:	f103 010a 	add.w	r1, r3, #10
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4a21      	ldr	r2, [pc, #132]	@ (8006c60 <canardRxAccept+0x10c>)
 8006bda:	f7fe f801 	bl	8004be0 <cavlSearch>
 8006bde:	6338      	str	r0, [r7, #48]	@ 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 8006be0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d002      	beq.n	8006bec <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8006be6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006be8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bea:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8006bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d01a      	beq.n	8006c28 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 8006bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf4:	8b9a      	ldrh	r2, [r3, #28]
 8006bf6:	8b7b      	ldrh	r3, [r7, #26]
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	d006      	beq.n	8006c0a <canardRxAccept+0xb6>
 8006bfc:	4b19      	ldr	r3, [pc, #100]	@ (8006c64 <canardRxAccept+0x110>)
 8006bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8006c68 <canardRxAccept+0x114>)
 8006c00:	f44f 6191 	mov.w	r1, #1160	@ 0x488
 8006c04:	4819      	ldr	r0, [pc, #100]	@ (8006c6c <canardRxAccept+0x118>)
 8006c06:	f000 f91f 	bl	8006e48 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 8006c0a:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8006c0e:	f107 0210 	add.w	r2, r7, #16
 8006c12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006c14:	9300      	str	r3, [sp, #0]
 8006c16:	460b      	mov	r3, r1
 8006c18:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c1a:	68f8      	ldr	r0, [r7, #12]
 8006c1c:	f7ff fd1c 	bl	8006658 <rxAcceptFrame>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8006c26:	e00a      	b.n	8006c3e <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8006c28:	2300      	movs	r3, #0
 8006c2a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8006c2e:	e006      	b.n	8006c3e <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8006c30:	2300      	movs	r3, #0
 8006c32:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006c36:	e002      	b.n	8006c3e <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 8006c38:	2300      	movs	r3, #0
 8006c3a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 8006c3e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	dd06      	ble.n	8006c54 <canardRxAccept+0x100>
 8006c46:	4b0a      	ldr	r3, [pc, #40]	@ (8006c70 <canardRxAccept+0x11c>)
 8006c48:	4a07      	ldr	r2, [pc, #28]	@ (8006c68 <canardRxAccept+0x114>)
 8006c4a:	f240 419a 	movw	r1, #1178	@ 0x49a
 8006c4e:	4807      	ldr	r0, [pc, #28]	@ (8006c6c <canardRxAccept+0x118>)
 8006c50:	f000 f8fa 	bl	8006e48 <__assert_func>
    return out;
 8006c54:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	3738      	adds	r7, #56	@ 0x38
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	bd80      	pop	{r7, pc}
 8006c60:	080068b5 	.word	0x080068b5
 8006c64:	08008fd0 	.word	0x08008fd0
 8006c68:	0800954c 	.word	0x0800954c
 8006c6c:	080087f8 	.word	0x080087f8
 8006c70:	08008ff0 	.word	0x08008ff0

08006c74 <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b088      	sub	sp, #32
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	607b      	str	r3, [r7, #4]
 8006c7e:	460b      	mov	r3, r1
 8006c80:	72fb      	strb	r3, [r7, #11]
 8006c82:	4613      	mov	r3, r2
 8006c84:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8006c86:	23fe      	movs	r3, #254	@ 0xfe
 8006c88:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8006c8a:	7afb      	ldrb	r3, [r7, #11]
 8006c8c:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d04a      	beq.n	8006d2a <canardRxSubscribe+0xb6>
 8006c94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d047      	beq.n	8006d2a <canardRxSubscribe+0xb6>
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d844      	bhi.n	8006d2a <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8006ca0:	893a      	ldrh	r2, [r7, #8]
 8006ca2:	7afb      	ldrb	r3, [r7, #11]
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f850 	bl	8006d4c <canardRxUnsubscribe>
 8006cac:	4603      	mov	r3, r0
 8006cae:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8006cb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	db38      	blt.n	8006d2a <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8006cb8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006cbe:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8006cc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cc4:	687a      	ldr	r2, [r7, #4]
 8006cc6:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8006cc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cca:	893a      	ldrh	r2, [r7, #8]
 8006ccc:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006cce:	2300      	movs	r3, #0
 8006cd0:	61bb      	str	r3, [r7, #24]
 8006cd2:	e009      	b.n	8006ce8 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 8006cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cd6:	69bb      	ldr	r3, [r7, #24]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	009b      	lsls	r3, r3, #2
 8006cdc:	4413      	add	r3, r2
 8006cde:	2200      	movs	r2, #0
 8006ce0:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	3301      	adds	r3, #1
 8006ce6:	61bb      	str	r3, [r7, #24]
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cec:	d9f2      	bls.n	8006cd4 <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8006cee:	697b      	ldr	r3, [r7, #20]
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	009b      	lsls	r3, r3, #2
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	18d0      	adds	r0, r2, r3
 8006cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d38 <canardRxSubscribe+0xc4>)
 8006cfa:	4a10      	ldr	r2, [pc, #64]	@ (8006d3c <canardRxSubscribe+0xc8>)
 8006cfc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006cfe:	f7fd ff6f 	bl	8004be0 <cavlSearch>
 8006d02:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 8006d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d006      	beq.n	8006d1a <canardRxSubscribe+0xa6>
 8006d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8006d40 <canardRxSubscribe+0xcc>)
 8006d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d44 <canardRxSubscribe+0xd0>)
 8006d10:	f240 41be 	movw	r1, #1214	@ 0x4be
 8006d14:	480c      	ldr	r0, [pc, #48]	@ (8006d48 <canardRxSubscribe+0xd4>)
 8006d16:	f000 f897 	bl	8006e48 <__assert_func>
            out = (out > 0) ? 0 : 1;
 8006d1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfd4      	ite	le
 8006d22:	2301      	movle	r3, #1
 8006d24:	2300      	movgt	r3, #0
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8006d2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006d2e:	4618      	mov	r0, r3
 8006d30:	3720      	adds	r7, #32
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bd80      	pop	{r7, pc}
 8006d36:	bf00      	nop
 8006d38:	08004f41 	.word	0x08004f41
 8006d3c:	080068fd 	.word	0x080068fd
 8006d40:	08008ffc 	.word	0x08008ffc
 8006d44:	0800962c 	.word	0x0800962c
 8006d48:	080087f8 	.word	0x080087f8

08006d4c <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b088      	sub	sp, #32
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
 8006d54:	460b      	mov	r3, r1
 8006d56:	70fb      	strb	r3, [r7, #3]
 8006d58:	4613      	mov	r3, r2
 8006d5a:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8006d5c:	23fe      	movs	r3, #254	@ 0xfe
 8006d5e:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8006d60:	78fb      	ldrb	r3, [r7, #3]
 8006d62:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d05f      	beq.n	8006e2a <canardRxUnsubscribe+0xde>
 8006d6a:	697b      	ldr	r3, [r7, #20]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	d85c      	bhi.n	8006e2a <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 8006d70:	883b      	ldrh	r3, [r7, #0]
 8006d72:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	3304      	adds	r3, #4
 8006d78:	009b      	lsls	r3, r3, #2
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	18d0      	adds	r0, r2, r3
 8006d7e:	f107 010e 	add.w	r1, r7, #14
 8006d82:	2300      	movs	r3, #0
 8006d84:	4a2c      	ldr	r2, [pc, #176]	@ (8006e38 <canardRxUnsubscribe+0xec>)
 8006d86:	f7fd ff2b 	bl	8004be0 <cavlSearch>
 8006d8a:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d049      	beq.n	8006e26 <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	3304      	adds	r3, #4
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	687a      	ldr	r2, [r7, #4]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4611      	mov	r1, r2
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fd ff9b 	bl	8004cdc <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	8b9b      	ldrh	r3, [r3, #28]
 8006daa:	883a      	ldrh	r2, [r7, #0]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d006      	beq.n	8006dbe <canardRxUnsubscribe+0x72>
 8006db0:	4b22      	ldr	r3, [pc, #136]	@ (8006e3c <canardRxUnsubscribe+0xf0>)
 8006db2:	4a23      	ldr	r2, [pc, #140]	@ (8006e40 <canardRxUnsubscribe+0xf4>)
 8006db4:	f240 41d3 	movw	r1, #1235	@ 0x4d3
 8006db8:	4822      	ldr	r0, [pc, #136]	@ (8006e44 <canardRxUnsubscribe+0xf8>)
 8006dba:	f000 f845 	bl	8006e48 <__assert_func>
            out = 1;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	61bb      	str	r3, [r7, #24]
 8006dc6:	e02a      	b.n	8006e1e <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	68da      	ldr	r2, [r3, #12]
 8006dcc:	6939      	ldr	r1, [r7, #16]
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3308      	adds	r3, #8
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	440b      	add	r3, r1
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d007      	beq.n	8006dec <canardRxUnsubscribe+0xa0>
 8006ddc:	6939      	ldr	r1, [r7, #16]
 8006dde:	69bb      	ldr	r3, [r7, #24]
 8006de0:	3308      	adds	r3, #8
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	440b      	add	r3, r1
 8006de6:	685b      	ldr	r3, [r3, #4]
 8006de8:	691b      	ldr	r3, [r3, #16]
 8006dea:	e000      	b.n	8006dee <canardRxUnsubscribe+0xa2>
 8006dec:	2300      	movs	r3, #0
 8006dee:	4619      	mov	r1, r3
 8006df0:	6878      	ldr	r0, [r7, #4]
 8006df2:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	6939      	ldr	r1, [r7, #16]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	3308      	adds	r3, #8
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	440b      	add	r3, r1
 8006e02:	685b      	ldr	r3, [r3, #4]
 8006e04:	4619      	mov	r1, r3
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8006e0a:	693a      	ldr	r2, [r7, #16]
 8006e0c:	69bb      	ldr	r3, [r7, #24]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	4413      	add	r3, r2
 8006e14:	2200      	movs	r2, #0
 8006e16:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006e18:	69bb      	ldr	r3, [r7, #24]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	61bb      	str	r3, [r7, #24]
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e22:	d9d1      	bls.n	8006dc8 <canardRxUnsubscribe+0x7c>
 8006e24:	e001      	b.n	8006e2a <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 8006e26:	2300      	movs	r3, #0
 8006e28:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8006e2a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	080068b5 	.word	0x080068b5
 8006e3c:	0800901c 	.word	0x0800901c
 8006e40:	08009640 	.word	0x08009640
 8006e44:	080087f8 	.word	0x080087f8

08006e48 <__assert_func>:
 8006e48:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e4a:	4614      	mov	r4, r2
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	4b09      	ldr	r3, [pc, #36]	@ (8006e74 <__assert_func+0x2c>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4605      	mov	r5, r0
 8006e54:	68d8      	ldr	r0, [r3, #12]
 8006e56:	b954      	cbnz	r4, 8006e6e <__assert_func+0x26>
 8006e58:	4b07      	ldr	r3, [pc, #28]	@ (8006e78 <__assert_func+0x30>)
 8006e5a:	461c      	mov	r4, r3
 8006e5c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e60:	9100      	str	r1, [sp, #0]
 8006e62:	462b      	mov	r3, r5
 8006e64:	4905      	ldr	r1, [pc, #20]	@ (8006e7c <__assert_func+0x34>)
 8006e66:	f000 f96f 	bl	8007148 <fiprintf>
 8006e6a:	f000 fa94 	bl	8007396 <abort>
 8006e6e:	4b04      	ldr	r3, [pc, #16]	@ (8006e80 <__assert_func+0x38>)
 8006e70:	e7f4      	b.n	8006e5c <__assert_func+0x14>
 8006e72:	bf00      	nop
 8006e74:	20000020 	.word	0x20000020
 8006e78:	0800968f 	.word	0x0800968f
 8006e7c:	08009661 	.word	0x08009661
 8006e80:	08009654 	.word	0x08009654

08006e84 <malloc>:
 8006e84:	4b02      	ldr	r3, [pc, #8]	@ (8006e90 <malloc+0xc>)
 8006e86:	4601      	mov	r1, r0
 8006e88:	6818      	ldr	r0, [r3, #0]
 8006e8a:	f000 b82d 	b.w	8006ee8 <_malloc_r>
 8006e8e:	bf00      	nop
 8006e90:	20000020 	.word	0x20000020

08006e94 <free>:
 8006e94:	4b02      	ldr	r3, [pc, #8]	@ (8006ea0 <free+0xc>)
 8006e96:	4601      	mov	r1, r0
 8006e98:	6818      	ldr	r0, [r3, #0]
 8006e9a:	f000 ba83 	b.w	80073a4 <_free_r>
 8006e9e:	bf00      	nop
 8006ea0:	20000020 	.word	0x20000020

08006ea4 <sbrk_aligned>:
 8006ea4:	b570      	push	{r4, r5, r6, lr}
 8006ea6:	4e0f      	ldr	r6, [pc, #60]	@ (8006ee4 <sbrk_aligned+0x40>)
 8006ea8:	460c      	mov	r4, r1
 8006eaa:	6831      	ldr	r1, [r6, #0]
 8006eac:	4605      	mov	r5, r0
 8006eae:	b911      	cbnz	r1, 8006eb6 <sbrk_aligned+0x12>
 8006eb0:	f000 fa14 	bl	80072dc <_sbrk_r>
 8006eb4:	6030      	str	r0, [r6, #0]
 8006eb6:	4621      	mov	r1, r4
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 fa0f 	bl	80072dc <_sbrk_r>
 8006ebe:	1c43      	adds	r3, r0, #1
 8006ec0:	d103      	bne.n	8006eca <sbrk_aligned+0x26>
 8006ec2:	f04f 34ff 	mov.w	r4, #4294967295
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	bd70      	pop	{r4, r5, r6, pc}
 8006eca:	1cc4      	adds	r4, r0, #3
 8006ecc:	f024 0403 	bic.w	r4, r4, #3
 8006ed0:	42a0      	cmp	r0, r4
 8006ed2:	d0f8      	beq.n	8006ec6 <sbrk_aligned+0x22>
 8006ed4:	1a21      	subs	r1, r4, r0
 8006ed6:	4628      	mov	r0, r5
 8006ed8:	f000 fa00 	bl	80072dc <_sbrk_r>
 8006edc:	3001      	adds	r0, #1
 8006ede:	d1f2      	bne.n	8006ec6 <sbrk_aligned+0x22>
 8006ee0:	e7ef      	b.n	8006ec2 <sbrk_aligned+0x1e>
 8006ee2:	bf00      	nop
 8006ee4:	20000714 	.word	0x20000714

08006ee8 <_malloc_r>:
 8006ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006eec:	1ccd      	adds	r5, r1, #3
 8006eee:	f025 0503 	bic.w	r5, r5, #3
 8006ef2:	3508      	adds	r5, #8
 8006ef4:	2d0c      	cmp	r5, #12
 8006ef6:	bf38      	it	cc
 8006ef8:	250c      	movcc	r5, #12
 8006efa:	2d00      	cmp	r5, #0
 8006efc:	4606      	mov	r6, r0
 8006efe:	db01      	blt.n	8006f04 <_malloc_r+0x1c>
 8006f00:	42a9      	cmp	r1, r5
 8006f02:	d904      	bls.n	8006f0e <_malloc_r+0x26>
 8006f04:	230c      	movs	r3, #12
 8006f06:	6033      	str	r3, [r6, #0]
 8006f08:	2000      	movs	r0, #0
 8006f0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f0e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006fe4 <_malloc_r+0xfc>
 8006f12:	f000 f869 	bl	8006fe8 <__malloc_lock>
 8006f16:	f8d8 3000 	ldr.w	r3, [r8]
 8006f1a:	461c      	mov	r4, r3
 8006f1c:	bb44      	cbnz	r4, 8006f70 <_malloc_r+0x88>
 8006f1e:	4629      	mov	r1, r5
 8006f20:	4630      	mov	r0, r6
 8006f22:	f7ff ffbf 	bl	8006ea4 <sbrk_aligned>
 8006f26:	1c43      	adds	r3, r0, #1
 8006f28:	4604      	mov	r4, r0
 8006f2a:	d158      	bne.n	8006fde <_malloc_r+0xf6>
 8006f2c:	f8d8 4000 	ldr.w	r4, [r8]
 8006f30:	4627      	mov	r7, r4
 8006f32:	2f00      	cmp	r7, #0
 8006f34:	d143      	bne.n	8006fbe <_malloc_r+0xd6>
 8006f36:	2c00      	cmp	r4, #0
 8006f38:	d04b      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	4639      	mov	r1, r7
 8006f3e:	4630      	mov	r0, r6
 8006f40:	eb04 0903 	add.w	r9, r4, r3
 8006f44:	f000 f9ca 	bl	80072dc <_sbrk_r>
 8006f48:	4581      	cmp	r9, r0
 8006f4a:	d142      	bne.n	8006fd2 <_malloc_r+0xea>
 8006f4c:	6821      	ldr	r1, [r4, #0]
 8006f4e:	1a6d      	subs	r5, r5, r1
 8006f50:	4629      	mov	r1, r5
 8006f52:	4630      	mov	r0, r6
 8006f54:	f7ff ffa6 	bl	8006ea4 <sbrk_aligned>
 8006f58:	3001      	adds	r0, #1
 8006f5a:	d03a      	beq.n	8006fd2 <_malloc_r+0xea>
 8006f5c:	6823      	ldr	r3, [r4, #0]
 8006f5e:	442b      	add	r3, r5
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	f8d8 3000 	ldr.w	r3, [r8]
 8006f66:	685a      	ldr	r2, [r3, #4]
 8006f68:	bb62      	cbnz	r2, 8006fc4 <_malloc_r+0xdc>
 8006f6a:	f8c8 7000 	str.w	r7, [r8]
 8006f6e:	e00f      	b.n	8006f90 <_malloc_r+0xa8>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	1b52      	subs	r2, r2, r5
 8006f74:	d420      	bmi.n	8006fb8 <_malloc_r+0xd0>
 8006f76:	2a0b      	cmp	r2, #11
 8006f78:	d917      	bls.n	8006faa <_malloc_r+0xc2>
 8006f7a:	1961      	adds	r1, r4, r5
 8006f7c:	42a3      	cmp	r3, r4
 8006f7e:	6025      	str	r5, [r4, #0]
 8006f80:	bf18      	it	ne
 8006f82:	6059      	strne	r1, [r3, #4]
 8006f84:	6863      	ldr	r3, [r4, #4]
 8006f86:	bf08      	it	eq
 8006f88:	f8c8 1000 	streq.w	r1, [r8]
 8006f8c:	5162      	str	r2, [r4, r5]
 8006f8e:	604b      	str	r3, [r1, #4]
 8006f90:	4630      	mov	r0, r6
 8006f92:	f000 f82f 	bl	8006ff4 <__malloc_unlock>
 8006f96:	f104 000b 	add.w	r0, r4, #11
 8006f9a:	1d23      	adds	r3, r4, #4
 8006f9c:	f020 0007 	bic.w	r0, r0, #7
 8006fa0:	1ac2      	subs	r2, r0, r3
 8006fa2:	bf1c      	itt	ne
 8006fa4:	1a1b      	subne	r3, r3, r0
 8006fa6:	50a3      	strne	r3, [r4, r2]
 8006fa8:	e7af      	b.n	8006f0a <_malloc_r+0x22>
 8006faa:	6862      	ldr	r2, [r4, #4]
 8006fac:	42a3      	cmp	r3, r4
 8006fae:	bf0c      	ite	eq
 8006fb0:	f8c8 2000 	streq.w	r2, [r8]
 8006fb4:	605a      	strne	r2, [r3, #4]
 8006fb6:	e7eb      	b.n	8006f90 <_malloc_r+0xa8>
 8006fb8:	4623      	mov	r3, r4
 8006fba:	6864      	ldr	r4, [r4, #4]
 8006fbc:	e7ae      	b.n	8006f1c <_malloc_r+0x34>
 8006fbe:	463c      	mov	r4, r7
 8006fc0:	687f      	ldr	r7, [r7, #4]
 8006fc2:	e7b6      	b.n	8006f32 <_malloc_r+0x4a>
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	42a3      	cmp	r3, r4
 8006fca:	d1fb      	bne.n	8006fc4 <_malloc_r+0xdc>
 8006fcc:	2300      	movs	r3, #0
 8006fce:	6053      	str	r3, [r2, #4]
 8006fd0:	e7de      	b.n	8006f90 <_malloc_r+0xa8>
 8006fd2:	230c      	movs	r3, #12
 8006fd4:	6033      	str	r3, [r6, #0]
 8006fd6:	4630      	mov	r0, r6
 8006fd8:	f000 f80c 	bl	8006ff4 <__malloc_unlock>
 8006fdc:	e794      	b.n	8006f08 <_malloc_r+0x20>
 8006fde:	6005      	str	r5, [r0, #0]
 8006fe0:	e7d6      	b.n	8006f90 <_malloc_r+0xa8>
 8006fe2:	bf00      	nop
 8006fe4:	20000718 	.word	0x20000718

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	@ (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f000 b9c4 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	2000085c 	.word	0x2000085c

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	@ (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f000 b9bf 	b.w	8007378 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	2000085c 	.word	0x2000085c

08007000 <std>:
 8007000:	2300      	movs	r3, #0
 8007002:	b510      	push	{r4, lr}
 8007004:	4604      	mov	r4, r0
 8007006:	e9c0 3300 	strd	r3, r3, [r0]
 800700a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800700e:	6083      	str	r3, [r0, #8]
 8007010:	8181      	strh	r1, [r0, #12]
 8007012:	6643      	str	r3, [r0, #100]	@ 0x64
 8007014:	81c2      	strh	r2, [r0, #14]
 8007016:	6183      	str	r3, [r0, #24]
 8007018:	4619      	mov	r1, r3
 800701a:	2208      	movs	r2, #8
 800701c:	305c      	adds	r0, #92	@ 0x5c
 800701e:	f000 f920 	bl	8007262 <memset>
 8007022:	4b0d      	ldr	r3, [pc, #52]	@ (8007058 <std+0x58>)
 8007024:	6263      	str	r3, [r4, #36]	@ 0x24
 8007026:	4b0d      	ldr	r3, [pc, #52]	@ (800705c <std+0x5c>)
 8007028:	62a3      	str	r3, [r4, #40]	@ 0x28
 800702a:	4b0d      	ldr	r3, [pc, #52]	@ (8007060 <std+0x60>)
 800702c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800702e:	4b0d      	ldr	r3, [pc, #52]	@ (8007064 <std+0x64>)
 8007030:	6323      	str	r3, [r4, #48]	@ 0x30
 8007032:	4b0d      	ldr	r3, [pc, #52]	@ (8007068 <std+0x68>)
 8007034:	6224      	str	r4, [r4, #32]
 8007036:	429c      	cmp	r4, r3
 8007038:	d006      	beq.n	8007048 <std+0x48>
 800703a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800703e:	4294      	cmp	r4, r2
 8007040:	d002      	beq.n	8007048 <std+0x48>
 8007042:	33d0      	adds	r3, #208	@ 0xd0
 8007044:	429c      	cmp	r4, r3
 8007046:	d105      	bne.n	8007054 <std+0x54>
 8007048:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800704c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007050:	f000 b990 	b.w	8007374 <__retarget_lock_init_recursive>
 8007054:	bd10      	pop	{r4, pc}
 8007056:	bf00      	nop
 8007058:	080071a9 	.word	0x080071a9
 800705c:	080071cb 	.word	0x080071cb
 8007060:	08007203 	.word	0x08007203
 8007064:	08007227 	.word	0x08007227
 8007068:	2000071c 	.word	0x2000071c

0800706c <stdio_exit_handler>:
 800706c:	4a02      	ldr	r2, [pc, #8]	@ (8007078 <stdio_exit_handler+0xc>)
 800706e:	4903      	ldr	r1, [pc, #12]	@ (800707c <stdio_exit_handler+0x10>)
 8007070:	4803      	ldr	r0, [pc, #12]	@ (8007080 <stdio_exit_handler+0x14>)
 8007072:	f000 b87b 	b.w	800716c <_fwalk_sglue>
 8007076:	bf00      	nop
 8007078:	20000014 	.word	0x20000014
 800707c:	08007ae1 	.word	0x08007ae1
 8007080:	20000024 	.word	0x20000024

08007084 <cleanup_stdio>:
 8007084:	6841      	ldr	r1, [r0, #4]
 8007086:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <cleanup_stdio+0x34>)
 8007088:	4299      	cmp	r1, r3
 800708a:	b510      	push	{r4, lr}
 800708c:	4604      	mov	r4, r0
 800708e:	d001      	beq.n	8007094 <cleanup_stdio+0x10>
 8007090:	f000 fd26 	bl	8007ae0 <_fflush_r>
 8007094:	68a1      	ldr	r1, [r4, #8]
 8007096:	4b09      	ldr	r3, [pc, #36]	@ (80070bc <cleanup_stdio+0x38>)
 8007098:	4299      	cmp	r1, r3
 800709a:	d002      	beq.n	80070a2 <cleanup_stdio+0x1e>
 800709c:	4620      	mov	r0, r4
 800709e:	f000 fd1f 	bl	8007ae0 <_fflush_r>
 80070a2:	68e1      	ldr	r1, [r4, #12]
 80070a4:	4b06      	ldr	r3, [pc, #24]	@ (80070c0 <cleanup_stdio+0x3c>)
 80070a6:	4299      	cmp	r1, r3
 80070a8:	d004      	beq.n	80070b4 <cleanup_stdio+0x30>
 80070aa:	4620      	mov	r0, r4
 80070ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070b0:	f000 bd16 	b.w	8007ae0 <_fflush_r>
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	2000071c 	.word	0x2000071c
 80070bc:	20000784 	.word	0x20000784
 80070c0:	200007ec 	.word	0x200007ec

080070c4 <global_stdio_init.part.0>:
 80070c4:	b510      	push	{r4, lr}
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <global_stdio_init.part.0+0x30>)
 80070c8:	4c0b      	ldr	r4, [pc, #44]	@ (80070f8 <global_stdio_init.part.0+0x34>)
 80070ca:	4a0c      	ldr	r2, [pc, #48]	@ (80070fc <global_stdio_init.part.0+0x38>)
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	4620      	mov	r0, r4
 80070d0:	2200      	movs	r2, #0
 80070d2:	2104      	movs	r1, #4
 80070d4:	f7ff ff94 	bl	8007000 <std>
 80070d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070dc:	2201      	movs	r2, #1
 80070de:	2109      	movs	r1, #9
 80070e0:	f7ff ff8e 	bl	8007000 <std>
 80070e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070e8:	2202      	movs	r2, #2
 80070ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ee:	2112      	movs	r1, #18
 80070f0:	f7ff bf86 	b.w	8007000 <std>
 80070f4:	20000854 	.word	0x20000854
 80070f8:	2000071c 	.word	0x2000071c
 80070fc:	0800706d 	.word	0x0800706d

08007100 <__sfp_lock_acquire>:
 8007100:	4801      	ldr	r0, [pc, #4]	@ (8007108 <__sfp_lock_acquire+0x8>)
 8007102:	f000 b938 	b.w	8007376 <__retarget_lock_acquire_recursive>
 8007106:	bf00      	nop
 8007108:	2000085d 	.word	0x2000085d

0800710c <__sfp_lock_release>:
 800710c:	4801      	ldr	r0, [pc, #4]	@ (8007114 <__sfp_lock_release+0x8>)
 800710e:	f000 b933 	b.w	8007378 <__retarget_lock_release_recursive>
 8007112:	bf00      	nop
 8007114:	2000085d 	.word	0x2000085d

08007118 <__sinit>:
 8007118:	b510      	push	{r4, lr}
 800711a:	4604      	mov	r4, r0
 800711c:	f7ff fff0 	bl	8007100 <__sfp_lock_acquire>
 8007120:	6a23      	ldr	r3, [r4, #32]
 8007122:	b11b      	cbz	r3, 800712c <__sinit+0x14>
 8007124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007128:	f7ff bff0 	b.w	800710c <__sfp_lock_release>
 800712c:	4b04      	ldr	r3, [pc, #16]	@ (8007140 <__sinit+0x28>)
 800712e:	6223      	str	r3, [r4, #32]
 8007130:	4b04      	ldr	r3, [pc, #16]	@ (8007144 <__sinit+0x2c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d1f5      	bne.n	8007124 <__sinit+0xc>
 8007138:	f7ff ffc4 	bl	80070c4 <global_stdio_init.part.0>
 800713c:	e7f2      	b.n	8007124 <__sinit+0xc>
 800713e:	bf00      	nop
 8007140:	08007085 	.word	0x08007085
 8007144:	20000854 	.word	0x20000854

08007148 <fiprintf>:
 8007148:	b40e      	push	{r1, r2, r3}
 800714a:	b503      	push	{r0, r1, lr}
 800714c:	4601      	mov	r1, r0
 800714e:	ab03      	add	r3, sp, #12
 8007150:	4805      	ldr	r0, [pc, #20]	@ (8007168 <fiprintf+0x20>)
 8007152:	f853 2b04 	ldr.w	r2, [r3], #4
 8007156:	6800      	ldr	r0, [r0, #0]
 8007158:	9301      	str	r3, [sp, #4]
 800715a:	f000 f997 	bl	800748c <_vfiprintf_r>
 800715e:	b002      	add	sp, #8
 8007160:	f85d eb04 	ldr.w	lr, [sp], #4
 8007164:	b003      	add	sp, #12
 8007166:	4770      	bx	lr
 8007168:	20000020 	.word	0x20000020

0800716c <_fwalk_sglue>:
 800716c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007170:	4607      	mov	r7, r0
 8007172:	4688      	mov	r8, r1
 8007174:	4614      	mov	r4, r2
 8007176:	2600      	movs	r6, #0
 8007178:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800717c:	f1b9 0901 	subs.w	r9, r9, #1
 8007180:	d505      	bpl.n	800718e <_fwalk_sglue+0x22>
 8007182:	6824      	ldr	r4, [r4, #0]
 8007184:	2c00      	cmp	r4, #0
 8007186:	d1f7      	bne.n	8007178 <_fwalk_sglue+0xc>
 8007188:	4630      	mov	r0, r6
 800718a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800718e:	89ab      	ldrh	r3, [r5, #12]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d907      	bls.n	80071a4 <_fwalk_sglue+0x38>
 8007194:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007198:	3301      	adds	r3, #1
 800719a:	d003      	beq.n	80071a4 <_fwalk_sglue+0x38>
 800719c:	4629      	mov	r1, r5
 800719e:	4638      	mov	r0, r7
 80071a0:	47c0      	blx	r8
 80071a2:	4306      	orrs	r6, r0
 80071a4:	3568      	adds	r5, #104	@ 0x68
 80071a6:	e7e9      	b.n	800717c <_fwalk_sglue+0x10>

080071a8 <__sread>:
 80071a8:	b510      	push	{r4, lr}
 80071aa:	460c      	mov	r4, r1
 80071ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071b0:	f000 f882 	bl	80072b8 <_read_r>
 80071b4:	2800      	cmp	r0, #0
 80071b6:	bfab      	itete	ge
 80071b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80071ba:	89a3      	ldrhlt	r3, [r4, #12]
 80071bc:	181b      	addge	r3, r3, r0
 80071be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80071c2:	bfac      	ite	ge
 80071c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80071c6:	81a3      	strhlt	r3, [r4, #12]
 80071c8:	bd10      	pop	{r4, pc}

080071ca <__swrite>:
 80071ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071ce:	461f      	mov	r7, r3
 80071d0:	898b      	ldrh	r3, [r1, #12]
 80071d2:	05db      	lsls	r3, r3, #23
 80071d4:	4605      	mov	r5, r0
 80071d6:	460c      	mov	r4, r1
 80071d8:	4616      	mov	r6, r2
 80071da:	d505      	bpl.n	80071e8 <__swrite+0x1e>
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2302      	movs	r3, #2
 80071e2:	2200      	movs	r2, #0
 80071e4:	f000 f856 	bl	8007294 <_lseek_r>
 80071e8:	89a3      	ldrh	r3, [r4, #12]
 80071ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071f2:	81a3      	strh	r3, [r4, #12]
 80071f4:	4632      	mov	r2, r6
 80071f6:	463b      	mov	r3, r7
 80071f8:	4628      	mov	r0, r5
 80071fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071fe:	f000 b87d 	b.w	80072fc <_write_r>

08007202 <__sseek>:
 8007202:	b510      	push	{r4, lr}
 8007204:	460c      	mov	r4, r1
 8007206:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800720a:	f000 f843 	bl	8007294 <_lseek_r>
 800720e:	1c43      	adds	r3, r0, #1
 8007210:	89a3      	ldrh	r3, [r4, #12]
 8007212:	bf15      	itete	ne
 8007214:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007216:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800721a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800721e:	81a3      	strheq	r3, [r4, #12]
 8007220:	bf18      	it	ne
 8007222:	81a3      	strhne	r3, [r4, #12]
 8007224:	bd10      	pop	{r4, pc}

08007226 <__sclose>:
 8007226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800722a:	f000 b823 	b.w	8007274 <_close_r>

0800722e <memmove>:
 800722e:	4288      	cmp	r0, r1
 8007230:	b510      	push	{r4, lr}
 8007232:	eb01 0402 	add.w	r4, r1, r2
 8007236:	d902      	bls.n	800723e <memmove+0x10>
 8007238:	4284      	cmp	r4, r0
 800723a:	4623      	mov	r3, r4
 800723c:	d807      	bhi.n	800724e <memmove+0x20>
 800723e:	1e43      	subs	r3, r0, #1
 8007240:	42a1      	cmp	r1, r4
 8007242:	d008      	beq.n	8007256 <memmove+0x28>
 8007244:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007248:	f803 2f01 	strb.w	r2, [r3, #1]!
 800724c:	e7f8      	b.n	8007240 <memmove+0x12>
 800724e:	4402      	add	r2, r0
 8007250:	4601      	mov	r1, r0
 8007252:	428a      	cmp	r2, r1
 8007254:	d100      	bne.n	8007258 <memmove+0x2a>
 8007256:	bd10      	pop	{r4, pc}
 8007258:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800725c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007260:	e7f7      	b.n	8007252 <memmove+0x24>

08007262 <memset>:
 8007262:	4402      	add	r2, r0
 8007264:	4603      	mov	r3, r0
 8007266:	4293      	cmp	r3, r2
 8007268:	d100      	bne.n	800726c <memset+0xa>
 800726a:	4770      	bx	lr
 800726c:	f803 1b01 	strb.w	r1, [r3], #1
 8007270:	e7f9      	b.n	8007266 <memset+0x4>
	...

08007274 <_close_r>:
 8007274:	b538      	push	{r3, r4, r5, lr}
 8007276:	4d06      	ldr	r5, [pc, #24]	@ (8007290 <_close_r+0x1c>)
 8007278:	2300      	movs	r3, #0
 800727a:	4604      	mov	r4, r0
 800727c:	4608      	mov	r0, r1
 800727e:	602b      	str	r3, [r5, #0]
 8007280:	f7fb fa1e 	bl	80026c0 <_close>
 8007284:	1c43      	adds	r3, r0, #1
 8007286:	d102      	bne.n	800728e <_close_r+0x1a>
 8007288:	682b      	ldr	r3, [r5, #0]
 800728a:	b103      	cbz	r3, 800728e <_close_r+0x1a>
 800728c:	6023      	str	r3, [r4, #0]
 800728e:	bd38      	pop	{r3, r4, r5, pc}
 8007290:	20000858 	.word	0x20000858

08007294 <_lseek_r>:
 8007294:	b538      	push	{r3, r4, r5, lr}
 8007296:	4d07      	ldr	r5, [pc, #28]	@ (80072b4 <_lseek_r+0x20>)
 8007298:	4604      	mov	r4, r0
 800729a:	4608      	mov	r0, r1
 800729c:	4611      	mov	r1, r2
 800729e:	2200      	movs	r2, #0
 80072a0:	602a      	str	r2, [r5, #0]
 80072a2:	461a      	mov	r2, r3
 80072a4:	f7fb fa33 	bl	800270e <_lseek>
 80072a8:	1c43      	adds	r3, r0, #1
 80072aa:	d102      	bne.n	80072b2 <_lseek_r+0x1e>
 80072ac:	682b      	ldr	r3, [r5, #0]
 80072ae:	b103      	cbz	r3, 80072b2 <_lseek_r+0x1e>
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	bd38      	pop	{r3, r4, r5, pc}
 80072b4:	20000858 	.word	0x20000858

080072b8 <_read_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	4d07      	ldr	r5, [pc, #28]	@ (80072d8 <_read_r+0x20>)
 80072bc:	4604      	mov	r4, r0
 80072be:	4608      	mov	r0, r1
 80072c0:	4611      	mov	r1, r2
 80072c2:	2200      	movs	r2, #0
 80072c4:	602a      	str	r2, [r5, #0]
 80072c6:	461a      	mov	r2, r3
 80072c8:	f7fb f9c1 	bl	800264e <_read>
 80072cc:	1c43      	adds	r3, r0, #1
 80072ce:	d102      	bne.n	80072d6 <_read_r+0x1e>
 80072d0:	682b      	ldr	r3, [r5, #0]
 80072d2:	b103      	cbz	r3, 80072d6 <_read_r+0x1e>
 80072d4:	6023      	str	r3, [r4, #0]
 80072d6:	bd38      	pop	{r3, r4, r5, pc}
 80072d8:	20000858 	.word	0x20000858

080072dc <_sbrk_r>:
 80072dc:	b538      	push	{r3, r4, r5, lr}
 80072de:	4d06      	ldr	r5, [pc, #24]	@ (80072f8 <_sbrk_r+0x1c>)
 80072e0:	2300      	movs	r3, #0
 80072e2:	4604      	mov	r4, r0
 80072e4:	4608      	mov	r0, r1
 80072e6:	602b      	str	r3, [r5, #0]
 80072e8:	f7fb fa1e 	bl	8002728 <_sbrk>
 80072ec:	1c43      	adds	r3, r0, #1
 80072ee:	d102      	bne.n	80072f6 <_sbrk_r+0x1a>
 80072f0:	682b      	ldr	r3, [r5, #0]
 80072f2:	b103      	cbz	r3, 80072f6 <_sbrk_r+0x1a>
 80072f4:	6023      	str	r3, [r4, #0]
 80072f6:	bd38      	pop	{r3, r4, r5, pc}
 80072f8:	20000858 	.word	0x20000858

080072fc <_write_r>:
 80072fc:	b538      	push	{r3, r4, r5, lr}
 80072fe:	4d07      	ldr	r5, [pc, #28]	@ (800731c <_write_r+0x20>)
 8007300:	4604      	mov	r4, r0
 8007302:	4608      	mov	r0, r1
 8007304:	4611      	mov	r1, r2
 8007306:	2200      	movs	r2, #0
 8007308:	602a      	str	r2, [r5, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	f7fb f9bc 	bl	8002688 <_write>
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	d102      	bne.n	800731a <_write_r+0x1e>
 8007314:	682b      	ldr	r3, [r5, #0]
 8007316:	b103      	cbz	r3, 800731a <_write_r+0x1e>
 8007318:	6023      	str	r3, [r4, #0]
 800731a:	bd38      	pop	{r3, r4, r5, pc}
 800731c:	20000858 	.word	0x20000858

08007320 <__errno>:
 8007320:	4b01      	ldr	r3, [pc, #4]	@ (8007328 <__errno+0x8>)
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	4770      	bx	lr
 8007326:	bf00      	nop
 8007328:	20000020 	.word	0x20000020

0800732c <__libc_init_array>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4d0d      	ldr	r5, [pc, #52]	@ (8007364 <__libc_init_array+0x38>)
 8007330:	4c0d      	ldr	r4, [pc, #52]	@ (8007368 <__libc_init_array+0x3c>)
 8007332:	1b64      	subs	r4, r4, r5
 8007334:	10a4      	asrs	r4, r4, #2
 8007336:	2600      	movs	r6, #0
 8007338:	42a6      	cmp	r6, r4
 800733a:	d109      	bne.n	8007350 <__libc_init_array+0x24>
 800733c:	4d0b      	ldr	r5, [pc, #44]	@ (800736c <__libc_init_array+0x40>)
 800733e:	4c0c      	ldr	r4, [pc, #48]	@ (8007370 <__libc_init_array+0x44>)
 8007340:	f000 fd52 	bl	8007de8 <_init>
 8007344:	1b64      	subs	r4, r4, r5
 8007346:	10a4      	asrs	r4, r4, #2
 8007348:	2600      	movs	r6, #0
 800734a:	42a6      	cmp	r6, r4
 800734c:	d105      	bne.n	800735a <__libc_init_array+0x2e>
 800734e:	bd70      	pop	{r4, r5, r6, pc}
 8007350:	f855 3b04 	ldr.w	r3, [r5], #4
 8007354:	4798      	blx	r3
 8007356:	3601      	adds	r6, #1
 8007358:	e7ee      	b.n	8007338 <__libc_init_array+0xc>
 800735a:	f855 3b04 	ldr.w	r3, [r5], #4
 800735e:	4798      	blx	r3
 8007360:	3601      	adds	r6, #1
 8007362:	e7f2      	b.n	800734a <__libc_init_array+0x1e>
 8007364:	080096cc 	.word	0x080096cc
 8007368:	080096cc 	.word	0x080096cc
 800736c:	080096cc 	.word	0x080096cc
 8007370:	080096d0 	.word	0x080096d0

08007374 <__retarget_lock_init_recursive>:
 8007374:	4770      	bx	lr

08007376 <__retarget_lock_acquire_recursive>:
 8007376:	4770      	bx	lr

08007378 <__retarget_lock_release_recursive>:
 8007378:	4770      	bx	lr

0800737a <memcpy>:
 800737a:	440a      	add	r2, r1
 800737c:	4291      	cmp	r1, r2
 800737e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007382:	d100      	bne.n	8007386 <memcpy+0xc>
 8007384:	4770      	bx	lr
 8007386:	b510      	push	{r4, lr}
 8007388:	f811 4b01 	ldrb.w	r4, [r1], #1
 800738c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007390:	4291      	cmp	r1, r2
 8007392:	d1f9      	bne.n	8007388 <memcpy+0xe>
 8007394:	bd10      	pop	{r4, pc}

08007396 <abort>:
 8007396:	b508      	push	{r3, lr}
 8007398:	2006      	movs	r0, #6
 800739a:	f000 fc85 	bl	8007ca8 <raise>
 800739e:	2001      	movs	r0, #1
 80073a0:	f7fb f94a 	bl	8002638 <_exit>

080073a4 <_free_r>:
 80073a4:	b538      	push	{r3, r4, r5, lr}
 80073a6:	4605      	mov	r5, r0
 80073a8:	2900      	cmp	r1, #0
 80073aa:	d041      	beq.n	8007430 <_free_r+0x8c>
 80073ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073b0:	1f0c      	subs	r4, r1, #4
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	bfb8      	it	lt
 80073b6:	18e4      	addlt	r4, r4, r3
 80073b8:	f7ff fe16 	bl	8006fe8 <__malloc_lock>
 80073bc:	4a1d      	ldr	r2, [pc, #116]	@ (8007434 <_free_r+0x90>)
 80073be:	6813      	ldr	r3, [r2, #0]
 80073c0:	b933      	cbnz	r3, 80073d0 <_free_r+0x2c>
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	6014      	str	r4, [r2, #0]
 80073c6:	4628      	mov	r0, r5
 80073c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073cc:	f7ff be12 	b.w	8006ff4 <__malloc_unlock>
 80073d0:	42a3      	cmp	r3, r4
 80073d2:	d908      	bls.n	80073e6 <_free_r+0x42>
 80073d4:	6820      	ldr	r0, [r4, #0]
 80073d6:	1821      	adds	r1, r4, r0
 80073d8:	428b      	cmp	r3, r1
 80073da:	bf01      	itttt	eq
 80073dc:	6819      	ldreq	r1, [r3, #0]
 80073de:	685b      	ldreq	r3, [r3, #4]
 80073e0:	1809      	addeq	r1, r1, r0
 80073e2:	6021      	streq	r1, [r4, #0]
 80073e4:	e7ed      	b.n	80073c2 <_free_r+0x1e>
 80073e6:	461a      	mov	r2, r3
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	b10b      	cbz	r3, 80073f0 <_free_r+0x4c>
 80073ec:	42a3      	cmp	r3, r4
 80073ee:	d9fa      	bls.n	80073e6 <_free_r+0x42>
 80073f0:	6811      	ldr	r1, [r2, #0]
 80073f2:	1850      	adds	r0, r2, r1
 80073f4:	42a0      	cmp	r0, r4
 80073f6:	d10b      	bne.n	8007410 <_free_r+0x6c>
 80073f8:	6820      	ldr	r0, [r4, #0]
 80073fa:	4401      	add	r1, r0
 80073fc:	1850      	adds	r0, r2, r1
 80073fe:	4283      	cmp	r3, r0
 8007400:	6011      	str	r1, [r2, #0]
 8007402:	d1e0      	bne.n	80073c6 <_free_r+0x22>
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	685b      	ldr	r3, [r3, #4]
 8007408:	6053      	str	r3, [r2, #4]
 800740a:	4408      	add	r0, r1
 800740c:	6010      	str	r0, [r2, #0]
 800740e:	e7da      	b.n	80073c6 <_free_r+0x22>
 8007410:	d902      	bls.n	8007418 <_free_r+0x74>
 8007412:	230c      	movs	r3, #12
 8007414:	602b      	str	r3, [r5, #0]
 8007416:	e7d6      	b.n	80073c6 <_free_r+0x22>
 8007418:	6820      	ldr	r0, [r4, #0]
 800741a:	1821      	adds	r1, r4, r0
 800741c:	428b      	cmp	r3, r1
 800741e:	bf04      	itt	eq
 8007420:	6819      	ldreq	r1, [r3, #0]
 8007422:	685b      	ldreq	r3, [r3, #4]
 8007424:	6063      	str	r3, [r4, #4]
 8007426:	bf04      	itt	eq
 8007428:	1809      	addeq	r1, r1, r0
 800742a:	6021      	streq	r1, [r4, #0]
 800742c:	6054      	str	r4, [r2, #4]
 800742e:	e7ca      	b.n	80073c6 <_free_r+0x22>
 8007430:	bd38      	pop	{r3, r4, r5, pc}
 8007432:	bf00      	nop
 8007434:	20000718 	.word	0x20000718

08007438 <__sfputc_r>:
 8007438:	6893      	ldr	r3, [r2, #8]
 800743a:	3b01      	subs	r3, #1
 800743c:	2b00      	cmp	r3, #0
 800743e:	b410      	push	{r4}
 8007440:	6093      	str	r3, [r2, #8]
 8007442:	da08      	bge.n	8007456 <__sfputc_r+0x1e>
 8007444:	6994      	ldr	r4, [r2, #24]
 8007446:	42a3      	cmp	r3, r4
 8007448:	db01      	blt.n	800744e <__sfputc_r+0x16>
 800744a:	290a      	cmp	r1, #10
 800744c:	d103      	bne.n	8007456 <__sfputc_r+0x1e>
 800744e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007452:	f000 bb6d 	b.w	8007b30 <__swbuf_r>
 8007456:	6813      	ldr	r3, [r2, #0]
 8007458:	1c58      	adds	r0, r3, #1
 800745a:	6010      	str	r0, [r2, #0]
 800745c:	7019      	strb	r1, [r3, #0]
 800745e:	4608      	mov	r0, r1
 8007460:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007464:	4770      	bx	lr

08007466 <__sfputs_r>:
 8007466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	4614      	mov	r4, r2
 800746e:	18d5      	adds	r5, r2, r3
 8007470:	42ac      	cmp	r4, r5
 8007472:	d101      	bne.n	8007478 <__sfputs_r+0x12>
 8007474:	2000      	movs	r0, #0
 8007476:	e007      	b.n	8007488 <__sfputs_r+0x22>
 8007478:	f814 1b01 	ldrb.w	r1, [r4], #1
 800747c:	463a      	mov	r2, r7
 800747e:	4630      	mov	r0, r6
 8007480:	f7ff ffda 	bl	8007438 <__sfputc_r>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d1f3      	bne.n	8007470 <__sfputs_r+0xa>
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800748c <_vfiprintf_r>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	460d      	mov	r5, r1
 8007492:	b09d      	sub	sp, #116	@ 0x74
 8007494:	4614      	mov	r4, r2
 8007496:	4698      	mov	r8, r3
 8007498:	4606      	mov	r6, r0
 800749a:	b118      	cbz	r0, 80074a4 <_vfiprintf_r+0x18>
 800749c:	6a03      	ldr	r3, [r0, #32]
 800749e:	b90b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x18>
 80074a0:	f7ff fe3a 	bl	8007118 <__sinit>
 80074a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d405      	bmi.n	80074b6 <_vfiprintf_r+0x2a>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	059a      	lsls	r2, r3, #22
 80074ae:	d402      	bmi.n	80074b6 <_vfiprintf_r+0x2a>
 80074b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b2:	f7ff ff60 	bl	8007376 <__retarget_lock_acquire_recursive>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	071b      	lsls	r3, r3, #28
 80074ba:	d501      	bpl.n	80074c0 <_vfiprintf_r+0x34>
 80074bc:	692b      	ldr	r3, [r5, #16]
 80074be:	b99b      	cbnz	r3, 80074e8 <_vfiprintf_r+0x5c>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 fb72 	bl	8007bac <__swsetup_r>
 80074c8:	b170      	cbz	r0, 80074e8 <_vfiprintf_r+0x5c>
 80074ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074cc:	07dc      	lsls	r4, r3, #31
 80074ce:	d504      	bpl.n	80074da <_vfiprintf_r+0x4e>
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	b01d      	add	sp, #116	@ 0x74
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	0598      	lsls	r0, r3, #22
 80074de:	d4f7      	bmi.n	80074d0 <_vfiprintf_r+0x44>
 80074e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e2:	f7ff ff49 	bl	8007378 <__retarget_lock_release_recursive>
 80074e6:	e7f3      	b.n	80074d0 <_vfiprintf_r+0x44>
 80074e8:	2300      	movs	r3, #0
 80074ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ec:	2320      	movs	r3, #32
 80074ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80074f6:	2330      	movs	r3, #48	@ 0x30
 80074f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076a8 <_vfiprintf_r+0x21c>
 80074fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007500:	f04f 0901 	mov.w	r9, #1
 8007504:	4623      	mov	r3, r4
 8007506:	469a      	mov	sl, r3
 8007508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800750c:	b10a      	cbz	r2, 8007512 <_vfiprintf_r+0x86>
 800750e:	2a25      	cmp	r2, #37	@ 0x25
 8007510:	d1f9      	bne.n	8007506 <_vfiprintf_r+0x7a>
 8007512:	ebba 0b04 	subs.w	fp, sl, r4
 8007516:	d00b      	beq.n	8007530 <_vfiprintf_r+0xa4>
 8007518:	465b      	mov	r3, fp
 800751a:	4622      	mov	r2, r4
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ffa1 	bl	8007466 <__sfputs_r>
 8007524:	3001      	adds	r0, #1
 8007526:	f000 80a7 	beq.w	8007678 <_vfiprintf_r+0x1ec>
 800752a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800752c:	445a      	add	r2, fp
 800752e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007530:	f89a 3000 	ldrb.w	r3, [sl]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 809f 	beq.w	8007678 <_vfiprintf_r+0x1ec>
 800753a:	2300      	movs	r3, #0
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007544:	f10a 0a01 	add.w	sl, sl, #1
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007550:	931a      	str	r3, [sp, #104]	@ 0x68
 8007552:	4654      	mov	r4, sl
 8007554:	2205      	movs	r2, #5
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	4853      	ldr	r0, [pc, #332]	@ (80076a8 <_vfiprintf_r+0x21c>)
 800755c:	f7f8 fe40 	bl	80001e0 <memchr>
 8007560:	9a04      	ldr	r2, [sp, #16]
 8007562:	b9d8      	cbnz	r0, 800759c <_vfiprintf_r+0x110>
 8007564:	06d1      	lsls	r1, r2, #27
 8007566:	bf44      	itt	mi
 8007568:	2320      	movmi	r3, #32
 800756a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800756e:	0713      	lsls	r3, r2, #28
 8007570:	bf44      	itt	mi
 8007572:	232b      	movmi	r3, #43	@ 0x2b
 8007574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007578:	f89a 3000 	ldrb.w	r3, [sl]
 800757c:	2b2a      	cmp	r3, #42	@ 0x2a
 800757e:	d015      	beq.n	80075ac <_vfiprintf_r+0x120>
 8007580:	9a07      	ldr	r2, [sp, #28]
 8007582:	4654      	mov	r4, sl
 8007584:	2000      	movs	r0, #0
 8007586:	f04f 0c0a 	mov.w	ip, #10
 800758a:	4621      	mov	r1, r4
 800758c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007590:	3b30      	subs	r3, #48	@ 0x30
 8007592:	2b09      	cmp	r3, #9
 8007594:	d94b      	bls.n	800762e <_vfiprintf_r+0x1a2>
 8007596:	b1b0      	cbz	r0, 80075c6 <_vfiprintf_r+0x13a>
 8007598:	9207      	str	r2, [sp, #28]
 800759a:	e014      	b.n	80075c6 <_vfiprintf_r+0x13a>
 800759c:	eba0 0308 	sub.w	r3, r0, r8
 80075a0:	fa09 f303 	lsl.w	r3, r9, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	9304      	str	r3, [sp, #16]
 80075a8:	46a2      	mov	sl, r4
 80075aa:	e7d2      	b.n	8007552 <_vfiprintf_r+0xc6>
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	1d19      	adds	r1, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	9103      	str	r1, [sp, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfbb      	ittet	lt
 80075b8:	425b      	neglt	r3, r3
 80075ba:	f042 0202 	orrlt.w	r2, r2, #2
 80075be:	9307      	strge	r3, [sp, #28]
 80075c0:	9307      	strlt	r3, [sp, #28]
 80075c2:	bfb8      	it	lt
 80075c4:	9204      	strlt	r2, [sp, #16]
 80075c6:	7823      	ldrb	r3, [r4, #0]
 80075c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ca:	d10a      	bne.n	80075e2 <_vfiprintf_r+0x156>
 80075cc:	7863      	ldrb	r3, [r4, #1]
 80075ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d0:	d132      	bne.n	8007638 <_vfiprintf_r+0x1ac>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	1d1a      	adds	r2, r3, #4
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	9203      	str	r2, [sp, #12]
 80075da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075de:	3402      	adds	r4, #2
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80076b8 <_vfiprintf_r+0x22c>
 80075e6:	7821      	ldrb	r1, [r4, #0]
 80075e8:	2203      	movs	r2, #3
 80075ea:	4650      	mov	r0, sl
 80075ec:	f7f8 fdf8 	bl	80001e0 <memchr>
 80075f0:	b138      	cbz	r0, 8007602 <_vfiprintf_r+0x176>
 80075f2:	9b04      	ldr	r3, [sp, #16]
 80075f4:	eba0 000a 	sub.w	r0, r0, sl
 80075f8:	2240      	movs	r2, #64	@ 0x40
 80075fa:	4082      	lsls	r2, r0
 80075fc:	4313      	orrs	r3, r2
 80075fe:	3401      	adds	r4, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	4829      	ldr	r0, [pc, #164]	@ (80076ac <_vfiprintf_r+0x220>)
 8007608:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800760c:	2206      	movs	r2, #6
 800760e:	f7f8 fde7 	bl	80001e0 <memchr>
 8007612:	2800      	cmp	r0, #0
 8007614:	d03f      	beq.n	8007696 <_vfiprintf_r+0x20a>
 8007616:	4b26      	ldr	r3, [pc, #152]	@ (80076b0 <_vfiprintf_r+0x224>)
 8007618:	bb1b      	cbnz	r3, 8007662 <_vfiprintf_r+0x1d6>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	3307      	adds	r3, #7
 800761e:	f023 0307 	bic.w	r3, r3, #7
 8007622:	3308      	adds	r3, #8
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	443b      	add	r3, r7
 800762a:	9309      	str	r3, [sp, #36]	@ 0x24
 800762c:	e76a      	b.n	8007504 <_vfiprintf_r+0x78>
 800762e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007632:	460c      	mov	r4, r1
 8007634:	2001      	movs	r0, #1
 8007636:	e7a8      	b.n	800758a <_vfiprintf_r+0xfe>
 8007638:	2300      	movs	r3, #0
 800763a:	3401      	adds	r4, #1
 800763c:	9305      	str	r3, [sp, #20]
 800763e:	4619      	mov	r1, r3
 8007640:	f04f 0c0a 	mov.w	ip, #10
 8007644:	4620      	mov	r0, r4
 8007646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764a:	3a30      	subs	r2, #48	@ 0x30
 800764c:	2a09      	cmp	r2, #9
 800764e:	d903      	bls.n	8007658 <_vfiprintf_r+0x1cc>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c6      	beq.n	80075e2 <_vfiprintf_r+0x156>
 8007654:	9105      	str	r1, [sp, #20]
 8007656:	e7c4      	b.n	80075e2 <_vfiprintf_r+0x156>
 8007658:	fb0c 2101 	mla	r1, ip, r1, r2
 800765c:	4604      	mov	r4, r0
 800765e:	2301      	movs	r3, #1
 8007660:	e7f0      	b.n	8007644 <_vfiprintf_r+0x1b8>
 8007662:	ab03      	add	r3, sp, #12
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	462a      	mov	r2, r5
 8007668:	4b12      	ldr	r3, [pc, #72]	@ (80076b4 <_vfiprintf_r+0x228>)
 800766a:	a904      	add	r1, sp, #16
 800766c:	4630      	mov	r0, r6
 800766e:	f3af 8000 	nop.w
 8007672:	4607      	mov	r7, r0
 8007674:	1c78      	adds	r0, r7, #1
 8007676:	d1d6      	bne.n	8007626 <_vfiprintf_r+0x19a>
 8007678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x1fe>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x1fe>
 8007684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007686:	f7ff fe77 	bl	8007378 <__retarget_lock_release_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	065b      	lsls	r3, r3, #25
 800768e:	f53f af1f 	bmi.w	80074d0 <_vfiprintf_r+0x44>
 8007692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007694:	e71e      	b.n	80074d4 <_vfiprintf_r+0x48>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4b05      	ldr	r3, [pc, #20]	@ (80076b4 <_vfiprintf_r+0x228>)
 800769e:	a904      	add	r1, sp, #16
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f879 	bl	8007798 <_printf_i>
 80076a6:	e7e4      	b.n	8007672 <_vfiprintf_r+0x1e6>
 80076a8:	08009690 	.word	0x08009690
 80076ac:	0800969a 	.word	0x0800969a
 80076b0:	00000000 	.word	0x00000000
 80076b4:	08007467 	.word	0x08007467
 80076b8:	08009696 	.word	0x08009696

080076bc <_printf_common>:
 80076bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076c0:	4616      	mov	r6, r2
 80076c2:	4698      	mov	r8, r3
 80076c4:	688a      	ldr	r2, [r1, #8]
 80076c6:	690b      	ldr	r3, [r1, #16]
 80076c8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076cc:	4293      	cmp	r3, r2
 80076ce:	bfb8      	it	lt
 80076d0:	4613      	movlt	r3, r2
 80076d2:	6033      	str	r3, [r6, #0]
 80076d4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076d8:	4607      	mov	r7, r0
 80076da:	460c      	mov	r4, r1
 80076dc:	b10a      	cbz	r2, 80076e2 <_printf_common+0x26>
 80076de:	3301      	adds	r3, #1
 80076e0:	6033      	str	r3, [r6, #0]
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	0699      	lsls	r1, r3, #26
 80076e6:	bf42      	ittt	mi
 80076e8:	6833      	ldrmi	r3, [r6, #0]
 80076ea:	3302      	addmi	r3, #2
 80076ec:	6033      	strmi	r3, [r6, #0]
 80076ee:	6825      	ldr	r5, [r4, #0]
 80076f0:	f015 0506 	ands.w	r5, r5, #6
 80076f4:	d106      	bne.n	8007704 <_printf_common+0x48>
 80076f6:	f104 0a19 	add.w	sl, r4, #25
 80076fa:	68e3      	ldr	r3, [r4, #12]
 80076fc:	6832      	ldr	r2, [r6, #0]
 80076fe:	1a9b      	subs	r3, r3, r2
 8007700:	42ab      	cmp	r3, r5
 8007702:	dc26      	bgt.n	8007752 <_printf_common+0x96>
 8007704:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007708:	6822      	ldr	r2, [r4, #0]
 800770a:	3b00      	subs	r3, #0
 800770c:	bf18      	it	ne
 800770e:	2301      	movne	r3, #1
 8007710:	0692      	lsls	r2, r2, #26
 8007712:	d42b      	bmi.n	800776c <_printf_common+0xb0>
 8007714:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007718:	4641      	mov	r1, r8
 800771a:	4638      	mov	r0, r7
 800771c:	47c8      	blx	r9
 800771e:	3001      	adds	r0, #1
 8007720:	d01e      	beq.n	8007760 <_printf_common+0xa4>
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	6922      	ldr	r2, [r4, #16]
 8007726:	f003 0306 	and.w	r3, r3, #6
 800772a:	2b04      	cmp	r3, #4
 800772c:	bf02      	ittt	eq
 800772e:	68e5      	ldreq	r5, [r4, #12]
 8007730:	6833      	ldreq	r3, [r6, #0]
 8007732:	1aed      	subeq	r5, r5, r3
 8007734:	68a3      	ldr	r3, [r4, #8]
 8007736:	bf0c      	ite	eq
 8007738:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800773c:	2500      	movne	r5, #0
 800773e:	4293      	cmp	r3, r2
 8007740:	bfc4      	itt	gt
 8007742:	1a9b      	subgt	r3, r3, r2
 8007744:	18ed      	addgt	r5, r5, r3
 8007746:	2600      	movs	r6, #0
 8007748:	341a      	adds	r4, #26
 800774a:	42b5      	cmp	r5, r6
 800774c:	d11a      	bne.n	8007784 <_printf_common+0xc8>
 800774e:	2000      	movs	r0, #0
 8007750:	e008      	b.n	8007764 <_printf_common+0xa8>
 8007752:	2301      	movs	r3, #1
 8007754:	4652      	mov	r2, sl
 8007756:	4641      	mov	r1, r8
 8007758:	4638      	mov	r0, r7
 800775a:	47c8      	blx	r9
 800775c:	3001      	adds	r0, #1
 800775e:	d103      	bne.n	8007768 <_printf_common+0xac>
 8007760:	f04f 30ff 	mov.w	r0, #4294967295
 8007764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007768:	3501      	adds	r5, #1
 800776a:	e7c6      	b.n	80076fa <_printf_common+0x3e>
 800776c:	18e1      	adds	r1, r4, r3
 800776e:	1c5a      	adds	r2, r3, #1
 8007770:	2030      	movs	r0, #48	@ 0x30
 8007772:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007776:	4422      	add	r2, r4
 8007778:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800777c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007780:	3302      	adds	r3, #2
 8007782:	e7c7      	b.n	8007714 <_printf_common+0x58>
 8007784:	2301      	movs	r3, #1
 8007786:	4622      	mov	r2, r4
 8007788:	4641      	mov	r1, r8
 800778a:	4638      	mov	r0, r7
 800778c:	47c8      	blx	r9
 800778e:	3001      	adds	r0, #1
 8007790:	d0e6      	beq.n	8007760 <_printf_common+0xa4>
 8007792:	3601      	adds	r6, #1
 8007794:	e7d9      	b.n	800774a <_printf_common+0x8e>
	...

08007798 <_printf_i>:
 8007798:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800779c:	7e0f      	ldrb	r7, [r1, #24]
 800779e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077a0:	2f78      	cmp	r7, #120	@ 0x78
 80077a2:	4691      	mov	r9, r2
 80077a4:	4680      	mov	r8, r0
 80077a6:	460c      	mov	r4, r1
 80077a8:	469a      	mov	sl, r3
 80077aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077ae:	d807      	bhi.n	80077c0 <_printf_i+0x28>
 80077b0:	2f62      	cmp	r7, #98	@ 0x62
 80077b2:	d80a      	bhi.n	80077ca <_printf_i+0x32>
 80077b4:	2f00      	cmp	r7, #0
 80077b6:	f000 80d2 	beq.w	800795e <_printf_i+0x1c6>
 80077ba:	2f58      	cmp	r7, #88	@ 0x58
 80077bc:	f000 80b9 	beq.w	8007932 <_printf_i+0x19a>
 80077c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077c8:	e03a      	b.n	8007840 <_printf_i+0xa8>
 80077ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ce:	2b15      	cmp	r3, #21
 80077d0:	d8f6      	bhi.n	80077c0 <_printf_i+0x28>
 80077d2:	a101      	add	r1, pc, #4	@ (adr r1, 80077d8 <_printf_i+0x40>)
 80077d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077d8:	08007831 	.word	0x08007831
 80077dc:	08007845 	.word	0x08007845
 80077e0:	080077c1 	.word	0x080077c1
 80077e4:	080077c1 	.word	0x080077c1
 80077e8:	080077c1 	.word	0x080077c1
 80077ec:	080077c1 	.word	0x080077c1
 80077f0:	08007845 	.word	0x08007845
 80077f4:	080077c1 	.word	0x080077c1
 80077f8:	080077c1 	.word	0x080077c1
 80077fc:	080077c1 	.word	0x080077c1
 8007800:	080077c1 	.word	0x080077c1
 8007804:	08007945 	.word	0x08007945
 8007808:	0800786f 	.word	0x0800786f
 800780c:	080078ff 	.word	0x080078ff
 8007810:	080077c1 	.word	0x080077c1
 8007814:	080077c1 	.word	0x080077c1
 8007818:	08007967 	.word	0x08007967
 800781c:	080077c1 	.word	0x080077c1
 8007820:	0800786f 	.word	0x0800786f
 8007824:	080077c1 	.word	0x080077c1
 8007828:	080077c1 	.word	0x080077c1
 800782c:	08007907 	.word	0x08007907
 8007830:	6833      	ldr	r3, [r6, #0]
 8007832:	1d1a      	adds	r2, r3, #4
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	6032      	str	r2, [r6, #0]
 8007838:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800783c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007840:	2301      	movs	r3, #1
 8007842:	e09d      	b.n	8007980 <_printf_i+0x1e8>
 8007844:	6833      	ldr	r3, [r6, #0]
 8007846:	6820      	ldr	r0, [r4, #0]
 8007848:	1d19      	adds	r1, r3, #4
 800784a:	6031      	str	r1, [r6, #0]
 800784c:	0606      	lsls	r6, r0, #24
 800784e:	d501      	bpl.n	8007854 <_printf_i+0xbc>
 8007850:	681d      	ldr	r5, [r3, #0]
 8007852:	e003      	b.n	800785c <_printf_i+0xc4>
 8007854:	0645      	lsls	r5, r0, #25
 8007856:	d5fb      	bpl.n	8007850 <_printf_i+0xb8>
 8007858:	f9b3 5000 	ldrsh.w	r5, [r3]
 800785c:	2d00      	cmp	r5, #0
 800785e:	da03      	bge.n	8007868 <_printf_i+0xd0>
 8007860:	232d      	movs	r3, #45	@ 0x2d
 8007862:	426d      	negs	r5, r5
 8007864:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007868:	4859      	ldr	r0, [pc, #356]	@ (80079d0 <_printf_i+0x238>)
 800786a:	230a      	movs	r3, #10
 800786c:	e011      	b.n	8007892 <_printf_i+0xfa>
 800786e:	6821      	ldr	r1, [r4, #0]
 8007870:	6833      	ldr	r3, [r6, #0]
 8007872:	0608      	lsls	r0, r1, #24
 8007874:	f853 5b04 	ldr.w	r5, [r3], #4
 8007878:	d402      	bmi.n	8007880 <_printf_i+0xe8>
 800787a:	0649      	lsls	r1, r1, #25
 800787c:	bf48      	it	mi
 800787e:	b2ad      	uxthmi	r5, r5
 8007880:	2f6f      	cmp	r7, #111	@ 0x6f
 8007882:	4853      	ldr	r0, [pc, #332]	@ (80079d0 <_printf_i+0x238>)
 8007884:	6033      	str	r3, [r6, #0]
 8007886:	bf14      	ite	ne
 8007888:	230a      	movne	r3, #10
 800788a:	2308      	moveq	r3, #8
 800788c:	2100      	movs	r1, #0
 800788e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007892:	6866      	ldr	r6, [r4, #4]
 8007894:	60a6      	str	r6, [r4, #8]
 8007896:	2e00      	cmp	r6, #0
 8007898:	bfa2      	ittt	ge
 800789a:	6821      	ldrge	r1, [r4, #0]
 800789c:	f021 0104 	bicge.w	r1, r1, #4
 80078a0:	6021      	strge	r1, [r4, #0]
 80078a2:	b90d      	cbnz	r5, 80078a8 <_printf_i+0x110>
 80078a4:	2e00      	cmp	r6, #0
 80078a6:	d04b      	beq.n	8007940 <_printf_i+0x1a8>
 80078a8:	4616      	mov	r6, r2
 80078aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80078ae:	fb03 5711 	mls	r7, r3, r1, r5
 80078b2:	5dc7      	ldrb	r7, [r0, r7]
 80078b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078b8:	462f      	mov	r7, r5
 80078ba:	42bb      	cmp	r3, r7
 80078bc:	460d      	mov	r5, r1
 80078be:	d9f4      	bls.n	80078aa <_printf_i+0x112>
 80078c0:	2b08      	cmp	r3, #8
 80078c2:	d10b      	bne.n	80078dc <_printf_i+0x144>
 80078c4:	6823      	ldr	r3, [r4, #0]
 80078c6:	07df      	lsls	r7, r3, #31
 80078c8:	d508      	bpl.n	80078dc <_printf_i+0x144>
 80078ca:	6923      	ldr	r3, [r4, #16]
 80078cc:	6861      	ldr	r1, [r4, #4]
 80078ce:	4299      	cmp	r1, r3
 80078d0:	bfde      	ittt	le
 80078d2:	2330      	movle	r3, #48	@ 0x30
 80078d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078dc:	1b92      	subs	r2, r2, r6
 80078de:	6122      	str	r2, [r4, #16]
 80078e0:	f8cd a000 	str.w	sl, [sp]
 80078e4:	464b      	mov	r3, r9
 80078e6:	aa03      	add	r2, sp, #12
 80078e8:	4621      	mov	r1, r4
 80078ea:	4640      	mov	r0, r8
 80078ec:	f7ff fee6 	bl	80076bc <_printf_common>
 80078f0:	3001      	adds	r0, #1
 80078f2:	d14a      	bne.n	800798a <_printf_i+0x1f2>
 80078f4:	f04f 30ff 	mov.w	r0, #4294967295
 80078f8:	b004      	add	sp, #16
 80078fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80078fe:	6823      	ldr	r3, [r4, #0]
 8007900:	f043 0320 	orr.w	r3, r3, #32
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	4833      	ldr	r0, [pc, #204]	@ (80079d4 <_printf_i+0x23c>)
 8007908:	2778      	movs	r7, #120	@ 0x78
 800790a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800790e:	6823      	ldr	r3, [r4, #0]
 8007910:	6831      	ldr	r1, [r6, #0]
 8007912:	061f      	lsls	r7, r3, #24
 8007914:	f851 5b04 	ldr.w	r5, [r1], #4
 8007918:	d402      	bmi.n	8007920 <_printf_i+0x188>
 800791a:	065f      	lsls	r7, r3, #25
 800791c:	bf48      	it	mi
 800791e:	b2ad      	uxthmi	r5, r5
 8007920:	6031      	str	r1, [r6, #0]
 8007922:	07d9      	lsls	r1, r3, #31
 8007924:	bf44      	itt	mi
 8007926:	f043 0320 	orrmi.w	r3, r3, #32
 800792a:	6023      	strmi	r3, [r4, #0]
 800792c:	b11d      	cbz	r5, 8007936 <_printf_i+0x19e>
 800792e:	2310      	movs	r3, #16
 8007930:	e7ac      	b.n	800788c <_printf_i+0xf4>
 8007932:	4827      	ldr	r0, [pc, #156]	@ (80079d0 <_printf_i+0x238>)
 8007934:	e7e9      	b.n	800790a <_printf_i+0x172>
 8007936:	6823      	ldr	r3, [r4, #0]
 8007938:	f023 0320 	bic.w	r3, r3, #32
 800793c:	6023      	str	r3, [r4, #0]
 800793e:	e7f6      	b.n	800792e <_printf_i+0x196>
 8007940:	4616      	mov	r6, r2
 8007942:	e7bd      	b.n	80078c0 <_printf_i+0x128>
 8007944:	6833      	ldr	r3, [r6, #0]
 8007946:	6825      	ldr	r5, [r4, #0]
 8007948:	6961      	ldr	r1, [r4, #20]
 800794a:	1d18      	adds	r0, r3, #4
 800794c:	6030      	str	r0, [r6, #0]
 800794e:	062e      	lsls	r6, r5, #24
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	d501      	bpl.n	8007958 <_printf_i+0x1c0>
 8007954:	6019      	str	r1, [r3, #0]
 8007956:	e002      	b.n	800795e <_printf_i+0x1c6>
 8007958:	0668      	lsls	r0, r5, #25
 800795a:	d5fb      	bpl.n	8007954 <_printf_i+0x1bc>
 800795c:	8019      	strh	r1, [r3, #0]
 800795e:	2300      	movs	r3, #0
 8007960:	6123      	str	r3, [r4, #16]
 8007962:	4616      	mov	r6, r2
 8007964:	e7bc      	b.n	80078e0 <_printf_i+0x148>
 8007966:	6833      	ldr	r3, [r6, #0]
 8007968:	1d1a      	adds	r2, r3, #4
 800796a:	6032      	str	r2, [r6, #0]
 800796c:	681e      	ldr	r6, [r3, #0]
 800796e:	6862      	ldr	r2, [r4, #4]
 8007970:	2100      	movs	r1, #0
 8007972:	4630      	mov	r0, r6
 8007974:	f7f8 fc34 	bl	80001e0 <memchr>
 8007978:	b108      	cbz	r0, 800797e <_printf_i+0x1e6>
 800797a:	1b80      	subs	r0, r0, r6
 800797c:	6060      	str	r0, [r4, #4]
 800797e:	6863      	ldr	r3, [r4, #4]
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	2300      	movs	r3, #0
 8007984:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007988:	e7aa      	b.n	80078e0 <_printf_i+0x148>
 800798a:	6923      	ldr	r3, [r4, #16]
 800798c:	4632      	mov	r2, r6
 800798e:	4649      	mov	r1, r9
 8007990:	4640      	mov	r0, r8
 8007992:	47d0      	blx	sl
 8007994:	3001      	adds	r0, #1
 8007996:	d0ad      	beq.n	80078f4 <_printf_i+0x15c>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	079b      	lsls	r3, r3, #30
 800799c:	d413      	bmi.n	80079c6 <_printf_i+0x22e>
 800799e:	68e0      	ldr	r0, [r4, #12]
 80079a0:	9b03      	ldr	r3, [sp, #12]
 80079a2:	4298      	cmp	r0, r3
 80079a4:	bfb8      	it	lt
 80079a6:	4618      	movlt	r0, r3
 80079a8:	e7a6      	b.n	80078f8 <_printf_i+0x160>
 80079aa:	2301      	movs	r3, #1
 80079ac:	4632      	mov	r2, r6
 80079ae:	4649      	mov	r1, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	47d0      	blx	sl
 80079b4:	3001      	adds	r0, #1
 80079b6:	d09d      	beq.n	80078f4 <_printf_i+0x15c>
 80079b8:	3501      	adds	r5, #1
 80079ba:	68e3      	ldr	r3, [r4, #12]
 80079bc:	9903      	ldr	r1, [sp, #12]
 80079be:	1a5b      	subs	r3, r3, r1
 80079c0:	42ab      	cmp	r3, r5
 80079c2:	dcf2      	bgt.n	80079aa <_printf_i+0x212>
 80079c4:	e7eb      	b.n	800799e <_printf_i+0x206>
 80079c6:	2500      	movs	r5, #0
 80079c8:	f104 0619 	add.w	r6, r4, #25
 80079cc:	e7f5      	b.n	80079ba <_printf_i+0x222>
 80079ce:	bf00      	nop
 80079d0:	080096a1 	.word	0x080096a1
 80079d4:	080096b2 	.word	0x080096b2

080079d8 <__sflush_r>:
 80079d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079e0:	0716      	lsls	r6, r2, #28
 80079e2:	4605      	mov	r5, r0
 80079e4:	460c      	mov	r4, r1
 80079e6:	d454      	bmi.n	8007a92 <__sflush_r+0xba>
 80079e8:	684b      	ldr	r3, [r1, #4]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	dc02      	bgt.n	80079f4 <__sflush_r+0x1c>
 80079ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	dd48      	ble.n	8007a86 <__sflush_r+0xae>
 80079f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80079f6:	2e00      	cmp	r6, #0
 80079f8:	d045      	beq.n	8007a86 <__sflush_r+0xae>
 80079fa:	2300      	movs	r3, #0
 80079fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a00:	682f      	ldr	r7, [r5, #0]
 8007a02:	6a21      	ldr	r1, [r4, #32]
 8007a04:	602b      	str	r3, [r5, #0]
 8007a06:	d030      	beq.n	8007a6a <__sflush_r+0x92>
 8007a08:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a0a:	89a3      	ldrh	r3, [r4, #12]
 8007a0c:	0759      	lsls	r1, r3, #29
 8007a0e:	d505      	bpl.n	8007a1c <__sflush_r+0x44>
 8007a10:	6863      	ldr	r3, [r4, #4]
 8007a12:	1ad2      	subs	r2, r2, r3
 8007a14:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a16:	b10b      	cbz	r3, 8007a1c <__sflush_r+0x44>
 8007a18:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a1a:	1ad2      	subs	r2, r2, r3
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a20:	6a21      	ldr	r1, [r4, #32]
 8007a22:	4628      	mov	r0, r5
 8007a24:	47b0      	blx	r6
 8007a26:	1c43      	adds	r3, r0, #1
 8007a28:	89a3      	ldrh	r3, [r4, #12]
 8007a2a:	d106      	bne.n	8007a3a <__sflush_r+0x62>
 8007a2c:	6829      	ldr	r1, [r5, #0]
 8007a2e:	291d      	cmp	r1, #29
 8007a30:	d82b      	bhi.n	8007a8a <__sflush_r+0xb2>
 8007a32:	4a2a      	ldr	r2, [pc, #168]	@ (8007adc <__sflush_r+0x104>)
 8007a34:	410a      	asrs	r2, r1
 8007a36:	07d6      	lsls	r6, r2, #31
 8007a38:	d427      	bmi.n	8007a8a <__sflush_r+0xb2>
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	6062      	str	r2, [r4, #4]
 8007a3e:	04d9      	lsls	r1, r3, #19
 8007a40:	6922      	ldr	r2, [r4, #16]
 8007a42:	6022      	str	r2, [r4, #0]
 8007a44:	d504      	bpl.n	8007a50 <__sflush_r+0x78>
 8007a46:	1c42      	adds	r2, r0, #1
 8007a48:	d101      	bne.n	8007a4e <__sflush_r+0x76>
 8007a4a:	682b      	ldr	r3, [r5, #0]
 8007a4c:	b903      	cbnz	r3, 8007a50 <__sflush_r+0x78>
 8007a4e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a50:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a52:	602f      	str	r7, [r5, #0]
 8007a54:	b1b9      	cbz	r1, 8007a86 <__sflush_r+0xae>
 8007a56:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a5a:	4299      	cmp	r1, r3
 8007a5c:	d002      	beq.n	8007a64 <__sflush_r+0x8c>
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7ff fca0 	bl	80073a4 <_free_r>
 8007a64:	2300      	movs	r3, #0
 8007a66:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a68:	e00d      	b.n	8007a86 <__sflush_r+0xae>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	4628      	mov	r0, r5
 8007a6e:	47b0      	blx	r6
 8007a70:	4602      	mov	r2, r0
 8007a72:	1c50      	adds	r0, r2, #1
 8007a74:	d1c9      	bne.n	8007a0a <__sflush_r+0x32>
 8007a76:	682b      	ldr	r3, [r5, #0]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0c6      	beq.n	8007a0a <__sflush_r+0x32>
 8007a7c:	2b1d      	cmp	r3, #29
 8007a7e:	d001      	beq.n	8007a84 <__sflush_r+0xac>
 8007a80:	2b16      	cmp	r3, #22
 8007a82:	d11e      	bne.n	8007ac2 <__sflush_r+0xea>
 8007a84:	602f      	str	r7, [r5, #0]
 8007a86:	2000      	movs	r0, #0
 8007a88:	e022      	b.n	8007ad0 <__sflush_r+0xf8>
 8007a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a8e:	b21b      	sxth	r3, r3
 8007a90:	e01b      	b.n	8007aca <__sflush_r+0xf2>
 8007a92:	690f      	ldr	r7, [r1, #16]
 8007a94:	2f00      	cmp	r7, #0
 8007a96:	d0f6      	beq.n	8007a86 <__sflush_r+0xae>
 8007a98:	0793      	lsls	r3, r2, #30
 8007a9a:	680e      	ldr	r6, [r1, #0]
 8007a9c:	bf08      	it	eq
 8007a9e:	694b      	ldreq	r3, [r1, #20]
 8007aa0:	600f      	str	r7, [r1, #0]
 8007aa2:	bf18      	it	ne
 8007aa4:	2300      	movne	r3, #0
 8007aa6:	eba6 0807 	sub.w	r8, r6, r7
 8007aaa:	608b      	str	r3, [r1, #8]
 8007aac:	f1b8 0f00 	cmp.w	r8, #0
 8007ab0:	dde9      	ble.n	8007a86 <__sflush_r+0xae>
 8007ab2:	6a21      	ldr	r1, [r4, #32]
 8007ab4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007ab6:	4643      	mov	r3, r8
 8007ab8:	463a      	mov	r2, r7
 8007aba:	4628      	mov	r0, r5
 8007abc:	47b0      	blx	r6
 8007abe:	2800      	cmp	r0, #0
 8007ac0:	dc08      	bgt.n	8007ad4 <__sflush_r+0xfc>
 8007ac2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ac6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aca:	81a3      	strh	r3, [r4, #12]
 8007acc:	f04f 30ff 	mov.w	r0, #4294967295
 8007ad0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ad4:	4407      	add	r7, r0
 8007ad6:	eba8 0800 	sub.w	r8, r8, r0
 8007ada:	e7e7      	b.n	8007aac <__sflush_r+0xd4>
 8007adc:	dfbffffe 	.word	0xdfbffffe

08007ae0 <_fflush_r>:
 8007ae0:	b538      	push	{r3, r4, r5, lr}
 8007ae2:	690b      	ldr	r3, [r1, #16]
 8007ae4:	4605      	mov	r5, r0
 8007ae6:	460c      	mov	r4, r1
 8007ae8:	b913      	cbnz	r3, 8007af0 <_fflush_r+0x10>
 8007aea:	2500      	movs	r5, #0
 8007aec:	4628      	mov	r0, r5
 8007aee:	bd38      	pop	{r3, r4, r5, pc}
 8007af0:	b118      	cbz	r0, 8007afa <_fflush_r+0x1a>
 8007af2:	6a03      	ldr	r3, [r0, #32]
 8007af4:	b90b      	cbnz	r3, 8007afa <_fflush_r+0x1a>
 8007af6:	f7ff fb0f 	bl	8007118 <__sinit>
 8007afa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d0f3      	beq.n	8007aea <_fflush_r+0xa>
 8007b02:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b04:	07d0      	lsls	r0, r2, #31
 8007b06:	d404      	bmi.n	8007b12 <_fflush_r+0x32>
 8007b08:	0599      	lsls	r1, r3, #22
 8007b0a:	d402      	bmi.n	8007b12 <_fflush_r+0x32>
 8007b0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b0e:	f7ff fc32 	bl	8007376 <__retarget_lock_acquire_recursive>
 8007b12:	4628      	mov	r0, r5
 8007b14:	4621      	mov	r1, r4
 8007b16:	f7ff ff5f 	bl	80079d8 <__sflush_r>
 8007b1a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b1c:	07da      	lsls	r2, r3, #31
 8007b1e:	4605      	mov	r5, r0
 8007b20:	d4e4      	bmi.n	8007aec <_fflush_r+0xc>
 8007b22:	89a3      	ldrh	r3, [r4, #12]
 8007b24:	059b      	lsls	r3, r3, #22
 8007b26:	d4e1      	bmi.n	8007aec <_fflush_r+0xc>
 8007b28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b2a:	f7ff fc25 	bl	8007378 <__retarget_lock_release_recursive>
 8007b2e:	e7dd      	b.n	8007aec <_fflush_r+0xc>

08007b30 <__swbuf_r>:
 8007b30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b32:	460e      	mov	r6, r1
 8007b34:	4614      	mov	r4, r2
 8007b36:	4605      	mov	r5, r0
 8007b38:	b118      	cbz	r0, 8007b42 <__swbuf_r+0x12>
 8007b3a:	6a03      	ldr	r3, [r0, #32]
 8007b3c:	b90b      	cbnz	r3, 8007b42 <__swbuf_r+0x12>
 8007b3e:	f7ff faeb 	bl	8007118 <__sinit>
 8007b42:	69a3      	ldr	r3, [r4, #24]
 8007b44:	60a3      	str	r3, [r4, #8]
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	071a      	lsls	r2, r3, #28
 8007b4a:	d501      	bpl.n	8007b50 <__swbuf_r+0x20>
 8007b4c:	6923      	ldr	r3, [r4, #16]
 8007b4e:	b943      	cbnz	r3, 8007b62 <__swbuf_r+0x32>
 8007b50:	4621      	mov	r1, r4
 8007b52:	4628      	mov	r0, r5
 8007b54:	f000 f82a 	bl	8007bac <__swsetup_r>
 8007b58:	b118      	cbz	r0, 8007b62 <__swbuf_r+0x32>
 8007b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8007b5e:	4638      	mov	r0, r7
 8007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b62:	6823      	ldr	r3, [r4, #0]
 8007b64:	6922      	ldr	r2, [r4, #16]
 8007b66:	1a98      	subs	r0, r3, r2
 8007b68:	6963      	ldr	r3, [r4, #20]
 8007b6a:	b2f6      	uxtb	r6, r6
 8007b6c:	4283      	cmp	r3, r0
 8007b6e:	4637      	mov	r7, r6
 8007b70:	dc05      	bgt.n	8007b7e <__swbuf_r+0x4e>
 8007b72:	4621      	mov	r1, r4
 8007b74:	4628      	mov	r0, r5
 8007b76:	f7ff ffb3 	bl	8007ae0 <_fflush_r>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d1ed      	bne.n	8007b5a <__swbuf_r+0x2a>
 8007b7e:	68a3      	ldr	r3, [r4, #8]
 8007b80:	3b01      	subs	r3, #1
 8007b82:	60a3      	str	r3, [r4, #8]
 8007b84:	6823      	ldr	r3, [r4, #0]
 8007b86:	1c5a      	adds	r2, r3, #1
 8007b88:	6022      	str	r2, [r4, #0]
 8007b8a:	701e      	strb	r6, [r3, #0]
 8007b8c:	6962      	ldr	r2, [r4, #20]
 8007b8e:	1c43      	adds	r3, r0, #1
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d004      	beq.n	8007b9e <__swbuf_r+0x6e>
 8007b94:	89a3      	ldrh	r3, [r4, #12]
 8007b96:	07db      	lsls	r3, r3, #31
 8007b98:	d5e1      	bpl.n	8007b5e <__swbuf_r+0x2e>
 8007b9a:	2e0a      	cmp	r6, #10
 8007b9c:	d1df      	bne.n	8007b5e <__swbuf_r+0x2e>
 8007b9e:	4621      	mov	r1, r4
 8007ba0:	4628      	mov	r0, r5
 8007ba2:	f7ff ff9d 	bl	8007ae0 <_fflush_r>
 8007ba6:	2800      	cmp	r0, #0
 8007ba8:	d0d9      	beq.n	8007b5e <__swbuf_r+0x2e>
 8007baa:	e7d6      	b.n	8007b5a <__swbuf_r+0x2a>

08007bac <__swsetup_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	4b29      	ldr	r3, [pc, #164]	@ (8007c54 <__swsetup_r+0xa8>)
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	6818      	ldr	r0, [r3, #0]
 8007bb4:	460c      	mov	r4, r1
 8007bb6:	b118      	cbz	r0, 8007bc0 <__swsetup_r+0x14>
 8007bb8:	6a03      	ldr	r3, [r0, #32]
 8007bba:	b90b      	cbnz	r3, 8007bc0 <__swsetup_r+0x14>
 8007bbc:	f7ff faac 	bl	8007118 <__sinit>
 8007bc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bc4:	0719      	lsls	r1, r3, #28
 8007bc6:	d422      	bmi.n	8007c0e <__swsetup_r+0x62>
 8007bc8:	06da      	lsls	r2, r3, #27
 8007bca:	d407      	bmi.n	8007bdc <__swsetup_r+0x30>
 8007bcc:	2209      	movs	r2, #9
 8007bce:	602a      	str	r2, [r5, #0]
 8007bd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007bd4:	81a3      	strh	r3, [r4, #12]
 8007bd6:	f04f 30ff 	mov.w	r0, #4294967295
 8007bda:	e033      	b.n	8007c44 <__swsetup_r+0x98>
 8007bdc:	0758      	lsls	r0, r3, #29
 8007bde:	d512      	bpl.n	8007c06 <__swsetup_r+0x5a>
 8007be0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007be2:	b141      	cbz	r1, 8007bf6 <__swsetup_r+0x4a>
 8007be4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007be8:	4299      	cmp	r1, r3
 8007bea:	d002      	beq.n	8007bf2 <__swsetup_r+0x46>
 8007bec:	4628      	mov	r0, r5
 8007bee:	f7ff fbd9 	bl	80073a4 <_free_r>
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	6363      	str	r3, [r4, #52]	@ 0x34
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	2300      	movs	r3, #0
 8007c00:	6063      	str	r3, [r4, #4]
 8007c02:	6923      	ldr	r3, [r4, #16]
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	89a3      	ldrh	r3, [r4, #12]
 8007c08:	f043 0308 	orr.w	r3, r3, #8
 8007c0c:	81a3      	strh	r3, [r4, #12]
 8007c0e:	6923      	ldr	r3, [r4, #16]
 8007c10:	b94b      	cbnz	r3, 8007c26 <__swsetup_r+0x7a>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007c18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007c1c:	d003      	beq.n	8007c26 <__swsetup_r+0x7a>
 8007c1e:	4621      	mov	r1, r4
 8007c20:	4628      	mov	r0, r5
 8007c22:	f000 f883 	bl	8007d2c <__smakebuf_r>
 8007c26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c2a:	f013 0201 	ands.w	r2, r3, #1
 8007c2e:	d00a      	beq.n	8007c46 <__swsetup_r+0x9a>
 8007c30:	2200      	movs	r2, #0
 8007c32:	60a2      	str	r2, [r4, #8]
 8007c34:	6962      	ldr	r2, [r4, #20]
 8007c36:	4252      	negs	r2, r2
 8007c38:	61a2      	str	r2, [r4, #24]
 8007c3a:	6922      	ldr	r2, [r4, #16]
 8007c3c:	b942      	cbnz	r2, 8007c50 <__swsetup_r+0xa4>
 8007c3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007c42:	d1c5      	bne.n	8007bd0 <__swsetup_r+0x24>
 8007c44:	bd38      	pop	{r3, r4, r5, pc}
 8007c46:	0799      	lsls	r1, r3, #30
 8007c48:	bf58      	it	pl
 8007c4a:	6962      	ldrpl	r2, [r4, #20]
 8007c4c:	60a2      	str	r2, [r4, #8]
 8007c4e:	e7f4      	b.n	8007c3a <__swsetup_r+0x8e>
 8007c50:	2000      	movs	r0, #0
 8007c52:	e7f7      	b.n	8007c44 <__swsetup_r+0x98>
 8007c54:	20000020 	.word	0x20000020

08007c58 <_raise_r>:
 8007c58:	291f      	cmp	r1, #31
 8007c5a:	b538      	push	{r3, r4, r5, lr}
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	460c      	mov	r4, r1
 8007c60:	d904      	bls.n	8007c6c <_raise_r+0x14>
 8007c62:	2316      	movs	r3, #22
 8007c64:	6003      	str	r3, [r0, #0]
 8007c66:	f04f 30ff 	mov.w	r0, #4294967295
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007c6e:	b112      	cbz	r2, 8007c76 <_raise_r+0x1e>
 8007c70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007c74:	b94b      	cbnz	r3, 8007c8a <_raise_r+0x32>
 8007c76:	4628      	mov	r0, r5
 8007c78:	f000 f830 	bl	8007cdc <_getpid_r>
 8007c7c:	4622      	mov	r2, r4
 8007c7e:	4601      	mov	r1, r0
 8007c80:	4628      	mov	r0, r5
 8007c82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c86:	f000 b817 	b.w	8007cb8 <_kill_r>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d00a      	beq.n	8007ca4 <_raise_r+0x4c>
 8007c8e:	1c59      	adds	r1, r3, #1
 8007c90:	d103      	bne.n	8007c9a <_raise_r+0x42>
 8007c92:	2316      	movs	r3, #22
 8007c94:	6003      	str	r3, [r0, #0]
 8007c96:	2001      	movs	r0, #1
 8007c98:	e7e7      	b.n	8007c6a <_raise_r+0x12>
 8007c9a:	2100      	movs	r1, #0
 8007c9c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007ca0:	4620      	mov	r0, r4
 8007ca2:	4798      	blx	r3
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e7e0      	b.n	8007c6a <_raise_r+0x12>

08007ca8 <raise>:
 8007ca8:	4b02      	ldr	r3, [pc, #8]	@ (8007cb4 <raise+0xc>)
 8007caa:	4601      	mov	r1, r0
 8007cac:	6818      	ldr	r0, [r3, #0]
 8007cae:	f7ff bfd3 	b.w	8007c58 <_raise_r>
 8007cb2:	bf00      	nop
 8007cb4:	20000020 	.word	0x20000020

08007cb8 <_kill_r>:
 8007cb8:	b538      	push	{r3, r4, r5, lr}
 8007cba:	4d07      	ldr	r5, [pc, #28]	@ (8007cd8 <_kill_r+0x20>)
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	4604      	mov	r4, r0
 8007cc0:	4608      	mov	r0, r1
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	602b      	str	r3, [r5, #0]
 8007cc6:	f7fa fca7 	bl	8002618 <_kill>
 8007cca:	1c43      	adds	r3, r0, #1
 8007ccc:	d102      	bne.n	8007cd4 <_kill_r+0x1c>
 8007cce:	682b      	ldr	r3, [r5, #0]
 8007cd0:	b103      	cbz	r3, 8007cd4 <_kill_r+0x1c>
 8007cd2:	6023      	str	r3, [r4, #0]
 8007cd4:	bd38      	pop	{r3, r4, r5, pc}
 8007cd6:	bf00      	nop
 8007cd8:	20000858 	.word	0x20000858

08007cdc <_getpid_r>:
 8007cdc:	f7fa bc94 	b.w	8002608 <_getpid>

08007ce0 <__swhatbuf_r>:
 8007ce0:	b570      	push	{r4, r5, r6, lr}
 8007ce2:	460c      	mov	r4, r1
 8007ce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	b096      	sub	sp, #88	@ 0x58
 8007cec:	4615      	mov	r5, r2
 8007cee:	461e      	mov	r6, r3
 8007cf0:	da0d      	bge.n	8007d0e <__swhatbuf_r+0x2e>
 8007cf2:	89a3      	ldrh	r3, [r4, #12]
 8007cf4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007cf8:	f04f 0100 	mov.w	r1, #0
 8007cfc:	bf14      	ite	ne
 8007cfe:	2340      	movne	r3, #64	@ 0x40
 8007d00:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007d04:	2000      	movs	r0, #0
 8007d06:	6031      	str	r1, [r6, #0]
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	b016      	add	sp, #88	@ 0x58
 8007d0c:	bd70      	pop	{r4, r5, r6, pc}
 8007d0e:	466a      	mov	r2, sp
 8007d10:	f000 f848 	bl	8007da4 <_fstat_r>
 8007d14:	2800      	cmp	r0, #0
 8007d16:	dbec      	blt.n	8007cf2 <__swhatbuf_r+0x12>
 8007d18:	9901      	ldr	r1, [sp, #4]
 8007d1a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007d1e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007d22:	4259      	negs	r1, r3
 8007d24:	4159      	adcs	r1, r3
 8007d26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007d2a:	e7eb      	b.n	8007d04 <__swhatbuf_r+0x24>

08007d2c <__smakebuf_r>:
 8007d2c:	898b      	ldrh	r3, [r1, #12]
 8007d2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007d30:	079d      	lsls	r5, r3, #30
 8007d32:	4606      	mov	r6, r0
 8007d34:	460c      	mov	r4, r1
 8007d36:	d507      	bpl.n	8007d48 <__smakebuf_r+0x1c>
 8007d38:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007d3c:	6023      	str	r3, [r4, #0]
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	2301      	movs	r3, #1
 8007d42:	6163      	str	r3, [r4, #20]
 8007d44:	b003      	add	sp, #12
 8007d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d48:	ab01      	add	r3, sp, #4
 8007d4a:	466a      	mov	r2, sp
 8007d4c:	f7ff ffc8 	bl	8007ce0 <__swhatbuf_r>
 8007d50:	9f00      	ldr	r7, [sp, #0]
 8007d52:	4605      	mov	r5, r0
 8007d54:	4639      	mov	r1, r7
 8007d56:	4630      	mov	r0, r6
 8007d58:	f7ff f8c6 	bl	8006ee8 <_malloc_r>
 8007d5c:	b948      	cbnz	r0, 8007d72 <__smakebuf_r+0x46>
 8007d5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007d62:	059a      	lsls	r2, r3, #22
 8007d64:	d4ee      	bmi.n	8007d44 <__smakebuf_r+0x18>
 8007d66:	f023 0303 	bic.w	r3, r3, #3
 8007d6a:	f043 0302 	orr.w	r3, r3, #2
 8007d6e:	81a3      	strh	r3, [r4, #12]
 8007d70:	e7e2      	b.n	8007d38 <__smakebuf_r+0xc>
 8007d72:	89a3      	ldrh	r3, [r4, #12]
 8007d74:	6020      	str	r0, [r4, #0]
 8007d76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007d7a:	81a3      	strh	r3, [r4, #12]
 8007d7c:	9b01      	ldr	r3, [sp, #4]
 8007d7e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007d82:	b15b      	cbz	r3, 8007d9c <__smakebuf_r+0x70>
 8007d84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d88:	4630      	mov	r0, r6
 8007d8a:	f000 f81d 	bl	8007dc8 <_isatty_r>
 8007d8e:	b128      	cbz	r0, 8007d9c <__smakebuf_r+0x70>
 8007d90:	89a3      	ldrh	r3, [r4, #12]
 8007d92:	f023 0303 	bic.w	r3, r3, #3
 8007d96:	f043 0301 	orr.w	r3, r3, #1
 8007d9a:	81a3      	strh	r3, [r4, #12]
 8007d9c:	89a3      	ldrh	r3, [r4, #12]
 8007d9e:	431d      	orrs	r5, r3
 8007da0:	81a5      	strh	r5, [r4, #12]
 8007da2:	e7cf      	b.n	8007d44 <__smakebuf_r+0x18>

08007da4 <_fstat_r>:
 8007da4:	b538      	push	{r3, r4, r5, lr}
 8007da6:	4d07      	ldr	r5, [pc, #28]	@ (8007dc4 <_fstat_r+0x20>)
 8007da8:	2300      	movs	r3, #0
 8007daa:	4604      	mov	r4, r0
 8007dac:	4608      	mov	r0, r1
 8007dae:	4611      	mov	r1, r2
 8007db0:	602b      	str	r3, [r5, #0]
 8007db2:	f7fa fc91 	bl	80026d8 <_fstat>
 8007db6:	1c43      	adds	r3, r0, #1
 8007db8:	d102      	bne.n	8007dc0 <_fstat_r+0x1c>
 8007dba:	682b      	ldr	r3, [r5, #0]
 8007dbc:	b103      	cbz	r3, 8007dc0 <_fstat_r+0x1c>
 8007dbe:	6023      	str	r3, [r4, #0]
 8007dc0:	bd38      	pop	{r3, r4, r5, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20000858 	.word	0x20000858

08007dc8 <_isatty_r>:
 8007dc8:	b538      	push	{r3, r4, r5, lr}
 8007dca:	4d06      	ldr	r5, [pc, #24]	@ (8007de4 <_isatty_r+0x1c>)
 8007dcc:	2300      	movs	r3, #0
 8007dce:	4604      	mov	r4, r0
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	602b      	str	r3, [r5, #0]
 8007dd4:	f7fa fc90 	bl	80026f8 <_isatty>
 8007dd8:	1c43      	adds	r3, r0, #1
 8007dda:	d102      	bne.n	8007de2 <_isatty_r+0x1a>
 8007ddc:	682b      	ldr	r3, [r5, #0]
 8007dde:	b103      	cbz	r3, 8007de2 <_isatty_r+0x1a>
 8007de0:	6023      	str	r3, [r4, #0]
 8007de2:	bd38      	pop	{r3, r4, r5, pc}
 8007de4:	20000858 	.word	0x20000858

08007de8 <_init>:
 8007de8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dea:	bf00      	nop
 8007dec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dee:	bc08      	pop	{r3}
 8007df0:	469e      	mov	lr, r3
 8007df2:	4770      	bx	lr

08007df4 <_fini>:
 8007df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007df6:	bf00      	nop
 8007df8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dfa:	bc08      	pop	{r3}
 8007dfc:	469e      	mov	lr, r3
 8007dfe:	4770      	bx	lr
