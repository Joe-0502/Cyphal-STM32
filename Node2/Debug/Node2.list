
Node2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fa8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001650  08007138  08007138  00008138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008788  08008788  0000a070  2**0
                  CONTENTS
  4 .ARM          00000008  08008788  08008788  00009788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008790  08008790  0000a070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008790  08008790  00009790  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008794  08008794  00009794  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  20000000  08008798  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000085c  20000070  08008808  0000a070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200008cc  08008808  0000a8cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a2bb  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c44  00000000  00000000  0001435b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000980  00000000  00000000  00015fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000078a  00000000  00000000  00016920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020a8b  00000000  00000000  000170aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a501  00000000  00000000  00037b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c1469  00000000  00000000  00042036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010349f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f74  00000000  00000000  001034e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  00106458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007120 	.word	0x08007120

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007120 	.word	0x08007120

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4293      	cmp	r3, r2
 8000280:	bf28      	it	cs
 8000282:	4613      	movcs	r3, r2
}
 8000284:	4618      	mov	r0, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <nunavutSaturateBufferFragmentBitLength>:
///         [--------------- fragment_offset_bits ---------------][--- fragment_length_bits ---]
///                                                               [-- out bits --]
///
static inline size_t nunavutSaturateBufferFragmentBitLength(
    const size_t buffer_size_bytes, const size_t fragment_offset_bits, const size_t fragment_length_bits)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b086      	sub	sp, #24
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
    const size_t size_bits = (size_t)buffer_size_bytes * 8U;
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	00db      	lsls	r3, r3, #3
 80002a0:	617b      	str	r3, [r7, #20]
    const size_t tail_bits = size_bits - nunavutChooseMin(size_bits, fragment_offset_bits);
 80002a2:	68b9      	ldr	r1, [r7, #8]
 80002a4:	6978      	ldr	r0, [r7, #20]
 80002a6:	f7ff ffe3 	bl	8000270 <nunavutChooseMin>
 80002aa:	4602      	mov	r2, r0
 80002ac:	697b      	ldr	r3, [r7, #20]
 80002ae:	1a9b      	subs	r3, r3, r2
 80002b0:	613b      	str	r3, [r7, #16]
    return nunavutChooseMin(fragment_length_bits, tail_bits);
 80002b2:	6939      	ldr	r1, [r7, #16]
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f7ff ffdb 	bl	8000270 <nunavutChooseMin>
 80002ba:	4603      	mov	r3, r0
}
 80002bc:	4618      	mov	r0, r3
 80002be:	3718      	adds	r7, #24
 80002c0:	46bd      	mov	sp, r7
 80002c2:	bd80      	pop	{r7, pc}

080002c4 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b092      	sub	sp, #72	@ 0x48
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	60f8      	str	r0, [r7, #12]
 80002cc:	60b9      	str	r1, [r7, #8]
 80002ce:	607a      	str	r2, [r7, #4]
 80002d0:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 80002d2:	683b      	ldr	r3, [r7, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d105      	bne.n	80002e4 <nunavutCopyBits+0x20>
 80002d8:	4b91      	ldr	r3, [pc, #580]	@ (8000520 <nunavutCopyBits+0x25c>)
 80002da:	4a92      	ldr	r2, [pc, #584]	@ (8000524 <nunavutCopyBits+0x260>)
 80002dc:	2183      	movs	r1, #131	@ 0x83
 80002de:	4892      	ldr	r0, [pc, #584]	@ (8000528 <nunavutCopyBits+0x264>)
 80002e0:	f005 ff4e 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 80002e4:	68fb      	ldr	r3, [r7, #12]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d105      	bne.n	80002f6 <nunavutCopyBits+0x32>
 80002ea:	4b90      	ldr	r3, [pc, #576]	@ (800052c <nunavutCopyBits+0x268>)
 80002ec:	4a8d      	ldr	r2, [pc, #564]	@ (8000524 <nunavutCopyBits+0x260>)
 80002ee:	2184      	movs	r1, #132	@ 0x84
 80002f0:	488d      	ldr	r0, [pc, #564]	@ (8000528 <nunavutCopyBits+0x264>)
 80002f2:	f005 ff45 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 80002f6:	683a      	ldr	r2, [r7, #0]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d105      	bne.n	800030a <nunavutCopyBits+0x46>
 80002fe:	4b8c      	ldr	r3, [pc, #560]	@ (8000530 <nunavutCopyBits+0x26c>)
 8000300:	4a88      	ldr	r2, [pc, #544]	@ (8000524 <nunavutCopyBits+0x260>)
 8000302:	2185      	movs	r1, #133	@ 0x85
 8000304:	4888      	ldr	r0, [pc, #544]	@ (8000528 <nunavutCopyBits+0x264>)
 8000306:	f005 ff3b 	bl	8006180 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 800030a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800030c:	f003 0307 	and.w	r3, r3, #7
 8000310:	2b00      	cmp	r3, #0
 8000312:	d14f      	bne.n	80003b4 <nunavutCopyBits+0xf0>
 8000314:	68bb      	ldr	r3, [r7, #8]
 8000316:	f003 0307 	and.w	r3, r3, #7
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14a      	bne.n	80003b4 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	08db      	lsrs	r3, r3, #3
 8000322:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 8000324:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	683a      	ldr	r2, [r7, #0]
 800032a:	4413      	add	r3, r2
 800032c:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 800032e:	68bb      	ldr	r3, [r7, #8]
 8000330:	08db      	lsrs	r3, r3, #3
 8000332:	68fa      	ldr	r2, [r7, #12]
 8000334:	4413      	add	r3, r2
 8000336:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000338:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800033a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800033c:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800033e:	f006 f912 	bl	8006566 <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	b2db      	uxtb	r3, r3
 8000346:	f003 0307 	and.w	r3, r3, #7
 800034a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800034e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000352:	2b00      	cmp	r3, #0
 8000354:	f000 80df 	beq.w	8000516 <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000358:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800035a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800035c:	4413      	add	r3, r2
 800035e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 8000360:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000364:	4413      	add	r3, r2
 8000366:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000368:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800036c:	2b07      	cmp	r3, #7
 800036e:	d905      	bls.n	800037c <nunavutCopyBits+0xb8>
 8000370:	4b70      	ldr	r3, [pc, #448]	@ (8000534 <nunavutCopyBits+0x270>)
 8000372:	4a6c      	ldr	r2, [pc, #432]	@ (8000524 <nunavutCopyBits+0x260>)
 8000374:	2194      	movs	r1, #148	@ 0x94
 8000376:	486c      	ldr	r0, [pc, #432]	@ (8000528 <nunavutCopyBits+0x264>)
 8000378:	f005 ff02 	bl	8006180 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 800037c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000380:	2201      	movs	r2, #1
 8000382:	fa02 f303 	lsl.w	r3, r2, r3
 8000386:	b2db      	uxtb	r3, r3
 8000388:	3b01      	subs	r3, #1
 800038a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800038e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000390:	781a      	ldrb	r2, [r3, #0]
 8000392:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000396:	43db      	mvns	r3, r3
 8000398:	b2db      	uxtb	r3, r3
 800039a:	4013      	ands	r3, r2
 800039c:	b2da      	uxtb	r2, r3
 800039e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80003a0:	7819      	ldrb	r1, [r3, #0]
 80003a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80003a6:	400b      	ands	r3, r1
 80003a8:	b2db      	uxtb	r3, r3
 80003aa:	4313      	orrs	r3, r2
 80003ac:	b2da      	uxtb	r2, r3
 80003ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80003b0:	701a      	strb	r2, [r3, #0]
    {
 80003b2:	e0b0      	b.n	8000516 <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 80003b4:	683b      	ldr	r3, [r7, #0]
 80003b6:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 80003b8:	68fb      	ldr	r3, [r7, #12]
 80003ba:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 80003bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80003be:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 80003c0:	68bb      	ldr	r3, [r7, #8]
 80003c2:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 80003c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	4413      	add	r3, r2
 80003ca:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 80003cc:	6a3a      	ldr	r2, [r7, #32]
 80003ce:	69fb      	ldr	r3, [r7, #28]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	d210      	bcs.n	80003f6 <nunavutCopyBits+0x132>
 80003d4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4413      	add	r3, r2
 80003da:	3308      	adds	r3, #8
 80003dc:	08db      	lsrs	r3, r3, #3
 80003de:	6a3a      	ldr	r2, [r7, #32]
 80003e0:	4413      	add	r3, r2
 80003e2:	461a      	mov	r2, r3
 80003e4:	69fb      	ldr	r3, [r7, #28]
 80003e6:	429a      	cmp	r2, r3
 80003e8:	d905      	bls.n	80003f6 <nunavutCopyBits+0x132>
 80003ea:	4b53      	ldr	r3, [pc, #332]	@ (8000538 <nunavutCopyBits+0x274>)
 80003ec:	4a4d      	ldr	r2, [pc, #308]	@ (8000524 <nunavutCopyBits+0x260>)
 80003ee:	21a3      	movs	r1, #163	@ 0xa3
 80003f0:	484d      	ldr	r0, [pc, #308]	@ (8000528 <nunavutCopyBits+0x264>)
 80003f2:	f005 fec5 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 80003f6:	6a3a      	ldr	r2, [r7, #32]
 80003f8:	69fb      	ldr	r3, [r7, #28]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d97d      	bls.n	80004fa <nunavutCopyBits+0x236>
 80003fe:	68ba      	ldr	r2, [r7, #8]
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4413      	add	r3, r2
 8000404:	3308      	adds	r3, #8
 8000406:	08db      	lsrs	r3, r3, #3
 8000408:	69fa      	ldr	r2, [r7, #28]
 800040a:	4413      	add	r3, r2
 800040c:	461a      	mov	r2, r3
 800040e:	6a3b      	ldr	r3, [r7, #32]
 8000410:	429a      	cmp	r2, r3
 8000412:	d972      	bls.n	80004fa <nunavutCopyBits+0x236>
 8000414:	4b49      	ldr	r3, [pc, #292]	@ (800053c <nunavutCopyBits+0x278>)
 8000416:	4a43      	ldr	r2, [pc, #268]	@ (8000524 <nunavutCopyBits+0x260>)
 8000418:	21a4      	movs	r1, #164	@ 0xa4
 800041a:	4843      	ldr	r0, [pc, #268]	@ (8000528 <nunavutCopyBits+0x264>)
 800041c:	f005 feb0 	bl	8006180 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 8000420:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000422:	b2db      	uxtb	r3, r3
 8000424:	f003 0307 	and.w	r3, r3, #7
 8000428:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 800042a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800042c:	b2db      	uxtb	r3, r3
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8000434:	7dba      	ldrb	r2, [r7, #22]
 8000436:	7dfb      	ldrb	r3, [r7, #23]
 8000438:	4293      	cmp	r3, r2
 800043a:	bf38      	it	cc
 800043c:	4613      	movcc	r3, r2
 800043e:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 8000440:	7d7b      	ldrb	r3, [r7, #21]
 8000442:	f1c3 0008 	rsb	r0, r3, #8
 8000446:	69ba      	ldr	r2, [r7, #24]
 8000448:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800044a:	1ad3      	subs	r3, r2, r3
 800044c:	4619      	mov	r1, r3
 800044e:	f7ff ff0f 	bl	8000270 <nunavutChooseMin>
 8000452:	4603      	mov	r3, r0
 8000454:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 8000456:	7d3b      	ldrb	r3, [r7, #20]
 8000458:	2b00      	cmp	r3, #0
 800045a:	d105      	bne.n	8000468 <nunavutCopyBits+0x1a4>
 800045c:	4b38      	ldr	r3, [pc, #224]	@ (8000540 <nunavutCopyBits+0x27c>)
 800045e:	4a31      	ldr	r2, [pc, #196]	@ (8000524 <nunavutCopyBits+0x260>)
 8000460:	21ab      	movs	r1, #171	@ 0xab
 8000462:	4831      	ldr	r0, [pc, #196]	@ (8000528 <nunavutCopyBits+0x264>)
 8000464:	f005 fe8c 	bl	8006180 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 8000468:	7d3b      	ldrb	r3, [r7, #20]
 800046a:	2b08      	cmp	r3, #8
 800046c:	d905      	bls.n	800047a <nunavutCopyBits+0x1b6>
 800046e:	4b35      	ldr	r3, [pc, #212]	@ (8000544 <nunavutCopyBits+0x280>)
 8000470:	4a2c      	ldr	r2, [pc, #176]	@ (8000524 <nunavutCopyBits+0x260>)
 8000472:	21ac      	movs	r1, #172	@ 0xac
 8000474:	482c      	ldr	r0, [pc, #176]	@ (8000528 <nunavutCopyBits+0x264>)
 8000476:	f005 fe83 	bl	8006180 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 800047a:	7d3b      	ldrb	r3, [r7, #20]
 800047c:	2201      	movs	r2, #1
 800047e:	fa02 f303 	lsl.w	r3, r2, r3
 8000482:	1e5a      	subs	r2, r3, #1
 8000484:	7dbb      	ldrb	r3, [r7, #22]
 8000486:	fa02 f303 	lsl.w	r3, r2, r3
 800048a:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 800048c:	7cfb      	ldrb	r3, [r7, #19]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d105      	bne.n	800049e <nunavutCopyBits+0x1da>
 8000492:	4b2d      	ldr	r3, [pc, #180]	@ (8000548 <nunavutCopyBits+0x284>)
 8000494:	4a23      	ldr	r2, [pc, #140]	@ (8000524 <nunavutCopyBits+0x260>)
 8000496:	21af      	movs	r1, #175	@ 0xaf
 8000498:	4823      	ldr	r0, [pc, #140]	@ (8000528 <nunavutCopyBits+0x264>)
 800049a:	f005 fe71 	bl	8006180 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 800049e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004a0:	08db      	lsrs	r3, r3, #3
 80004a2:	6a3a      	ldr	r2, [r7, #32]
 80004a4:	4413      	add	r3, r2
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	461a      	mov	r2, r3
 80004aa:	7dfb      	ldrb	r3, [r7, #23]
 80004ac:	fa42 f303 	asr.w	r3, r2, r3
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	461a      	mov	r2, r3
 80004b4:	7dbb      	ldrb	r3, [r7, #22]
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 80004bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004be:	08db      	lsrs	r3, r3, #3
 80004c0:	69fa      	ldr	r2, [r7, #28]
 80004c2:	4413      	add	r3, r2
 80004c4:	781a      	ldrb	r2, [r3, #0]
 80004c6:	7cfb      	ldrb	r3, [r7, #19]
 80004c8:	43db      	mvns	r3, r3
 80004ca:	b2db      	uxtb	r3, r3
 80004cc:	4013      	ands	r3, r2
 80004ce:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 80004d0:	7cba      	ldrb	r2, [r7, #18]
 80004d2:	7cfb      	ldrb	r3, [r7, #19]
 80004d4:	4013      	ands	r3, r2
 80004d6:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80004d8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004da:	08db      	lsrs	r3, r3, #3
 80004dc:	69fa      	ldr	r2, [r7, #28]
 80004de:	4413      	add	r3, r2
 80004e0:	7c79      	ldrb	r1, [r7, #17]
 80004e2:	7c3a      	ldrb	r2, [r7, #16]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	b2d2      	uxtb	r2, r2
 80004e8:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80004ea:	7d3b      	ldrb	r3, [r7, #20]
 80004ec:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004ee:	4413      	add	r3, r2
 80004f0:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 80004f2:	7d3b      	ldrb	r3, [r7, #20]
 80004f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80004f6:	4413      	add	r3, r2
 80004f8:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 80004fa:	69ba      	ldr	r2, [r7, #24]
 80004fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004fe:	429a      	cmp	r2, r3
 8000500:	d88e      	bhi.n	8000420 <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 8000502:	69ba      	ldr	r2, [r7, #24]
 8000504:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000506:	429a      	cmp	r2, r3
 8000508:	d006      	beq.n	8000518 <nunavutCopyBits+0x254>
 800050a:	4b10      	ldr	r3, [pc, #64]	@ (800054c <nunavutCopyBits+0x288>)
 800050c:	4a05      	ldr	r2, [pc, #20]	@ (8000524 <nunavutCopyBits+0x260>)
 800050e:	21bd      	movs	r1, #189	@ 0xbd
 8000510:	4805      	ldr	r0, [pc, #20]	@ (8000528 <nunavutCopyBits+0x264>)
 8000512:	f005 fe35 	bl	8006180 <__assert_func>
    {
 8000516:	bf00      	nop
    }
}
 8000518:	bf00      	nop
 800051a:	3748      	adds	r7, #72	@ 0x48
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	08007138 	.word	0x08007138
 8000524:	08008194 	.word	0x08008194
 8000528:	0800714c 	.word	0x0800714c
 800052c:	0800719c 	.word	0x0800719c
 8000530:	080071b0 	.word	0x080071b0
 8000534:	080071bc 	.word	0x080071bc
 8000538:	080071cc 	.word	0x080071cc
 800053c:	08007238 	.word	0x08007238
 8000540:	080072a4 	.word	0x080072a4
 8000544:	080072b0 	.word	0x080072b0
 8000548:	080072bc 	.word	0x080072bc
 800054c:	080072c8 	.word	0x080072c8

08000550 <nunavutGetBits>:
static inline void nunavutGetBits(void* const output,
                                  const void* const buf,
                                  const size_t buf_size_bytes,
                                  const size_t off_bits,
                                  const size_t len_bits)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b088      	sub	sp, #32
 8000554:	af02      	add	r7, sp, #8
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
 800055c:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(output != NULL);
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d105      	bne.n	8000570 <nunavutGetBits+0x20>
 8000564:	4b17      	ldr	r3, [pc, #92]	@ (80005c4 <nunavutGetBits+0x74>)
 8000566:	4a18      	ldr	r2, [pc, #96]	@ (80005c8 <nunavutGetBits+0x78>)
 8000568:	21cd      	movs	r1, #205	@ 0xcd
 800056a:	4818      	ldr	r0, [pc, #96]	@ (80005cc <nunavutGetBits+0x7c>)
 800056c:	f005 fe08 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(buf != NULL);
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d105      	bne.n	8000582 <nunavutGetBits+0x32>
 8000576:	4b16      	ldr	r3, [pc, #88]	@ (80005d0 <nunavutGetBits+0x80>)
 8000578:	4a13      	ldr	r2, [pc, #76]	@ (80005c8 <nunavutGetBits+0x78>)
 800057a:	21ce      	movs	r1, #206	@ 0xce
 800057c:	4813      	ldr	r0, [pc, #76]	@ (80005cc <nunavutGetBits+0x7c>)
 800057e:	f005 fdff 	bl	8006180 <__assert_func>
    const size_t sat_bits = nunavutSaturateBufferFragmentBitLength(buf_size_bytes, off_bits, len_bits);
 8000582:	6a3a      	ldr	r2, [r7, #32]
 8000584:	6839      	ldr	r1, [r7, #0]
 8000586:	6878      	ldr	r0, [r7, #4]
 8000588:	f7ff fe82 	bl	8000290 <nunavutSaturateBufferFragmentBitLength>
 800058c:	6178      	str	r0, [r7, #20]
    // Apply implicit zero extension. Normally, this is a no-op unless (len_bits > sat_bits) or (len_bits % 8 != 0).
    // The former case ensures that if we're copying <8 bits, the MSB in the destination will be zeroed out.
    (void) memset(((uint8_t*)output) + (sat_bits / 8U), 0, ((len_bits + 7U) / 8U) - (sat_bits / 8U));
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	08db      	lsrs	r3, r3, #3
 8000592:	68fa      	ldr	r2, [r7, #12]
 8000594:	18d0      	adds	r0, r2, r3
 8000596:	6a3b      	ldr	r3, [r7, #32]
 8000598:	3307      	adds	r3, #7
 800059a:	08da      	lsrs	r2, r3, #3
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	08db      	lsrs	r3, r3, #3
 80005a0:	1ad3      	subs	r3, r2, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	2100      	movs	r1, #0
 80005a6:	f005 fff8 	bl	800659a <memset>
    nunavutCopyBits(output, 0U, sat_bits, buf, off_bits);
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	9300      	str	r3, [sp, #0]
 80005ae:	68bb      	ldr	r3, [r7, #8]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	2100      	movs	r1, #0
 80005b4:	68f8      	ldr	r0, [r7, #12]
 80005b6:	f7ff fe85 	bl	80002c4 <nunavutCopyBits>
}
 80005ba:	bf00      	nop
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	bf00      	nop
 80005c4:	080072dc 	.word	0x080072dc
 80005c8:	080081d4 	.word	0x080081d4
 80005cc:	0800714c 	.word	0x0800714c
 80005d0:	080072f4 	.word	0x080072f4

080005d4 <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af02      	add	r7, sp, #8
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d105      	bne.n	80005f2 <nunavutSetUxx+0x1e>
 80005e6:	4b13      	ldr	r3, [pc, #76]	@ (8000634 <nunavutSetUxx+0x60>)
 80005e8:	4a13      	ldr	r2, [pc, #76]	@ (8000638 <nunavutSetUxx+0x64>)
 80005ea:	21fb      	movs	r1, #251	@ 0xfb
 80005ec:	4813      	ldr	r0, [pc, #76]	@ (800063c <nunavutSetUxx+0x68>)
 80005ee:	f005 fdc7 	bl	8006180 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 80005f2:	68bb      	ldr	r3, [r7, #8]
 80005f4:	00da      	lsls	r2, r3, #3
 80005f6:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	440b      	add	r3, r1
 80005fe:	429a      	cmp	r2, r3
 8000600:	d202      	bcs.n	8000608 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000602:	f06f 0302 	mvn.w	r3, #2
 8000606:	e010      	b.n	800062a <nunavutSetUxx+0x56>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8000608:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800060c:	2140      	movs	r1, #64	@ 0x40
 800060e:	4618      	mov	r0, r3
 8000610:	f7ff fe2e 	bl	8000270 <nunavutChooseMin>
 8000614:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 8000616:	2300      	movs	r3, #0
 8000618:	9300      	str	r3, [sp, #0]
 800061a:	f107 0320 	add.w	r3, r7, #32
 800061e:	697a      	ldr	r2, [r7, #20]
 8000620:	6879      	ldr	r1, [r7, #4]
 8000622:	68f8      	ldr	r0, [r7, #12]
 8000624:	f7ff fe4e 	bl	80002c4 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8000628:	2300      	movs	r3, #0
}
 800062a:	4618      	mov	r0, r3
 800062c:	3718      	adds	r7, #24
 800062e:	46bd      	mov	sp, r7
 8000630:	bd80      	pop	{r7, pc}
 8000632:	bf00      	nop
 8000634:	080072f4 	.word	0x080072f4
 8000638:	08008184 	.word	0x08008184
 800063c:	0800714c 	.word	0x0800714c

08000640 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000644:	b08c      	sub	sp, #48	@ 0x30
 8000646:	af04      	add	r7, sp, #16
 8000648:	60f8      	str	r0, [r7, #12]
 800064a:	60b9      	str	r1, [r7, #8]
 800064c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d005      	beq.n	8000660 <uavcan_node_Health_1_0_serialize_+0x20>
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d002      	beq.n	8000660 <uavcan_node_Health_1_0_serialize_+0x20>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d102      	bne.n	8000666 <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000660:	f06f 0301 	mvn.w	r3, #1
 8000664:	e092      	b.n	800078c <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 800066c:	697b      	ldr	r3, [r7, #20]
 800066e:	00db      	lsls	r3, r3, #3
 8000670:	2b07      	cmp	r3, #7
 8000672:	d802      	bhi.n	800067a <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000674:	f06f 0302 	mvn.w	r3, #2
 8000678:	e088      	b.n	800078c <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800067e:	69fb      	ldr	r3, [r7, #28]
 8000680:	f003 0307 	and.w	r3, r3, #7
 8000684:	2b00      	cmp	r3, #0
 8000686:	d005      	beq.n	8000694 <uavcan_node_Health_1_0_serialize_+0x54>
 8000688:	4b43      	ldr	r3, [pc, #268]	@ (8000798 <uavcan_node_Health_1_0_serialize_+0x158>)
 800068a:	4a44      	ldr	r2, [pc, #272]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 800068c:	2185      	movs	r1, #133	@ 0x85
 800068e:	4844      	ldr	r0, [pc, #272]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000690:	f005 fd76 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 8000694:	69fb      	ldr	r3, [r7, #28]
 8000696:	2200      	movs	r2, #0
 8000698:	469a      	mov	sl, r3
 800069a:	4693      	mov	fp, r2
 800069c:	f11a 0402 	adds.w	r4, sl, #2
 80006a0:	f14b 0500 	adc.w	r5, fp, #0
 80006a4:	697b      	ldr	r3, [r7, #20]
 80006a6:	00db      	lsls	r3, r3, #3
 80006a8:	2200      	movs	r2, #0
 80006aa:	4698      	mov	r8, r3
 80006ac:	4691      	mov	r9, r2
 80006ae:	45a0      	cmp	r8, r4
 80006b0:	eb79 0305 	sbcs.w	r3, r9, r5
 80006b4:	d205      	bcs.n	80006c2 <uavcan_node_Health_1_0_serialize_+0x82>
 80006b6:	4b3b      	ldr	r3, [pc, #236]	@ (80007a4 <uavcan_node_Health_1_0_serialize_+0x164>)
 80006b8:	4a38      	ldr	r2, [pc, #224]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 80006ba:	2186      	movs	r1, #134	@ 0x86
 80006bc:	4838      	ldr	r0, [pc, #224]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 80006be:	f005 fd5f 	bl	8006180 <__assert_func>
        uint8_t _sat0_ = obj->value;
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	781b      	ldrb	r3, [r3, #0]
 80006c6:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 80006c8:	7efb      	ldrb	r3, [r7, #27]
 80006ca:	2b03      	cmp	r3, #3
 80006cc:	d901      	bls.n	80006d2 <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 80006ce:	2303      	movs	r3, #3
 80006d0:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	08db      	lsrs	r3, r3, #3
 80006d6:	68ba      	ldr	r2, [r7, #8]
 80006d8:	4413      	add	r3, r2
 80006da:	7efa      	ldrb	r2, [r7, #27]
 80006dc:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	3302      	adds	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80006e4:	69fb      	ldr	r3, [r7, #28]
 80006e6:	f003 0307 	and.w	r3, r3, #7
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d035      	beq.n	800075a <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	b2db      	uxtb	r3, r3
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	b2db      	uxtb	r3, r3
 80006f8:	f1c3 0308 	rsb	r3, r3, #8
 80006fc:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 80006fe:	7cfb      	ldrb	r3, [r7, #19]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <uavcan_node_Health_1_0_serialize_+0xd0>
 8000704:	4b28      	ldr	r3, [pc, #160]	@ (80007a8 <uavcan_node_Health_1_0_serialize_+0x168>)
 8000706:	4a25      	ldr	r2, [pc, #148]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000708:	2192      	movs	r1, #146	@ 0x92
 800070a:	4825      	ldr	r0, [pc, #148]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800070c:	f005 fd38 	bl	8006180 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000710:	7cfb      	ldrb	r3, [r7, #19]
 8000712:	9302      	str	r3, [sp, #8]
 8000714:	f04f 0200 	mov.w	r2, #0
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9cd 2300 	strd	r2, r3, [sp]
 8000720:	69fa      	ldr	r2, [r7, #28]
 8000722:	6979      	ldr	r1, [r7, #20]
 8000724:	68b8      	ldr	r0, [r7, #8]
 8000726:	f7ff ff55 	bl	80005d4 <nunavutSetUxx>
 800072a:	4603      	mov	r3, r0
 800072c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 800072e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000732:	2b00      	cmp	r3, #0
 8000734:	da02      	bge.n	800073c <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 8000736:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800073a:	e027      	b.n	800078c <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 800073c:	7cfb      	ldrb	r3, [r7, #19]
 800073e:	69fa      	ldr	r2, [r7, #28]
 8000740:	4413      	add	r3, r2
 8000742:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	f003 0307 	and.w	r3, r3, #7
 800074a:	2b00      	cmp	r3, #0
 800074c:	d005      	beq.n	800075a <uavcan_node_Health_1_0_serialize_+0x11a>
 800074e:	4b12      	ldr	r3, [pc, #72]	@ (8000798 <uavcan_node_Health_1_0_serialize_+0x158>)
 8000750:	4a12      	ldr	r2, [pc, #72]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000752:	2199      	movs	r1, #153	@ 0x99
 8000754:	4812      	ldr	r0, [pc, #72]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000756:	f005 fd13 	bl	8006180 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 800075a:	69fb      	ldr	r3, [r7, #28]
 800075c:	2b08      	cmp	r3, #8
 800075e:	d005      	beq.n	800076c <uavcan_node_Health_1_0_serialize_+0x12c>
 8000760:	4b12      	ldr	r3, [pc, #72]	@ (80007ac <uavcan_node_Health_1_0_serialize_+0x16c>)
 8000762:	4a0e      	ldr	r2, [pc, #56]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000764:	219c      	movs	r1, #156	@ 0x9c
 8000766:	480e      	ldr	r0, [pc, #56]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000768:	f005 fd0a 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800076c:	69fb      	ldr	r3, [r7, #28]
 800076e:	f003 0307 	and.w	r3, r3, #7
 8000772:	2b00      	cmp	r3, #0
 8000774:	d005      	beq.n	8000782 <uavcan_node_Health_1_0_serialize_+0x142>
 8000776:	4b08      	ldr	r3, [pc, #32]	@ (8000798 <uavcan_node_Health_1_0_serialize_+0x158>)
 8000778:	4a08      	ldr	r2, [pc, #32]	@ (800079c <uavcan_node_Health_1_0_serialize_+0x15c>)
 800077a:	219d      	movs	r1, #157	@ 0x9d
 800077c:	4808      	ldr	r0, [pc, #32]	@ (80007a0 <uavcan_node_Health_1_0_serialize_+0x160>)
 800077e:	f005 fcff 	bl	8006180 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000782:	69fb      	ldr	r3, [r7, #28]
 8000784:	08da      	lsrs	r2, r3, #3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 800078a:	2300      	movs	r3, #0
}
 800078c:	4618      	mov	r0, r3
 800078e:	3720      	adds	r7, #32
 8000790:	46bd      	mov	sp, r7
 8000792:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000796:	bf00      	nop
 8000798:	08007308 	.word	0x08007308
 800079c:	08008140 	.word	0x08008140
 80007a0:	08007320 	.word	0x08007320
 80007a4:	08007368 	.word	0x08007368
 80007a8:	08007398 	.word	0x08007398
 80007ac:	080073a4 	.word	0x080073a4

080007b0 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80007b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80007b4:	b08c      	sub	sp, #48	@ 0x30
 80007b6:	af04      	add	r7, sp, #16
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d005      	beq.n	80007d0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80007c4:	68bb      	ldr	r3, [r7, #8]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <uavcan_node_Mode_1_0_serialize_+0x20>
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d102      	bne.n	80007d6 <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80007d0:	f06f 0301 	mvn.w	r3, #1
 80007d4:	e092      	b.n	80008fc <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80007dc:	697b      	ldr	r3, [r7, #20]
 80007de:	00db      	lsls	r3, r3, #3
 80007e0:	2b07      	cmp	r3, #7
 80007e2:	d802      	bhi.n	80007ea <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80007e4:	f06f 0302 	mvn.w	r3, #2
 80007e8:	e088      	b.n	80008fc <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80007ee:	69fb      	ldr	r3, [r7, #28]
 80007f0:	f003 0307 	and.w	r3, r3, #7
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d005      	beq.n	8000804 <uavcan_node_Mode_1_0_serialize_+0x54>
 80007f8:	4b43      	ldr	r3, [pc, #268]	@ (8000908 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80007fa:	4a44      	ldr	r2, [pc, #272]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80007fc:	2185      	movs	r1, #133	@ 0x85
 80007fe:	4844      	ldr	r0, [pc, #272]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000800:	f005 fcbe 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 8000804:	69fb      	ldr	r3, [r7, #28]
 8000806:	2200      	movs	r2, #0
 8000808:	469a      	mov	sl, r3
 800080a:	4693      	mov	fp, r2
 800080c:	f11a 0403 	adds.w	r4, sl, #3
 8000810:	f14b 0500 	adc.w	r5, fp, #0
 8000814:	697b      	ldr	r3, [r7, #20]
 8000816:	00db      	lsls	r3, r3, #3
 8000818:	2200      	movs	r2, #0
 800081a:	4698      	mov	r8, r3
 800081c:	4691      	mov	r9, r2
 800081e:	45a0      	cmp	r8, r4
 8000820:	eb79 0305 	sbcs.w	r3, r9, r5
 8000824:	d205      	bcs.n	8000832 <uavcan_node_Mode_1_0_serialize_+0x82>
 8000826:	4b3b      	ldr	r3, [pc, #236]	@ (8000914 <uavcan_node_Mode_1_0_serialize_+0x164>)
 8000828:	4a38      	ldr	r2, [pc, #224]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800082a:	2186      	movs	r1, #134	@ 0x86
 800082c:	4838      	ldr	r0, [pc, #224]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800082e:	f005 fca7 	bl	8006180 <__assert_func>
        uint8_t _sat0_ = obj->value;
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	781b      	ldrb	r3, [r3, #0]
 8000836:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8000838:	7efb      	ldrb	r3, [r7, #27]
 800083a:	2b07      	cmp	r3, #7
 800083c:	d901      	bls.n	8000842 <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 800083e:	2307      	movs	r3, #7
 8000840:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 8000842:	69fb      	ldr	r3, [r7, #28]
 8000844:	08db      	lsrs	r3, r3, #3
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	4413      	add	r3, r2
 800084a:	7efa      	ldrb	r2, [r7, #27]
 800084c:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3303      	adds	r3, #3
 8000852:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000854:	69fb      	ldr	r3, [r7, #28]
 8000856:	f003 0307 	and.w	r3, r3, #7
 800085a:	2b00      	cmp	r3, #0
 800085c:	d035      	beq.n	80008ca <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f003 0307 	and.w	r3, r3, #7
 8000866:	b2db      	uxtb	r3, r3
 8000868:	f1c3 0308 	rsb	r3, r3, #8
 800086c:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 800086e:	7cfb      	ldrb	r3, [r7, #19]
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <uavcan_node_Mode_1_0_serialize_+0xd0>
 8000874:	4b28      	ldr	r3, [pc, #160]	@ (8000918 <uavcan_node_Mode_1_0_serialize_+0x168>)
 8000876:	4a25      	ldr	r2, [pc, #148]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8000878:	2192      	movs	r1, #146	@ 0x92
 800087a:	4825      	ldr	r0, [pc, #148]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800087c:	f005 fc80 	bl	8006180 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000880:	7cfb      	ldrb	r3, [r7, #19]
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9cd 2300 	strd	r2, r3, [sp]
 8000890:	69fa      	ldr	r2, [r7, #28]
 8000892:	6979      	ldr	r1, [r7, #20]
 8000894:	68b8      	ldr	r0, [r7, #8]
 8000896:	f7ff fe9d 	bl	80005d4 <nunavutSetUxx>
 800089a:	4603      	mov	r3, r0
 800089c:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 800089e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	da02      	bge.n	80008ac <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 80008a6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80008aa:	e027      	b.n	80008fc <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 80008ac:	7cfb      	ldrb	r3, [r7, #19]
 80008ae:	69fa      	ldr	r2, [r7, #28]
 80008b0:	4413      	add	r3, r2
 80008b2:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	f003 0307 	and.w	r3, r3, #7
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d005      	beq.n	80008ca <uavcan_node_Mode_1_0_serialize_+0x11a>
 80008be:	4b12      	ldr	r3, [pc, #72]	@ (8000908 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008c2:	2199      	movs	r1, #153	@ 0x99
 80008c4:	4812      	ldr	r0, [pc, #72]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008c6:	f005 fc5b 	bl	8006180 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 80008ca:	69fb      	ldr	r3, [r7, #28]
 80008cc:	2b08      	cmp	r3, #8
 80008ce:	d005      	beq.n	80008dc <uavcan_node_Mode_1_0_serialize_+0x12c>
 80008d0:	4b12      	ldr	r3, [pc, #72]	@ (800091c <uavcan_node_Mode_1_0_serialize_+0x16c>)
 80008d2:	4a0e      	ldr	r2, [pc, #56]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008d4:	219c      	movs	r1, #156	@ 0x9c
 80008d6:	480e      	ldr	r0, [pc, #56]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008d8:	f005 fc52 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80008dc:	69fb      	ldr	r3, [r7, #28]
 80008de:	f003 0307 	and.w	r3, r3, #7
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d005      	beq.n	80008f2 <uavcan_node_Mode_1_0_serialize_+0x142>
 80008e6:	4b08      	ldr	r3, [pc, #32]	@ (8000908 <uavcan_node_Mode_1_0_serialize_+0x158>)
 80008e8:	4a08      	ldr	r2, [pc, #32]	@ (800090c <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80008ea:	219d      	movs	r1, #157	@ 0x9d
 80008ec:	4808      	ldr	r0, [pc, #32]	@ (8000910 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80008ee:	f005 fc47 	bl	8006180 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80008f2:	69fb      	ldr	r3, [r7, #28]
 80008f4:	08da      	lsrs	r2, r3, #3
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80008fa:	2300      	movs	r3, #0
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	3720      	adds	r7, #32
 8000900:	46bd      	mov	sp, r7
 8000902:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000906:	bf00      	nop
 8000908:	08007308 	.word	0x08007308
 800090c:	08008164 	.word	0x08008164
 8000910:	080073b8 	.word	0x080073b8
 8000914:	08007400 	.word	0x08007400
 8000918:	08007398 	.word	0x08007398
 800091c:	080073a4 	.word	0x080073a4

08000920 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000924:	b0a0      	sub	sp, #128	@ 0x80
 8000926:	af04      	add	r7, sp, #16
 8000928:	6578      	str	r0, [r7, #84]	@ 0x54
 800092a:	6539      	str	r1, [r7, #80]	@ 0x50
 800092c:	64fa      	str	r2, [r7, #76]	@ 0x4c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 800092e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000930:	2b00      	cmp	r3, #0
 8000932:	d005      	beq.n	8000940 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8000934:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000936:	2b00      	cmp	r3, #0
 8000938:	d002      	beq.n	8000940 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 800093a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800093c:	2b00      	cmp	r3, #0
 800093e:	d102      	bne.n	8000946 <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000940:	f06f 0301 	mvn.w	r3, #1
 8000944:	e260      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000946:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	66bb      	str	r3, [r7, #104]	@ 0x68
    if ((8U * (size_t) capacity_bytes) < 56UL)
 800094c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800094e:	00db      	lsls	r3, r3, #3
 8000950:	2b37      	cmp	r3, #55	@ 0x37
 8000952:	d802      	bhi.n	800095a <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000954:	f06f 0302 	mvn.w	r3, #2
 8000958:	e256      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 800095a:	2300      	movs	r3, #0
 800095c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800095e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000960:	f003 0307 	and.w	r3, r3, #7
 8000964:	2b00      	cmp	r3, #0
 8000966:	d005      	beq.n	8000974 <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 8000968:	4bb0      	ldr	r3, [pc, #704]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 800096a:	4ab1      	ldr	r2, [pc, #708]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800096c:	218a      	movs	r1, #138	@ 0x8a
 800096e:	48b1      	ldr	r0, [pc, #708]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000970:	f005 fc06 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 8000974:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000976:	2200      	movs	r2, #0
 8000978:	4698      	mov	r8, r3
 800097a:	4691      	mov	r9, r2
 800097c:	f118 0420 	adds.w	r4, r8, #32
 8000980:	f149 0500 	adc.w	r5, r9, #0
 8000984:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000986:	00db      	lsls	r3, r3, #3
 8000988:	2200      	movs	r2, #0
 800098a:	469a      	mov	sl, r3
 800098c:	4693      	mov	fp, r2
 800098e:	45a2      	cmp	sl, r4
 8000990:	eb7b 0305 	sbcs.w	r3, fp, r5
 8000994:	d205      	bcs.n	80009a2 <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 8000996:	4ba8      	ldr	r3, [pc, #672]	@ (8000c38 <uavcan_node_Heartbeat_1_0_serialize_+0x318>)
 8000998:	4aa5      	ldr	r2, [pc, #660]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800099a:	218b      	movs	r1, #139	@ 0x8b
 800099c:	48a5      	ldr	r0, [pc, #660]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800099e:	f005 fbef 	bl	8006180 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 80009a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009a4:	08da      	lsrs	r2, r3, #3
 80009a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80009a8:	441a      	add	r2, r3
 80009aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	6013      	str	r3, [r2, #0]
        offset_bits += 32U;
 80009b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009b2:	3320      	adds	r3, #32
 80009b4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80009b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009b8:	f003 0307 	and.w	r3, r3, #7
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d03a      	beq.n	8000a36 <uavcan_node_Heartbeat_1_0_serialize_+0x116>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80009c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	f003 0307 	and.w	r3, r3, #7
 80009c8:	b2db      	uxtb	r3, r3
 80009ca:	f1c3 0308 	rsb	r3, r3, #8
 80009ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        NUNAVUT_ASSERT(_pad0_ > 0);
 80009d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d105      	bne.n	80009e6 <uavcan_node_Heartbeat_1_0_serialize_+0xc6>
 80009da:	4b98      	ldr	r3, [pc, #608]	@ (8000c3c <uavcan_node_Heartbeat_1_0_serialize_+0x31c>)
 80009dc:	4a94      	ldr	r2, [pc, #592]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80009de:	2193      	movs	r1, #147	@ 0x93
 80009e0:	4894      	ldr	r0, [pc, #592]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80009e2:	f005 fbcd 	bl	8006180 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80009e6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80009ea:	9302      	str	r3, [sp, #8]
 80009ec:	f04f 0200 	mov.w	r2, #0
 80009f0:	f04f 0300 	mov.w	r3, #0
 80009f4:	e9cd 2300 	strd	r2, r3, [sp]
 80009f8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80009fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80009fc:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80009fe:	f7ff fde9 	bl	80005d4 <nunavutSetUxx>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        if (_err0_ < 0)
 8000a08:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	da02      	bge.n	8000a16 <uavcan_node_Heartbeat_1_0_serialize_+0xf6>
        {
            return _err0_;
 8000a10:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000a14:	e1f8      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad0_;
 8000a16:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000a1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a1c:	4413      	add	r3, r2
 8000a1e:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a20:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a22:	f003 0307 	and.w	r3, r3, #7
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d005      	beq.n	8000a36 <uavcan_node_Heartbeat_1_0_serialize_+0x116>
 8000a2a:	4b80      	ldr	r3, [pc, #512]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a2c:	4a80      	ldr	r2, [pc, #512]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a2e:	219a      	movs	r1, #154	@ 0x9a
 8000a30:	4880      	ldr	r0, [pc, #512]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a32:	f005 fba5 	bl	8006180 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d005      	beq.n	8000a4c <uavcan_node_Heartbeat_1_0_serialize_+0x12c>
 8000a40:	4b7a      	ldr	r3, [pc, #488]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a42:	4a7b      	ldr	r2, [pc, #492]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a44:	219d      	movs	r1, #157	@ 0x9d
 8000a46:	487b      	ldr	r0, [pc, #492]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a48:	f005 fb9a 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000a4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d005      	beq.n	8000a62 <uavcan_node_Heartbeat_1_0_serialize_+0x142>
 8000a56:	4b75      	ldr	r3, [pc, #468]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a58:	4a75      	ldr	r2, [pc, #468]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a5a:	219e      	movs	r1, #158	@ 0x9e
 8000a5c:	4875      	ldr	r0, [pc, #468]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a5e:	f005 fb8f 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000a62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a64:	2200      	movs	r2, #0
 8000a66:	643b      	str	r3, [r7, #64]	@ 0x40
 8000a68:	647a      	str	r2, [r7, #68]	@ 0x44
 8000a6a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000a6e:	460b      	mov	r3, r1
 8000a70:	3308      	adds	r3, #8
 8000a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000a74:	4613      	mov	r3, r2
 8000a76:	f143 0300 	adc.w	r3, r3, #0
 8000a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000a7c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a7e:	00db      	lsls	r3, r3, #3
 8000a80:	2200      	movs	r2, #0
 8000a82:	633b      	str	r3, [r7, #48]	@ 0x30
 8000a84:	637a      	str	r2, [r7, #52]	@ 0x34
 8000a86:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000a8a:	4623      	mov	r3, r4
 8000a8c:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8000a90:	4602      	mov	r2, r0
 8000a92:	4293      	cmp	r3, r2
 8000a94:	462b      	mov	r3, r5
 8000a96:	460a      	mov	r2, r1
 8000a98:	4193      	sbcs	r3, r2
 8000a9a:	d205      	bcs.n	8000aa8 <uavcan_node_Heartbeat_1_0_serialize_+0x188>
 8000a9c:	4b68      	ldr	r3, [pc, #416]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8000a9e:	4a64      	ldr	r2, [pc, #400]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000aa0:	219f      	movs	r1, #159	@ 0x9f
 8000aa2:	4864      	ldr	r0, [pc, #400]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000aa4:	f005 fb6c 	bl	8006180 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aae:	f003 0307 	and.w	r3, r3, #7
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d005      	beq.n	8000ac2 <uavcan_node_Heartbeat_1_0_serialize_+0x1a2>
 8000ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000ab8:	4a5d      	ldr	r2, [pc, #372]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000aba:	21a1      	movs	r1, #161	@ 0xa1
 8000abc:	485d      	ldr	r0, [pc, #372]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000abe:	f005 fb5f 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8000ac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ac4:	08da      	lsrs	r2, r3, #3
 8000ac6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000ac8:	4413      	add	r3, r2
 8000aca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d205      	bcs.n	8000adc <uavcan_node_Heartbeat_1_0_serialize_+0x1bc>
 8000ad0:	4b5c      	ldr	r3, [pc, #368]	@ (8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x324>)
 8000ad2:	4a57      	ldr	r2, [pc, #348]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000ad4:	21a2      	movs	r1, #162	@ 0xa2
 8000ad6:	4857      	ldr	r0, [pc, #348]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000ad8:	f005 fb52 	bl	8006180 <__assert_func>
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000adc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000ade:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8000ae0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ae2:	08da      	lsrs	r2, r3, #3
 8000ae4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000ae6:	1899      	adds	r1, r3, r2
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000ae8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000aec:	461a      	mov	r2, r3
 8000aee:	f7ff fda7 	bl	8000640 <uavcan_node_Health_1_0_serialize_>
 8000af2:	4603      	mov	r3, r0
 8000af4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        if (_err1_ < 0)
 8000af8:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	da02      	bge.n	8000b06 <uavcan_node_Heartbeat_1_0_serialize_+0x1e6>
        {
            return _err1_;
 8000b00:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000b04:	e180      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 8000b06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b08:	00db      	lsls	r3, r3, #3
 8000b0a:	2b08      	cmp	r3, #8
 8000b0c:	d005      	beq.n	8000b1a <uavcan_node_Heartbeat_1_0_serialize_+0x1fa>
 8000b0e:	4b4e      	ldr	r3, [pc, #312]	@ (8000c48 <uavcan_node_Heartbeat_1_0_serialize_+0x328>)
 8000b10:	4a47      	ldr	r2, [pc, #284]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b12:	21aa      	movs	r1, #170	@ 0xaa
 8000b14:	4847      	ldr	r0, [pc, #284]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b16:	f005 fb33 	bl	8006180 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8000b1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000b1c:	00db      	lsls	r3, r3, #3
 8000b1e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b20:	4413      	add	r3, r2
 8000b22:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000b24:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b26:	00db      	lsls	r3, r3, #3
 8000b28:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b2a:	429a      	cmp	r2, r3
 8000b2c:	d905      	bls.n	8000b3a <uavcan_node_Heartbeat_1_0_serialize_+0x21a>
 8000b2e:	4b47      	ldr	r3, [pc, #284]	@ (8000c4c <uavcan_node_Heartbeat_1_0_serialize_+0x32c>)
 8000b30:	4a3f      	ldr	r2, [pc, #252]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b32:	21ac      	movs	r1, #172	@ 0xac
 8000b34:	483f      	ldr	r0, [pc, #252]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b36:	f005 fb23 	bl	8006180 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b3c:	f003 0307 	and.w	r3, r3, #7
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d03a      	beq.n	8000bba <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8000b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b46:	b2db      	uxtb	r3, r3
 8000b48:	f003 0307 	and.w	r3, r3, #7
 8000b4c:	b2db      	uxtb	r3, r3
 8000b4e:	f1c3 0308 	rsb	r3, r3, #8
 8000b52:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        NUNAVUT_ASSERT(_pad1_ > 0);
 8000b56:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d105      	bne.n	8000b6a <uavcan_node_Heartbeat_1_0_serialize_+0x24a>
 8000b5e:	4b3c      	ldr	r3, [pc, #240]	@ (8000c50 <uavcan_node_Heartbeat_1_0_serialize_+0x330>)
 8000b60:	4a33      	ldr	r2, [pc, #204]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b62:	21b1      	movs	r1, #177	@ 0xb1
 8000b64:	4833      	ldr	r0, [pc, #204]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b66:	f005 fb0b 	bl	8006180 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8000b6a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b6e:	9302      	str	r3, [sp, #8]
 8000b70:	f04f 0200 	mov.w	r2, #0
 8000b74:	f04f 0300 	mov.w	r3, #0
 8000b78:	e9cd 2300 	strd	r2, r3, [sp]
 8000b7c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000b7e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000b80:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000b82:	f7ff fd27 	bl	80005d4 <nunavutSetUxx>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        if (_err2_ < 0)
 8000b8c:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	da02      	bge.n	8000b9a <uavcan_node_Heartbeat_1_0_serialize_+0x27a>
        {
            return _err2_;
 8000b94:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000b98:	e136      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad1_;
 8000b9a:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000b9e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ba0:	4413      	add	r3, r2
 8000ba2:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000ba4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d005      	beq.n	8000bba <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
 8000bae:	4b1f      	ldr	r3, [pc, #124]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bb2:	21b8      	movs	r1, #184	@ 0xb8
 8000bb4:	481f      	ldr	r0, [pc, #124]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000bb6:	f005 fae3 	bl	8006180 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000bba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bbc:	f003 0307 	and.w	r3, r3, #7
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d005      	beq.n	8000bd0 <uavcan_node_Heartbeat_1_0_serialize_+0x2b0>
 8000bc4:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bc6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bc8:	21bb      	movs	r1, #187	@ 0xbb
 8000bca:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000bcc:	f005 fad8 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000bd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d005      	beq.n	8000be6 <uavcan_node_Heartbeat_1_0_serialize_+0x2c6>
 8000bda:	4b14      	ldr	r3, [pc, #80]	@ (8000c2c <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000bdc:	4a14      	ldr	r2, [pc, #80]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000bde:	21bc      	movs	r1, #188	@ 0xbc
 8000be0:	4814      	ldr	r0, [pc, #80]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000be2:	f005 facd 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000be6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000be8:	2200      	movs	r2, #0
 8000bea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000bec:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000bee:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000bf2:	460b      	mov	r3, r1
 8000bf4:	3308      	adds	r3, #8
 8000bf6:	623b      	str	r3, [r7, #32]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	f143 0300 	adc.w	r3, r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c00:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c02:	00db      	lsls	r3, r3, #3
 8000c04:	2200      	movs	r2, #0
 8000c06:	61bb      	str	r3, [r7, #24]
 8000c08:	61fa      	str	r2, [r7, #28]
 8000c0a:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000c0e:	4623      	mov	r3, r4
 8000c10:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000c14:	4602      	mov	r2, r0
 8000c16:	4293      	cmp	r3, r2
 8000c18:	462b      	mov	r3, r5
 8000c1a:	460a      	mov	r2, r1
 8000c1c:	4193      	sbcs	r3, r2
 8000c1e:	d219      	bcs.n	8000c54 <uavcan_node_Heartbeat_1_0_serialize_+0x334>
 8000c20:	4b07      	ldr	r3, [pc, #28]	@ (8000c40 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8000c22:	4a03      	ldr	r2, [pc, #12]	@ (8000c30 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000c24:	21bd      	movs	r1, #189	@ 0xbd
 8000c26:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000c28:	f005 faaa 	bl	8006180 <__assert_func>
 8000c2c:	08007308 	.word	0x08007308
 8000c30:	08008118 	.word	0x08008118
 8000c34:	08007430 	.word	0x08007430
 8000c38:	0800747c 	.word	0x0800747c
 8000c3c:	08007398 	.word	0x08007398
 8000c40:	080074ac 	.word	0x080074ac
 8000c44:	080074dc 	.word	0x080074dc
 8000c48:	08007514 	.word	0x08007514
 8000c4c:	08007534 	.word	0x08007534
 8000c50:	0800755c 	.word	0x0800755c
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8000c54:	2301      	movs	r3, #1
 8000c56:	65bb      	str	r3, [r7, #88]	@ 0x58
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d005      	beq.n	8000c6e <uavcan_node_Heartbeat_1_0_serialize_+0x34e>
 8000c62:	4b6c      	ldr	r3, [pc, #432]	@ (8000e14 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000c64:	4a6c      	ldr	r2, [pc, #432]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c66:	21bf      	movs	r1, #191	@ 0xbf
 8000c68:	486c      	ldr	r0, [pc, #432]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c6a:	f005 fa89 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8000c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c70:	08da      	lsrs	r2, r3, #3
 8000c72:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c74:	4413      	add	r3, r2
 8000c76:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000c78:	429a      	cmp	r2, r3
 8000c7a:	d205      	bcs.n	8000c88 <uavcan_node_Heartbeat_1_0_serialize_+0x368>
 8000c7c:	4b68      	ldr	r3, [pc, #416]	@ (8000e20 <uavcan_node_Heartbeat_1_0_serialize_+0x500>)
 8000c7e:	4a66      	ldr	r2, [pc, #408]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c80:	21c0      	movs	r1, #192	@ 0xc0
 8000c82:	4866      	ldr	r0, [pc, #408]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c84:	f005 fa7c 	bl	8006180 <__assert_func>
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000c88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000c8a:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8000c8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c8e:	08db      	lsrs	r3, r3, #3
 8000c90:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c92:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000c94:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f7ff fd89 	bl	80007b0 <uavcan_node_Mode_1_0_serialize_>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
        if (_err3_ < 0)
 8000ca4:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	da02      	bge.n	8000cb2 <uavcan_node_Heartbeat_1_0_serialize_+0x392>
        {
            return _err3_;
 8000cac:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000cb0:	e0aa      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8000cb2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cb4:	00db      	lsls	r3, r3, #3
 8000cb6:	2b08      	cmp	r3, #8
 8000cb8:	d005      	beq.n	8000cc6 <uavcan_node_Heartbeat_1_0_serialize_+0x3a6>
 8000cba:	4b5a      	ldr	r3, [pc, #360]	@ (8000e24 <uavcan_node_Heartbeat_1_0_serialize_+0x504>)
 8000cbc:	4a56      	ldr	r2, [pc, #344]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cbe:	21c8      	movs	r1, #200	@ 0xc8
 8000cc0:	4856      	ldr	r0, [pc, #344]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000cc2:	f005 fa5d 	bl	8006180 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8000cc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000cc8:	00db      	lsls	r3, r3, #3
 8000cca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ccc:	4413      	add	r3, r2
 8000cce:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000cd0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000cd6:	429a      	cmp	r2, r3
 8000cd8:	d905      	bls.n	8000ce6 <uavcan_node_Heartbeat_1_0_serialize_+0x3c6>
 8000cda:	4b53      	ldr	r3, [pc, #332]	@ (8000e28 <uavcan_node_Heartbeat_1_0_serialize_+0x508>)
 8000cdc:	4a4e      	ldr	r2, [pc, #312]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cde:	21ca      	movs	r1, #202	@ 0xca
 8000ce0:	484e      	ldr	r0, [pc, #312]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000ce2:	f005 fa4d 	bl	8006180 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000ce6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d005      	beq.n	8000cfc <uavcan_node_Heartbeat_1_0_serialize_+0x3dc>
 8000cf0:	4b48      	ldr	r3, [pc, #288]	@ (8000e14 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000cf2:	4a49      	ldr	r2, [pc, #292]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cf4:	21cd      	movs	r1, #205	@ 0xcd
 8000cf6:	4849      	ldr	r0, [pc, #292]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000cf8:	f005 fa42 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000cfc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000cfe:	2200      	movs	r2, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	617a      	str	r2, [r7, #20]
 8000d04:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	3308      	adds	r3, #8
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	f143 0300 	adc.w	r3, r3, #0
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000d18:	00db      	lsls	r3, r3, #3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	607a      	str	r2, [r7, #4]
 8000d20:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000d24:	4623      	mov	r3, r4
 8000d26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000d2a:	4602      	mov	r2, r0
 8000d2c:	4293      	cmp	r3, r2
 8000d2e:	462b      	mov	r3, r5
 8000d30:	460a      	mov	r2, r1
 8000d32:	4193      	sbcs	r3, r2
 8000d34:	d205      	bcs.n	8000d42 <uavcan_node_Heartbeat_1_0_serialize_+0x422>
 8000d36:	4b3d      	ldr	r3, [pc, #244]	@ (8000e2c <uavcan_node_Heartbeat_1_0_serialize_+0x50c>)
 8000d38:	4a37      	ldr	r2, [pc, #220]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d3a:	21ce      	movs	r1, #206	@ 0xce
 8000d3c:	4837      	ldr	r0, [pc, #220]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d3e:	f005 fa1f 	bl	8006180 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8000d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d44:	08db      	lsrs	r3, r3, #3
 8000d46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000d48:	4413      	add	r3, r2
 8000d4a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000d4c:	7992      	ldrb	r2, [r2, #6]
 8000d4e:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8000d50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d52:	3308      	adds	r3, #8
 8000d54:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d58:	f003 0307 	and.w	r3, r3, #7
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d03a      	beq.n	8000dd6 <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8000d60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d62:	b2db      	uxtb	r3, r3
 8000d64:	f003 0307 	and.w	r3, r3, #7
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	f1c3 0308 	rsb	r3, r3, #8
 8000d6e:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        NUNAVUT_ASSERT(_pad2_ > 0);
 8000d72:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d105      	bne.n	8000d86 <uavcan_node_Heartbeat_1_0_serialize_+0x466>
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000e30 <uavcan_node_Heartbeat_1_0_serialize_+0x510>)
 8000d7c:	4a26      	ldr	r2, [pc, #152]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d7e:	21d6      	movs	r1, #214	@ 0xd6
 8000d80:	4826      	ldr	r0, [pc, #152]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d82:	f005 f9fd 	bl	8006180 <__assert_func>
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8000d86:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	f04f 0200 	mov.w	r2, #0
 8000d90:	f04f 0300 	mov.w	r3, #0
 8000d94:	e9cd 2300 	strd	r2, r3, [sp]
 8000d98:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d9a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000d9c:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000d9e:	f7ff fc19 	bl	80005d4 <nunavutSetUxx>
 8000da2:	4603      	mov	r3, r0
 8000da4:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        if (_err4_ < 0)
 8000da8:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	da02      	bge.n	8000db6 <uavcan_node_Heartbeat_1_0_serialize_+0x496>
        {
            return _err4_;
 8000db0:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000db4:	e028      	b.n	8000e08 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad2_;
 8000db6:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000dba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000dbc:	4413      	add	r3, r2
 8000dbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000dc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dc2:	f003 0307 	and.w	r3, r3, #7
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d005      	beq.n	8000dd6 <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
 8000dca:	4b12      	ldr	r3, [pc, #72]	@ (8000e14 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000dcc:	4a12      	ldr	r2, [pc, #72]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000dce:	21dd      	movs	r1, #221	@ 0xdd
 8000dd0:	4812      	ldr	r0, [pc, #72]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000dd2:	f005 f9d5 	bl	8006180 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8000dd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dd8:	2b38      	cmp	r3, #56	@ 0x38
 8000dda:	d005      	beq.n	8000de8 <uavcan_node_Heartbeat_1_0_serialize_+0x4c8>
 8000ddc:	4b15      	ldr	r3, [pc, #84]	@ (8000e34 <uavcan_node_Heartbeat_1_0_serialize_+0x514>)
 8000dde:	4a0e      	ldr	r2, [pc, #56]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000de0:	21e0      	movs	r1, #224	@ 0xe0
 8000de2:	480e      	ldr	r0, [pc, #56]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000de4:	f005 f9cc 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000de8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dea:	f003 0307 	and.w	r3, r3, #7
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d005      	beq.n	8000dfe <uavcan_node_Heartbeat_1_0_serialize_+0x4de>
 8000df2:	4b08      	ldr	r3, [pc, #32]	@ (8000e14 <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000df4:	4a08      	ldr	r2, [pc, #32]	@ (8000e18 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000df6:	21e1      	movs	r1, #225	@ 0xe1
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000dfa:	f005 f9c1 	bl	8006180 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000dfe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e00:	08da      	lsrs	r2, r3, #3
 8000e02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000e04:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8000e06:	2300      	movs	r3, #0
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3770      	adds	r7, #112	@ 0x70
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000e12:	bf00      	nop
 8000e14:	08007308 	.word	0x08007308
 8000e18:	08008118 	.word	0x08008118
 8000e1c:	08007430 	.word	0x08007430
 8000e20:	08007568 	.word	0x08007568
 8000e24:	080075a0 	.word	0x080075a0
 8000e28:	08007534 	.word	0x08007534
 8000e2c:	080074ac 	.word	0x080074ac
 8000e30:	080075c0 	.word	0x080075c0
 8000e34:	080075cc 	.word	0x080075cc

08000e38 <uavcan_primitive_array_Real64_1_0_deserialize_>:
///                                 was activated. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_array_Real64_1_0_deserialize_(
    uavcan_primitive_array_Real64_1_0* const out_obj, const uint8_t* buffer, size_t* const inout_buffer_size_bytes)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af02      	add	r7, sp, #8
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
    if ((out_obj == NULL) || (inout_buffer_size_bytes == NULL) || ((buffer == NULL) && (0 != *inout_buffer_size_bytes)))
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d009      	beq.n	8000e5e <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d006      	beq.n	8000e5e <uavcan_primitive_array_Real64_1_0_deserialize_+0x26>
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d106      	bne.n	8000e64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d002      	beq.n	8000e64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x2c>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000e5e:	f06f 0301 	mvn.w	r3, #1
 8000e62:	e076      	b.n	8000f52 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    if (buffer == NULL)
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d101      	bne.n	8000e6e <uavcan_primitive_array_Real64_1_0_deserialize_+0x36>
    {
        buffer = (const uint8_t*)"";
 8000e6a:	4b3c      	ldr	r3, [pc, #240]	@ (8000f5c <uavcan_primitive_array_Real64_1_0_deserialize_+0x124>)
 8000e6c:	60bb      	str	r3, [r7, #8]
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	61fb      	str	r3, [r7, #28]
    const size_t capacity_bits = capacity_bytes * (size_t) 8U;
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	61bb      	str	r3, [r7, #24]
    size_t offset_bits = 0U;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	617b      	str	r3, [r7, #20]
    // saturated float64[<=32] value
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	f003 0307 	and.w	r3, r3, #7
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d005      	beq.n	8000e94 <uavcan_primitive_array_Real64_1_0_deserialize_+0x5c>
 8000e88:	4b35      	ldr	r3, [pc, #212]	@ (8000f60 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8000e8a:	4a36      	ldr	r2, [pc, #216]	@ (8000f64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8000e8c:	21c7      	movs	r1, #199	@ 0xc7
 8000e8e:	4836      	ldr	r0, [pc, #216]	@ (8000f68 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8000e90:	f005 f976 	bl	8006180 <__assert_func>
    // Array length prefix: truncated uint8
    if ((offset_bits + 8U) <= capacity_bits)
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	3308      	adds	r3, #8
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	429a      	cmp	r2, r3
 8000e9c:	d309      	bcc.n	8000eb2 <uavcan_primitive_array_Real64_1_0_deserialize_+0x7a>
    {
        out_obj->value.count = buffer[offset_bits / 8U] & 255U;
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	08db      	lsrs	r3, r3, #3
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	461a      	mov	r2, r3
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8000eb0:	e003      	b.n	8000eba <uavcan_primitive_array_Real64_1_0_deserialize_+0x82>
    }
    else
    {
        out_obj->value.count = 0U;
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
    }
    offset_bits += 8U;
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	3308      	adds	r3, #8
 8000ebe:	617b      	str	r3, [r7, #20]
    if (out_obj->value.count > 32U)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000ec6:	2b20      	cmp	r3, #32
 8000ec8:	d902      	bls.n	8000ed0 <uavcan_primitive_array_Real64_1_0_deserialize_+0x98>
    {
        return -NUNAVUT_ERROR_REPRESENTATION_BAD_ARRAY_LENGTH;
 8000eca:	f06f 0309 	mvn.w	r3, #9
 8000ece:	e040      	b.n	8000f52 <uavcan_primitive_array_Real64_1_0_deserialize_+0x11a>
    }
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d005      	beq.n	8000ee6 <uavcan_primitive_array_Real64_1_0_deserialize_+0xae>
 8000eda:	4b21      	ldr	r3, [pc, #132]	@ (8000f60 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8000edc:	4a21      	ldr	r2, [pc, #132]	@ (8000f64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8000ede:	21d6      	movs	r1, #214	@ 0xd6
 8000ee0:	4821      	ldr	r0, [pc, #132]	@ (8000f68 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8000ee2:	f005 f94d 	bl	8006180 <__assert_func>
    static_assert(NUNAVUT_PLATFORM_IEEE754_FLOAT, "Native IEEE754 binary32 required. TODO: relax constraint");
    static_assert(NUNAVUT_PLATFORM_IEEE754_DOUBLE, "Native IEEE754 binary64 required. TODO: relax constraint");
    nunavutGetBits(&out_obj->value.elements[0], &buffer[0], capacity_bytes, offset_bits, out_obj->value.count * 64U);
 8000ee6:	68f8      	ldr	r0, [r7, #12]
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000eee:	019b      	lsls	r3, r3, #6
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	69fa      	ldr	r2, [r7, #28]
 8000ef6:	68b9      	ldr	r1, [r7, #8]
 8000ef8:	f7ff fb2a 	bl	8000550 <nunavutGetBits>
    offset_bits += out_obj->value.count * 64U;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8000f02:	019b      	lsls	r3, r3, #6
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	4413      	add	r3, r2
 8000f08:	617b      	str	r3, [r7, #20]
    offset_bits = (offset_bits + 7U) & ~(size_t) 7U;  // Align on 8 bits.
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3307      	adds	r3, #7
 8000f0e:	f023 0307 	bic.w	r3, r3, #7
 8000f12:	617b      	str	r3, [r7, #20]
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	f003 0307 	and.w	r3, r3, #7
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d005      	beq.n	8000f2a <uavcan_primitive_array_Real64_1_0_deserialize_+0xf2>
 8000f1e:	4b10      	ldr	r3, [pc, #64]	@ (8000f60 <uavcan_primitive_array_Real64_1_0_deserialize_+0x128>)
 8000f20:	4a10      	ldr	r2, [pc, #64]	@ (8000f64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8000f22:	21dc      	movs	r1, #220	@ 0xdc
 8000f24:	4810      	ldr	r0, [pc, #64]	@ (8000f68 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8000f26:	f005 f92b 	bl	8006180 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (nunavutChooseMin(offset_bits, capacity_bits) / 8U);
 8000f2a:	69b9      	ldr	r1, [r7, #24]
 8000f2c:	6978      	ldr	r0, [r7, #20]
 8000f2e:	f7ff f99f 	bl	8000270 <nunavutChooseMin>
 8000f32:	4603      	mov	r3, r0
 8000f34:	08da      	lsrs	r2, r3, #3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	601a      	str	r2, [r3, #0]
    NUNAVUT_ASSERT(capacity_bytes >= *inout_buffer_size_bytes);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	69fa      	ldr	r2, [r7, #28]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d205      	bcs.n	8000f50 <uavcan_primitive_array_Real64_1_0_deserialize_+0x118>
 8000f44:	4b09      	ldr	r3, [pc, #36]	@ (8000f6c <uavcan_primitive_array_Real64_1_0_deserialize_+0x134>)
 8000f46:	4a07      	ldr	r2, [pc, #28]	@ (8000f64 <uavcan_primitive_array_Real64_1_0_deserialize_+0x12c>)
 8000f48:	21de      	movs	r1, #222	@ 0xde
 8000f4a:	4807      	ldr	r0, [pc, #28]	@ (8000f68 <uavcan_primitive_array_Real64_1_0_deserialize_+0x130>)
 8000f4c:	f005 f918 	bl	8006180 <__assert_func>
    return NUNAVUT_SUCCESS;
 8000f50:	2300      	movs	r3, #0
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3720      	adds	r7, #32
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	080075e4 	.word	0x080075e4
 8000f60:	08007308 	.word	0x08007308
 8000f64:	080081a4 	.word	0x080081a4
 8000f68:	080075e8 	.word	0x080075e8
 8000f6c:	0800763c 	.word	0x0800763c

08000f70 <uavcan_primitive_scalar_Integer8_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_primitive_scalar_Integer8_1_0_serialize_(
    const uavcan_primitive_scalar_Integer8_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000f74:	b08c      	sub	sp, #48	@ 0x30
 8000f76:	af04      	add	r7, sp, #16
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d005      	beq.n	8000f90 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x20>
 8000f84:	68bb      	ldr	r3, [r7, #8]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d002      	beq.n	8000f90 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x20>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000f90:	f06f 0301 	mvn.w	r3, #1
 8000f94:	e08d      	b.n	80010b2 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x142>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	61bb      	str	r3, [r7, #24]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	00db      	lsls	r3, r3, #3
 8000fa0:	2b07      	cmp	r3, #7
 8000fa2:	d802      	bhi.n	8000faa <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 8000fa4:	f06f 0302 	mvn.w	r3, #2
 8000fa8:	e083      	b.n	80010b2 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x142>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8000faa:	2300      	movs	r3, #0
 8000fac:	61fb      	str	r3, [r7, #28]
    {   // saturated int8 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	f003 0307 	and.w	r3, r3, #7
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d005      	beq.n	8000fc4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x54>
 8000fb8:	4b40      	ldr	r3, [pc, #256]	@ (80010bc <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x14c>)
 8000fba:	4a41      	ldr	r2, [pc, #260]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 8000fbc:	2179      	movs	r1, #121	@ 0x79
 8000fbe:	4841      	ldr	r0, [pc, #260]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 8000fc0:	f005 f8de 	bl	8006180 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	469a      	mov	sl, r3
 8000fca:	4693      	mov	fp, r2
 8000fcc:	f11a 0408 	adds.w	r4, sl, #8
 8000fd0:	f14b 0500 	adc.w	r5, fp, #0
 8000fd4:	69bb      	ldr	r3, [r7, #24]
 8000fd6:	00db      	lsls	r3, r3, #3
 8000fd8:	2200      	movs	r2, #0
 8000fda:	4698      	mov	r8, r3
 8000fdc:	4691      	mov	r9, r2
 8000fde:	45a0      	cmp	r8, r4
 8000fe0:	eb79 0305 	sbcs.w	r3, r9, r5
 8000fe4:	d205      	bcs.n	8000ff2 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x82>
 8000fe6:	4b38      	ldr	r3, [pc, #224]	@ (80010c8 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x158>)
 8000fe8:	4a35      	ldr	r2, [pc, #212]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 8000fea:	217a      	movs	r1, #122	@ 0x7a
 8000fec:	4835      	ldr	r0, [pc, #212]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 8000fee:	f005 f8c7 	bl	8006180 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->value);  // C std, 6.3.1.3 Signed and unsigned integers
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	f993 1000 	ldrsb.w	r1, [r3]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	08db      	lsrs	r3, r3, #3
 8000ffc:	68ba      	ldr	r2, [r7, #8]
 8000ffe:	4413      	add	r3, r2
 8001000:	b2ca      	uxtb	r2, r1
 8001002:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8001004:	69fb      	ldr	r3, [r7, #28]
 8001006:	3308      	adds	r3, #8
 8001008:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	f003 0307 	and.w	r3, r3, #7
 8001010:	2b00      	cmp	r3, #0
 8001012:	d035      	beq.n	8001080 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x110>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	b2db      	uxtb	r3, r3
 8001018:	f003 0307 	and.w	r3, r3, #7
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f1c3 0308 	rsb	r3, r3, #8
 8001022:	75fb      	strb	r3, [r7, #23]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8001024:	7dfb      	ldrb	r3, [r7, #23]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0xc6>
 800102a:	4b28      	ldr	r3, [pc, #160]	@ (80010cc <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x15c>)
 800102c:	4a24      	ldr	r2, [pc, #144]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 800102e:	2182      	movs	r1, #130	@ 0x82
 8001030:	4824      	ldr	r0, [pc, #144]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 8001032:	f005 f8a5 	bl	8006180 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8001036:	7dfb      	ldrb	r3, [r7, #23]
 8001038:	9302      	str	r3, [sp, #8]
 800103a:	f04f 0200 	mov.w	r2, #0
 800103e:	f04f 0300 	mov.w	r3, #0
 8001042:	e9cd 2300 	strd	r2, r3, [sp]
 8001046:	69fa      	ldr	r2, [r7, #28]
 8001048:	69b9      	ldr	r1, [r7, #24]
 800104a:	68b8      	ldr	r0, [r7, #8]
 800104c:	f7ff fac2 	bl	80005d4 <nunavutSetUxx>
 8001050:	4603      	mov	r3, r0
 8001052:	75bb      	strb	r3, [r7, #22]
        if (_err0_ < 0)
 8001054:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001058:	2b00      	cmp	r3, #0
 800105a:	da02      	bge.n	8001062 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0xf2>
        {
            return _err0_;
 800105c:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8001060:	e027      	b.n	80010b2 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x142>
        }
        offset_bits += _pad0_;
 8001062:	7dfb      	ldrb	r3, [r7, #23]
 8001064:	69fa      	ldr	r2, [r7, #28]
 8001066:	4413      	add	r3, r2
 8001068:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x110>
 8001074:	4b11      	ldr	r3, [pc, #68]	@ (80010bc <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x14c>)
 8001076:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 8001078:	2189      	movs	r1, #137	@ 0x89
 800107a:	4812      	ldr	r0, [pc, #72]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 800107c:	f005 f880 	bl	8006180 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d005      	beq.n	8001092 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x122>
 8001086:	4b12      	ldr	r3, [pc, #72]	@ (80010d0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x160>)
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 800108a:	218c      	movs	r1, #140	@ 0x8c
 800108c:	480d      	ldr	r0, [pc, #52]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 800108e:	f005 f877 	bl	8006180 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	f003 0307 	and.w	r3, r3, #7
 8001098:	2b00      	cmp	r3, #0
 800109a:	d005      	beq.n	80010a8 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x138>
 800109c:	4b07      	ldr	r3, [pc, #28]	@ (80010bc <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x14c>)
 800109e:	4a08      	ldr	r2, [pc, #32]	@ (80010c0 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x150>)
 80010a0:	218d      	movs	r1, #141	@ 0x8d
 80010a2:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <uavcan_primitive_scalar_Integer8_1_0_serialize_+0x154>)
 80010a4:	f005 f86c 	bl	8006180 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	08da      	lsrs	r2, r3, #3
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3720      	adds	r7, #32
 80010b6:	46bd      	mov	sp, r7
 80010b8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80010bc:	08007308 	.word	0x08007308
 80010c0:	080081e4 	.word	0x080081e4
 80010c4:	08007668 	.word	0x08007668
 80010c8:	080074ac 	.word	0x080074ac
 80010cc:	08007398 	.word	0x08007398
 80010d0:	080073a4 	.word	0x080073a4

080010d4 <micros>:
void process_canard_TX_queue(void);
void publishMyResponseMessage(CanardNodeID source_node_id); // <<< ADDED: Function prototype

// return useconds - not implemented yet - IMPORTANT for timeouts!
uint64_t micros(void) // Should return uint64_t for Canard timestamping
{
 80010d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010d8:	af00      	add	r7, sp, #0
    // Replace with your actual microsecond timer implementation
    // Using HAL_GetTick() provides milliseconds, which might be too coarse
    // for accurate Cyphal timeouts. A hardware timer is recommended.
    // Example using HAL_GetTick (COARSE):
    return (uint64_t)HAL_GetTick() * 1000ULL;
 80010da:	f000 fd87 	bl	8001bec <HAL_GetTick>
 80010de:	4603      	mov	r3, r0
 80010e0:	2200      	movs	r2, #0
 80010e2:	4698      	mov	r8, r3
 80010e4:	4691      	mov	r9, r2
 80010e6:	4642      	mov	r2, r8
 80010e8:	464b      	mov	r3, r9
 80010ea:	f04f 0000 	mov.w	r0, #0
 80010ee:	f04f 0100 	mov.w	r1, #0
 80010f2:	0159      	lsls	r1, r3, #5
 80010f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010f8:	0150      	lsls	r0, r2, #5
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	ebb2 0408 	subs.w	r4, r2, r8
 8001102:	eb63 0509 	sbc.w	r5, r3, r9
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	f04f 0300 	mov.w	r3, #0
 800110e:	00ab      	lsls	r3, r5, #2
 8001110:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8001114:	00a2      	lsls	r2, r4, #2
 8001116:	4614      	mov	r4, r2
 8001118:	461d      	mov	r5, r3
 800111a:	eb14 0a08 	adds.w	sl, r4, r8
 800111e:	eb45 0b09 	adc.w	fp, r5, r9
 8001122:	f04f 0200 	mov.w	r2, #0
 8001126:	f04f 0300 	mov.w	r3, #0
 800112a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800112e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001132:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001136:	4692      	mov	sl, r2
 8001138:	469b      	mov	fp, r3
 800113a:	4652      	mov	r2, sl
 800113c:	465b      	mov	r3, fp
}
 800113e:	4610      	mov	r0, r2
 8001140:	4619      	mov	r1, r3
 8001142:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001148 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001148:	b5b0      	push	{r4, r5, r7, lr}
 800114a:	b09a      	sub	sp, #104	@ 0x68
 800114c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800114e:	f000 fce4 	bl	8001b1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001152:	f000 f8e5 	bl	8001320 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001156:	f000 f95f 	bl	8001418 <MX_GPIO_Init>
  MX_CAN1_Init();
 800115a:	f000 f927 	bl	80013ac <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 800115e:	4863      	ldr	r0, [pc, #396]	@ (80012ec <main+0x1a4>)
 8001160:	f000 ff39 	bl	8001fd6 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001164:	2102      	movs	r1, #2
 8001166:	4861      	ldr	r0, [pc, #388]	@ (80012ec <main+0x1a4>)
 8001168:	f001 f9a0 	bl	80024ac <HAL_CAN_ActivateNotification>

    CAN_FilterTypeDef Filter;

    // accept all frames - filtration is managed by software
    Filter.FilterIdHigh = 0x0000;
 800116c:	2300      	movs	r3, #0
 800116e:	633b      	str	r3, [r7, #48]	@ 0x30
    Filter.FilterIdLow = 0x0000;
 8001170:	2300      	movs	r3, #0
 8001172:	637b      	str	r3, [r7, #52]	@ 0x34
    Filter.FilterMaskIdHigh = 0x0000;
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	@ 0x38
    Filter.FilterMaskIdLow = 0x0000;
 8001178:	2300      	movs	r3, #0
 800117a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	@ 0x40
    Filter.FilterBank = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	@ 0x44
    Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8001184:	2300      	movs	r3, #0
 8001186:	64bb      	str	r3, [r7, #72]	@ 0x48
    Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8001188:	2301      	movs	r3, #1
 800118a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Filter.FilterActivation = ENABLE;
 800118c:	2301      	movs	r3, #1
 800118e:	653b      	str	r3, [r7, #80]	@ 0x50
    Filter.SlaveStartFilterBank = 0;
 8001190:	2300      	movs	r3, #0
 8001192:	657b      	str	r3, [r7, #84]	@ 0x54

    HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8001194:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001198:	4619      	mov	r1, r3
 800119a:	4854      	ldr	r0, [pc, #336]	@ (80012ec <main+0x1a4>)
 800119c:	f000 fe51 	bl	8001e42 <HAL_CAN_ConfigFilter>

    // Initialization of a canard instance with the previous allocator
    canard = canardInit(&memAllocate, &memFree);
 80011a0:	4c53      	ldr	r4, [pc, #332]	@ (80012f0 <main+0x1a8>)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4a53      	ldr	r2, [pc, #332]	@ (80012f4 <main+0x1ac>)
 80011a6:	4954      	ldr	r1, [pc, #336]	@ (80012f8 <main+0x1b0>)
 80011a8:	4618      	mov	r0, r3
 80011aa:	f004 fd53 	bl	8005c54 <canardInit>
 80011ae:	4625      	mov	r5, r4
 80011b0:	463c      	mov	r4, r7
 80011b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011b6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80011ba:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    canard.node_id = 5; // <<< Set OUR Node ID
 80011be:	4b4c      	ldr	r3, [pc, #304]	@ (80012f0 <main+0x1a8>)
 80011c0:	2205      	movs	r2, #5
 80011c2:	711a      	strb	r2, [r3, #4]

    queue = canardTxInit(   100,                        // Limit the size of the queue at 100 frames.
 80011c4:	4c4d      	ldr	r4, [pc, #308]	@ (80012fc <main+0x1b4>)
 80011c6:	463b      	mov	r3, r7
 80011c8:	2208      	movs	r2, #8
 80011ca:	2164      	movs	r1, #100	@ 0x64
 80011cc:	4618      	mov	r0, r3
 80011ce:	f004 fd7f 	bl	8005cd0 <canardTxInit>
 80011d2:	4625      	mov	r5, r4
 80011d4:	463c      	mov	r4, r7
 80011d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011da:	6823      	ldr	r3, [r4, #0]
 80011dc:	602b      	str	r3, [r5, #0]
                            CANARD_MTU_CAN_CLASSIC);

    // --- Subscriptions ---
    // Subscribe to the original message (Real64 array)
    if( canardRxSubscribe((CanardInstance *const)&canard,
 80011de:	f240 6154 	movw	r1, #1620	@ 0x654
 80011e2:	4b47      	ldr	r3, [pc, #284]	@ (8001300 <main+0x1b8>)
 80011e4:	9302      	str	r3, [sp, #8]
 80011e6:	4a47      	ldr	r2, [pc, #284]	@ (8001304 <main+0x1bc>)
 80011e8:	f04f 0300 	mov.w	r3, #0
 80011ec:	e9cd 2300 	strd	r2, r3, [sp]
 80011f0:	f240 1301 	movw	r3, #257	@ 0x101
 80011f4:	460a      	mov	r2, r1
 80011f6:	2100      	movs	r1, #0
 80011f8:	483d      	ldr	r0, [pc, #244]	@ (80012f0 <main+0x1a8>)
 80011fa:	f004 fed7 	bl	8005fac <canardRxSubscribe>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b01      	cmp	r3, #1
 8001202:	d001      	beq.n	8001208 <main+0xc0>
                          ORIGINAL_MSG_PORT_ID, // Use the renamed define
                          uavcan_primitive_array_Real64_1_0_EXTENT_BYTES_,
                          CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                          &original_msg_subscription) != 1 )
                          {
                            Error_Handler();
 8001204:	f000 fa99 	bl	800173a <Error_Handler>
                          }

    // <<< ADDED: Subscribe to Heartbeat messages from other nodes
    if (canardRxSubscribe(&canard,
 8001208:	4b3f      	ldr	r3, [pc, #252]	@ (8001308 <main+0x1c0>)
 800120a:	9302      	str	r3, [sp, #8]
 800120c:	4a3d      	ldr	r2, [pc, #244]	@ (8001304 <main+0x1bc>)
 800120e:	f04f 0300 	mov.w	r3, #0
 8001212:	e9cd 2300 	strd	r2, r3, [sp]
 8001216:	230c      	movs	r3, #12
 8001218:	f641 5255 	movw	r2, #7509	@ 0x1d55
 800121c:	2100      	movs	r1, #0
 800121e:	4834      	ldr	r0, [pc, #208]	@ (80012f0 <main+0x1a8>)
 8001220:	f004 fec4 	bl	8005fac <canardRxSubscribe>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d001      	beq.n	800122e <main+0xe6>
                          uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_, // <<< Heartbeat Port ID
                          uavcan_node_Heartbeat_1_0_EXTENT_BYTES_,  // <<< Heartbeat Max Size
                          CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC, // Use default timeout for now
                          &heartbeat_subscription) != 1)             // <<< Use the heartbeat subscription variable
    {
        Error_Handler(); // Failed to subscribe
 800122a:	f000 fa86 	bl	800173a <Error_Handler>
    }

    // <<< ADDED: Subscribe to GetInfo *responses* (optional but good practice)
    if (canardRxSubscribe(&canard,
 800122e:	4b37      	ldr	r3, [pc, #220]	@ (800130c <main+0x1c4>)
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	4a34      	ldr	r2, [pc, #208]	@ (8001304 <main+0x1bc>)
 8001234:	f04f 0300 	mov.w	r3, #0
 8001238:	e9cd 2300 	strd	r2, r3, [sp]
 800123c:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001240:	f44f 72d7 	mov.w	r2, #430	@ 0x1ae
 8001244:	2101      	movs	r1, #1
 8001246:	482a      	ldr	r0, [pc, #168]	@ (80012f0 <main+0x1a8>)
 8001248:	f004 feb0 	bl	8005fac <canardRxSubscribe>
 800124c:	4603      	mov	r3, r0
 800124e:	2b01      	cmp	r3, #1
 8001250:	d001      	beq.n	8001256 <main+0x10e>
                         uavcan_node_GetInfo_1_0_FIXED_PORT_ID_, // Port ID is the same as request
                         uavcan_node_GetInfo_Response_1_0_EXTENT_BYTES_, // Max size of the RESPONSE
                         CANARD_DEFAULT_TRANSFER_ID_TIMEOUT_USEC,
                         &getinfo_response_subscription) != 1)
    {
        Error_Handler(); // Failed to subscribe
 8001252:	f000 fa72 	bl	800173a <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      // Create OUR heartbeat message
          uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 8001256:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	4b2b      	ldr	r3, [pc, #172]	@ (8001310 <main+0x1c8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	62bb      	str	r3, [r7, #40]	@ 0x28
                                                      .health = {uavcan_node_Health_1_0_NOMINAL},
                                                      .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

          // Serialize OUR heartbeat message
          // Reset buffer size *before* serializing
          hbeat_ser_buf_size = uavcan_node_Heartbeat_1_0_EXTENT_BYTES_;
 8001266:	4b2b      	ldr	r3, [pc, #172]	@ (8001314 <main+0x1cc>)
 8001268:	220c      	movs	r2, #12
 800126a:	601a      	str	r2, [r3, #0]
          if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 800126c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001270:	4a28      	ldr	r2, [pc, #160]	@ (8001314 <main+0x1cc>)
 8001272:	4929      	ldr	r1, [pc, #164]	@ (8001318 <main+0x1d0>)
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff fb53 	bl	8000920 <uavcan_node_Heartbeat_1_0_serialize_>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	da01      	bge.n	8001284 <main+0x13c>
          {
            Error_Handler();
 8001280:	f000 fa5b 	bl	800173a <Error_Handler>
          }

          // Create a transfer for OUR heartbeat message
          const CanardTransferMetadata heartbeat_tx_metadata = {
 8001284:	2304      	movs	r3, #4
 8001286:	f887 3020 	strb.w	r3, [r7, #32]
 800128a:	2300      	movs	r3, #0
 800128c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
 8001290:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8001294:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001296:	23ff      	movs	r3, #255	@ 0xff
 8001298:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 800129c:	4b1f      	ldr	r3, [pc, #124]	@ (800131c <main+0x1d4>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                .remote_node_id = CANARD_NODE_ID_UNSET, // Broadcast
                .transfer_id    = my_heartbeat_transfer_id, // Use our heartbeat transfer ID
          };

          // Push OUR heartbeat to the TX queue
          if(canardTxPush(&queue,                // Call this once per redundant CAN interface (queue)
 80012a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001314 <main+0x1cc>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a1b      	ldr	r2, [pc, #108]	@ (8001318 <main+0x1d0>)
 80012aa:	9202      	str	r2, [sp, #8]
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	f04f 0300 	mov.w	r3, #0
 80012bc:	490c      	ldr	r1, [pc, #48]	@ (80012f0 <main+0x1a8>)
 80012be:	480f      	ldr	r0, [pc, #60]	@ (80012fc <main+0x1b4>)
 80012c0:	f004 fd24 	bl	8005d0c <canardTxPush>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	db05      	blt.n	80012d6 <main+0x18e>
                            // Handle Tx push error (e.g., queue full)
                            // Error_Handler(); // Maybe too drastic, consider logging or other strategy
                          }
          else
          {
                my_heartbeat_transfer_id++; // Increment only if push succeeded or was already pending (ret 0)
 80012ca:	4b14      	ldr	r3, [pc, #80]	@ (800131c <main+0x1d4>)
 80012cc:	781b      	ldrb	r3, [r3, #0]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b2da      	uxtb	r2, r3
 80012d2:	4b12      	ldr	r3, [pc, #72]	@ (800131c <main+0x1d4>)
 80012d4:	701a      	strb	r2, [r3, #0]
            }
      } // --- End GetInfo request ---
*/
      // --- Main loop processing ---
      // Process TX queue frequently
      process_canard_TX_queue();
 80012d6:	f000 f8cf 	bl	8001478 <process_canard_TX_queue>
      // you defer processing from the ISR to the main loop.

      // Other non-Cyphal application logic can go here

      // Simple delay - consider more sophisticated timing if needed
      HAL_Delay(100); // Example delay
 80012da:	2064      	movs	r0, #100	@ 0x64
 80012dc:	f000 fc92 	bl	8001c04 <HAL_Delay>

      // Increase uptime - moved this after potential delay/processing
      test_uptimeSec++;
 80012e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001310 <main+0x1c8>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001310 <main+0x1c8>)
 80012e8:	6013      	str	r3, [r2, #0]
  {
 80012ea:	e7b4      	b.n	8001256 <main+0x10e>
 80012ec:	2000008c 	.word	0x2000008c
 80012f0:	200000b4 	.word	0x200000b4
 80012f4:	08001723 	.word	0x08001723
 80012f8:	08001709 	.word	0x08001709
 80012fc:	200000d0 	.word	0x200000d0
 8001300:	20000100 	.word	0x20000100
 8001304:	001e8480 	.word	0x001e8480
 8001308:	20000328 	.word	0x20000328
 800130c:	20000550 	.word	0x20000550
 8001310:	200000e8 	.word	0x200000e8
 8001314:	20000000 	.word	0x20000000
 8001318:	200000ec 	.word	0x200000ec
 800131c:	200000e4 	.word	0x200000e4

08001320 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b096      	sub	sp, #88	@ 0x58
 8001324:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2244      	movs	r2, #68	@ 0x44
 800132c:	2100      	movs	r1, #0
 800132e:	4618      	mov	r0, r3
 8001330:	f005 f933 	bl	800659a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001334:	463b      	mov	r3, r7
 8001336:	2200      	movs	r2, #0
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	605a      	str	r2, [r3, #4]
 800133c:	609a      	str	r2, [r3, #8]
 800133e:	60da      	str	r2, [r3, #12]
 8001340:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001342:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001346:	f001 fdb9 	bl	8002ebc <HAL_PWREx_ControlVoltageScaling>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001350:	f000 f9f3 	bl	800173a <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8001354:	2310      	movs	r3, #16
 8001356:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001358:	2301      	movs	r3, #1
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800135c:	2300      	movs	r3, #0
 800135e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001360:	2360      	movs	r3, #96	@ 0x60
 8001362:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001364:	2300      	movs	r3, #0
 8001366:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4618      	mov	r0, r3
 800136e:	f001 fdfb 	bl	8002f68 <HAL_RCC_OscConfig>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8001378:	f000 f9df 	bl	800173a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800137c:	230f      	movs	r3, #15
 800137e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001384:	2300      	movs	r3, #0
 8001386:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001390:	463b      	mov	r3, r7
 8001392:	2100      	movs	r1, #0
 8001394:	4618      	mov	r0, r3
 8001396:	f002 f9fb 	bl	8003790 <HAL_RCC_ClockConfig>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80013a0:	f000 f9cb 	bl	800173a <Error_Handler>
  }
}
 80013a4:	bf00      	nop
 80013a6:	3758      	adds	r7, #88	@ 0x58
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80013b0:	4b17      	ldr	r3, [pc, #92]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013b2:	4a18      	ldr	r2, [pc, #96]	@ (8001414 <MX_CAN1_Init+0x68>)
 80013b4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1; // Adjust for your desired baud rate (e.g., 4 for 1Mbps with 4MHz clock?)
 80013b6:	4b16      	ldr	r3, [pc, #88]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80013bc:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013be:	2200      	movs	r2, #0
 80013c0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80013c2:	4b13      	ldr	r3, [pc, #76]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ; // Check calculation for your clock and prescaler
 80013c8:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013ca:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 80013ce:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;  // Check calculation for your clock and prescaler
 80013d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013d2:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80013d6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80013d8:	4b0d      	ldr	r3, [pc, #52]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80013de:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80013e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE; // Recommended for Cyphal
 80013ea:	4b09      	ldr	r3, [pc, #36]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80013f0:	4b07      	ldr	r3, [pc, #28]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80013f6:	4b06      	ldr	r3, [pc, #24]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80013fc:	4804      	ldr	r0, [pc, #16]	@ (8001410 <MX_CAN1_Init+0x64>)
 80013fe:	f000 fc25 	bl	8001c4c <HAL_CAN_Init>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001408:	f000 f997 	bl	800173a <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	2000008c 	.word	0x2000008c
 8001414:	40006400 	.word	0x40006400

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	1d3b      	adds	r3, r7, #4
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
 8001428:	60da      	str	r2, [r3, #12]
 800142a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800142c:	4b11      	ldr	r3, [pc, #68]	@ (8001474 <MX_GPIO_Init+0x5c>)
 800142e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001430:	4a10      	ldr	r2, [pc, #64]	@ (8001474 <MX_GPIO_Init+0x5c>)
 8001432:	f043 0301 	orr.w	r3, r3, #1
 8001436:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <MX_GPIO_Init+0x5c>)
 800143a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800143c:	f003 0301 	and.w	r3, r3, #1
 8001440:	603b      	str	r3, [r7, #0]
 8001442:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Assuming PA5 is LD2 on Nucleo-L476RG
 8001444:	2200      	movs	r2, #0
 8001446:	2120      	movs	r1, #32
 8001448:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800144c:	f001 fcf6 	bl	8002e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001450:	2320      	movs	r3, #32
 8001452:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001454:	2301      	movs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145c:	2300      	movs	r3, #0
 800145e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	4619      	mov	r1, r3
 8001464:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001468:	f001 fb7e 	bl	8002b68 <HAL_GPIO_Init>


/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40021000 	.word	0x40021000

08001478 <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */

// --- Transmit Queue Processing ---
void process_canard_TX_queue(void)
{
 8001478:	b5b0      	push	{r4, r5, r7, lr}
 800147a:	b08c      	sub	sp, #48	@ 0x30
 800147c:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001482:	e04c      	b.n	800151e <process_canard_TX_queue+0xa6>
  {
    // Check the deadline. (micros() needs a proper implementation)
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))
 8001484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001486:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	d009      	beq.n	80014a2 <process_canard_TX_queue+0x2a>
 800148e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001490:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001494:	f7ff fe1e 	bl	80010d4 <micros>
 8001498:	4602      	mov	r2, r0
 800149a:	460b      	mov	r3, r1
 800149c:	42a2      	cmp	r2, r4
 800149e:	41ab      	sbcs	r3, r5
 80014a0:	d233      	bcs.n	800150a <process_canard_TX_queue+0x92>
    {
        // Check if CAN peripheral is ready to accept a new frame
        if (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0)
 80014a2:	4826      	ldr	r0, [pc, #152]	@ (800153c <process_canard_TX_queue+0xc4>)
 80014a4:	f000 feab 	bl	80021fe <HAL_CAN_GetTxMailboxesFreeLevel>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03f      	beq.n	800152e <process_canard_TX_queue+0xb6>
        {
            /* Instantiate a frame for the media layer */
            CAN_TxHeaderTypeDef TxHeader;
            TxHeader.IDE = CAN_ID_EXT;
 80014ae:	2304      	movs	r3, #4
 80014b0:	61bb      	str	r3, [r7, #24]
            TxHeader.RTR = CAN_RTR_DATA;
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
            TxHeader.DLC = ti->frame.payload_size;
 80014b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014ba:	623b      	str	r3, [r7, #32]
            TxHeader.ExtId = ti->frame.extended_can_id;
 80014bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014be:	6a1b      	ldr	r3, [r3, #32]
 80014c0:	617b      	str	r3, [r7, #20]

            uint8_t TxData[8]; // Max payload for Classic CAN
            uint32_t TxMailbox;

            // Ensure payload size doesn't exceed buffer/CAN limits
            size_t bytes_to_copy = ti->frame.payload_size > 8 ? 8 : ti->frame.payload_size;
 80014c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c6:	2b08      	cmp	r3, #8
 80014c8:	bf28      	it	cs
 80014ca:	2308      	movcs	r3, #8
 80014cc:	62bb      	str	r3, [r7, #40]	@ 0x28
            memcpy(TxData, (uint8_t *)ti->frame.payload, bytes_to_copy);
 80014ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80014d0:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80014d2:	f107 0308 	add.w	r3, r7, #8
 80014d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 f8ea 	bl	80066b2 <memcpy>

            // Attempt to transmit
            if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) == HAL_OK)
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	f107 0208 	add.w	r2, r7, #8
 80014e4:	f107 0110 	add.w	r1, r7, #16
 80014e8:	4814      	ldr	r0, [pc, #80]	@ (800153c <process_canard_TX_queue+0xc4>)
 80014ea:	f000 fdb8 	bl	800205e <HAL_CAN_AddTxMessage>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d11e      	bne.n	8001532 <process_canard_TX_queue+0xba>
            {
                // Frame transmitted (or successfully scheduled), pop it from the queue
                 canard.memory_free(&canard, canardTxPop(&queue, ti));
 80014f4:	4b12      	ldr	r3, [pc, #72]	@ (8001540 <process_canard_TX_queue+0xc8>)
 80014f6:	68dc      	ldr	r4, [r3, #12]
 80014f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80014fa:	4812      	ldr	r0, [pc, #72]	@ (8001544 <process_canard_TX_queue+0xcc>)
 80014fc:	f004 fca5 	bl	8005e4a <canardTxPop>
 8001500:	4603      	mov	r3, r0
 8001502:	4619      	mov	r1, r3
 8001504:	480e      	ldr	r0, [pc, #56]	@ (8001540 <process_canard_TX_queue+0xc8>)
 8001506:	47a0      	blx	r4
 8001508:	e009      	b.n	800151e <process_canard_TX_queue+0xa6>
             break;
        }
    }
    else {
        // Frame has expired, discard it
        canard.memory_free(&canard, canardTxPop(&queue, ti));
 800150a:	4b0d      	ldr	r3, [pc, #52]	@ (8001540 <process_canard_TX_queue+0xc8>)
 800150c:	68dc      	ldr	r4, [r3, #12]
 800150e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001510:	480c      	ldr	r0, [pc, #48]	@ (8001544 <process_canard_TX_queue+0xcc>)
 8001512:	f004 fc9a 	bl	8005e4a <canardTxPop>
 8001516:	4603      	mov	r3, r0
 8001518:	4619      	mov	r1, r3
 800151a:	4809      	ldr	r0, [pc, #36]	@ (8001540 <process_canard_TX_queue+0xc8>)
 800151c:	47a0      	blx	r4
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 800151e:	4809      	ldr	r0, [pc, #36]	@ (8001544 <process_canard_TX_queue+0xcc>)
 8001520:	f004 fc7e 	bl	8005e20 <canardTxPeek>
 8001524:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8001526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1ab      	bne.n	8001484 <process_canard_TX_queue+0xc>
    }
  }
}
 800152c:	e002      	b.n	8001534 <process_canard_TX_queue+0xbc>
             break;
 800152e:	bf00      	nop
 8001530:	e000      	b.n	8001534 <process_canard_TX_queue+0xbc>
                 break;
 8001532:	bf00      	nop
}
 8001534:	bf00      	nop
 8001536:	3730      	adds	r7, #48	@ 0x30
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	2000008c 	.word	0x2000008c
 8001540:	200000b4 	.word	0x200000b4
 8001544:	200000d0 	.word	0x200000d0

08001548 <HAL_CAN_RxFifo0MsgPendingCallback>:

// --- CAN Receive Interrupt Callback ---
// --- CAN Receive Interrupt Callback ---
// #pragma optimize=s none // REMOVED or comment out - GCC doesn't recognize
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b0de      	sub	sp, #376	@ 0x178
 800154c:	af04      	add	r7, sp, #16
 800154e:	f507 73b4 	add.w	r3, r7, #360	@ 0x168
 8001552:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001556:	6018      	str	r0, [r3, #0]
    CAN_RxHeaderTypeDef RxHeader;
    uint8_t RxData[8] = {0}; // Max payload for Classic CAN
 8001558:	2300      	movs	r3, #0
 800155a:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800155e:	2300      	movs	r3, #0
 8001560:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144

    // Get the message
    if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 8001564:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001568:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800156c:	2100      	movs	r1, #0
 800156e:	4838      	ldr	r0, [pc, #224]	@ (8001650 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 8001570:	f000 fe7a 	bl	8002268 <HAL_CAN_GetRxMessage>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d15f      	bne.n	800163a <HAL_CAN_RxFifo0MsgPendingCallback+0xf2>
        // Error getting message
        return;
    }

    // Check if it's an Extended ID frame (Cyphal uses Extended IDs)
    if (RxHeader.IDE != CAN_ID_EXT)
 800157a:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800157e:	2b04      	cmp	r3, #4
 8001580:	d15d      	bne.n	800163e <HAL_CAN_RxFifo0MsgPendingCallback+0xf6>
        return; // Ignore standard ID frames
    }

    CanardFrame rxf;
    // rxf.timestamp_usec = micros(); // <<< REMOVED: Timestamp is passed directly to canardRxAccept
    rxf.extended_can_id = RxHeader.ExtId;
 8001582:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001586:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    rxf.payload_size = RxHeader.DLC;
 800158a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800158e:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
    rxf.payload = (void*)RxData;
 8001592:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001596:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    CanardRxTransfer transfer;
    // <<< CORRECTED function call with proper arguments and order:
    int8_t accept_result = canardRxAccept(&canard,
 800159a:	f7ff fd9b 	bl	80010d4 <micros>
 800159e:	4602      	mov	r2, r0
 80015a0:	460b      	mov	r3, r1
 80015a2:	2100      	movs	r1, #0
 80015a4:	9103      	str	r1, [sp, #12]
 80015a6:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80015aa:	9102      	str	r1, [sp, #8]
 80015ac:	2100      	movs	r1, #0
 80015ae:	9101      	str	r1, [sp, #4]
 80015b0:	f507 719a 	add.w	r1, r7, #308	@ 0x134
 80015b4:	9100      	str	r1, [sp, #0]
 80015b6:	4827      	ldr	r0, [pc, #156]	@ (8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 80015b8:	f004 fc68 	bl	8005e8c <canardRxAccept>
 80015bc:	4603      	mov	r3, r0
 80015be:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
                                          &rxf,             // Argument 3: Pointer to the frame
                                          0,                // Argument 4: Redundant interface index
                                          &transfer,        // Argument 5: Pointer to output transfer struct
                                          NULL);            // Argument 6: Optional output subscription state (NULL here)

    if(accept_result < 0)
 80015c2:	f997 3167 	ldrsb.w	r3, [r7, #359]	@ 0x167
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	db3b      	blt.n	8001642 <HAL_CAN_RxFifo0MsgPendingCallback+0xfa>
    {
        // An error occurred during acceptance (e.g., OOM)
        // Handle appropriately (e.g., log error)
        return;
    }
    else if (accept_result == 1) // A transfer has been received
 80015ca:	f997 3167 	ldrsb.w	r3, [r7, #359]	@ 0x167
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d139      	bne.n	8001646 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
    {
        // --- Process the received transfer ---
        if (transfer.metadata.transfer_kind == CanardTransferKindMessage)
 80015d2:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d124      	bne.n	8001624 <HAL_CAN_RxFifo0MsgPendingCallback+0xdc>
        {
            if (transfer.metadata.port_id == uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_)
 80015da:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80015de:	f641 5255 	movw	r2, #7509	@ 0x1d55
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d10a      	bne.n	80015fc <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>
            {
                // --- Heartbeat Received ---
                 HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Toggle LED on heartbeat
 80015e6:	2120      	movs	r1, #32
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f001 fc3e 	bl	8002e6c <HAL_GPIO_TogglePin>

                // --- Publish our response message ---
                publishMyResponseMessage(transfer.metadata.remote_node_id); // Pass the source node ID
 80015f0:	f897 311c 	ldrb.w	r3, [r7, #284]	@ 0x11c
 80015f4:	4618      	mov	r0, r3
 80015f6:	f000 f839 	bl	800166c <publishMyResponseMessage>
 80015fa:	e016      	b.n	800162a <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
            }
            else if (transfer.metadata.port_id == ORIGINAL_MSG_PORT_ID)
 80015fc:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 8001600:	f240 6254 	movw	r2, #1620	@ 0x654
 8001604:	4293      	cmp	r3, r2
 8001606:	d110      	bne.n	800162a <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
            {
                 // --- Original Real64 Message Received ---
                 uavcan_primitive_array_Real64_1_0 array;
                 size_t array_ser_buf_size = transfer.payload_size; // Use actual received size
 8001608:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800160c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                 if (uavcan_primitive_array_Real64_1_0_deserialize_(&array, transfer.payload, &array_ser_buf_size) >= 0)
 8001610:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001614:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8001618:	f107 0308 	add.w	r3, r7, #8
 800161c:	4618      	mov	r0, r3
 800161e:	f7ff fc0b 	bl	8000e38 <uavcan_primitive_array_Real64_1_0_deserialize_>
 8001622:	e002      	b.n	800162a <HAL_CAN_RxFifo0MsgPendingCallback+0xe2>
            else
            {
                 // Message on an unexpected/unsubscribed port ID
            }
        }
        else if (transfer.metadata.transfer_kind == CanardTransferKindResponse)
 8001624:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 8001628:	2b01      	cmp	r3, #1
        }
        // ... (Handle other transfer kinds if necessary) ...


        // --- IMPORTANT: Free the transfer payload buffer ---
        canard.memory_free(&canard, transfer.payload);
 800162a:	4b0a      	ldr	r3, [pc, #40]	@ (8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001632:	4611      	mov	r1, r2
 8001634:	4807      	ldr	r0, [pc, #28]	@ (8001654 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 8001636:	4798      	blx	r3

    }
    // else accept_result == 0: Frame processed, but no complete transfer yet (part of multi-frame)

    return ; // Exit ISR
 8001638:	e005      	b.n	8001646 <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
        return;
 800163a:	bf00      	nop
 800163c:	e004      	b.n	8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
        return; // Ignore standard ID frames
 800163e:	bf00      	nop
 8001640:	e002      	b.n	8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
        return;
 8001642:	bf00      	nop
 8001644:	e000      	b.n	8001648 <HAL_CAN_RxFifo0MsgPendingCallback+0x100>
    return ; // Exit ISR
 8001646:	bf00      	nop
}
 8001648:	f507 77b4 	add.w	r7, r7, #360	@ 0x168
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	2000008c 	.word	0x2000008c
 8001654:	200000b4 	.word	0x200000b4

08001658 <HAL_CAN_RxFifo1MsgPendingCallback>:


#pragma optimize=s none // May help debugging ISR issues
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  // Usually not used if only FIFO0 is assigned in filter config
  return ;
 8001660:	bf00      	nop
}
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <publishMyResponseMessage>:


// <<< ADDED: Function to publish the response message >>>
void publishMyResponseMessage(CanardNodeID source_node_id)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af04      	add	r7, sp, #16
 8001672:	4603      	mov	r3, r0
 8001674:	71fb      	strb	r3, [r7, #7]
    // 1. Create the message payload
    uavcan_primitive_scalar_Integer8_1_0 response_msg;
    response_msg.value = (int8_t)(source_node_id & 0x7F); // Use lower 7 bits of source ID as example data
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800167e:	b25b      	sxtb	r3, r3
 8001680:	743b      	strb	r3, [r7, #16]

    // 2. Serialize the message
    my_response_ser_buf_size = uavcan_primitive_scalar_Integer8_1_0_EXTENT_BYTES_; // Reset size
 8001682:	4b1c      	ldr	r3, [pc, #112]	@ (80016f4 <publishMyResponseMessage+0x88>)
 8001684:	2201      	movs	r2, #1
 8001686:	601a      	str	r2, [r3, #0]
    if (uavcan_primitive_scalar_Integer8_1_0_serialize_(&response_msg, my_response_ser_buf, &my_response_ser_buf_size) < 0)
 8001688:	f107 0310 	add.w	r3, r7, #16
 800168c:	4a19      	ldr	r2, [pc, #100]	@ (80016f4 <publishMyResponseMessage+0x88>)
 800168e:	491a      	ldr	r1, [pc, #104]	@ (80016f8 <publishMyResponseMessage+0x8c>)
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff fc6d 	bl	8000f70 <uavcan_primitive_scalar_Integer8_1_0_serialize_>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	db26      	blt.n	80016ea <publishMyResponseMessage+0x7e>
         // Serialization error - can't publish
         return;
    }

    // 3. Create the transfer metadata
     const CanardTransferMetadata response_metadata = {
 800169c:	2305      	movs	r3, #5
 800169e:	723b      	strb	r3, [r7, #8]
 80016a0:	2300      	movs	r3, #0
 80016a2:	727b      	strb	r3, [r7, #9]
 80016a4:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80016a8:	817b      	strh	r3, [r7, #10]
 80016aa:	23ff      	movs	r3, #255	@ 0xff
 80016ac:	733b      	strb	r3, [r7, #12]
 80016ae:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <publishMyResponseMessage+0x90>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	737b      	strb	r3, [r7, #13]
        .transfer_id    = my_response_transfer_id,
     };

    // 4. Push to the TX queue
    // This might be called from ISR, be cautious about blocking
    int32_t result = canardTxPush(&queue,
 80016b4:	4b0f      	ldr	r3, [pc, #60]	@ (80016f4 <publishMyResponseMessage+0x88>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	4a0f      	ldr	r2, [pc, #60]	@ (80016f8 <publishMyResponseMessage+0x8c>)
 80016ba:	9202      	str	r2, [sp, #8]
 80016bc:	9301      	str	r3, [sp, #4]
 80016be:	f107 0308 	add.w	r3, r7, #8
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	f04f 0300 	mov.w	r3, #0
 80016cc:	490c      	ldr	r1, [pc, #48]	@ (8001700 <publishMyResponseMessage+0x94>)
 80016ce:	480d      	ldr	r0, [pc, #52]	@ (8001704 <publishMyResponseMessage+0x98>)
 80016d0:	f004 fb1c 	bl	8005d0c <canardTxPush>
 80016d4:	6178      	str	r0, [r7, #20]
                                  0, // No deadline
                                  &response_metadata,
                                  my_response_ser_buf_size, // Size after serialization
                                  my_response_ser_buf);

    if (result >= 0) // Success (0) or already pending (1)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	db07      	blt.n	80016ec <publishMyResponseMessage+0x80>
    {
         my_response_transfer_id++; // Increment transfer ID for the *next* response
 80016dc:	4b07      	ldr	r3, [pc, #28]	@ (80016fc <publishMyResponseMessage+0x90>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	3301      	adds	r3, #1
 80016e2:	b2da      	uxtb	r2, r3
 80016e4:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <publishMyResponseMessage+0x90>)
 80016e6:	701a      	strb	r2, [r3, #0]
 80016e8:	e000      	b.n	80016ec <publishMyResponseMessage+0x80>
         return;
 80016ea:	bf00      	nop
    else
    {
        // Handle push error (e.g., queue full - CANARD_ERROR_TX_QUEUE_FULL, or OOM)
        // If called from ISR, usually just drop or log, don't block.
    }
}
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
 80016f2:	bf00      	nop
 80016f4:	20000004 	.word	0x20000004
 80016f8:	200000f8 	.word	0x200000f8
 80016fc:	200000e5 	.word	0x200000e5
 8001700:	200000b4 	.word	0x200000b4
 8001704:	200000d0 	.word	0x200000d0

08001708 <memAllocate>:


// --- Memory Allocator Wrappers ---
static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  (void) ins;
  // Consider using a more robust memory pool allocator for embedded systems
  // instead of standard malloc/free if heap fragmentation is a concern.
  return malloc(amount);
 8001712:	6838      	ldr	r0, [r7, #0]
 8001714:	f004 fd52 	bl	80061bc <malloc>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 8001722:	b580      	push	{r7, lr}
 8001724:	b082      	sub	sp, #8
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
 800172a:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	f004 fd4d 	bl	80061cc <free>
}
 8001732:	bf00      	nop
 8001734:	3708      	adds	r7, #8
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}

0800173a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800173a:	b580      	push	{r7, lr}
 800173c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800173e:	b672      	cpsid	i
}
 8001740:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  // Example: Blink an LED rapidly to indicate fatal error
  while (1)
  {
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming PA5 is an LED
 8001742:	2120      	movs	r1, #32
 8001744:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001748:	f001 fb90 	bl	8002e6c <HAL_GPIO_TogglePin>
      HAL_Delay(100); // Fast blink
 800174c:	2064      	movs	r0, #100	@ 0x64
 800174e:	f000 fa59 	bl	8001c04 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5); // Assuming PA5 is an LED
 8001752:	bf00      	nop
 8001754:	e7f5      	b.n	8001742 <Error_Handler+0x8>
	...

08001758 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001758:	b480      	push	{r7}
 800175a:	b083      	sub	sp, #12
 800175c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800175e:	4b0f      	ldr	r3, [pc, #60]	@ (800179c <HAL_MspInit+0x44>)
 8001760:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001762:	4a0e      	ldr	r2, [pc, #56]	@ (800179c <HAL_MspInit+0x44>)
 8001764:	f043 0301 	orr.w	r3, r3, #1
 8001768:	6613      	str	r3, [r2, #96]	@ 0x60
 800176a:	4b0c      	ldr	r3, [pc, #48]	@ (800179c <HAL_MspInit+0x44>)
 800176c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800176e:	f003 0301 	and.w	r3, r3, #1
 8001772:	607b      	str	r3, [r7, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	4b09      	ldr	r3, [pc, #36]	@ (800179c <HAL_MspInit+0x44>)
 8001778:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800177a:	4a08      	ldr	r2, [pc, #32]	@ (800179c <HAL_MspInit+0x44>)
 800177c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001780:	6593      	str	r3, [r2, #88]	@ 0x58
 8001782:	4b06      	ldr	r3, [pc, #24]	@ (800179c <HAL_MspInit+0x44>)
 8001784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178a:	603b      	str	r3, [r7, #0]
 800178c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000

080017a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08a      	sub	sp, #40	@ 0x28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]
 80017b0:	605a      	str	r2, [r3, #4]
 80017b2:	609a      	str	r2, [r3, #8]
 80017b4:	60da      	str	r2, [r3, #12]
 80017b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a28      	ldr	r2, [pc, #160]	@ (8001860 <HAL_CAN_MspInit+0xc0>)
 80017be:	4293      	cmp	r3, r2
 80017c0:	d149      	bne.n	8001856 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80017c2:	4b28      	ldr	r3, [pc, #160]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017c6:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017c8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80017cc:	6593      	str	r3, [r2, #88]	@ 0x58
 80017ce:	4b25      	ldr	r3, [pc, #148]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017de:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017e6:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <HAL_CAN_MspInit+0xc4>)
 80017e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ea:	f003 0301 	and.w	r3, r3, #1
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017f2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80017f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f8:	2302      	movs	r3, #2
 80017fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001800:	2303      	movs	r3, #3
 8001802:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001804:	2309      	movs	r3, #9
 8001806:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	4619      	mov	r1, r3
 800180e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001812:	f001 f9a9 	bl	8002b68 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 8001816:	2200      	movs	r2, #0
 8001818:	2100      	movs	r1, #0
 800181a:	2013      	movs	r0, #19
 800181c:	f001 f96d 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001820:	2013      	movs	r0, #19
 8001822:	f001 f986 	bl	8002b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8001826:	2200      	movs	r2, #0
 8001828:	2100      	movs	r1, #0
 800182a:	2014      	movs	r0, #20
 800182c:	f001 f965 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001830:	2014      	movs	r0, #20
 8001832:	f001 f97e 	bl	8002b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 8001836:	2200      	movs	r2, #0
 8001838:	2100      	movs	r1, #0
 800183a:	2015      	movs	r0, #21
 800183c:	f001 f95d 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8001840:	2015      	movs	r0, #21
 8001842:	f001 f976 	bl	8002b32 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 8001846:	2200      	movs	r2, #0
 8001848:	2100      	movs	r1, #0
 800184a:	2016      	movs	r0, #22
 800184c:	f001 f955 	bl	8002afa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001850:	2016      	movs	r0, #22
 8001852:	f001 f96e 	bl	8002b32 <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001856:	bf00      	nop
 8001858:	3728      	adds	r7, #40	@ 0x28
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40006400 	.word	0x40006400
 8001864:	40021000 	.word	0x40021000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr

0800189e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b0:	bf00      	nop
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018ba:	b580      	push	{r7, lr}
 80018bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018be:	f000 f981 	bl	8001bc4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	bd80      	pop	{r7, pc}
	...

080018c8 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018cc:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <CAN1_TX_IRQHandler+0x10>)
 80018ce:	f000 fe13 	bl	80024f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	2000008c 	.word	0x2000008c

080018dc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018e0:	4802      	ldr	r0, [pc, #8]	@ (80018ec <CAN1_RX0_IRQHandler+0x10>)
 80018e2:	f000 fe09 	bl	80024f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	2000008c 	.word	0x2000008c

080018f0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80018f4:	4802      	ldr	r0, [pc, #8]	@ (8001900 <CAN1_RX1_IRQHandler+0x10>)
 80018f6:	f000 fdff 	bl	80024f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80018fa:	bf00      	nop
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	2000008c 	.word	0x2000008c

08001904 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001908:	4802      	ldr	r0, [pc, #8]	@ (8001914 <CAN1_SCE_IRQHandler+0x10>)
 800190a:	f000 fdf5 	bl	80024f8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800190e:	bf00      	nop
 8001910:	bd80      	pop	{r7, pc}
 8001912:	bf00      	nop
 8001914:	2000008c 	.word	0x2000008c

08001918 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return 1;
 800191c:	2301      	movs	r3, #1
}
 800191e:	4618      	mov	r0, r3
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <_kill>:

int _kill(int pid, int sig)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001932:	f004 fe91 	bl	8006658 <__errno>
 8001936:	4603      	mov	r3, r0
 8001938:	2216      	movs	r2, #22
 800193a:	601a      	str	r2, [r3, #0]
  return -1;
 800193c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001940:	4618      	mov	r0, r3
 8001942:	3708      	adds	r7, #8
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <_exit>:

void _exit (int status)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b082      	sub	sp, #8
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001950:	f04f 31ff 	mov.w	r1, #4294967295
 8001954:	6878      	ldr	r0, [r7, #4]
 8001956:	f7ff ffe7 	bl	8001928 <_kill>
  while (1) {}    /* Make sure we hang here */
 800195a:	bf00      	nop
 800195c:	e7fd      	b.n	800195a <_exit+0x12>

0800195e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800195e:	b580      	push	{r7, lr}
 8001960:	b086      	sub	sp, #24
 8001962:	af00      	add	r7, sp, #0
 8001964:	60f8      	str	r0, [r7, #12]
 8001966:	60b9      	str	r1, [r7, #8]
 8001968:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	e00a      	b.n	8001986 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001970:	f3af 8000 	nop.w
 8001974:	4601      	mov	r1, r0
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	1c5a      	adds	r2, r3, #1
 800197a:	60ba      	str	r2, [r7, #8]
 800197c:	b2ca      	uxtb	r2, r1
 800197e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	3301      	adds	r3, #1
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	dbf0      	blt.n	8001970 <_read+0x12>
  }

  return len;
 800198e:	687b      	ldr	r3, [r7, #4]
}
 8001990:	4618      	mov	r0, r3
 8001992:	3718      	adds	r7, #24
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	60f8      	str	r0, [r7, #12]
 80019a0:	60b9      	str	r1, [r7, #8]
 80019a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	e009      	b.n	80019be <_write+0x26>
  {
    __io_putchar(*ptr++);
 80019aa:	68bb      	ldr	r3, [r7, #8]
 80019ac:	1c5a      	adds	r2, r3, #1
 80019ae:	60ba      	str	r2, [r7, #8]
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	3301      	adds	r3, #1
 80019bc:	617b      	str	r3, [r7, #20]
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	429a      	cmp	r2, r3
 80019c4:	dbf1      	blt.n	80019aa <_write+0x12>
  }
  return len;
 80019c6:	687b      	ldr	r3, [r7, #4]
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	3718      	adds	r7, #24
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}

080019d0 <_close>:

int _close(int file)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80019d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr

080019e8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80019f8:	605a      	str	r2, [r3, #4]
  return 0;
 80019fa:	2300      	movs	r3, #0
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <_isatty>:

int _isatty(int file)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a10:	2301      	movs	r3, #1
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	370c      	adds	r7, #12
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b085      	sub	sp, #20
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a2a:	2300      	movs	r3, #0
}
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	3714      	adds	r7, #20
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr

08001a38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a40:	4a14      	ldr	r2, [pc, #80]	@ (8001a94 <_sbrk+0x5c>)
 8001a42:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <_sbrk+0x60>)
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a4c:	4b13      	ldr	r3, [pc, #76]	@ (8001a9c <_sbrk+0x64>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d102      	bne.n	8001a5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a54:	4b11      	ldr	r3, [pc, #68]	@ (8001a9c <_sbrk+0x64>)
 8001a56:	4a12      	ldr	r2, [pc, #72]	@ (8001aa0 <_sbrk+0x68>)
 8001a58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a5a:	4b10      	ldr	r3, [pc, #64]	@ (8001a9c <_sbrk+0x64>)
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4413      	add	r3, r2
 8001a62:	693a      	ldr	r2, [r7, #16]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d207      	bcs.n	8001a78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a68:	f004 fdf6 	bl	8006658 <__errno>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	220c      	movs	r2, #12
 8001a70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a72:	f04f 33ff 	mov.w	r3, #4294967295
 8001a76:	e009      	b.n	8001a8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a78:	4b08      	ldr	r3, [pc, #32]	@ (8001a9c <_sbrk+0x64>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7e:	4b07      	ldr	r3, [pc, #28]	@ (8001a9c <_sbrk+0x64>)
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	4a05      	ldr	r2, [pc, #20]	@ (8001a9c <_sbrk+0x64>)
 8001a88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3718      	adds	r7, #24
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20010000 	.word	0x20010000
 8001a98:	00000400 	.word	0x00000400
 8001a9c:	20000778 	.word	0x20000778
 8001aa0:	200008d0 	.word	0x200008d0

08001aa4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001aa8:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <SystemInit+0x20>)
 8001aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aae:	4a05      	ldr	r2, [pc, #20]	@ (8001ac4 <SystemInit+0x20>)
 8001ab0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001ab8:	bf00      	nop
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b00 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001acc:	f7ff ffea 	bl	8001aa4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ad0:	480c      	ldr	r0, [pc, #48]	@ (8001b04 <LoopForever+0x6>)
  ldr r1, =_edata
 8001ad2:	490d      	ldr	r1, [pc, #52]	@ (8001b08 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001ad4:	4a0d      	ldr	r2, [pc, #52]	@ (8001b0c <LoopForever+0xe>)
  movs r3, #0
 8001ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad8:	e002      	b.n	8001ae0 <LoopCopyDataInit>

08001ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ade:	3304      	adds	r3, #4

08001ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ae4:	d3f9      	bcc.n	8001ada <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001ae8:	4c0a      	ldr	r4, [pc, #40]	@ (8001b14 <LoopForever+0x16>)
  movs r3, #0
 8001aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aec:	e001      	b.n	8001af2 <LoopFillZerobss>

08001aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af0:	3204      	adds	r2, #4

08001af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001af4:	d3fb      	bcc.n	8001aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001af6:	f004 fdb5 	bl	8006664 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001afa:	f7ff fb25 	bl	8001148 <main>

08001afe <LoopForever>:

LoopForever:
    b LoopForever
 8001afe:	e7fe      	b.n	8001afe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001b00:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001b04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001b0c:	08008798 	.word	0x08008798
  ldr r2, =_sbss
 8001b10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001b14:	200008cc 	.word	0x200008cc

08001b18 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b18:	e7fe      	b.n	8001b18 <ADC1_IRQHandler>

08001b1a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b082      	sub	sp, #8
 8001b1e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001b20:	2300      	movs	r3, #0
 8001b22:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b24:	2003      	movs	r0, #3
 8001b26:	f000 ffdd 	bl	8002ae4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b2a:	200f      	movs	r0, #15
 8001b2c:	f000 f80e 	bl	8001b4c <HAL_InitTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001b36:	2301      	movs	r3, #1
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e001      	b.n	8001b40 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001b3c:	f7ff fe0c 	bl	8001758 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001b40:	79fb      	ldrb	r3, [r7, #7]
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b58:	4b17      	ldr	r3, [pc, #92]	@ (8001bb8 <HAL_InitTick+0x6c>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b60:	4b16      	ldr	r3, [pc, #88]	@ (8001bbc <HAL_InitTick+0x70>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b14      	ldr	r3, [pc, #80]	@ (8001bb8 <HAL_InitTick+0x6c>)
 8001b66:	781b      	ldrb	r3, [r3, #0]
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b72:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b76:	4618      	mov	r0, r3
 8001b78:	f000 ffe9 	bl	8002b4e <HAL_SYSTICK_Config>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10f      	bne.n	8001ba2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2b0f      	cmp	r3, #15
 8001b86:	d809      	bhi.n	8001b9c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b88:	2200      	movs	r2, #0
 8001b8a:	6879      	ldr	r1, [r7, #4]
 8001b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b90:	f000 ffb3 	bl	8002afa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b94:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc0 <HAL_InitTick+0x74>)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6013      	str	r3, [r2, #0]
 8001b9a:	e007      	b.n	8001bac <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]
 8001ba0:	e004      	b.n	8001bac <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	73fb      	strb	r3, [r7, #15]
 8001ba6:	e001      	b.n	8001bac <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bae:	4618      	mov	r0, r3
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000010 	.word	0x20000010
 8001bbc:	20000008 	.word	0x20000008
 8001bc0:	2000000c 	.word	0x2000000c

08001bc4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bc8:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_IncTick+0x20>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4b06      	ldr	r3, [pc, #24]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	4a04      	ldr	r2, [pc, #16]	@ (8001be8 <HAL_IncTick+0x24>)
 8001bd6:	6013      	str	r3, [r2, #0]
}
 8001bd8:	bf00      	nop
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	20000010 	.word	0x20000010
 8001be8:	2000077c 	.word	0x2000077c

08001bec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf0:	4b03      	ldr	r3, [pc, #12]	@ (8001c00 <HAL_GetTick+0x14>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	2000077c 	.word	0x2000077c

08001c04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c0c:	f7ff ffee 	bl	8001bec <HAL_GetTick>
 8001c10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d005      	beq.n	8001c2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8001c48 <HAL_Delay+0x44>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	461a      	mov	r2, r3
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	4413      	add	r3, r2
 8001c28:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c2a:	bf00      	nop
 8001c2c:	f7ff ffde 	bl	8001bec <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	68fa      	ldr	r2, [r7, #12]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d8f7      	bhi.n	8001c2c <HAL_Delay+0x28>
  {
  }
}
 8001c3c:	bf00      	nop
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000010 	.word	0x20000010

08001c4c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0ed      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c64:	b2db      	uxtb	r3, r3
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d102      	bne.n	8001c70 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c6a:	6878      	ldr	r0, [r7, #4]
 8001c6c:	f7ff fd98 	bl	80017a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 0201 	orr.w	r2, r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c80:	f7ff ffb4 	bl	8001bec <HAL_GetTick>
 8001c84:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c86:	e012      	b.n	8001cae <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001c88:	f7ff ffb0 	bl	8001bec <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b0a      	cmp	r3, #10
 8001c94:	d90b      	bls.n	8001cae <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c9a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2205      	movs	r2, #5
 8001ca6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0c5      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0301 	and.w	r3, r3, #1
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d0e5      	beq.n	8001c88 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f022 0202 	bic.w	r2, r2, #2
 8001cca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ccc:	f7ff ff8e 	bl	8001bec <HAL_GetTick>
 8001cd0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cd2:	e012      	b.n	8001cfa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cd4:	f7ff ff8a 	bl	8001bec <HAL_GetTick>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	1ad3      	subs	r3, r2, r3
 8001cde:	2b0a      	cmp	r3, #10
 8001ce0:	d90b      	bls.n	8001cfa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2205      	movs	r2, #5
 8001cf2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e09f      	b.n	8001e3a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 0302 	and.w	r3, r3, #2
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d1e5      	bne.n	8001cd4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	7e1b      	ldrb	r3, [r3, #24]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d108      	bne.n	8001d22 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	e007      	b.n	8001d32 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	681a      	ldr	r2, [r3, #0]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	7e5b      	ldrb	r3, [r3, #25]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d108      	bne.n	8001d4c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e007      	b.n	8001d5c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	7e9b      	ldrb	r3, [r3, #26]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0220 	orr.w	r2, r2, #32
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	e007      	b.n	8001d86 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f022 0220 	bic.w	r2, r2, #32
 8001d84:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	7edb      	ldrb	r3, [r3, #27]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d108      	bne.n	8001da0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0210 	bic.w	r2, r2, #16
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	e007      	b.n	8001db0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f042 0210 	orr.w	r2, r2, #16
 8001dae:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	7f1b      	ldrb	r3, [r3, #28]
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d108      	bne.n	8001dca <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0208 	orr.w	r2, r2, #8
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	e007      	b.n	8001dda <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0208 	bic.w	r2, r2, #8
 8001dd8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	7f5b      	ldrb	r3, [r3, #29]
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d108      	bne.n	8001df4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f042 0204 	orr.w	r2, r2, #4
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	e007      	b.n	8001e04 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0204 	bic.w	r2, r2, #4
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	431a      	orrs	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	ea42 0103 	orr.w	r1, r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	1e5a      	subs	r2, r3, #1
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2201      	movs	r2, #1
 8001e34:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b087      	sub	sp, #28
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e58:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e5a:	7cfb      	ldrb	r3, [r7, #19]
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d003      	beq.n	8001e68 <HAL_CAN_ConfigFilter+0x26>
 8001e60:	7cfb      	ldrb	r3, [r7, #19]
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	f040 80aa 	bne.w	8001fbc <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	695b      	ldr	r3, [r3, #20]
 8001e7c:	f003 031f 	and.w	r3, r3, #31
 8001e80:	2201      	movs	r2, #1
 8001e82:	fa02 f303 	lsl.w	r3, r2, r3
 8001e86:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	43db      	mvns	r3, r3
 8001e92:	401a      	ands	r2, r3
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d123      	bne.n	8001eea <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	401a      	ands	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec0:	683a      	ldr	r2, [r7, #0]
 8001ec2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ec4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	3248      	adds	r2, #72	@ 0x48
 8001eca:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001ede:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001ee0:	6979      	ldr	r1, [r7, #20]
 8001ee2:	3348      	adds	r3, #72	@ 0x48
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	440b      	add	r3, r1
 8001ee8:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d122      	bne.n	8001f38 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	431a      	orrs	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f12:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3248      	adds	r2, #72	@ 0x48
 8001f18:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f2c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f2e:	6979      	ldr	r1, [r7, #20]
 8001f30:	3348      	adds	r3, #72	@ 0x48
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	440b      	add	r3, r1
 8001f36:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d109      	bne.n	8001f54 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f52:	e007      	b.n	8001f64 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d109      	bne.n	8001f80 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	43db      	mvns	r3, r3
 8001f76:	401a      	ands	r2, r3
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001f7e:	e007      	b.n	8001f90 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	6a1b      	ldr	r3, [r3, #32]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d107      	bne.n	8001fa8 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	431a      	orrs	r2, r3
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fae:	f023 0201 	bic.w	r2, r3, #1
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	e006      	b.n	8001fca <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fc0:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
  }
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	371c      	adds	r7, #28
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b084      	sub	sp, #16
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d12e      	bne.n	8002048 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2202      	movs	r2, #2
 8001fee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002002:	f7ff fdf3 	bl	8001bec <HAL_GetTick>
 8002006:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002008:	e012      	b.n	8002030 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800200a:	f7ff fdef 	bl	8001bec <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b0a      	cmp	r3, #10
 8002016:	d90b      	bls.n	8002030 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800201c:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2205      	movs	r2, #5
 8002028:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e012      	b.n	8002056 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1e5      	bne.n	800200a <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002044:	2300      	movs	r3, #0
 8002046:	e006      	b.n	8002056 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800204c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
  }
}
 8002056:	4618      	mov	r0, r3
 8002058:	3710      	adds	r7, #16
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}

0800205e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800205e:	b480      	push	{r7}
 8002060:	b089      	sub	sp, #36	@ 0x24
 8002062:	af00      	add	r7, sp, #0
 8002064:	60f8      	str	r0, [r7, #12]
 8002066:	60b9      	str	r1, [r7, #8]
 8002068:	607a      	str	r2, [r7, #4]
 800206a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002072:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800207c:	7ffb      	ldrb	r3, [r7, #31]
 800207e:	2b01      	cmp	r3, #1
 8002080:	d003      	beq.n	800208a <HAL_CAN_AddTxMessage+0x2c>
 8002082:	7ffb      	ldrb	r3, [r7, #31]
 8002084:	2b02      	cmp	r3, #2
 8002086:	f040 80ad 	bne.w	80021e4 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10a      	bne.n	80020aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d105      	bne.n	80020aa <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 8095 	beq.w	80021d4 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	0e1b      	lsrs	r3, r3, #24
 80020ae:	f003 0303 	and.w	r3, r3, #3
 80020b2:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80020b4:	2201      	movs	r2, #1
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	409a      	lsls	r2, r3
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d10d      	bne.n	80020e2 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80020d0:	68f9      	ldr	r1, [r7, #12]
 80020d2:	6809      	ldr	r1, [r1, #0]
 80020d4:	431a      	orrs	r2, r3
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3318      	adds	r3, #24
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	440b      	add	r3, r1
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	e00f      	b.n	8002102 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020ec:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020f2:	68f9      	ldr	r1, [r7, #12]
 80020f4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80020f6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	3318      	adds	r3, #24
 80020fc:	011b      	lsls	r3, r3, #4
 80020fe:	440b      	add	r3, r1
 8002100:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	6819      	ldr	r1, [r3, #0]
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	691a      	ldr	r2, [r3, #16]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	3318      	adds	r3, #24
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	440b      	add	r3, r1
 8002112:	3304      	adds	r3, #4
 8002114:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	7d1b      	ldrb	r3, [r3, #20]
 800211a:	2b01      	cmp	r3, #1
 800211c:	d111      	bne.n	8002142 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3318      	adds	r3, #24
 8002126:	011b      	lsls	r3, r3, #4
 8002128:	4413      	add	r3, r2
 800212a:	3304      	adds	r3, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	68fa      	ldr	r2, [r7, #12]
 8002130:	6811      	ldr	r1, [r2, #0]
 8002132:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002136:	697b      	ldr	r3, [r7, #20]
 8002138:	3318      	adds	r3, #24
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	440b      	add	r3, r1
 800213e:	3304      	adds	r3, #4
 8002140:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3307      	adds	r3, #7
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	061a      	lsls	r2, r3, #24
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	3306      	adds	r3, #6
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	041b      	lsls	r3, r3, #16
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	3305      	adds	r3, #5
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	021b      	lsls	r3, r3, #8
 800215c:	4313      	orrs	r3, r2
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	3204      	adds	r2, #4
 8002162:	7812      	ldrb	r2, [r2, #0]
 8002164:	4610      	mov	r0, r2
 8002166:	68fa      	ldr	r2, [r7, #12]
 8002168:	6811      	ldr	r1, [r2, #0]
 800216a:	ea43 0200 	orr.w	r2, r3, r0
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	011b      	lsls	r3, r3, #4
 8002172:	440b      	add	r3, r1
 8002174:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002178:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	3303      	adds	r3, #3
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	061a      	lsls	r2, r3, #24
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	3302      	adds	r3, #2
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	041b      	lsls	r3, r3, #16
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3301      	adds	r3, #1
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	021b      	lsls	r3, r3, #8
 8002194:	4313      	orrs	r3, r2
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	7812      	ldrb	r2, [r2, #0]
 800219a:	4610      	mov	r0, r2
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	6811      	ldr	r1, [r2, #0]
 80021a0:	ea43 0200 	orr.w	r2, r3, r0
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	011b      	lsls	r3, r3, #4
 80021a8:	440b      	add	r3, r1
 80021aa:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80021ae:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	3318      	adds	r3, #24
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4413      	add	r3, r2
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	68fa      	ldr	r2, [r7, #12]
 80021c0:	6811      	ldr	r1, [r2, #0]
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	3318      	adds	r3, #24
 80021ca:	011b      	lsls	r3, r3, #4
 80021cc:	440b      	add	r3, r1
 80021ce:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80021d0:	2300      	movs	r3, #0
 80021d2:	e00e      	b.n	80021f2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d8:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e006      	b.n	80021f2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
  }
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3724      	adds	r7, #36	@ 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr

080021fe <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80021fe:	b480      	push	{r7}
 8002200:	b085      	sub	sp, #20
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002210:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8002212:	7afb      	ldrb	r3, [r7, #11]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d002      	beq.n	800221e <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8002218:	7afb      	ldrb	r3, [r7, #11]
 800221a:	2b02      	cmp	r3, #2
 800221c:	d11d      	bne.n	800225a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d002      	beq.n	8002232 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	3301      	adds	r3, #1
 8002230:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d002      	beq.n	8002246 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	3301      	adds	r3, #1
 8002244:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d002      	beq.n	800225a <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800225a:	68fb      	ldr	r3, [r7, #12]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002268:	b480      	push	{r7}
 800226a:	b087      	sub	sp, #28
 800226c:	af00      	add	r7, sp, #0
 800226e:	60f8      	str	r0, [r7, #12]
 8002270:	60b9      	str	r1, [r7, #8]
 8002272:	607a      	str	r2, [r7, #4]
 8002274:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800227c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d003      	beq.n	800228c <HAL_CAN_GetRxMessage+0x24>
 8002284:	7dfb      	ldrb	r3, [r7, #23]
 8002286:	2b02      	cmp	r3, #2
 8002288:	f040 8103 	bne.w	8002492 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b00      	cmp	r3, #0
 8002290:	d10e      	bne.n	80022b0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	2b00      	cmp	r3, #0
 800229e:	d116      	bne.n	80022ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022a4:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e0f7      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d107      	bne.n	80022ce <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022c2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0e8      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681a      	ldr	r2, [r3, #0]
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	331b      	adds	r3, #27
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	4413      	add	r3, r2
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 0204 	and.w	r2, r3, #4
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689b      	ldr	r3, [r3, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d10c      	bne.n	8002306 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	331b      	adds	r3, #27
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	4413      	add	r3, r2
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	0d5b      	lsrs	r3, r3, #21
 80022fc:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	e00b      	b.n	800231e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	331b      	adds	r3, #27
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	4413      	add	r3, r2
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	08db      	lsrs	r3, r3, #3
 8002316:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	331b      	adds	r3, #27
 8002326:	011b      	lsls	r3, r3, #4
 8002328:	4413      	add	r3, r2
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0202 	and.w	r2, r3, #2
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	331b      	adds	r3, #27
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	4413      	add	r3, r2
 8002340:	3304      	adds	r3, #4
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0308 	and.w	r3, r3, #8
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2208      	movs	r2, #8
 8002350:	611a      	str	r2, [r3, #16]
 8002352:	e00b      	b.n	800236c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	331b      	adds	r3, #27
 800235c:	011b      	lsls	r3, r3, #4
 800235e:	4413      	add	r3, r2
 8002360:	3304      	adds	r3, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 020f 	and.w	r2, r3, #15
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	331b      	adds	r3, #27
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	4413      	add	r3, r2
 8002378:	3304      	adds	r3, #4
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	b2da      	uxtb	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	331b      	adds	r3, #27
 800238c:	011b      	lsls	r3, r3, #4
 800238e:	4413      	add	r3, r2
 8002390:	3304      	adds	r3, #4
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	0c1b      	lsrs	r3, r3, #16
 8002396:	b29a      	uxth	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	681a      	ldr	r2, [r3, #0]
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	0a1a      	lsrs	r2, r3, #8
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	3301      	adds	r3, #1
 80023c8:	b2d2      	uxtb	r2, r2
 80023ca:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	011b      	lsls	r3, r3, #4
 80023d4:	4413      	add	r3, r2
 80023d6:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	0c1a      	lsrs	r2, r3, #16
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3302      	adds	r3, #2
 80023e2:	b2d2      	uxtb	r2, r2
 80023e4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	4413      	add	r3, r2
 80023f0:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	0e1a      	lsrs	r2, r3, #24
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	3303      	adds	r3, #3
 80023fc:	b2d2      	uxtb	r2, r2
 80023fe:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	011b      	lsls	r3, r3, #4
 8002408:	4413      	add	r3, r2
 800240a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	3304      	adds	r3, #4
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	68bb      	ldr	r3, [r7, #8]
 800241e:	011b      	lsls	r3, r3, #4
 8002420:	4413      	add	r3, r2
 8002422:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	0a1a      	lsrs	r2, r3, #8
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	3305      	adds	r3, #5
 800242e:	b2d2      	uxtb	r2, r2
 8002430:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	4413      	add	r3, r2
 800243c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	0c1a      	lsrs	r2, r3, #16
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	3306      	adds	r3, #6
 8002448:	b2d2      	uxtb	r2, r2
 800244a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	011b      	lsls	r3, r3, #4
 8002454:	4413      	add	r3, r2
 8002456:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	0e1a      	lsrs	r2, r3, #24
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	3307      	adds	r3, #7
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d108      	bne.n	800247e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68da      	ldr	r2, [r3, #12]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0220 	orr.w	r2, r2, #32
 800247a:	60da      	str	r2, [r3, #12]
 800247c:	e007      	b.n	800248e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	691a      	ldr	r2, [r3, #16]
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f042 0220 	orr.w	r2, r2, #32
 800248c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e006      	b.n	80024a0 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002496:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800249e:	2301      	movs	r3, #1
  }
}
 80024a0:	4618      	mov	r0, r3
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024bc:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80024be:	7bfb      	ldrb	r3, [r7, #15]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d002      	beq.n	80024ca <HAL_CAN_ActivateNotification+0x1e>
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d109      	bne.n	80024de <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6959      	ldr	r1, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	683a      	ldr	r2, [r7, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e006      	b.n	80024ec <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024e2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
  }
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b08a      	sub	sp, #40	@ 0x28
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002500:	2300      	movs	r3, #0
 8002502:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	689b      	ldr	r3, [r3, #8]
 800251a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	691b      	ldr	r3, [r3, #16]
 800252a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	699b      	ldr	r3, [r3, #24]
 8002532:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002534:	6a3b      	ldr	r3, [r7, #32]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	d07c      	beq.n	8002638 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800253e:	69bb      	ldr	r3, [r7, #24]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d023      	beq.n	8002590 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2201      	movs	r2, #1
 800254e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f983 	bl	8002866 <HAL_CAN_TxMailbox0CompleteCallback>
 8002560:	e016      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d004      	beq.n	8002576 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800256c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002572:	627b      	str	r3, [r7, #36]	@ 0x24
 8002574:	e00c      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	f003 0308 	and.w	r3, r3, #8
 800257c:	2b00      	cmp	r3, #0
 800257e:	d004      	beq.n	800258a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002580:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002582:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002586:	627b      	str	r3, [r7, #36]	@ 0x24
 8002588:	e002      	b.n	8002590 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f000 f989 	bl	80028a2 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002596:	2b00      	cmp	r3, #0
 8002598:	d024      	beq.n	80025e4 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80025a2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d003      	beq.n	80025b6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f963 	bl	800287a <HAL_CAN_TxMailbox1CompleteCallback>
 80025b4:	e016      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d004      	beq.n	80025ca <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80025c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c2:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80025c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80025c8:	e00c      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d004      	beq.n	80025de <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025da:	627b      	str	r3, [r7, #36]	@ 0x24
 80025dc:	e002      	b.n	80025e4 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	f000 f969 	bl	80028b6 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d024      	beq.n	8002638 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025f6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d003      	beq.n	800260a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f943 	bl	800288e <HAL_CAN_TxMailbox2CompleteCallback>
 8002608:	e016      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002616:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800261a:	627b      	str	r3, [r7, #36]	@ 0x24
 800261c:	e00c      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d004      	beq.n	8002632 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002630:	e002      	b.n	8002638 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f949 	bl	80028ca <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	f003 0308 	and.w	r3, r3, #8
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00c      	beq.n	800265c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0310 	and.w	r3, r3, #16
 8002648:	2b00      	cmp	r3, #0
 800264a:	d007      	beq.n	800265c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800264c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800264e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2210      	movs	r2, #16
 800265a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d006      	beq.n	800267e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2208      	movs	r2, #8
 8002676:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f930 	bl	80028de <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800267e:	6a3b      	ldr	r3, [r7, #32]
 8002680:	f003 0302 	and.w	r3, r3, #2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d009      	beq.n	800269c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d002      	beq.n	800269c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7fe ff56 	bl	8001548 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800269c:	6a3b      	ldr	r3, [r7, #32]
 800269e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d00c      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d007      	beq.n	80026c0 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80026b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2210      	movs	r2, #16
 80026be:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80026c0:	6a3b      	ldr	r3, [r7, #32]
 80026c2:	f003 0320 	and.w	r3, r3, #32
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d00b      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f003 0308 	and.w	r3, r3, #8
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d006      	beq.n	80026e2 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2208      	movs	r2, #8
 80026da:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	f000 f908 	bl	80028f2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d009      	beq.n	8002700 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	f003 0303 	and.w	r3, r3, #3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d002      	beq.n	8002700 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f7fe ffac 	bl	8001658 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002700:	6a3b      	ldr	r3, [r7, #32]
 8002702:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d00b      	beq.n	8002722 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	d006      	beq.n	8002722 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	2210      	movs	r2, #16
 800271a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f8f2 	bl	8002906 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00b      	beq.n	8002744 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b00      	cmp	r3, #0
 8002734:	d006      	beq.n	8002744 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	2208      	movs	r2, #8
 800273c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8eb 	bl	800291a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002744:	6a3b      	ldr	r3, [r7, #32]
 8002746:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d07b      	beq.n	8002846 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0304 	and.w	r3, r3, #4
 8002754:	2b00      	cmp	r3, #0
 8002756:	d072      	beq.n	800283e <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002758:	6a3b      	ldr	r3, [r7, #32]
 800275a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800275e:	2b00      	cmp	r3, #0
 8002760:	d008      	beq.n	8002774 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002768:	2b00      	cmp	r3, #0
 800276a:	d003      	beq.n	8002774 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800276c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002774:	6a3b      	ldr	r3, [r7, #32]
 8002776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800277a:	2b00      	cmp	r3, #0
 800277c:	d008      	beq.n	8002790 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002784:	2b00      	cmp	r3, #0
 8002786:	d003      	beq.n	8002790 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800278a:	f043 0302 	orr.w	r3, r3, #2
 800278e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002790:	6a3b      	ldr	r3, [r7, #32]
 8002792:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80027a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027ac:	6a3b      	ldr	r3, [r7, #32]
 80027ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d043      	beq.n	800283e <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d03e      	beq.n	800283e <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c6:	2b60      	cmp	r3, #96	@ 0x60
 80027c8:	d02b      	beq.n	8002822 <HAL_CAN_IRQHandler+0x32a>
 80027ca:	2b60      	cmp	r3, #96	@ 0x60
 80027cc:	d82e      	bhi.n	800282c <HAL_CAN_IRQHandler+0x334>
 80027ce:	2b50      	cmp	r3, #80	@ 0x50
 80027d0:	d022      	beq.n	8002818 <HAL_CAN_IRQHandler+0x320>
 80027d2:	2b50      	cmp	r3, #80	@ 0x50
 80027d4:	d82a      	bhi.n	800282c <HAL_CAN_IRQHandler+0x334>
 80027d6:	2b40      	cmp	r3, #64	@ 0x40
 80027d8:	d019      	beq.n	800280e <HAL_CAN_IRQHandler+0x316>
 80027da:	2b40      	cmp	r3, #64	@ 0x40
 80027dc:	d826      	bhi.n	800282c <HAL_CAN_IRQHandler+0x334>
 80027de:	2b30      	cmp	r3, #48	@ 0x30
 80027e0:	d010      	beq.n	8002804 <HAL_CAN_IRQHandler+0x30c>
 80027e2:	2b30      	cmp	r3, #48	@ 0x30
 80027e4:	d822      	bhi.n	800282c <HAL_CAN_IRQHandler+0x334>
 80027e6:	2b10      	cmp	r3, #16
 80027e8:	d002      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x2f8>
 80027ea:	2b20      	cmp	r3, #32
 80027ec:	d005      	beq.n	80027fa <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027ee:	e01d      	b.n	800282c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	f043 0308 	orr.w	r3, r3, #8
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027f8:	e019      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f043 0310 	orr.w	r3, r3, #16
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002802:	e014      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002806:	f043 0320 	orr.w	r3, r3, #32
 800280a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800280c:	e00f      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800280e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002814:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002816:	e00a      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800281a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800281e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002820:	e005      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800282a:	e000      	b.n	800282e <HAL_CAN_IRQHandler+0x336>
            break;
 800282c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	699a      	ldr	r2, [r3, #24]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800283c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	2204      	movs	r2, #4
 8002844:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002846:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002852:	431a      	orrs	r2, r3
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f868 	bl	800292e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	@ 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028e6:	bf00      	nop
 80028e8:	370c      	adds	r7, #12
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr

080028f2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002918:	4770      	bx	lr

0800291a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800291a:	b480      	push	{r7}
 800291c:	b083      	sub	sp, #12
 800291e:	af00      	add	r7, sp, #0
 8002920:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002922:	bf00      	nop
 8002924:	370c      	adds	r7, #12
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr

0800292e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800292e:	b480      	push	{r7}
 8002930:	b083      	sub	sp, #12
 8002932:	af00      	add	r7, sp, #0
 8002934:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002944:	b480      	push	{r7}
 8002946:	b085      	sub	sp, #20
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f003 0307 	and.w	r3, r3, #7
 8002952:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002954:	4b0c      	ldr	r3, [pc, #48]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800295a:	68ba      	ldr	r2, [r7, #8]
 800295c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002960:	4013      	ands	r3, r2
 8002962:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800296c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002970:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002974:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002976:	4a04      	ldr	r2, [pc, #16]	@ (8002988 <__NVIC_SetPriorityGrouping+0x44>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	60d3      	str	r3, [r2, #12]
}
 800297c:	bf00      	nop
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	e000ed00 	.word	0xe000ed00

0800298c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002990:	4b04      	ldr	r3, [pc, #16]	@ (80029a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	f003 0307 	and.w	r3, r3, #7
}
 800299a:	4618      	mov	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr
 80029a4:	e000ed00 	.word	0xe000ed00

080029a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	4603      	mov	r3, r0
 80029b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	db0b      	blt.n	80029d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029ba:	79fb      	ldrb	r3, [r7, #7]
 80029bc:	f003 021f 	and.w	r2, r3, #31
 80029c0:	4907      	ldr	r1, [pc, #28]	@ (80029e0 <__NVIC_EnableIRQ+0x38>)
 80029c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029c6:	095b      	lsrs	r3, r3, #5
 80029c8:	2001      	movs	r0, #1
 80029ca:	fa00 f202 	lsl.w	r2, r0, r2
 80029ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000e100 	.word	0xe000e100

080029e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	4603      	mov	r3, r0
 80029ec:	6039      	str	r1, [r7, #0]
 80029ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	db0a      	blt.n	8002a0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	490c      	ldr	r1, [pc, #48]	@ (8002a30 <__NVIC_SetPriority+0x4c>)
 80029fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a02:	0112      	lsls	r2, r2, #4
 8002a04:	b2d2      	uxtb	r2, r2
 8002a06:	440b      	add	r3, r1
 8002a08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a0c:	e00a      	b.n	8002a24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	b2da      	uxtb	r2, r3
 8002a12:	4908      	ldr	r1, [pc, #32]	@ (8002a34 <__NVIC_SetPriority+0x50>)
 8002a14:	79fb      	ldrb	r3, [r7, #7]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	3b04      	subs	r3, #4
 8002a1c:	0112      	lsls	r2, r2, #4
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	440b      	add	r3, r1
 8002a22:	761a      	strb	r2, [r3, #24]
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr
 8002a30:	e000e100 	.word	0xe000e100
 8002a34:	e000ed00 	.word	0xe000ed00

08002a38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b089      	sub	sp, #36	@ 0x24
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	60f8      	str	r0, [r7, #12]
 8002a40:	60b9      	str	r1, [r7, #8]
 8002a42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f1c3 0307 	rsb	r3, r3, #7
 8002a52:	2b04      	cmp	r3, #4
 8002a54:	bf28      	it	cs
 8002a56:	2304      	movcs	r3, #4
 8002a58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	2b06      	cmp	r3, #6
 8002a60:	d902      	bls.n	8002a68 <NVIC_EncodePriority+0x30>
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	3b03      	subs	r3, #3
 8002a66:	e000      	b.n	8002a6a <NVIC_EncodePriority+0x32>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a6c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43da      	mvns	r2, r3
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	401a      	ands	r2, r3
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a80:	f04f 31ff 	mov.w	r1, #4294967295
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8a:	43d9      	mvns	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a90:	4313      	orrs	r3, r2
         );
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	3724      	adds	r7, #36	@ 0x24
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ab0:	d301      	bcc.n	8002ab6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e00f      	b.n	8002ad6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <SysTick_Config+0x40>)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002abe:	210f      	movs	r1, #15
 8002ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ac4:	f7ff ff8e 	bl	80029e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ac8:	4b05      	ldr	r3, [pc, #20]	@ (8002ae0 <SysTick_Config+0x40>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ace:	4b04      	ldr	r3, [pc, #16]	@ (8002ae0 <SysTick_Config+0x40>)
 8002ad0:	2207      	movs	r2, #7
 8002ad2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	e000e010 	.word	0xe000e010

08002ae4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f7ff ff29 	bl	8002944 <__NVIC_SetPriorityGrouping>
}
 8002af2:	bf00      	nop
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}

08002afa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002afa:	b580      	push	{r7, lr}
 8002afc:	b086      	sub	sp, #24
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	4603      	mov	r3, r0
 8002b02:	60b9      	str	r1, [r7, #8]
 8002b04:	607a      	str	r2, [r7, #4]
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b0c:	f7ff ff3e 	bl	800298c <__NVIC_GetPriorityGrouping>
 8002b10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	68b9      	ldr	r1, [r7, #8]
 8002b16:	6978      	ldr	r0, [r7, #20]
 8002b18:	f7ff ff8e 	bl	8002a38 <NVIC_EncodePriority>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b22:	4611      	mov	r1, r2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7ff ff5d 	bl	80029e4 <__NVIC_SetPriority>
}
 8002b2a:	bf00      	nop
 8002b2c:	3718      	adds	r7, #24
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	b082      	sub	sp, #8
 8002b36:	af00      	add	r7, sp, #0
 8002b38:	4603      	mov	r3, r0
 8002b3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b40:	4618      	mov	r0, r3
 8002b42:	f7ff ff31 	bl	80029a8 <__NVIC_EnableIRQ>
}
 8002b46:	bf00      	nop
 8002b48:	3708      	adds	r7, #8
 8002b4a:	46bd      	mov	sp, r7
 8002b4c:	bd80      	pop	{r7, pc}

08002b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f7ff ffa2 	bl	8002aa0 <SysTick_Config>
 8002b5c:	4603      	mov	r3, r0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b087      	sub	sp, #28
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b72:	2300      	movs	r3, #0
 8002b74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b76:	e148      	b.n	8002e0a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	fa01 f303 	lsl.w	r3, r1, r3
 8002b84:	4013      	ands	r3, r2
 8002b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	f000 813a 	beq.w	8002e04 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d005      	beq.n	8002ba8 <HAL_GPIO_Init+0x40>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	f003 0303 	and.w	r3, r3, #3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d130      	bne.n	8002c0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	005b      	lsls	r3, r3, #1
 8002bb2:	2203      	movs	r2, #3
 8002bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb8:	43db      	mvns	r3, r3
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	68da      	ldr	r2, [r3, #12]
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	005b      	lsls	r3, r3, #1
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	693a      	ldr	r2, [r7, #16]
 8002bd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bde:	2201      	movs	r2, #1
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	43db      	mvns	r3, r3
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	4013      	ands	r3, r2
 8002bec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	091b      	lsrs	r3, r3, #4
 8002bf4:	f003 0201 	and.w	r2, r3, #1
 8002bf8:	697b      	ldr	r3, [r7, #20]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	693a      	ldr	r2, [r7, #16]
 8002c08:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0303 	and.w	r3, r3, #3
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	d017      	beq.n	8002c46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	68db      	ldr	r3, [r3, #12]
 8002c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	2203      	movs	r2, #3
 8002c22:	fa02 f303 	lsl.w	r3, r2, r3
 8002c26:	43db      	mvns	r3, r3
 8002c28:	693a      	ldr	r2, [r7, #16]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3a:	693a      	ldr	r2, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f003 0303 	and.w	r3, r3, #3
 8002c4e:	2b02      	cmp	r3, #2
 8002c50:	d123      	bne.n	8002c9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002c52:	697b      	ldr	r3, [r7, #20]
 8002c54:	08da      	lsrs	r2, r3, #3
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	3208      	adds	r2, #8
 8002c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	f003 0307 	and.w	r3, r3, #7
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	220f      	movs	r2, #15
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43db      	mvns	r3, r3
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	4013      	ands	r3, r2
 8002c74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	691a      	ldr	r2, [r3, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	009b      	lsls	r3, r3, #2
 8002c82:	fa02 f303 	lsl.w	r3, r2, r3
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	08da      	lsrs	r2, r3, #3
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3208      	adds	r2, #8
 8002c94:	6939      	ldr	r1, [r7, #16]
 8002c96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	f003 0203 	and.w	r2, r3, #3
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8094 	beq.w	8002e04 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002cdc:	4b52      	ldr	r3, [pc, #328]	@ (8002e28 <HAL_GPIO_Init+0x2c0>)
 8002cde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce0:	4a51      	ldr	r2, [pc, #324]	@ (8002e28 <HAL_GPIO_Init+0x2c0>)
 8002ce2:	f043 0301 	orr.w	r3, r3, #1
 8002ce6:	6613      	str	r3, [r2, #96]	@ 0x60
 8002ce8:	4b4f      	ldr	r3, [pc, #316]	@ (8002e28 <HAL_GPIO_Init+0x2c0>)
 8002cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002cec:	f003 0301 	and.w	r3, r3, #1
 8002cf0:	60bb      	str	r3, [r7, #8]
 8002cf2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002cf4:	4a4d      	ldr	r2, [pc, #308]	@ (8002e2c <HAL_GPIO_Init+0x2c4>)
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	089b      	lsrs	r3, r3, #2
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	220f      	movs	r2, #15
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	4013      	ands	r3, r2
 8002d16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d1e:	d00d      	beq.n	8002d3c <HAL_GPIO_Init+0x1d4>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a43      	ldr	r2, [pc, #268]	@ (8002e30 <HAL_GPIO_Init+0x2c8>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d007      	beq.n	8002d38 <HAL_GPIO_Init+0x1d0>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a42      	ldr	r2, [pc, #264]	@ (8002e34 <HAL_GPIO_Init+0x2cc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d101      	bne.n	8002d34 <HAL_GPIO_Init+0x1cc>
 8002d30:	2302      	movs	r3, #2
 8002d32:	e004      	b.n	8002d3e <HAL_GPIO_Init+0x1d6>
 8002d34:	2307      	movs	r3, #7
 8002d36:	e002      	b.n	8002d3e <HAL_GPIO_Init+0x1d6>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	e000      	b.n	8002d3e <HAL_GPIO_Init+0x1d6>
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	f002 0203 	and.w	r2, r2, #3
 8002d44:	0092      	lsls	r2, r2, #2
 8002d46:	4093      	lsls	r3, r2
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002d4e:	4937      	ldr	r1, [pc, #220]	@ (8002e2c <HAL_GPIO_Init+0x2c4>)
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	089b      	lsrs	r3, r3, #2
 8002d54:	3302      	adds	r3, #2
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002d5c:	4b36      	ldr	r3, [pc, #216]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	43db      	mvns	r3, r3
 8002d66:	693a      	ldr	r2, [r7, #16]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d003      	beq.n	8002d80 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002d80:	4a2d      	ldr	r2, [pc, #180]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d82:	693b      	ldr	r3, [r7, #16]
 8002d84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002d86:	4b2c      	ldr	r3, [pc, #176]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d003      	beq.n	8002daa <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002da2:	693a      	ldr	r2, [r7, #16]
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002daa:	4a23      	ldr	r2, [pc, #140]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002db0:	4b21      	ldr	r3, [pc, #132]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002db2:	685b      	ldr	r3, [r3, #4]
 8002db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d003      	beq.n	8002dd4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002dcc:	693a      	ldr	r2, [r7, #16]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002dda:	4b17      	ldr	r3, [pc, #92]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8002e38 <HAL_GPIO_Init+0x2d0>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	3301      	adds	r3, #1
 8002e08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	fa22 f303 	lsr.w	r3, r2, r3
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f47f aeaf 	bne.w	8002b78 <HAL_GPIO_Init+0x10>
  }
}
 8002e1a:	bf00      	nop
 8002e1c:	bf00      	nop
 8002e1e:	371c      	adds	r7, #28
 8002e20:	46bd      	mov	sp, r7
 8002e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e26:	4770      	bx	lr
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	48000400 	.word	0x48000400
 8002e34:	48000800 	.word	0x48000800
 8002e38:	40010400 	.word	0x40010400

08002e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	460b      	mov	r3, r1
 8002e46:	807b      	strh	r3, [r7, #2]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002e4c:	787b      	ldrb	r3, [r7, #1]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d003      	beq.n	8002e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002e52:	887a      	ldrh	r2, [r7, #2]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002e58:	e002      	b.n	8002e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002e5a:	887a      	ldrh	r2, [r7, #2]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	460b      	mov	r3, r1
 8002e76:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e7e:	887a      	ldrh	r2, [r7, #2]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	041a      	lsls	r2, r3, #16
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	43d9      	mvns	r1, r3
 8002e8a:	887b      	ldrh	r3, [r7, #2]
 8002e8c:	400b      	ands	r3, r1
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	619a      	str	r2, [r3, #24]
}
 8002e94:	bf00      	nop
 8002e96:	3714      	adds	r7, #20
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002ea4:	4b04      	ldr	r3, [pc, #16]	@ (8002eb8 <HAL_PWREx_GetVoltageRange+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40007000 	.word	0x40007000

08002ebc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b085      	sub	sp, #20
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002eca:	d130      	bne.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ecc:	4b23      	ldr	r3, [pc, #140]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002ed4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ed8:	d038      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002eda:	4b20      	ldr	r3, [pc, #128]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002ee4:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ee8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eea:	4b1d      	ldr	r3, [pc, #116]	@ (8002f60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2232      	movs	r2, #50	@ 0x32
 8002ef0:	fb02 f303 	mul.w	r3, r2, r3
 8002ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8002efa:	0c9b      	lsrs	r3, r3, #18
 8002efc:	3301      	adds	r3, #1
 8002efe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f00:	e002      	b.n	8002f08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	3b01      	subs	r3, #1
 8002f06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f08:	4b14      	ldr	r3, [pc, #80]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f14:	d102      	bne.n	8002f1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d1f2      	bne.n	8002f02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f1e:	695b      	ldr	r3, [r3, #20]
 8002f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f28:	d110      	bne.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e00f      	b.n	8002f4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f2e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002f3a:	d007      	beq.n	8002f4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f3c:	4b07      	ldr	r3, [pc, #28]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002f44:	4a05      	ldr	r2, [pc, #20]	@ (8002f5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002f46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	20000008 	.word	0x20000008
 8002f64:	431bde83 	.word	0x431bde83

08002f68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b088      	sub	sp, #32
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	f000 bc02 	b.w	8003780 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f7c:	4b96      	ldr	r3, [pc, #600]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 030c 	and.w	r3, r3, #12
 8002f84:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f86:	4b94      	ldr	r3, [pc, #592]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0303 	and.w	r3, r3, #3
 8002f8e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0310 	and.w	r3, r3, #16
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80e4 	beq.w	8003166 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4c>
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	2b0c      	cmp	r3, #12
 8002fa8:	f040 808b 	bne.w	80030c2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	f040 8087 	bne.w	80030c2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002fb4:	4b88      	ldr	r3, [pc, #544]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d005      	beq.n	8002fcc <HAL_RCC_OscConfig+0x64>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e3d9      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a1a      	ldr	r2, [r3, #32]
 8002fd0:	4b81      	ldr	r3, [pc, #516]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d004      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x7e>
 8002fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_OscConfig+0x8a>
 8002fe6:	4b7c      	ldr	r3, [pc, #496]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d223      	bcs.n	800303e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fd54 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e3ba      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800300a:	4b73      	ldr	r3, [pc, #460]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a72      	ldr	r2, [pc, #456]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003010:	f043 0308 	orr.w	r3, r3, #8
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b70      	ldr	r3, [pc, #448]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6a1b      	ldr	r3, [r3, #32]
 8003022:	496d      	ldr	r1, [pc, #436]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003024:	4313      	orrs	r3, r2
 8003026:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003028:	4b6b      	ldr	r3, [pc, #428]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	69db      	ldr	r3, [r3, #28]
 8003034:	021b      	lsls	r3, r3, #8
 8003036:	4968      	ldr	r1, [pc, #416]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003038:	4313      	orrs	r3, r2
 800303a:	604b      	str	r3, [r1, #4]
 800303c:	e025      	b.n	800308a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800303e:	4b66      	ldr	r3, [pc, #408]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a65      	ldr	r2, [pc, #404]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003044:	f043 0308 	orr.w	r3, r3, #8
 8003048:	6013      	str	r3, [r2, #0]
 800304a:	4b63      	ldr	r3, [pc, #396]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	4960      	ldr	r1, [pc, #384]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003058:	4313      	orrs	r3, r2
 800305a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800305c:	4b5e      	ldr	r3, [pc, #376]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	69db      	ldr	r3, [r3, #28]
 8003068:	021b      	lsls	r3, r3, #8
 800306a:	495b      	ldr	r1, [pc, #364]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800306c:	4313      	orrs	r3, r2
 800306e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d109      	bne.n	800308a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fd14 	bl	8003aa8 <RCC_SetFlashLatencyFromMSIRange>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e37a      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800308a:	f000 fc81 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 800308e:	4602      	mov	r2, r0
 8003090:	4b51      	ldr	r3, [pc, #324]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	091b      	lsrs	r3, r3, #4
 8003096:	f003 030f 	and.w	r3, r3, #15
 800309a:	4950      	ldr	r1, [pc, #320]	@ (80031dc <HAL_RCC_OscConfig+0x274>)
 800309c:	5ccb      	ldrb	r3, [r1, r3]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	fa22 f303 	lsr.w	r3, r2, r3
 80030a6:	4a4e      	ldr	r2, [pc, #312]	@ (80031e0 <HAL_RCC_OscConfig+0x278>)
 80030a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80030aa:	4b4e      	ldr	r3, [pc, #312]	@ (80031e4 <HAL_RCC_OscConfig+0x27c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7fe fd4c 	bl	8001b4c <HAL_InitTick>
 80030b4:	4603      	mov	r3, r0
 80030b6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80030b8:	7bfb      	ldrb	r3, [r7, #15]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d052      	beq.n	8003164 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80030be:	7bfb      	ldrb	r3, [r7, #15]
 80030c0:	e35e      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d032      	beq.n	8003130 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80030ca:	4b43      	ldr	r3, [pc, #268]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a42      	ldr	r2, [pc, #264]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030d0:	f043 0301 	orr.w	r3, r3, #1
 80030d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80030d6:	f7fe fd89 	bl	8001bec <HAL_GetTick>
 80030da:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030dc:	e008      	b.n	80030f0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80030de:	f7fe fd85 	bl	8001bec <HAL_GetTick>
 80030e2:	4602      	mov	r2, r0
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	d901      	bls.n	80030f0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80030ec:	2303      	movs	r3, #3
 80030ee:	e347      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80030f0:	4b39      	ldr	r3, [pc, #228]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d0f0      	beq.n	80030de <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030fc:	4b36      	ldr	r3, [pc, #216]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a35      	ldr	r2, [pc, #212]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003102:	f043 0308 	orr.w	r3, r3, #8
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b33      	ldr	r3, [pc, #204]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	4930      	ldr	r1, [pc, #192]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003116:	4313      	orrs	r3, r2
 8003118:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800311a:	4b2f      	ldr	r3, [pc, #188]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800311c:	685b      	ldr	r3, [r3, #4]
 800311e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	69db      	ldr	r3, [r3, #28]
 8003126:	021b      	lsls	r3, r3, #8
 8003128:	492b      	ldr	r1, [pc, #172]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 800312a:	4313      	orrs	r3, r2
 800312c:	604b      	str	r3, [r1, #4]
 800312e:	e01a      	b.n	8003166 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003130:	4b29      	ldr	r3, [pc, #164]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a28      	ldr	r2, [pc, #160]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800313c:	f7fe fd56 	bl	8001bec <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003144:	f7fe fd52 	bl	8001bec <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e314      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003156:	4b20      	ldr	r3, [pc, #128]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1dc>
 8003162:	e000      	b.n	8003166 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003164:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	2b00      	cmp	r3, #0
 8003170:	d073      	beq.n	800325a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	2b08      	cmp	r3, #8
 8003176:	d005      	beq.n	8003184 <HAL_RCC_OscConfig+0x21c>
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	2b0c      	cmp	r3, #12
 800317c:	d10e      	bne.n	800319c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b03      	cmp	r3, #3
 8003182:	d10b      	bne.n	800319c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003184:	4b14      	ldr	r3, [pc, #80]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d063      	beq.n	8003258 <HAL_RCC_OscConfig+0x2f0>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d15f      	bne.n	8003258 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e2f1      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031a4:	d106      	bne.n	80031b4 <HAL_RCC_OscConfig+0x24c>
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a0b      	ldr	r2, [pc, #44]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031b0:	6013      	str	r3, [r2, #0]
 80031b2:	e025      	b.n	8003200 <HAL_RCC_OscConfig+0x298>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031bc:	d114      	bne.n	80031e8 <HAL_RCC_OscConfig+0x280>
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a05      	ldr	r2, [pc, #20]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031c8:	6013      	str	r3, [r2, #0]
 80031ca:	4b03      	ldr	r3, [pc, #12]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a02      	ldr	r2, [pc, #8]	@ (80031d8 <HAL_RCC_OscConfig+0x270>)
 80031d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031d4:	6013      	str	r3, [r2, #0]
 80031d6:	e013      	b.n	8003200 <HAL_RCC_OscConfig+0x298>
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08008214 	.word	0x08008214
 80031e0:	20000008 	.word	0x20000008
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	4ba0      	ldr	r3, [pc, #640]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a9f      	ldr	r2, [pc, #636]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031f2:	6013      	str	r3, [r2, #0]
 80031f4:	4b9d      	ldr	r3, [pc, #628]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a9c      	ldr	r2, [pc, #624]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80031fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d013      	beq.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe fcf0 	bl	8001bec <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003210:	f7fe fcec 	bl	8001bec <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b64      	cmp	r3, #100	@ 0x64
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e2ae      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003222:	4b92      	ldr	r3, [pc, #584]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d0f0      	beq.n	8003210 <HAL_RCC_OscConfig+0x2a8>
 800322e:	e014      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003230:	f7fe fcdc 	bl	8001bec <HAL_GetTick>
 8003234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003236:	e008      	b.n	800324a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003238:	f7fe fcd8 	bl	8001bec <HAL_GetTick>
 800323c:	4602      	mov	r2, r0
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	1ad3      	subs	r3, r2, r3
 8003242:	2b64      	cmp	r3, #100	@ 0x64
 8003244:	d901      	bls.n	800324a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e29a      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800324a:	4b88      	ldr	r3, [pc, #544]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f0      	bne.n	8003238 <HAL_RCC_OscConfig+0x2d0>
 8003256:	e000      	b.n	800325a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	2b00      	cmp	r3, #0
 8003264:	d060      	beq.n	8003328 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b04      	cmp	r3, #4
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x310>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	d119      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	2b02      	cmp	r3, #2
 8003276:	d116      	bne.n	80032a6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003278:	4b7c      	ldr	r3, [pc, #496]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003280:	2b00      	cmp	r3, #0
 8003282:	d005      	beq.n	8003290 <HAL_RCC_OscConfig+0x328>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e277      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003290:	4b76      	ldr	r3, [pc, #472]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	061b      	lsls	r3, r3, #24
 800329e:	4973      	ldr	r1, [pc, #460]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032a4:	e040      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d023      	beq.n	80032f6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032ae:	4b6f      	ldr	r3, [pc, #444]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a6e      	ldr	r2, [pc, #440]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fe fc97 	bl	8001bec <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032c2:	f7fe fc93 	bl	8001bec <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e255      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80032d4:	4b65      	ldr	r3, [pc, #404]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d0f0      	beq.n	80032c2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032e0:	4b62      	ldr	r3, [pc, #392]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	691b      	ldr	r3, [r3, #16]
 80032ec:	061b      	lsls	r3, r3, #24
 80032ee:	495f      	ldr	r1, [pc, #380]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	604b      	str	r3, [r1, #4]
 80032f4:	e018      	b.n	8003328 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032f6:	4b5d      	ldr	r3, [pc, #372]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a5c      	ldr	r2, [pc, #368]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80032fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003300:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003302:	f7fe fc73 	bl	8001bec <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003308:	e008      	b.n	800331c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800330a:	f7fe fc6f 	bl	8001bec <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	2b02      	cmp	r3, #2
 8003316:	d901      	bls.n	800331c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003318:	2303      	movs	r3, #3
 800331a:	e231      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800331c:	4b53      	ldr	r3, [pc, #332]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003324:	2b00      	cmp	r3, #0
 8003326:	d1f0      	bne.n	800330a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d03c      	beq.n	80033ae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	695b      	ldr	r3, [r3, #20]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d01c      	beq.n	8003376 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800333c:	4b4b      	ldr	r3, [pc, #300]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800333e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003342:	4a4a      	ldr	r2, [pc, #296]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003344:	f043 0301 	orr.w	r3, r3, #1
 8003348:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800334c:	f7fe fc4e 	bl	8001bec <HAL_GetTick>
 8003350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003352:	e008      	b.n	8003366 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003354:	f7fe fc4a 	bl	8001bec <HAL_GetTick>
 8003358:	4602      	mov	r2, r0
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	1ad3      	subs	r3, r2, r3
 800335e:	2b02      	cmp	r3, #2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e20c      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003366:	4b41      	ldr	r3, [pc, #260]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003368:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800336c:	f003 0302 	and.w	r3, r3, #2
 8003370:	2b00      	cmp	r3, #0
 8003372:	d0ef      	beq.n	8003354 <HAL_RCC_OscConfig+0x3ec>
 8003374:	e01b      	b.n	80033ae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003376:	4b3d      	ldr	r3, [pc, #244]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003378:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800337c:	4a3b      	ldr	r2, [pc, #236]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800337e:	f023 0301 	bic.w	r3, r3, #1
 8003382:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003386:	f7fe fc31 	bl	8001bec <HAL_GetTick>
 800338a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800338c:	e008      	b.n	80033a0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800338e:	f7fe fc2d 	bl	8001bec <HAL_GetTick>
 8003392:	4602      	mov	r2, r0
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	2b02      	cmp	r3, #2
 800339a:	d901      	bls.n	80033a0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800339c:	2303      	movs	r3, #3
 800339e:	e1ef      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80033a0:	4b32      	ldr	r3, [pc, #200]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1ef      	bne.n	800338e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	f000 80a6 	beq.w	8003508 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80033bc:	2300      	movs	r3, #0
 80033be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80033c0:	4b2a      	ldr	r3, [pc, #168]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10d      	bne.n	80033e8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033cc:	4b27      	ldr	r3, [pc, #156]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033d0:	4a26      	ldr	r2, [pc, #152]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80033d8:	4b24      	ldr	r3, [pc, #144]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 80033da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033e0:	60bb      	str	r3, [r7, #8]
 80033e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033e4:	2301      	movs	r3, #1
 80033e6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033e8:	4b21      	ldr	r3, [pc, #132]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d118      	bne.n	8003426 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a1d      	ldr	r2, [pc, #116]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 80033fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003400:	f7fe fbf4 	bl	8001bec <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003408:	f7fe fbf0 	bl	8001bec <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e1b2      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800341a:	4b15      	ldr	r3, [pc, #84]	@ (8003470 <HAL_RCC_OscConfig+0x508>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003422:	2b00      	cmp	r3, #0
 8003424:	d0f0      	beq.n	8003408 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d108      	bne.n	8003440 <HAL_RCC_OscConfig+0x4d8>
 800342e:	4b0f      	ldr	r3, [pc, #60]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003430:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003434:	4a0d      	ldr	r2, [pc, #52]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003436:	f043 0301 	orr.w	r3, r3, #1
 800343a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800343e:	e029      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d115      	bne.n	8003474 <HAL_RCC_OscConfig+0x50c>
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800344a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800344e:	4a07      	ldr	r2, [pc, #28]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 800345a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800345e:	4a03      	ldr	r2, [pc, #12]	@ (800346c <HAL_RCC_OscConfig+0x504>)
 8003460:	f043 0301 	orr.w	r3, r3, #1
 8003464:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003468:	e014      	b.n	8003494 <HAL_RCC_OscConfig+0x52c>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
 8003470:	40007000 	.word	0x40007000
 8003474:	4b9a      	ldr	r3, [pc, #616]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800347a:	4a99      	ldr	r2, [pc, #612]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800347c:	f023 0301 	bic.w	r3, r3, #1
 8003480:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003484:	4b96      	ldr	r3, [pc, #600]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003486:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800348a:	4a95      	ldr	r2, [pc, #596]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800348c:	f023 0304 	bic.w	r3, r3, #4
 8003490:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d016      	beq.n	80034ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349c:	f7fe fba6 	bl	8001bec <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034a2:	e00a      	b.n	80034ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034a4:	f7fe fba2 	bl	8001bec <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d901      	bls.n	80034ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80034b6:	2303      	movs	r3, #3
 80034b8:	e162      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034ba:	4b89      	ldr	r3, [pc, #548]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80034bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034c0:	f003 0302 	and.w	r3, r3, #2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ed      	beq.n	80034a4 <HAL_RCC_OscConfig+0x53c>
 80034c8:	e015      	b.n	80034f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034ca:	f7fe fb8f 	bl	8001bec <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034d0:	e00a      	b.n	80034e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034d2:	f7fe fb8b 	bl	8001bec <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d901      	bls.n	80034e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e14b      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80034e8:	4b7d      	ldr	r3, [pc, #500]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80034ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80034ee:	f003 0302 	and.w	r3, r3, #2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d1ed      	bne.n	80034d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034f6:	7ffb      	ldrb	r3, [r7, #31]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d105      	bne.n	8003508 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034fc:	4b78      	ldr	r3, [pc, #480]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80034fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003500:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003502:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003506:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f003 0320 	and.w	r3, r3, #32
 8003510:	2b00      	cmp	r3, #0
 8003512:	d03c      	beq.n	800358e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003518:	2b00      	cmp	r3, #0
 800351a:	d01c      	beq.n	8003556 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800351c:	4b70      	ldr	r3, [pc, #448]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800351e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003522:	4a6f      	ldr	r2, [pc, #444]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003524:	f043 0301 	orr.w	r3, r3, #1
 8003528:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800352c:	f7fe fb5e 	bl	8001bec <HAL_GetTick>
 8003530:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003532:	e008      	b.n	8003546 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003534:	f7fe fb5a 	bl	8001bec <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	2b02      	cmp	r3, #2
 8003540:	d901      	bls.n	8003546 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e11c      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003546:	4b66      	ldr	r3, [pc, #408]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003548:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0ef      	beq.n	8003534 <HAL_RCC_OscConfig+0x5cc>
 8003554:	e01b      	b.n	800358e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003556:	4b62      	ldr	r3, [pc, #392]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003558:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800355c:	4a60      	ldr	r2, [pc, #384]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800355e:	f023 0301 	bic.w	r3, r3, #1
 8003562:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003566:	f7fe fb41 	bl	8001bec <HAL_GetTick>
 800356a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800356c:	e008      	b.n	8003580 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800356e:	f7fe fb3d 	bl	8001bec <HAL_GetTick>
 8003572:	4602      	mov	r2, r0
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	1ad3      	subs	r3, r2, r3
 8003578:	2b02      	cmp	r3, #2
 800357a:	d901      	bls.n	8003580 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800357c:	2303      	movs	r3, #3
 800357e:	e0ff      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003580:	4b57      	ldr	r3, [pc, #348]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003582:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003586:	f003 0302 	and.w	r3, r3, #2
 800358a:	2b00      	cmp	r3, #0
 800358c:	d1ef      	bne.n	800356e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003592:	2b00      	cmp	r3, #0
 8003594:	f000 80f3 	beq.w	800377e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800359c:	2b02      	cmp	r3, #2
 800359e:	f040 80c9 	bne.w	8003734 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80035a2:	4b4f      	ldr	r3, [pc, #316]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	f003 0203 	and.w	r2, r3, #3
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d12c      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c0:	3b01      	subs	r3, #1
 80035c2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d123      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035c8:	697b      	ldr	r3, [r7, #20]
 80035ca:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035d2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d11b      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035e2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d113      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f2:	085b      	lsrs	r3, r3, #1
 80035f4:	3b01      	subs	r3, #1
 80035f6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80035f8:	429a      	cmp	r2, r3
 80035fa:	d109      	bne.n	8003610 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003606:	085b      	lsrs	r3, r3, #1
 8003608:	3b01      	subs	r3, #1
 800360a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d06b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b0c      	cmp	r3, #12
 8003614:	d062      	beq.n	80036dc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003616:	4b32      	ldr	r3, [pc, #200]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e0ac      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003626:	4b2e      	ldr	r3, [pc, #184]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a2d      	ldr	r2, [pc, #180]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800362c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003630:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003632:	f7fe fadb 	bl	8001bec <HAL_GetTick>
 8003636:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003638:	e008      	b.n	800364c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800363a:	f7fe fad7 	bl	8001bec <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d901      	bls.n	800364c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e099      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800364c:	4b24      	ldr	r3, [pc, #144]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1f0      	bne.n	800363a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003658:	4b21      	ldr	r3, [pc, #132]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800365a:	68da      	ldr	r2, [r3, #12]
 800365c:	4b21      	ldr	r3, [pc, #132]	@ (80036e4 <HAL_RCC_OscConfig+0x77c>)
 800365e:	4013      	ands	r3, r2
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003668:	3a01      	subs	r2, #1
 800366a:	0112      	lsls	r2, r2, #4
 800366c:	4311      	orrs	r1, r2
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003672:	0212      	lsls	r2, r2, #8
 8003674:	4311      	orrs	r1, r2
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800367a:	0852      	lsrs	r2, r2, #1
 800367c:	3a01      	subs	r2, #1
 800367e:	0552      	lsls	r2, r2, #21
 8003680:	4311      	orrs	r1, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003686:	0852      	lsrs	r2, r2, #1
 8003688:	3a01      	subs	r2, #1
 800368a:	0652      	lsls	r2, r2, #25
 800368c:	4311      	orrs	r1, r2
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003692:	06d2      	lsls	r2, r2, #27
 8003694:	430a      	orrs	r2, r1
 8003696:	4912      	ldr	r1, [pc, #72]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 8003698:	4313      	orrs	r3, r2
 800369a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800369c:	4b10      	ldr	r3, [pc, #64]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a0f      	ldr	r2, [pc, #60]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80036a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036a6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80036a8:	4b0d      	ldr	r3, [pc, #52]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	4a0c      	ldr	r2, [pc, #48]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80036ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036b2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036b4:	f7fe fa9a 	bl	8001bec <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe fa96 	bl	8001bec <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e058      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036ce:	4b04      	ldr	r3, [pc, #16]	@ (80036e0 <HAL_RCC_OscConfig+0x778>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d0f0      	beq.n	80036bc <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036da:	e050      	b.n	800377e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e04f      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
 80036e0:	40021000 	.word	0x40021000
 80036e4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80036e8:	4b27      	ldr	r3, [pc, #156]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d144      	bne.n	800377e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80036f4:	4b24      	ldr	r3, [pc, #144]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a23      	ldr	r2, [pc, #140]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 80036fa:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80036fe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003700:	4b21      	ldr	r3, [pc, #132]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4a20      	ldr	r2, [pc, #128]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003706:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800370a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800370c:	f7fe fa6e 	bl	8001bec <HAL_GetTick>
 8003710:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003712:	e008      	b.n	8003726 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003714:	f7fe fa6a 	bl	8001bec <HAL_GetTick>
 8003718:	4602      	mov	r2, r0
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	1ad3      	subs	r3, r2, r3
 800371e:	2b02      	cmp	r3, #2
 8003720:	d901      	bls.n	8003726 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8003722:	2303      	movs	r3, #3
 8003724:	e02c      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003726:	4b18      	ldr	r3, [pc, #96]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d0f0      	beq.n	8003714 <HAL_RCC_OscConfig+0x7ac>
 8003732:	e024      	b.n	800377e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	2b0c      	cmp	r3, #12
 8003738:	d01f      	beq.n	800377a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373a:	4b13      	ldr	r3, [pc, #76]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a12      	ldr	r2, [pc, #72]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003740:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003744:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fe fa51 	bl	8001bec <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374e:	f7fe fa4d 	bl	8001bec <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e00f      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003760:	4b09      	ldr	r3, [pc, #36]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1f0      	bne.n	800374e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800376c:	4b06      	ldr	r3, [pc, #24]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 800376e:	68da      	ldr	r2, [r3, #12]
 8003770:	4905      	ldr	r1, [pc, #20]	@ (8003788 <HAL_RCC_OscConfig+0x820>)
 8003772:	4b06      	ldr	r3, [pc, #24]	@ (800378c <HAL_RCC_OscConfig+0x824>)
 8003774:	4013      	ands	r3, r2
 8003776:	60cb      	str	r3, [r1, #12]
 8003778:	e001      	b.n	800377e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e000      	b.n	8003780 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800377e:	2300      	movs	r3, #0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3720      	adds	r7, #32
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000
 800378c:	feeefffc 	.word	0xfeeefffc

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0e7      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b75      	ldr	r3, [pc, #468]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d910      	bls.n	80037d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b72      	ldr	r3, [pc, #456]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f023 0207 	bic.w	r2, r3, #7
 80037ba:	4970      	ldr	r1, [pc, #448]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	4313      	orrs	r3, r2
 80037c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037c2:	4b6e      	ldr	r3, [pc, #440]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	683a      	ldr	r2, [r7, #0]
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d001      	beq.n	80037d4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e0cf      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f003 0302 	and.w	r3, r3, #2
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d010      	beq.n	8003802 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	4b66      	ldr	r3, [pc, #408]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d908      	bls.n	8003802 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f0:	4b63      	ldr	r3, [pc, #396]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	4960      	ldr	r1, [pc, #384]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0301 	and.w	r3, r3, #1
 800380a:	2b00      	cmp	r3, #0
 800380c:	d04c      	beq.n	80038a8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	2b03      	cmp	r3, #3
 8003814:	d107      	bne.n	8003826 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003816:	4b5a      	ldr	r3, [pc, #360]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800381e:	2b00      	cmp	r3, #0
 8003820:	d121      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e0a6      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800382e:	4b54      	ldr	r3, [pc, #336]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d115      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e09a      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003846:	4b4e      	ldr	r3, [pc, #312]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e08e      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003856:	4b4a      	ldr	r3, [pc, #296]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e086      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003866:	4b46      	ldr	r3, [pc, #280]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f023 0203 	bic.w	r2, r3, #3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	685b      	ldr	r3, [r3, #4]
 8003872:	4943      	ldr	r1, [pc, #268]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003874:	4313      	orrs	r3, r2
 8003876:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003878:	f7fe f9b8 	bl	8001bec <HAL_GetTick>
 800387c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800387e:	e00a      	b.n	8003896 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003880:	f7fe f9b4 	bl	8001bec <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800388e:	4293      	cmp	r3, r2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e06e      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003896:	4b3a      	ldr	r3, [pc, #232]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f003 020c 	and.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	009b      	lsls	r3, r3, #2
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d1eb      	bne.n	8003880 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d010      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	4b31      	ldr	r3, [pc, #196]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d208      	bcs.n	80038d6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b2e      	ldr	r3, [pc, #184]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	492b      	ldr	r1, [pc, #172]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038d6:	4b29      	ldr	r3, [pc, #164]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0307 	and.w	r3, r3, #7
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d210      	bcs.n	8003906 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e4:	4b25      	ldr	r3, [pc, #148]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f023 0207 	bic.w	r2, r3, #7
 80038ec:	4923      	ldr	r1, [pc, #140]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038f4:	4b21      	ldr	r3, [pc, #132]	@ (800397c <HAL_RCC_ClockConfig+0x1ec>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d001      	beq.n	8003906 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	e036      	b.n	8003974 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003912:	4b1b      	ldr	r3, [pc, #108]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	4918      	ldr	r1, [pc, #96]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003920:	4313      	orrs	r3, r2
 8003922:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	d009      	beq.n	8003944 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003930:	4b13      	ldr	r3, [pc, #76]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4910      	ldr	r1, [pc, #64]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 8003940:	4313      	orrs	r3, r2
 8003942:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003944:	f000 f824 	bl	8003990 <HAL_RCC_GetSysClockFreq>
 8003948:	4602      	mov	r2, r0
 800394a:	4b0d      	ldr	r3, [pc, #52]	@ (8003980 <HAL_RCC_ClockConfig+0x1f0>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	091b      	lsrs	r3, r3, #4
 8003950:	f003 030f 	and.w	r3, r3, #15
 8003954:	490b      	ldr	r1, [pc, #44]	@ (8003984 <HAL_RCC_ClockConfig+0x1f4>)
 8003956:	5ccb      	ldrb	r3, [r1, r3]
 8003958:	f003 031f 	and.w	r3, r3, #31
 800395c:	fa22 f303 	lsr.w	r3, r2, r3
 8003960:	4a09      	ldr	r2, [pc, #36]	@ (8003988 <HAL_RCC_ClockConfig+0x1f8>)
 8003962:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003964:	4b09      	ldr	r3, [pc, #36]	@ (800398c <HAL_RCC_ClockConfig+0x1fc>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4618      	mov	r0, r3
 800396a:	f7fe f8ef 	bl	8001b4c <HAL_InitTick>
 800396e:	4603      	mov	r3, r0
 8003970:	72fb      	strb	r3, [r7, #11]

  return status;
 8003972:	7afb      	ldrb	r3, [r7, #11]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3710      	adds	r7, #16
 8003978:	46bd      	mov	sp, r7
 800397a:	bd80      	pop	{r7, pc}
 800397c:	40022000 	.word	0x40022000
 8003980:	40021000 	.word	0x40021000
 8003984:	08008214 	.word	0x08008214
 8003988:	20000008 	.word	0x20000008
 800398c:	2000000c 	.word	0x2000000c

08003990 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	b089      	sub	sp, #36	@ 0x24
 8003994:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003996:	2300      	movs	r3, #0
 8003998:	61fb      	str	r3, [r7, #28]
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800399e:	4b3e      	ldr	r3, [pc, #248]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f003 030c 	and.w	r3, r3, #12
 80039a6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d005      	beq.n	80039c4 <HAL_RCC_GetSysClockFreq+0x34>
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b0c      	cmp	r3, #12
 80039bc:	d121      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d11e      	bne.n	8003a02 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80039c4:	4b34      	ldr	r3, [pc, #208]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d107      	bne.n	80039e0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80039d0:	4b31      	ldr	r3, [pc, #196]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80039d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039d6:	0a1b      	lsrs	r3, r3, #8
 80039d8:	f003 030f 	and.w	r3, r3, #15
 80039dc:	61fb      	str	r3, [r7, #28]
 80039de:	e005      	b.n	80039ec <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80039e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80039ec:	4a2b      	ldr	r2, [pc, #172]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x10c>)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003a00:	e00a      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	2b04      	cmp	r3, #4
 8003a06:	d102      	bne.n	8003a0e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003a08:	4b25      	ldr	r3, [pc, #148]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a0a:	61bb      	str	r3, [r7, #24]
 8003a0c:	e004      	b.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d101      	bne.n	8003a18 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a14:	4b23      	ldr	r3, [pc, #140]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a16:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d134      	bne.n	8003a88 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003a1e:	4b1e      	ldr	r3, [pc, #120]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	f003 0303 	and.w	r3, r3, #3
 8003a26:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	2b02      	cmp	r3, #2
 8003a2c:	d003      	beq.n	8003a36 <HAL_RCC_GetSysClockFreq+0xa6>
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	d003      	beq.n	8003a3c <HAL_RCC_GetSysClockFreq+0xac>
 8003a34:	e005      	b.n	8003a42 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003a36:	4b1a      	ldr	r3, [pc, #104]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003a38:	617b      	str	r3, [r7, #20]
      break;
 8003a3a:	e005      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003a3c:	4b19      	ldr	r3, [pc, #100]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003a3e:	617b      	str	r3, [r7, #20]
      break;
 8003a40:	e002      	b.n	8003a48 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	617b      	str	r3, [r7, #20]
      break;
 8003a46:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003a48:	4b13      	ldr	r3, [pc, #76]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 0307 	and.w	r3, r3, #7
 8003a52:	3301      	adds	r3, #1
 8003a54:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003a56:	4b10      	ldr	r3, [pc, #64]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a58:	68db      	ldr	r3, [r3, #12]
 8003a5a:	0a1b      	lsrs	r3, r3, #8
 8003a5c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a60:	697a      	ldr	r2, [r7, #20]
 8003a62:	fb03 f202 	mul.w	r2, r3, r2
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a6c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a6e:	4b0a      	ldr	r3, [pc, #40]	@ (8003a98 <HAL_RCC_GetSysClockFreq+0x108>)
 8003a70:	68db      	ldr	r3, [r3, #12]
 8003a72:	0e5b      	lsrs	r3, r3, #25
 8003a74:	f003 0303 	and.w	r3, r3, #3
 8003a78:	3301      	adds	r3, #1
 8003a7a:	005b      	lsls	r3, r3, #1
 8003a7c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a86:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003a88:	69bb      	ldr	r3, [r7, #24]
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	@ 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr
 8003a96:	bf00      	nop
 8003a98:	40021000 	.word	0x40021000
 8003a9c:	08008224 	.word	0x08008224
 8003aa0:	00f42400 	.word	0x00f42400
 8003aa4:	007a1200 	.word	0x007a1200

08003aa8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b086      	sub	sp, #24
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003ab4:	4b2a      	ldr	r3, [pc, #168]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ab6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ab8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d003      	beq.n	8003ac8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003ac0:	f7ff f9ee 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003ac4:	6178      	str	r0, [r7, #20]
 8003ac6:	e014      	b.n	8003af2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003ac8:	4b25      	ldr	r3, [pc, #148]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003acc:	4a24      	ldr	r2, [pc, #144]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ace:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ad2:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ad4:	4b22      	ldr	r3, [pc, #136]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003ae0:	f7ff f9de 	bl	8002ea0 <HAL_PWREx_GetVoltageRange>
 8003ae4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003ae6:	4b1e      	ldr	r3, [pc, #120]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003ae8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aea:	4a1d      	ldr	r2, [pc, #116]	@ (8003b60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003aec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003af0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003af8:	d10b      	bne.n	8003b12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b80      	cmp	r3, #128	@ 0x80
 8003afe:	d919      	bls.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2ba0      	cmp	r3, #160	@ 0xa0
 8003b04:	d902      	bls.n	8003b0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b06:	2302      	movs	r3, #2
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	e013      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e010      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2b80      	cmp	r3, #128	@ 0x80
 8003b16:	d902      	bls.n	8003b1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003b18:	2303      	movs	r3, #3
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	e00a      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2b80      	cmp	r3, #128	@ 0x80
 8003b22:	d102      	bne.n	8003b2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003b24:	2302      	movs	r3, #2
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e004      	b.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2b70      	cmp	r3, #112	@ 0x70
 8003b2e:	d101      	bne.n	8003b34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003b30:	2301      	movs	r3, #1
 8003b32:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003b34:	4b0b      	ldr	r3, [pc, #44]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f023 0207 	bic.w	r2, r3, #7
 8003b3c:	4909      	ldr	r1, [pc, #36]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003b44:	4b07      	ldr	r3, [pc, #28]	@ (8003b64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d001      	beq.n	8003b56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	e000      	b.n	8003b58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003b56:	2300      	movs	r3, #0
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3718      	adds	r7, #24
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40022000 	.word	0x40022000

08003b68 <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
 8003b70:	460b      	mov	r3, r1
 8003b72:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8003b7c:	e007      	b.n	8003b8e <cavlFindExtremum+0x26>
    {
        result = c;
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	68ba      	ldr	r2, [r7, #8]
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d1f4      	bne.n	8003b7e <cavlFindExtremum+0x16>
    }
    return result;
 8003b94:	68fb      	ldr	r3, [r7, #12]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3714      	adds	r7, #20
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba0:	4770      	bx	lr
	...

08003ba4 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b084      	sub	sp, #16
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	460b      	mov	r3, r1
 8003bae:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d014      	beq.n	8003be0 <cavlPrivateRotate+0x3c>
 8003bb6:	78fb      	ldrb	r3, [r7, #3]
 8003bb8:	f083 0301 	eor.w	r3, r3, #1
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	009b      	lsls	r3, r3, #2
 8003bc2:	4413      	add	r3, r2
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <cavlPrivateRotate+0x3c>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003bd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bd4:	db04      	blt.n	8003be0 <cavlPrivateRotate+0x3c>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	dd05      	ble.n	8003bec <cavlPrivateRotate+0x48>
 8003be0:	4b2a      	ldr	r3, [pc, #168]	@ (8003c8c <cavlPrivateRotate+0xe8>)
 8003be2:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <cavlPrivateRotate+0xec>)
 8003be4:	2162      	movs	r1, #98	@ 0x62
 8003be6:	482b      	ldr	r0, [pc, #172]	@ (8003c94 <cavlPrivateRotate+0xf0>)
 8003be8:	f002 faca 	bl	8006180 <__assert_func>
    Cavl* const z = x->lr[!r];
 8003bec:	78fb      	ldrb	r3, [r7, #3]
 8003bee:	f083 0301 	eor.w	r3, r3, #1
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4413      	add	r3, r2
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d00e      	beq.n	8003c24 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4299      	cmp	r1, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	4413      	add	r3, r2
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	601a      	str	r2, [r3, #0]
    x->up     = z;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	f082 0201 	eor.w	r2, r2, #1
 8003c3a:	b2d2      	uxtb	r2, r2
 8003c3c:	4610      	mov	r0, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	4413      	add	r3, r2
 8003c44:	685a      	ldr	r2, [r3, #4]
 8003c46:	6879      	ldr	r1, [r7, #4]
 8003c48:	0083      	lsls	r3, r0, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8003c4e:	78fb      	ldrb	r3, [r7, #3]
 8003c50:	f083 0301 	eor.w	r3, r3, #1
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	4413      	add	r3, r2
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d009      	beq.n	8003c76 <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8003c62:	78fb      	ldrb	r3, [r7, #3]
 8003c64:	f083 0301 	eor.w	r3, r3, #1
 8003c68:	b2db      	uxtb	r3, r3
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	4413      	add	r3, r2
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 8003c76:	78fb      	ldrb	r3, [r7, #3]
 8003c78:	68fa      	ldr	r2, [r7, #12]
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	4413      	add	r3, r2
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	605a      	str	r2, [r3, #4]
}
 8003c82:	bf00      	nop
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	080076c0 	.word	0x080076c0
 8003c90:	080085c0 	.word	0x080085c0
 8003c94:	08007718 	.word	0x08007718

08003c98 <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <cavlPrivateAdjustBalance+0x28>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb4:	db04      	blt.n	8003cc0 <cavlPrivateAdjustBalance+0x28>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	dd05      	ble.n	8003ccc <cavlPrivateAdjustBalance+0x34>
 8003cc0:	4b61      	ldr	r3, [pc, #388]	@ (8003e48 <cavlPrivateAdjustBalance+0x1b0>)
 8003cc2:	4a62      	ldr	r2, [pc, #392]	@ (8003e4c <cavlPrivateAdjustBalance+0x1b4>)
 8003cc4:	2177      	movs	r1, #119	@ 0x77
 8003cc6:	4862      	ldr	r0, [pc, #392]	@ (8003e50 <cavlPrivateAdjustBalance+0x1b8>)
 8003cc8:	f002 fa5a 	bl	8006180 <__assert_func>
    Cavl*        out    = x;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	2a00      	cmp	r2, #0
 8003cdc:	d001      	beq.n	8003ce2 <cavlPrivateAdjustBalance+0x4a>
 8003cde:	2201      	movs	r2, #1
 8003ce0:	e000      	b.n	8003ce4 <cavlPrivateAdjustBalance+0x4c>
 8003ce2:	22ff      	movs	r2, #255	@ 0xff
 8003ce4:	4413      	add	r3, r2
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 8003cea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cf2:	db04      	blt.n	8003cfe <cavlPrivateAdjustBalance+0x66>
 8003cf4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f340 809c 	ble.w	8003e36 <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 8003cfe:	7cfb      	ldrb	r3, [r7, #19]
 8003d00:	09db      	lsrs	r3, r3, #7
 8003d02:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 8003d04:	7cbb      	ldrb	r3, [r7, #18]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d001      	beq.n	8003d0e <cavlPrivateAdjustBalance+0x76>
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	e001      	b.n	8003d12 <cavlPrivateAdjustBalance+0x7a>
 8003d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d12:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 8003d14:	7cbb      	ldrb	r3, [r7, #18]
 8003d16:	f083 0301 	eor.w	r3, r3, #1
 8003d1a:	b2db      	uxtb	r3, r3
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	4413      	add	r3, r2
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d105      	bne.n	8003d38 <cavlPrivateAdjustBalance+0xa0>
 8003d2c:	4b49      	ldr	r3, [pc, #292]	@ (8003e54 <cavlPrivateAdjustBalance+0x1bc>)
 8003d2e:	4a47      	ldr	r2, [pc, #284]	@ (8003e4c <cavlPrivateAdjustBalance+0x1b4>)
 8003d30:	217f      	movs	r1, #127	@ 0x7f
 8003d32:	4847      	ldr	r0, [pc, #284]	@ (8003e50 <cavlPrivateAdjustBalance+0x1b8>)
 8003d34:	f002 fa24 	bl	8006180 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003d3e:	461a      	mov	r2, r3
 8003d40:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003d44:	fb02 f303 	mul.w	r3, r2, r3
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	dc1c      	bgt.n	8003d86 <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8003d50:	7cbb      	ldrb	r3, [r7, #18]
 8003d52:	4619      	mov	r1, r3
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f7ff ff25 	bl	8003ba4 <cavlPrivateRotate>
            if (0 == z->bf)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d109      	bne.n	8003d78 <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8003d64:	7c7b      	ldrb	r3, [r7, #17]
 8003d66:	425b      	negs	r3, r3
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	b25a      	sxtb	r2, r3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	7c7a      	ldrb	r2, [r7, #17]
 8003d74:	731a      	strb	r2, [r3, #12]
    {
 8003d76:	e061      	b.n	8003e3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	731a      	strb	r2, [r3, #12]
    {
 8003d84:	e05a      	b.n	8003e3c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 8003d86:	7cbb      	ldrb	r3, [r7, #18]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <cavlPrivateAdjustBalance+0x10c>
 8003d98:	4b2f      	ldr	r3, [pc, #188]	@ (8003e58 <cavlPrivateAdjustBalance+0x1c0>)
 8003d9a:	4a2c      	ldr	r2, [pc, #176]	@ (8003e4c <cavlPrivateAdjustBalance+0x1b4>)
 8003d9c:	2192      	movs	r1, #146	@ 0x92
 8003d9e:	482c      	ldr	r0, [pc, #176]	@ (8003e50 <cavlPrivateAdjustBalance+0x1b8>)
 8003da0:	f002 f9ee 	bl	8006180 <__assert_func>
            out = y;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 8003da8:	7cbb      	ldrb	r3, [r7, #18]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	bf14      	ite	ne
 8003dae:	2301      	movne	r3, #1
 8003db0:	2300      	moveq	r3, #0
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	f083 0301 	eor.w	r3, r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	68f8      	ldr	r0, [r7, #12]
 8003dc4:	f7ff feee 	bl	8003ba4 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 8003dc8:	7cbb      	ldrb	r3, [r7, #18]
 8003dca:	4619      	mov	r1, r3
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff fee9 	bl	8003ba4 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003dde:	fb02 f303 	mul.w	r3, r2, r3
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	da09      	bge.n	8003dfa <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	7c7a      	ldrb	r2, [r7, #17]
 8003dea:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	2200      	movs	r2, #0
 8003df0:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2200      	movs	r2, #0
 8003df6:	731a      	strb	r2, [r3, #12]
    {
 8003df8:	e020      	b.n	8003e3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003e06:	fb02 f303 	mul.w	r3, r2, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	dd0c      	ble.n	8003e28 <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2200      	movs	r2, #0
 8003e18:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 8003e1a:	7c7b      	ldrb	r3, [r7, #17]
 8003e1c:	425b      	negs	r3, r3
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	b25a      	sxtb	r2, r3
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	731a      	strb	r2, [r3, #12]
    {
 8003e26:	e009      	b.n	8003e3c <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	731a      	strb	r2, [r3, #12]
    {
 8003e34:	e002      	b.n	8003e3c <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	7cfa      	ldrb	r2, [r7, #19]
 8003e3a:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8003e3c:	697b      	ldr	r3, [r7, #20]
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3718      	adds	r7, #24
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	08007734 	.word	0x08007734
 8003e4c:	080085a4 	.word	0x080085a4
 8003e50:	08007718 	.word	0x08007718
 8003e54:	0800776c 	.word	0x0800776c
 8003e58:	08007780 	.word	0x08007780

08003e5c <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b086      	sub	sp, #24
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d004      	beq.n	8003e74 <cavlPrivateRetraceOnGrowth+0x18>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d005      	beq.n	8003e80 <cavlPrivateRetraceOnGrowth+0x24>
 8003e74:	4b23      	ldr	r3, [pc, #140]	@ (8003f04 <cavlPrivateRetraceOnGrowth+0xa8>)
 8003e76:	4a24      	ldr	r2, [pc, #144]	@ (8003f08 <cavlPrivateRetraceOnGrowth+0xac>)
 8003e78:	21b5      	movs	r1, #181	@ 0xb5
 8003e7a:	4824      	ldr	r0, [pc, #144]	@ (8003f0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8003e7c:	f002 f980 	bl	8006180 <__assert_func>
    Cavl* c = added;      // Child
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 8003e8a:	e023      	b.n	8003ed4 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	bf0c      	ite	eq
 8003e96:	2301      	moveq	r3, #1
 8003e98:	2300      	movne	r3, #0
 8003e9a:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8003e9c:	7bfb      	ldrb	r3, [r7, #15]
 8003e9e:	693a      	ldr	r2, [r7, #16]
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	4413      	add	r3, r2
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d005      	beq.n	8003eb8 <cavlPrivateRetraceOnGrowth+0x5c>
 8003eac:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <cavlPrivateRetraceOnGrowth+0xb4>)
 8003eae:	4a16      	ldr	r2, [pc, #88]	@ (8003f08 <cavlPrivateRetraceOnGrowth+0xac>)
 8003eb0:	21bb      	movs	r1, #187	@ 0xbb
 8003eb2:	4816      	ldr	r0, [pc, #88]	@ (8003f0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8003eb4:	f002 f964 	bl	8006180 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	4619      	mov	r1, r3
 8003ebc:	6938      	ldr	r0, [r7, #16]
 8003ebe:	f7ff feeb 	bl	8003c98 <cavlPrivateAdjustBalance>
 8003ec2:	6178      	str	r0, [r7, #20]
        p = c->up;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8003ed4:	693b      	ldr	r3, [r7, #16]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1d8      	bne.n	8003e8c <cavlPrivateRetraceOnGrowth+0x30>
 8003eda:	e000      	b.n	8003ede <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 8003edc:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d105      	bne.n	8003ef0 <cavlPrivateRetraceOnGrowth+0x94>
 8003ee4:	4b0b      	ldr	r3, [pc, #44]	@ (8003f14 <cavlPrivateRetraceOnGrowth+0xb8>)
 8003ee6:	4a08      	ldr	r2, [pc, #32]	@ (8003f08 <cavlPrivateRetraceOnGrowth+0xac>)
 8003ee8:	21c3      	movs	r1, #195	@ 0xc3
 8003eea:	4808      	ldr	r0, [pc, #32]	@ (8003f0c <cavlPrivateRetraceOnGrowth+0xb0>)
 8003eec:	f002 f948 	bl	8006180 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <cavlPrivateRetraceOnGrowth+0x9e>
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e000      	b.n	8003efc <cavlPrivateRetraceOnGrowth+0xa0>
 8003efa:	2300      	movs	r3, #0
}
 8003efc:	4618      	mov	r0, r3
 8003efe:	3718      	adds	r7, #24
 8003f00:	46bd      	mov	sp, r7
 8003f02:	bd80      	pop	{r7, pc}
 8003f04:	08007794 	.word	0x08007794
 8003f08:	08008588 	.word	0x08008588
 8003f0c:	08007718 	.word	0x08007718
 8003f10:	080077c0 	.word	0x080077c0
 8003f14:	080077d0 	.word	0x080077d0

08003f18 <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d065      	beq.n	8003ffc <cavlSearch+0xe4>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d062      	beq.n	8003ffc <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8003f40:	e02f      	b.n	8003fa2 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4611      	mov	r1, r2
 8003f4a:	68b8      	ldr	r0, [r7, #8]
 8003f4c:	4798      	blx	r3
 8003f4e:	4603      	mov	r3, r0
 8003f50:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8003f52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d103      	bne.n	8003f62 <cavlSearch+0x4a>
            {
                out = *n;
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8003f60:	e023      	b.n	8003faa <cavlSearch+0x92>
            }
            up = *n;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	681a      	ldr	r2, [r3, #0]
 8003f6c:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	bfcc      	ite	gt
 8003f74:	2301      	movgt	r3, #1
 8003f76:	2300      	movle	r3, #0
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d00b      	beq.n	8003fa2 <cavlSearch+0x8a>
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	429a      	cmp	r2, r3
 8003f94:	d005      	beq.n	8003fa2 <cavlSearch+0x8a>
 8003f96:	4b1c      	ldr	r3, [pc, #112]	@ (8004008 <cavlSearch+0xf0>)
 8003f98:	4a1c      	ldr	r2, [pc, #112]	@ (800400c <cavlSearch+0xf4>)
 8003f9a:	21db      	movs	r1, #219	@ 0xdb
 8003f9c:	481c      	ldr	r0, [pc, #112]	@ (8004010 <cavlSearch+0xf8>)
 8003f9e:	f002 f8ef 	bl	8006180 <__assert_func>
        while (*n != NULL)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1cb      	bne.n	8003f42 <cavlSearch+0x2a>
        }
        if (NULL == out)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d125      	bne.n	8003ffc <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d004      	beq.n	8003fc0 <cavlSearch+0xa8>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	68b8      	ldr	r0, [r7, #8]
 8003fba:	4798      	blx	r3
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	e000      	b.n	8003fc2 <cavlSearch+0xaa>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8003fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d018      	beq.n	8003ffc <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 8003fca:	69fb      	ldr	r3, [r7, #28]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fce:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 8003fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
                out->up        = up;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fde:	6a3a      	ldr	r2, [r7, #32]
 8003fe0:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 8003fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 8003fe8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003fea:	f7ff ff37 	bl	8003e5c <cavlPrivateRetraceOnGrowth>
 8003fee:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d002      	beq.n	8003ffc <cavlSearch+0xe4>
                {
                    *root = rt;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 8003ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3728      	adds	r7, #40	@ 0x28
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
 8004006:	bf00      	nop
 8004008:	080077e4 	.word	0x080077e4
 800400c:	0800857c 	.word	0x0800857c
 8004010:	08007718 	.word	0x08007718

08004014 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8116 	beq.w	8004252 <cavlRemove+0x23e>
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	f000 8112 	beq.w	8004252 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d105      	bne.n	8004042 <cavlRemove+0x2e>
 8004036:	4b89      	ldr	r3, [pc, #548]	@ (800425c <cavlRemove+0x248>)
 8004038:	4a89      	ldr	r2, [pc, #548]	@ (8004260 <cavlRemove+0x24c>)
 800403a:	21f6      	movs	r1, #246	@ 0xf6
 800403c:	4889      	ldr	r0, [pc, #548]	@ (8004264 <cavlRemove+0x250>)
 800403e:	f002 f89f 	bl	8006180 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d10a      	bne.n	8004060 <cavlRemove+0x4c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	429a      	cmp	r2, r3
 8004052:	d005      	beq.n	8004060 <cavlRemove+0x4c>
 8004054:	4b84      	ldr	r3, [pc, #528]	@ (8004268 <cavlRemove+0x254>)
 8004056:	4a82      	ldr	r2, [pc, #520]	@ (8004260 <cavlRemove+0x24c>)
 8004058:	21f7      	movs	r1, #247	@ 0xf7
 800405a:	4882      	ldr	r0, [pc, #520]	@ (8004264 <cavlRemove+0x250>)
 800405c:	f002 f890 	bl	8006180 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8004060:	2300      	movs	r3, #0
 8004062:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8004064:	2300      	movs	r3, #0
 8004066:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d073      	beq.n	8004158 <cavlRemove+0x144>
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d06f      	beq.n	8004158 <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	2100      	movs	r1, #0
 800407e:	4618      	mov	r0, r3
 8004080:	f7ff fd72 	bl	8003b68 <cavlFindExtremum>
 8004084:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d007      	beq.n	800409c <cavlRemove+0x88>
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d103      	bne.n	800409c <cavlRemove+0x88>
 8004094:	697b      	ldr	r3, [r7, #20]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d105      	bne.n	80040a8 <cavlRemove+0x94>
 800409c:	4b73      	ldr	r3, [pc, #460]	@ (800426c <cavlRemove+0x258>)
 800409e:	4a70      	ldr	r2, [pc, #448]	@ (8004260 <cavlRemove+0x24c>)
 80040a0:	21ff      	movs	r1, #255	@ 0xff
 80040a2:	4870      	ldr	r0, [pc, #448]	@ (8004264 <cavlRemove+0x250>)
 80040a4:	f002 f86c 	bl	8006180 <__assert_func>
            re->bf        = node->bf;
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	f993 200c 	ldrsb.w	r2, [r3, #12]
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	685a      	ldr	r2, [r3, #4]
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d025      	beq.n	8004118 <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d006      	beq.n	80040ea <cavlRemove+0xd6>
 80040dc:	4b64      	ldr	r3, [pc, #400]	@ (8004270 <cavlRemove+0x25c>)
 80040de:	4a60      	ldr	r2, [pc, #384]	@ (8004260 <cavlRemove+0x24c>)
 80040e0:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80040e4:	485f      	ldr	r0, [pc, #380]	@ (8004264 <cavlRemove+0x250>)
 80040e6:	f002 f84b 	bl	8006180 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	689a      	ldr	r2, [r3, #8]
 80040ee:	69fb      	ldr	r3, [r7, #28]
 80040f0:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 80040f2:	69fb      	ldr	r3, [r7, #28]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 80040fa:	69fb      	ldr	r3, [r7, #28]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	69fa      	ldr	r2, [r7, #28]
 8004100:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689a      	ldr	r2, [r3, #8]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	697a      	ldr	r2, [r7, #20]
 8004110:	601a      	str	r2, [r3, #0]
                r             = false;
 8004112:	2300      	movs	r3, #0
 8004114:	76fb      	strb	r3, [r7, #27]
 8004116:	e003      	b.n	8004120 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 8004118:	697b      	ldr	r3, [r7, #20]
 800411a:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 800411c:	2301      	movs	r3, #1
 800411e:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00f      	beq.n	8004150 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	6839      	ldr	r1, [r7, #0]
 800413c:	4299      	cmp	r1, r3
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	605a      	str	r2, [r3, #4]
        {
 800414e:	e046      	b.n	80041de <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	697a      	ldr	r2, [r7, #20]
 8004154:	601a      	str	r2, [r3, #0]
        {
 8004156:	e042      	b.n	80041de <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	bf14      	ite	ne
 8004166:	2301      	movne	r3, #1
 8004168:	2300      	moveq	r3, #0
 800416a:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 800416c:	7cfb      	ldrb	r3, [r7, #19]
 800416e:	683a      	ldr	r2, [r7, #0]
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d006      	beq.n	8004188 <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	683a      	ldr	r2, [r7, #0]
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	4413      	add	r3, r2
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	69fa      	ldr	r2, [r7, #28]
 8004186:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d020      	beq.n	80041d0 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 800418e:	69fb      	ldr	r3, [r7, #28]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	683a      	ldr	r2, [r7, #0]
 8004194:	429a      	cmp	r2, r3
 8004196:	bf0c      	ite	eq
 8004198:	2301      	moveq	r3, #1
 800419a:	2300      	movne	r3, #0
 800419c:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 800419e:	7cfb      	ldrb	r3, [r7, #19]
 80041a0:	7ef8      	ldrb	r0, [r7, #27]
 80041a2:	683a      	ldr	r2, [r7, #0]
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	4413      	add	r3, r2
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	69f9      	ldr	r1, [r7, #28]
 80041ac:	0083      	lsls	r3, r0, #2
 80041ae:	440b      	add	r3, r1
 80041b0:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 80041b2:	7efb      	ldrb	r3, [r7, #27]
 80041b4:	69fa      	ldr	r2, [r7, #28]
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d00e      	beq.n	80041de <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 80041c0:	7efb      	ldrb	r3, [r7, #27]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	69fa      	ldr	r2, [r7, #28]
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	e006      	b.n	80041de <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	683a      	ldr	r2, [r7, #0]
 80041d4:	009b      	lsls	r3, r3, #2
 80041d6:	4413      	add	r3, r2
 80041d8:	685a      	ldr	r2, [r3, #4]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d036      	beq.n	8004252 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 80041e8:	7efb      	ldrb	r3, [r7, #27]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	bf14      	ite	ne
 80041ee:	2301      	movne	r3, #1
 80041f0:	2300      	moveq	r3, #0
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f083 0301 	eor.w	r3, r3, #1
 80041f8:	b2db      	uxtb	r3, r3
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	4619      	mov	r1, r3
 8004202:	69f8      	ldr	r0, [r7, #28]
 8004204:	f7ff fd48 	bl	8003c98 <cavlPrivateAdjustBalance>
 8004208:	60f8      	str	r0, [r7, #12]
                p = c->up;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d10b      	bne.n	8004232 <cavlRemove+0x21e>
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d008      	beq.n	8004232 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	68fa      	ldr	r2, [r7, #12]
 8004226:	429a      	cmp	r2, r3
 8004228:	bf0c      	ite	eq
 800422a:	2301      	moveq	r3, #1
 800422c:	2300      	movne	r3, #0
 800422e:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 8004230:	e7da      	b.n	80041e8 <cavlRemove+0x1d4>
            }
            if (NULL == p)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10c      	bne.n	8004252 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d106      	bne.n	800424c <cavlRemove+0x238>
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <cavlRemove+0x260>)
 8004240:	4a07      	ldr	r2, [pc, #28]	@ (8004260 <cavlRemove+0x24c>)
 8004242:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8004246:	4807      	ldr	r0, [pc, #28]	@ (8004264 <cavlRemove+0x250>)
 8004248:	f001 ff9a 	bl	8006180 <__assert_func>
                *root = c;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8004252:	bf00      	nop
 8004254:	3720      	adds	r7, #32
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	0800780c 	.word	0x0800780c
 8004260:	08008604 	.word	0x08008604
 8004264:	08007718 	.word	0x08007718
 8004268:	08007824 	.word	0x08007824
 800426c:	08007854 	.word	0x08007854
 8004270:	080078a4 	.word	0x080078a4
 8004274:	080077d0 	.word	0x080077d0

08004278 <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8004280:	687b      	ldr	r3, [r7, #4]
}
 8004282:	4618      	mov	r0, r3
 8004284:	370c      	adds	r7, #12
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	4603      	mov	r3, r0
 8004298:	460a      	mov	r2, r1
 800429a:	80fb      	strh	r3, [r7, #6]
 800429c:	4613      	mov	r3, r2
 800429e:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80042a0:	88fb      	ldrh	r3, [r7, #6]
 80042a2:	021b      	lsls	r3, r3, #8
 80042a4:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 80042a6:	88fb      	ldrh	r3, [r7, #6]
 80042a8:	0a1b      	lsrs	r3, r3, #8
 80042aa:	b299      	uxth	r1, r3
 80042ac:	797b      	ldrb	r3, [r7, #5]
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	404b      	eors	r3, r1
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	b2db      	uxtb	r3, r3
 80042b6:	4905      	ldr	r1, [pc, #20]	@ (80042cc <crcAddByte+0x3c>)
 80042b8:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 80042bc:	4053      	eors	r3, r2
 80042be:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	08008254 	.word	0x08008254

080042d0 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	4603      	mov	r3, r0
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d108      	bne.n	80042f6 <crcAdd+0x26>
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d005      	beq.n	80042f6 <crcAdd+0x26>
 80042ea:	4b12      	ldr	r3, [pc, #72]	@ (8004334 <crcAdd+0x64>)
 80042ec:	4a12      	ldr	r2, [pc, #72]	@ (8004338 <crcAdd+0x68>)
 80042ee:	2189      	movs	r1, #137	@ 0x89
 80042f0:	4812      	ldr	r0, [pc, #72]	@ (800433c <crcAdd+0x6c>)
 80042f2:	f001 ff45 	bl	8006180 <__assert_func>
    TransferCRC    out = crc;
 80042f6:	89fb      	ldrh	r3, [r7, #14]
 80042f8:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80042fe:	2300      	movs	r3, #0
 8004300:	617b      	str	r3, [r7, #20]
 8004302:	e00e      	b.n	8004322 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	781a      	ldrb	r2, [r3, #0]
 8004308:	8bfb      	ldrh	r3, [r7, #30]
 800430a:	4611      	mov	r1, r2
 800430c:	4618      	mov	r0, r3
 800430e:	f7ff ffbf 	bl	8004290 <crcAddByte>
 8004312:	4603      	mov	r3, r0
 8004314:	83fb      	strh	r3, [r7, #30]
        ++p;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	3301      	adds	r3, #1
 800431a:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	3301      	adds	r3, #1
 8004320:	617b      	str	r3, [r7, #20]
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	429a      	cmp	r2, r3
 8004328:	d3ec      	bcc.n	8004304 <crcAdd+0x34>
    }
    return out;
 800432a:	8bfb      	ldrh	r3, [r7, #30]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3720      	adds	r7, #32
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	080078b4 	.word	0x080078b4
 8004338:	080084d0 	.word	0x080084d0
 800433c:	080078dc 	.word	0x080078dc

08004340 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	460a      	mov	r2, r1
 800434a:	80fb      	strh	r3, [r7, #6]
 800434c:	4613      	mov	r3, r2
 800434e:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8004350:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8004354:	2b00      	cmp	r3, #0
 8004356:	da05      	bge.n	8004364 <txMakeMessageSessionSpecifier+0x24>
 8004358:	4b0e      	ldr	r3, [pc, #56]	@ (8004394 <txMakeMessageSessionSpecifier+0x54>)
 800435a:	4a0f      	ldr	r2, [pc, #60]	@ (8004398 <txMakeMessageSessionSpecifier+0x58>)
 800435c:	21ab      	movs	r1, #171	@ 0xab
 800435e:	480f      	ldr	r0, [pc, #60]	@ (800439c <txMakeMessageSessionSpecifier+0x5c>)
 8004360:	f001 ff0e 	bl	8006180 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8004364:	88fb      	ldrh	r3, [r7, #6]
 8004366:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800436a:	d305      	bcc.n	8004378 <txMakeMessageSessionSpecifier+0x38>
 800436c:	4b0c      	ldr	r3, [pc, #48]	@ (80043a0 <txMakeMessageSessionSpecifier+0x60>)
 800436e:	4a0a      	ldr	r2, [pc, #40]	@ (8004398 <txMakeMessageSessionSpecifier+0x58>)
 8004370:	21ac      	movs	r1, #172	@ 0xac
 8004372:	480a      	ldr	r0, [pc, #40]	@ (800439c <txMakeMessageSessionSpecifier+0x5c>)
 8004374:	f001 ff04 	bl	8006180 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 800437e:	b29b      	uxth	r3, r3
 8004380:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8004382:	797a      	ldrb	r2, [r7, #5]
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	021b      	lsls	r3, r3, #8
 8004388:	4313      	orrs	r3, r2
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
 8004392:	bf00      	nop
 8004394:	080078f4 	.word	0x080078f4
 8004398:	080084d8 	.word	0x080084d8
 800439c:	080078dc 	.word	0x080078dc
 80043a0:	08007908 	.word	0x08007908

080043a4 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 80043a4:	b590      	push	{r4, r7, lr}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	4604      	mov	r4, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	461a      	mov	r2, r3
 80043b2:	4623      	mov	r3, r4
 80043b4:	80fb      	strh	r3, [r7, #6]
 80043b6:	4603      	mov	r3, r0
 80043b8:	717b      	strb	r3, [r7, #5]
 80043ba:	460b      	mov	r3, r1
 80043bc:	713b      	strb	r3, [r7, #4]
 80043be:	4613      	mov	r3, r2
 80043c0:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 80043c2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	da05      	bge.n	80043d6 <txMakeServiceSessionSpecifier+0x32>
 80043ca:	4b17      	ldr	r3, [pc, #92]	@ (8004428 <txMakeServiceSessionSpecifier+0x84>)
 80043cc:	4a17      	ldr	r2, [pc, #92]	@ (800442c <txMakeServiceSessionSpecifier+0x88>)
 80043ce:	21b6      	movs	r1, #182	@ 0xb6
 80043d0:	4817      	ldr	r0, [pc, #92]	@ (8004430 <txMakeServiceSessionSpecifier+0x8c>)
 80043d2:	f001 fed5 	bl	8006180 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 80043d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	da05      	bge.n	80043ea <txMakeServiceSessionSpecifier+0x46>
 80043de:	4b15      	ldr	r3, [pc, #84]	@ (8004434 <txMakeServiceSessionSpecifier+0x90>)
 80043e0:	4a12      	ldr	r2, [pc, #72]	@ (800442c <txMakeServiceSessionSpecifier+0x88>)
 80043e2:	21b7      	movs	r1, #183	@ 0xb7
 80043e4:	4812      	ldr	r0, [pc, #72]	@ (8004430 <txMakeServiceSessionSpecifier+0x8c>)
 80043e6:	f001 fecb 	bl	8006180 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 80043ea:	88fb      	ldrh	r3, [r7, #6]
 80043ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f0:	d305      	bcc.n	80043fe <txMakeServiceSessionSpecifier+0x5a>
 80043f2:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <txMakeServiceSessionSpecifier+0x94>)
 80043f4:	4a0d      	ldr	r2, [pc, #52]	@ (800442c <txMakeServiceSessionSpecifier+0x88>)
 80043f6:	21b8      	movs	r1, #184	@ 0xb8
 80043f8:	480d      	ldr	r0, [pc, #52]	@ (8004430 <txMakeServiceSessionSpecifier+0x8c>)
 80043fa:	f001 fec1 	bl	8006180 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 80043fe:	793a      	ldrb	r2, [r7, #4]
 8004400:	78fb      	ldrb	r3, [r7, #3]
 8004402:	01db      	lsls	r3, r3, #7
 8004404:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8004406:	88fb      	ldrh	r3, [r7, #6]
 8004408:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 800440a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800440c:	797a      	ldrb	r2, [r7, #5]
 800440e:	2a00      	cmp	r2, #0
 8004410:	d002      	beq.n	8004418 <txMakeServiceSessionSpecifier+0x74>
 8004412:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004416:	e000      	b.n	800441a <txMakeServiceSessionSpecifier+0x76>
 8004418:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 800441a:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 800441c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	bd90      	pop	{r4, r7, pc}
 8004428:	080078f4 	.word	0x080078f4
 800442c:	080084f8 	.word	0x080084f8
 8004430:	080078dc 	.word	0x080078dc
 8004434:	0800791c 	.word	0x0800791c
 8004438:	08007930 	.word	0x08007930

0800443c <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8004444:	2340      	movs	r3, #64	@ 0x40
 8004446:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2b07      	cmp	r3, #7
 8004450:	d802      	bhi.n	8004458 <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8004452:	2308      	movs	r3, #8
 8004454:	60fb      	str	r3, [r7, #12]
 8004456:	e014      	b.n	8004482 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	429a      	cmp	r2, r3
 800445e:	d808      	bhi.n	8004472 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8004460:	4a0c      	ldr	r2, [pc, #48]	@ (8004494 <adjustPresentationLayerMTU+0x58>)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	4413      	add	r3, r2
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	461a      	mov	r2, r3
 800446a:	4b0b      	ldr	r3, [pc, #44]	@ (8004498 <adjustPresentationLayerMTU+0x5c>)
 800446c:	5c9b      	ldrb	r3, [r3, r2]
 800446e:	60fb      	str	r3, [r7, #12]
 8004470:	e007      	b.n	8004482 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8004472:	4a08      	ldr	r2, [pc, #32]	@ (8004494 <adjustPresentationLayerMTU+0x58>)
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4413      	add	r3, r2
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	461a      	mov	r2, r3
 800447c:	4b06      	ldr	r3, [pc, #24]	@ (8004498 <adjustPresentationLayerMTU+0x5c>)
 800447e:	5c9b      	ldrb	r3, [r3, r2]
 8004480:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	3b01      	subs	r3, #1
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
 8004492:	bf00      	nop
 8004494:	08008464 	.word	0x08008464
 8004498:	08008454 	.word	0x08008454

0800449c <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b08a      	sub	sp, #40	@ 0x28
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	60f8      	str	r0, [r7, #12]
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d105      	bne.n	80044bc <txMakeCANID+0x20>
 80044b0:	4b60      	ldr	r3, [pc, #384]	@ (8004634 <txMakeCANID+0x198>)
 80044b2:	4a61      	ldr	r2, [pc, #388]	@ (8004638 <txMakeCANID+0x19c>)
 80044b4:	21d8      	movs	r1, #216	@ 0xd8
 80044b6:	4861      	ldr	r0, [pc, #388]	@ (800463c <txMakeCANID+0x1a0>)
 80044b8:	f001 fe62 	bl	8006180 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 80044bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d105      	bne.n	80044ce <txMakeCANID+0x32>
 80044c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004640 <txMakeCANID+0x1a4>)
 80044c4:	4a5c      	ldr	r2, [pc, #368]	@ (8004638 <txMakeCANID+0x19c>)
 80044c6:	21d9      	movs	r1, #217	@ 0xd9
 80044c8:	485c      	ldr	r0, [pc, #368]	@ (800463c <txMakeCANID+0x1a0>)
 80044ca:	f001 fe59 	bl	8006180 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80044ce:	f06f 0301 	mvn.w	r3, #1
 80044d2:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	785b      	ldrb	r3, [r3, #1]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d157      	bne.n	800458c <txMakeCANID+0xf0>
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	791b      	ldrb	r3, [r3, #4]
 80044e0:	2bff      	cmp	r3, #255	@ 0xff
 80044e2:	d153      	bne.n	800458c <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 80044e8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044ec:	d24e      	bcs.n	800458c <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80044ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	db11      	blt.n	800451a <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	885b      	ldrh	r3, [r3, #2]
 80044fa:	78fa      	ldrb	r2, [r7, #3]
 80044fc:	4611      	mov	r1, r2
 80044fe:	4618      	mov	r0, r3
 8004500:	f7ff ff1e 	bl	8004340 <txMakeMessageSessionSpecifier>
 8004504:	4603      	mov	r3, r0
 8004506:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8004508:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	da75      	bge.n	80045fa <txMakeCANID+0x15e>
 800450e:	4b4d      	ldr	r3, [pc, #308]	@ (8004644 <txMakeCANID+0x1a8>)
 8004510:	4a49      	ldr	r2, [pc, #292]	@ (8004638 <txMakeCANID+0x19c>)
 8004512:	21e1      	movs	r1, #225	@ 0xe1
 8004514:	4849      	ldr	r0, [pc, #292]	@ (800463c <txMakeCANID+0x1a0>)
 8004516:	f001 fe33 	bl	8006180 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	429a      	cmp	r2, r3
 8004520:	d830      	bhi.n	8004584 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d108      	bne.n	800453a <txMakeCANID+0x9e>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d005      	beq.n	800453a <txMakeCANID+0x9e>
 800452e:	4b46      	ldr	r3, [pc, #280]	@ (8004648 <txMakeCANID+0x1ac>)
 8004530:	4a41      	ldr	r2, [pc, #260]	@ (8004638 <txMakeCANID+0x19c>)
 8004532:	21e5      	movs	r1, #229	@ 0xe5
 8004534:	4841      	ldr	r0, [pc, #260]	@ (800463c <txMakeCANID+0x1a0>)
 8004536:	f001 fe23 	bl	8006180 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	68b9      	ldr	r1, [r7, #8]
 800453e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004542:	f7ff fec5 	bl	80042d0 <crcAdd>
 8004546:	4603      	mov	r3, r0
 8004548:	b2db      	uxtb	r3, r3
 800454a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800454e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	885b      	ldrh	r3, [r3, #2]
 8004556:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800455a:	4611      	mov	r1, r2
 800455c:	4618      	mov	r0, r3
 800455e:	f7ff feef 	bl	8004340 <txMakeMessageSessionSpecifier>
 8004562:	4603      	mov	r3, r0
 8004564:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004568:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 800456a:	69fb      	ldr	r3, [r7, #28]
 800456c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004570:	d305      	bcc.n	800457e <txMakeCANID+0xe2>
 8004572:	4b36      	ldr	r3, [pc, #216]	@ (800464c <txMakeCANID+0x1b0>)
 8004574:	4a30      	ldr	r2, [pc, #192]	@ (8004638 <txMakeCANID+0x19c>)
 8004576:	21e8      	movs	r1, #232	@ 0xe8
 8004578:	4830      	ldr	r0, [pc, #192]	@ (800463c <txMakeCANID+0x1a0>)
 800457a:	f001 fe01 	bl	8006180 <__assert_func>
            out = (int32_t) spec;
 800457e:	69fb      	ldr	r3, [r7, #28]
 8004580:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8004582:	e03a      	b.n	80045fa <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8004584:	f06f 0301 	mvn.w	r3, #1
 8004588:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 800458a:	e036      	b.n	80045fa <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	785b      	ldrb	r3, [r3, #1]
 8004590:	2b02      	cmp	r3, #2
 8004592:	d003      	beq.n	800459c <txMakeCANID+0x100>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	785b      	ldrb	r3, [r3, #1]
 8004598:	2b01      	cmp	r3, #1
 800459a:	d12a      	bne.n	80045f2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	791b      	ldrb	r3, [r3, #4]
 80045a0:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	db25      	blt.n	80045f2 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	885b      	ldrh	r3, [r3, #2]
 80045aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80045ae:	d220      	bcs.n	80045f2 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80045b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	db18      	blt.n	80045ea <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80045c0:	2b02      	cmp	r3, #2
 80045c2:	bf0c      	ite	eq
 80045c4:	2301      	moveq	r3, #1
 80045c6:	2300      	movne	r3, #0
 80045c8:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 80045ce:	78fa      	ldrb	r2, [r7, #3]
 80045d0:	f7ff fee8 	bl	80043a4 <txMakeServiceSessionSpecifier>
 80045d4:	4603      	mov	r3, r0
 80045d6:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 80045d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da0f      	bge.n	80045fe <txMakeCANID+0x162>
 80045de:	4b19      	ldr	r3, [pc, #100]	@ (8004644 <txMakeCANID+0x1a8>)
 80045e0:	4a15      	ldr	r2, [pc, #84]	@ (8004638 <txMakeCANID+0x19c>)
 80045e2:	21f9      	movs	r1, #249	@ 0xf9
 80045e4:	4815      	ldr	r0, [pc, #84]	@ (800463c <txMakeCANID+0x1a0>)
 80045e6:	f001 fdcb 	bl	8006180 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 80045ea:	f06f 0301 	mvn.w	r3, #1
 80045ee:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80045f0:	e005      	b.n	80045fe <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 80045f2:	f06f 0301 	mvn.w	r3, #1
 80045f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80045f8:	e002      	b.n	8004600 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80045fa:	bf00      	nop
 80045fc:	e000      	b.n	8004600 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 80045fe:	bf00      	nop
    }

    if (out >= 0)
 8004600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004602:	2b00      	cmp	r3, #0
 8004604:	db10      	blt.n	8004628 <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 800460c:	69bb      	ldr	r3, [r7, #24]
 800460e:	2b07      	cmp	r3, #7
 8004610:	d807      	bhi.n	8004622 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8004612:	69bb      	ldr	r3, [r7, #24]
 8004614:	069a      	lsls	r2, r3, #26
 8004616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004618:	4313      	orrs	r3, r2
 800461a:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004620:	e002      	b.n	8004628 <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8004622:	f06f 0301 	mvn.w	r3, #1
 8004626:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8004628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800462a:	4618      	mov	r0, r3
 800462c:	3728      	adds	r7, #40	@ 0x28
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	08007944 	.word	0x08007944
 8004638:	080084c4 	.word	0x080084c4
 800463c:	080078dc 	.word	0x080078dc
 8004640:	08007958 	.word	0x08007958
 8004644:	08007974 	.word	0x08007974
 8004648:	08007980 	.word	0x08007980
 800464c:	080079b4 	.word	0x080079b4

08004650 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8004650:	b590      	push	{r4, r7, lr}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	4604      	mov	r4, r0
 8004658:	4608      	mov	r0, r1
 800465a:	4611      	mov	r1, r2
 800465c:	461a      	mov	r2, r3
 800465e:	4623      	mov	r3, r4
 8004660:	71fb      	strb	r3, [r7, #7]
 8004662:	4603      	mov	r3, r0
 8004664:	71bb      	strb	r3, [r7, #6]
 8004666:	460b      	mov	r3, r1
 8004668:	717b      	strb	r3, [r7, #5]
 800466a:	4613      	mov	r3, r2
 800466c:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 800466e:	79fb      	ldrb	r3, [r7, #7]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d009      	beq.n	8004688 <txMakeTailByte+0x38>
 8004674:	797b      	ldrb	r3, [r7, #5]
 8004676:	2b01      	cmp	r3, #1
 8004678:	d006      	beq.n	8004688 <txMakeTailByte+0x38>
 800467a:	4b13      	ldr	r3, [pc, #76]	@ (80046c8 <txMakeTailByte+0x78>)
 800467c:	4a13      	ldr	r2, [pc, #76]	@ (80046cc <txMakeTailByte+0x7c>)
 800467e:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8004682:	4813      	ldr	r0, [pc, #76]	@ (80046d0 <txMakeTailByte+0x80>)
 8004684:	f001 fd7c 	bl	8006180 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8004688:	79fb      	ldrb	r3, [r7, #7]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d001      	beq.n	8004692 <txMakeTailByte+0x42>
 800468e:	2280      	movs	r2, #128	@ 0x80
 8004690:	e000      	b.n	8004694 <txMakeTailByte+0x44>
 8004692:	2200      	movs	r2, #0
 8004694:	79bb      	ldrb	r3, [r7, #6]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d001      	beq.n	800469e <txMakeTailByte+0x4e>
 800469a:	2340      	movs	r3, #64	@ 0x40
 800469c:	e000      	b.n	80046a0 <txMakeTailByte+0x50>
 800469e:	2300      	movs	r3, #0
 80046a0:	4313      	orrs	r3, r2
 80046a2:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 80046a4:	797a      	ldrb	r2, [r7, #5]
 80046a6:	2a00      	cmp	r2, #0
 80046a8:	d001      	beq.n	80046ae <txMakeTailByte+0x5e>
 80046aa:	2220      	movs	r2, #32
 80046ac:	e000      	b.n	80046b0 <txMakeTailByte+0x60>
 80046ae:	2200      	movs	r2, #0
 80046b0:	4313      	orrs	r3, r2
 80046b2:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 80046b4:	793b      	ldrb	r3, [r7, #4]
 80046b6:	f003 031f 	and.w	r3, r3, #31
 80046ba:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 80046bc:	4313      	orrs	r3, r2
 80046be:	b2db      	uxtb	r3, r3
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd90      	pop	{r4, r7, pc}
 80046c8:	080079d0 	.word	0x080079d0
 80046cc:	0800856c 	.word	0x0800856c
 80046d0:	080078dc 	.word	0x080078dc

080046d4 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b40      	cmp	r3, #64	@ 0x40
 80046e0:	d906      	bls.n	80046f0 <txRoundFramePayloadSizeUp+0x1c>
 80046e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004720 <txRoundFramePayloadSizeUp+0x4c>)
 80046e4:	4a0f      	ldr	r2, [pc, #60]	@ (8004724 <txRoundFramePayloadSizeUp+0x50>)
 80046e6:	f240 1123 	movw	r1, #291	@ 0x123
 80046ea:	480f      	ldr	r0, [pc, #60]	@ (8004728 <txRoundFramePayloadSizeUp+0x54>)
 80046ec:	f001 fd48 	bl	8006180 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 80046f0:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <txRoundFramePayloadSizeUp+0x58>)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4413      	add	r3, r2
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2b0f      	cmp	r3, #15
 80046fe:	d906      	bls.n	800470e <txRoundFramePayloadSizeUp+0x3a>
 8004700:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <txRoundFramePayloadSizeUp+0x5c>)
 8004702:	4a08      	ldr	r2, [pc, #32]	@ (8004724 <txRoundFramePayloadSizeUp+0x50>)
 8004704:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8004708:	4807      	ldr	r0, [pc, #28]	@ (8004728 <txRoundFramePayloadSizeUp+0x54>)
 800470a:	f001 fd39 	bl	8006180 <__assert_func>
    return CanardCANDLCToLength[y];
 800470e:	4a09      	ldr	r2, [pc, #36]	@ (8004734 <txRoundFramePayloadSizeUp+0x60>)
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	4413      	add	r3, r2
 8004714:	781b      	ldrb	r3, [r3, #0]
}
 8004716:	4618      	mov	r0, r3
 8004718:	3710      	adds	r7, #16
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	080079f8 	.word	0x080079f8
 8004724:	0800853c 	.word	0x0800853c
 8004728:	080078dc 	.word	0x080078dc
 800472c:	08008464 	.word	0x08008464
 8004730:	08007a40 	.word	0x08007a40
 8004734:	08008454 	.word	0x08008454

08004738 <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d106      	bne.n	800475a <txAllocateQueueItem+0x22>
 800474c:	4b1f      	ldr	r3, [pc, #124]	@ (80047cc <txAllocateQueueItem+0x94>)
 800474e:	4a20      	ldr	r2, [pc, #128]	@ (80047d0 <txAllocateQueueItem+0x98>)
 8004750:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8004754:	481f      	ldr	r0, [pc, #124]	@ (80047d4 <txAllocateQueueItem+0x9c>)
 8004756:	f001 fd13 	bl	8006180 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 800475a:	6a3b      	ldr	r3, [r7, #32]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d106      	bne.n	800476e <txAllocateQueueItem+0x36>
 8004760:	4b1d      	ldr	r3, [pc, #116]	@ (80047d8 <txAllocateQueueItem+0xa0>)
 8004762:	4a1b      	ldr	r2, [pc, #108]	@ (80047d0 <txAllocateQueueItem+0x98>)
 8004764:	f240 1131 	movw	r1, #305	@ 0x131
 8004768:	481a      	ldr	r0, [pc, #104]	@ (80047d4 <txAllocateQueueItem+0x9c>)
 800476a:	f001 fd09 	bl	8006180 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	6a3a      	ldr	r2, [r7, #32]
 8004774:	3230      	adds	r2, #48	@ 0x30
 8004776:	4611      	mov	r1, r2
 8004778:	68f8      	ldr	r0, [r7, #12]
 800477a:	4798      	blx	r3
 800477c:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01e      	beq.n	80047c2 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	2200      	movs	r2, #0
 8004788:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2200      	movs	r2, #0
 800478e:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8004790:	697b      	ldr	r3, [r7, #20]
 8004792:	2200      	movs	r2, #0
 8004794:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2200      	movs	r2, #0
 800479a:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2200      	movs	r2, #0
 80047a0:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 80047a2:	6979      	ldr	r1, [r7, #20]
 80047a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047a8:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	6a3a      	ldr	r2, [r7, #32]
 80047b0:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	68ba      	ldr	r2, [r7, #8]
 80047c0:	621a      	str	r2, [r3, #32]
    }
    return out;
 80047c2:	697b      	ldr	r3, [r7, #20]
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	08007a88 	.word	0x08007a88
 80047d0:	08008558 	.word	0x08008558
 80047d4:	080078dc 	.word	0x080078dc
 80047d8:	08007a9c 	.word	0x08007a9c

080047dc <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d002      	beq.n	80047fa <txAVLPredicate+0x1e>
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d106      	bne.n	8004808 <txAVLPredicate+0x2c>
 80047fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004824 <txAVLPredicate+0x48>)
 80047fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004828 <txAVLPredicate+0x4c>)
 80047fe:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8004802:	480a      	ldr	r0, [pc, #40]	@ (800482c <txAVLPredicate+0x50>)
 8004804:	f001 fcbc 	bl	8006180 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	6a1a      	ldr	r2, [r3, #32]
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	6a1b      	ldr	r3, [r3, #32]
 8004810:	429a      	cmp	r2, r3
 8004812:	d301      	bcc.n	8004818 <txAVLPredicate+0x3c>
 8004814:	2301      	movs	r3, #1
 8004816:	e001      	b.n	800481c <txAVLPredicate+0x40>
 8004818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800481c:	4618      	mov	r0, r3
 800481e:	3710      	adds	r7, #16
 8004820:	46bd      	mov	sp, r7
 8004822:	bd80      	pop	{r7, pc}
 8004824:	08007ab0 	.word	0x08007ab0
 8004828:	0800852c 	.word	0x0800852c
 800482c:	080078dc 	.word	0x080078dc

08004830 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8004830:	b590      	push	{r4, r7, lr}
 8004832:	b08d      	sub	sp, #52	@ 0x34
 8004834:	af02      	add	r7, sp, #8
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d106      	bne.n	8004852 <txPushSingleFrame+0x22>
 8004844:	4b5c      	ldr	r3, [pc, #368]	@ (80049b8 <txPushSingleFrame+0x188>)
 8004846:	4a5d      	ldr	r2, [pc, #372]	@ (80049bc <txPushSingleFrame+0x18c>)
 8004848:	f240 1159 	movw	r1, #345	@ 0x159
 800484c:	485c      	ldr	r0, [pc, #368]	@ (80049c0 <txPushSingleFrame+0x190>)
 800484e:	f001 fc97 	bl	8006180 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8004852:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004854:	2b00      	cmp	r3, #0
 8004856:	d109      	bne.n	800486c <txPushSingleFrame+0x3c>
 8004858:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800485a:	2b00      	cmp	r3, #0
 800485c:	d006      	beq.n	800486c <txPushSingleFrame+0x3c>
 800485e:	4b59      	ldr	r3, [pc, #356]	@ (80049c4 <txPushSingleFrame+0x194>)
 8004860:	4a56      	ldr	r2, [pc, #344]	@ (80049bc <txPushSingleFrame+0x18c>)
 8004862:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8004866:	4856      	ldr	r0, [pc, #344]	@ (80049c0 <txPushSingleFrame+0x190>)
 8004868:	f001 fc8a 	bl	8006180 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 800486c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800486e:	3301      	adds	r3, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f7ff ff2f 	bl	80046d4 <txRoundFramePayloadSizeUp>
 8004876:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8004878:	6a3a      	ldr	r2, [r7, #32]
 800487a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800487c:	429a      	cmp	r2, r3
 800487e:	d806      	bhi.n	800488e <txPushSingleFrame+0x5e>
 8004880:	4b51      	ldr	r3, [pc, #324]	@ (80049c8 <txPushSingleFrame+0x198>)
 8004882:	4a4e      	ldr	r2, [pc, #312]	@ (80049bc <txPushSingleFrame+0x18c>)
 8004884:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8004888:	484d      	ldr	r0, [pc, #308]	@ (80049c0 <txPushSingleFrame+0x190>)
 800488a:	f001 fc79 	bl	8006180 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 800488e:	6a3a      	ldr	r2, [r7, #32]
 8004890:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004892:	1ad3      	subs	r3, r2, r3
 8004894:	3b01      	subs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8004898:	69fa      	ldr	r2, [r7, #28]
 800489a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800489c:	4413      	add	r3, r2
 800489e:	3301      	adds	r3, #1
 80048a0:	6a3a      	ldr	r2, [r7, #32]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d006      	beq.n	80048b4 <txPushSingleFrame+0x84>
 80048a6:	4b49      	ldr	r3, [pc, #292]	@ (80049cc <txPushSingleFrame+0x19c>)
 80048a8:	4a44      	ldr	r2, [pc, #272]	@ (80049bc <txPushSingleFrame+0x18c>)
 80048aa:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80048ae:	4844      	ldr	r0, [pc, #272]	@ (80049c0 <txPushSingleFrame+0x190>)
 80048b0:	f001 fc66 	bl	8006180 <__assert_func>
    int32_t       out = 0;
 80048b4:	2300      	movs	r3, #0
 80048b6:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	689a      	ldr	r2, [r3, #8]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d209      	bcs.n	80048d8 <txPushSingleFrame+0xa8>
 80048c4:	6a3b      	ldr	r3, [r7, #32]
 80048c6:	9300      	str	r3, [sp, #0]
 80048c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048cc:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80048ce:	68b8      	ldr	r0, [r7, #8]
 80048d0:	f7ff ff32 	bl	8004738 <txAllocateQueueItem>
 80048d4:	4603      	mov	r3, r0
 80048d6:	e000      	b.n	80048da <txPushSingleFrame+0xaa>
 80048d8:	2300      	movs	r3, #0
    TxItem* const tqi =
 80048da:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d054      	beq.n	800498c <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 80048e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d010      	beq.n	800490a <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 80048e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <txPushSingleFrame+0xcc>
 80048ee:	4b38      	ldr	r3, [pc, #224]	@ (80049d0 <txPushSingleFrame+0x1a0>)
 80048f0:	4a32      	ldr	r2, [pc, #200]	@ (80049bc <txPushSingleFrame+0x18c>)
 80048f2:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 80048f6:	4832      	ldr	r0, [pc, #200]	@ (80049c0 <txPushSingleFrame+0x190>)
 80048f8:	f001 fc42 	bl	8006180 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	3330      	adds	r3, #48	@ 0x30
 8004900:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004902:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004904:	4618      	mov	r0, r3
 8004906:	f001 fed4 	bl	80066b2 <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 800490a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800490c:	3330      	adds	r3, #48	@ 0x30
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4413      	add	r3, r2
 8004912:	69fa      	ldr	r2, [r7, #28]
 8004914:	2100      	movs	r1, #0
 8004916:	4618      	mov	r0, r3
 8004918:	f001 fe3f 	bl	800659a <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	1e5c      	subs	r4, r3, #1
 8004920:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8004924:	2201      	movs	r2, #1
 8004926:	2101      	movs	r1, #1
 8004928:	2001      	movs	r0, #1
 800492a:	f7ff fe91 	bl	8004650 <txMakeTailByte>
 800492e:	4603      	mov	r3, r0
 8004930:	461a      	mov	r2, r3
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	4423      	add	r3, r4
 8004936:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f103 000c 	add.w	r0, r3, #12
 8004940:	69b9      	ldr	r1, [r7, #24]
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <txPushSingleFrame+0x1a4>)
 8004944:	4a24      	ldr	r2, [pc, #144]	@ (80049d8 <txPushSingleFrame+0x1a8>)
 8004946:	f7ff fae7 	bl	8003f18 <cavlSearch>
 800494a:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	429a      	cmp	r2, r3
 8004952:	d006      	beq.n	8004962 <txPushSingleFrame+0x132>
 8004954:	4b21      	ldr	r3, [pc, #132]	@ (80049dc <txPushSingleFrame+0x1ac>)
 8004956:	4a19      	ldr	r2, [pc, #100]	@ (80049bc <txPushSingleFrame+0x18c>)
 8004958:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 800495c:	4818      	ldr	r0, [pc, #96]	@ (80049c0 <txPushSingleFrame+0x190>)
 800495e:	f001 fc0f 	bl	8006180 <__assert_func>
        que->size++;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	1c5a      	adds	r2, r3, #1
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689a      	ldr	r2, [r3, #8]
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	429a      	cmp	r2, r3
 8004976:	d906      	bls.n	8004986 <txPushSingleFrame+0x156>
 8004978:	4b19      	ldr	r3, [pc, #100]	@ (80049e0 <txPushSingleFrame+0x1b0>)
 800497a:	4a10      	ldr	r2, [pc, #64]	@ (80049bc <txPushSingleFrame+0x18c>)
 800497c:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8004980:	480f      	ldr	r0, [pc, #60]	@ (80049c0 <txPushSingleFrame+0x190>)
 8004982:	f001 fbfd 	bl	8006180 <__assert_func>
        out = 1;  // One frame enqueued.
 8004986:	2301      	movs	r3, #1
 8004988:	627b      	str	r3, [r7, #36]	@ 0x24
 800498a:	e002      	b.n	8004992 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 800498c:	f06f 0302 	mvn.w	r3, #2
 8004990:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8004992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004994:	2b00      	cmp	r3, #0
 8004996:	db09      	blt.n	80049ac <txPushSingleFrame+0x17c>
 8004998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d006      	beq.n	80049ac <txPushSingleFrame+0x17c>
 800499e:	4b11      	ldr	r3, [pc, #68]	@ (80049e4 <txPushSingleFrame+0x1b4>)
 80049a0:	4a06      	ldr	r2, [pc, #24]	@ (80049bc <txPushSingleFrame+0x18c>)
 80049a2:	f240 117b 	movw	r1, #379	@ 0x17b
 80049a6:	4806      	ldr	r0, [pc, #24]	@ (80049c0 <txPushSingleFrame+0x190>)
 80049a8:	f001 fbea 	bl	8006180 <__assert_func>
    return out;
 80049ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	372c      	adds	r7, #44	@ 0x2c
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd90      	pop	{r4, r7, pc}
 80049b6:	bf00      	nop
 80049b8:	08007a88 	.word	0x08007a88
 80049bc:	08008518 	.word	0x08008518
 80049c0:	080078dc 	.word	0x080078dc
 80049c4:	08007ae4 	.word	0x08007ae4
 80049c8:	08007b14 	.word	0x08007b14
 80049cc:	08007b38 	.word	0x08007b38
 80049d0:	08007b74 	.word	0x08007b74
 80049d4:	08004279 	.word	0x08004279
 80049d8:	080047dd 	.word	0x080047dd
 80049dc:	08007b8c 	.word	0x08007b8c
 80049e0:	08007ba4 	.word	0x08007ba4
 80049e4:	08007bc0 	.word	0x08007bc0

080049e8 <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80049e8:	b590      	push	{r4, r7, lr}
 80049ea:	b093      	sub	sp, #76	@ 0x4c
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 80049f4:	68bb      	ldr	r3, [r7, #8]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <txGenerateMultiFrameChain+0x20>
 80049fa:	4b93      	ldr	r3, [pc, #588]	@ (8004c48 <txGenerateMultiFrameChain+0x260>)
 80049fc:	4a93      	ldr	r2, [pc, #588]	@ (8004c4c <txGenerateMultiFrameChain+0x264>)
 80049fe:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8004a02:	4893      	ldr	r0, [pc, #588]	@ (8004c50 <txGenerateMultiFrameChain+0x268>)
 8004a04:	f001 fbbc 	bl	8006180 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d106      	bne.n	8004a1c <txGenerateMultiFrameChain+0x34>
 8004a0e:	4b91      	ldr	r3, [pc, #580]	@ (8004c54 <txGenerateMultiFrameChain+0x26c>)
 8004a10:	4a8e      	ldr	r2, [pc, #568]	@ (8004c4c <txGenerateMultiFrameChain+0x264>)
 8004a12:	f240 1189 	movw	r1, #393	@ 0x189
 8004a16:	488e      	ldr	r0, [pc, #568]	@ (8004c50 <txGenerateMultiFrameChain+0x268>)
 8004a18:	f001 fbb2 	bl	8006180 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8004a1c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d806      	bhi.n	8004a32 <txGenerateMultiFrameChain+0x4a>
 8004a24:	4b8c      	ldr	r3, [pc, #560]	@ (8004c58 <txGenerateMultiFrameChain+0x270>)
 8004a26:	4a89      	ldr	r2, [pc, #548]	@ (8004c4c <txGenerateMultiFrameChain+0x264>)
 8004a28:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8004a2c:	4888      	ldr	r0, [pc, #544]	@ (8004c50 <txGenerateMultiFrameChain+0x268>)
 8004a2e:	f001 fba7 	bl	8006180 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 8004a32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d106      	bne.n	8004a46 <txGenerateMultiFrameChain+0x5e>
 8004a38:	4b88      	ldr	r3, [pc, #544]	@ (8004c5c <txGenerateMultiFrameChain+0x274>)
 8004a3a:	4a84      	ldr	r2, [pc, #528]	@ (8004c4c <txGenerateMultiFrameChain+0x264>)
 8004a3c:	f240 118b 	movw	r1, #395	@ 0x18b
 8004a40:	4883      	ldr	r0, [pc, #524]	@ (8004c50 <txGenerateMultiFrameChain+0x268>)
 8004a42:	f001 fb9d 	bl	8006180 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 8004a46:	2300      	movs	r3, #0
 8004a48:	613b      	str	r3, [r7, #16]
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	2300      	movs	r3, #0
 8004a50:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8004a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004a54:	3302      	adds	r3, #2
 8004a56:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8004a5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004a5e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004a60:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004a64:	f7ff fc34 	bl	80042d0 <crcAdd>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8004a72:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004a74:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 8004a76:	e0d4      	b.n	8004c22 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8004a7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a82:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d908      	bls.n	8004a9c <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 8004a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	4618      	mov	r0, r3
 8004a94:	f7ff fe1e 	bl	80046d4 <txRoundFramePayloadSizeUp>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	e001      	b.n	8004aa0 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8004aa0:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8004aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004aaa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004aac:	68b8      	ldr	r0, [r7, #8]
 8004aae:	f7ff fe43 	bl	8004738 <txAllocateQueueItem>
 8004ab2:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 8004aba:	6a3b      	ldr	r3, [r7, #32]
 8004abc:	613b      	str	r3, [r7, #16]
 8004abe:	e002      	b.n	8004ac6 <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 8004ac6:	6a3b      	ldr	r3, [r7, #32]
 8004ac8:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80ae 	beq.w	8004c2e <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8004ad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 8004adc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004ade:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d21c      	bcs.n	8004b1e <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 8004ae4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ae6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ae8:	1ad3      	subs	r3, r2, r3
 8004aea:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 8004aec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d901      	bls.n	8004af8 <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	3330      	adds	r3, #48	@ 0x30
 8004afc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004afe:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004b00:	4618      	mov	r0, r3
 8004b02:	f001 fdd6 	bl	80066b2 <memcpy>
            frame_offset = frame_offset + move_size;
 8004b06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b0a:	4413      	add	r3, r2
 8004b0c:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 8004b0e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b12:	4413      	add	r3, r2
 8004b14:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 8004b16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b1a:	4413      	add	r3, r2
 8004b1c:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 8004b1e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b20:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d343      	bcc.n	8004bae <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8004b26:	e00f      	b.n	8004b48 <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3330      	adds	r3, #48	@ 0x30
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8004b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b36:	3301      	adds	r3, #1
 8004b38:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 8004b3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b3c:	2100      	movs	r1, #0
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f7ff fba6 	bl	8004290 <crcAddByte>
 8004b44:	4603      	mov	r3, r0
 8004b46:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 8004b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b4a:	3302      	adds	r3, #2
 8004b4c:	69fa      	ldr	r2, [r7, #28]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d8ea      	bhi.n	8004b28 <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8004b52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	429a      	cmp	r2, r3
 8004b58:	d213      	bcs.n	8004b82 <txGenerateMultiFrameChain+0x19a>
 8004b5a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d10f      	bne.n	8004b82 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8004b62:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b64:	0a1b      	lsrs	r3, r3, #8
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	697a      	ldr	r2, [r7, #20]
 8004b6a:	b2d9      	uxtb	r1, r3
 8004b6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b6e:	4413      	add	r3, r2
 8004b70:	3330      	adds	r3, #48	@ 0x30
 8004b72:	460a      	mov	r2, r1
 8004b74:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8004b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b78:	3301      	adds	r3, #1
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	3301      	adds	r3, #1
 8004b80:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8004b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b84:	69fb      	ldr	r3, [r7, #28]
 8004b86:	429a      	cmp	r2, r3
 8004b88:	d211      	bcs.n	8004bae <txGenerateMultiFrameChain+0x1c6>
 8004b8a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b8c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d90d      	bls.n	8004bae <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8004b92:	697a      	ldr	r2, [r7, #20]
 8004b94:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004b96:	b2d9      	uxtb	r1, r3
 8004b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b9a:	4413      	add	r3, r2
 8004b9c:	3330      	adds	r3, #48	@ 0x30
 8004b9e:	460a      	mov	r2, r1
 8004ba0:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8004ba8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004baa:	3301      	adds	r3, #1
 8004bac:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	1c5a      	adds	r2, r3, #1
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d006      	beq.n	8004bc8 <txGenerateMultiFrameChain+0x1e0>
 8004bba:	4b29      	ldr	r3, [pc, #164]	@ (8004c60 <txGenerateMultiFrameChain+0x278>)
 8004bbc:	4a23      	ldr	r2, [pc, #140]	@ (8004c4c <txGenerateMultiFrameChain+0x264>)
 8004bbe:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8004bc2:	4823      	ldr	r0, [pc, #140]	@ (8004c50 <txGenerateMultiFrameChain+0x268>)
 8004bc4:	f001 fadc 	bl	8006180 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	bf0c      	ite	eq
 8004bd0:	2301      	moveq	r3, #1
 8004bd2:	2300      	movne	r3, #0
 8004bd4:	b2d8      	uxtb	r0, r3
 8004bd6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	bf2c      	ite	cs
 8004bde:	2301      	movcs	r3, #1
 8004be0:	2300      	movcc	r3, #0
 8004be2:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8004be4:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 8004be6:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 8004bea:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004bee:	f7ff fd2f 	bl	8004650 <txMakeTailByte>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 8004bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf8:	4423      	add	r3, r4
 8004bfa:	3330      	adds	r3, #48	@ 0x30
 8004bfc:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 8004bfe:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	bf14      	ite	ne
 8004c06:	2301      	movne	r3, #1
 8004c08:	2300      	moveq	r3, #0
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	f083 0301 	eor.w	r3, r3, #1
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 8004c16:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 8004c22:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004c24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c26:	429a      	cmp	r2, r3
 8004c28:	f4ff af26 	bcc.w	8004a78 <txGenerateMultiFrameChain+0x90>
 8004c2c:	e000      	b.n	8004c30 <txGenerateMultiFrameChain+0x248>
            break;
 8004c2e:	bf00      	nop
    }
    return out;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	461c      	mov	r4, r3
 8004c34:	f107 0310 	add.w	r3, r7, #16
 8004c38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c3c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	3744      	adds	r7, #68	@ 0x44
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd90      	pop	{r4, r7, pc}
 8004c48:	08007a88 	.word	0x08007a88
 8004c4c:	080085e8 	.word	0x080085e8
 8004c50:	080078dc 	.word	0x080078dc
 8004c54:	08007bd8 	.word	0x08007bd8
 8004c58:	08007bf4 	.word	0x08007bf4
 8004c5c:	08007b74 	.word	0x08007b74
 8004c60:	08007c1c 	.word	0x08007c1c

08004c64 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b094      	sub	sp, #80	@ 0x50
 8004c68:	af06      	add	r7, sp, #24
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <txPushMultiFrame+0x18>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d106      	bne.n	8004c8a <txPushMultiFrame+0x26>
 8004c7c:	4b65      	ldr	r3, [pc, #404]	@ (8004e14 <txPushMultiFrame+0x1b0>)
 8004c7e:	4a66      	ldr	r2, [pc, #408]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004c80:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8004c84:	4865      	ldr	r0, [pc, #404]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004c86:	f001 fa7b 	bl	8006180 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d106      	bne.n	8004c9e <txPushMultiFrame+0x3a>
 8004c90:	4b63      	ldr	r3, [pc, #396]	@ (8004e20 <txPushMultiFrame+0x1bc>)
 8004c92:	4a61      	ldr	r2, [pc, #388]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004c94:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 8004c98:	4860      	ldr	r0, [pc, #384]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004c9a:	f001 fa71 	bl	8006180 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8004c9e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d806      	bhi.n	8004cb4 <txPushMultiFrame+0x50>
 8004ca6:	4b5f      	ldr	r3, [pc, #380]	@ (8004e24 <txPushMultiFrame+0x1c0>)
 8004ca8:	4a5b      	ldr	r2, [pc, #364]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004caa:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8004cae:	485b      	ldr	r0, [pc, #364]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004cb0:	f001 fa66 	bl	8006180 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8004cb8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cba:	3302      	adds	r3, #2
 8004cbc:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8004cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4413      	add	r3, r2
 8004cc4:	1e5a      	subs	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ccc:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d806      	bhi.n	8004ce2 <txPushMultiFrame+0x7e>
 8004cd4:	4b54      	ldr	r3, [pc, #336]	@ (8004e28 <txPushMultiFrame+0x1c4>)
 8004cd6:	4a50      	ldr	r2, [pc, #320]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004cd8:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004cdc:	484f      	ldr	r0, [pc, #316]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004cde:	f001 fa4f 	bl	8006180 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	689a      	ldr	r2, [r3, #8]
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ce8:	441a      	add	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	429a      	cmp	r2, r3
 8004cf0:	d87b      	bhi.n	8004dea <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 8004cf2:	f107 0010 	add.w	r0, r7, #16
 8004cf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004cf8:	9305      	str	r3, [sp, #20]
 8004cfa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004cfc:	9304      	str	r3, [sp, #16]
 8004cfe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8004d02:	9303      	str	r3, [sp, #12]
 8004d04:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d06:	9302      	str	r3, [sp, #8]
 8004d08:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d0c:	e9cd 2300 	strd	r2, r3, [sp]
 8004d10:	687a      	ldr	r2, [r7, #4]
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	f7ff fe68 	bl	80049e8 <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d051      	beq.n	8004dc2 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f103 000c 	add.w	r0, r3, #12
 8004d28:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004d2a:	4b40      	ldr	r3, [pc, #256]	@ (8004e2c <txPushMultiFrame+0x1c8>)
 8004d2c:	4a40      	ldr	r2, [pc, #256]	@ (8004e30 <txPushMultiFrame+0x1cc>)
 8004d2e:	f7ff f8f3 	bl	8003f18 <cavlSearch>
 8004d32:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 8004d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d36:	69fa      	ldr	r2, [r7, #28]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d006      	beq.n	8004d4a <txPushMultiFrame+0xe6>
 8004d3c:	4b3d      	ldr	r3, [pc, #244]	@ (8004e34 <txPushMultiFrame+0x1d0>)
 8004d3e:	4a36      	ldr	r2, [pc, #216]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004d40:	f240 2106 	movw	r1, #518	@ 0x206
 8004d44:	4835      	ldr	r0, [pc, #212]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004d46:	f001 fa1b 	bl	8006180 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <txPushMultiFrame+0xfc>
 8004d52:	4b39      	ldr	r3, [pc, #228]	@ (8004e38 <txPushMultiFrame+0x1d4>)
 8004d54:	4a30      	ldr	r2, [pc, #192]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004d56:	f240 2107 	movw	r1, #519	@ 0x207
 8004d5a:	4830      	ldr	r0, [pc, #192]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004d5c:	f001 fa10 	bl	8006180 <__assert_func>
                next = next->next_in_transfer;
 8004d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 8004d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1da      	bne.n	8004d22 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d006      	beq.n	8004d82 <txPushMultiFrame+0x11e>
 8004d74:	4b31      	ldr	r3, [pc, #196]	@ (8004e3c <txPushMultiFrame+0x1d8>)
 8004d76:	4a28      	ldr	r2, [pc, #160]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004d78:	f240 210a 	movw	r1, #522	@ 0x20a
 8004d7c:	4827      	ldr	r0, [pc, #156]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004d7e:	f001 f9ff 	bl	8006180 <__assert_func>
            que->size += sq.size;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	441a      	add	r2, r3
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	689a      	ldr	r2, [r3, #8]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d906      	bls.n	8004da8 <txPushMultiFrame+0x144>
 8004d9a:	4b29      	ldr	r3, [pc, #164]	@ (8004e40 <txPushMultiFrame+0x1dc>)
 8004d9c:	4a1e      	ldr	r2, [pc, #120]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004d9e:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8004da2:	481e      	ldr	r0, [pc, #120]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004da4:	f001 f9ec 	bl	8006180 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 8004da8:	69bb      	ldr	r3, [r7, #24]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	da06      	bge.n	8004dbc <txPushMultiFrame+0x158>
 8004dae:	4b25      	ldr	r3, [pc, #148]	@ (8004e44 <txPushMultiFrame+0x1e0>)
 8004db0:	4a19      	ldr	r2, [pc, #100]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004db2:	f240 210d 	movw	r1, #525	@ 0x20d
 8004db6:	4819      	ldr	r0, [pc, #100]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004db8:	f001 f9e2 	bl	8006180 <__assert_func>
            out = (int32_t) sq.size;
 8004dbc:	69bb      	ldr	r3, [r7, #24]
 8004dbe:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dc0:	e016      	b.n	8004df0 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8004dc2:	f06f 0302 	mvn.w	r3, #2
 8004dc6:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8004dcc:	e009      	b.n	8004de2 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8004dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004dda:	68b8      	ldr	r0, [r7, #8]
 8004ddc:	4798      	blx	r3
                head = next;
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8004de2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f2      	bne.n	8004dce <txPushMultiFrame+0x16a>
 8004de8:	e002      	b.n	8004df0 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8004dea:	f06f 0302 	mvn.w	r3, #2
 8004dee:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 8004df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	db09      	blt.n	8004e0a <txPushMultiFrame+0x1a6>
 8004df6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	dc06      	bgt.n	8004e0a <txPushMultiFrame+0x1a6>
 8004dfc:	4b12      	ldr	r3, [pc, #72]	@ (8004e48 <txPushMultiFrame+0x1e4>)
 8004dfe:	4a06      	ldr	r2, [pc, #24]	@ (8004e18 <txPushMultiFrame+0x1b4>)
 8004e00:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004e04:	4805      	ldr	r0, [pc, #20]	@ (8004e1c <txPushMultiFrame+0x1b8>)
 8004e06:	f001 f9bb 	bl	8006180 <__assert_func>
    return out;
 8004e0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	3738      	adds	r7, #56	@ 0x38
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}
 8004e14:	08007c58 	.word	0x08007c58
 8004e18:	080085d4 	.word	0x080085d4
 8004e1c:	080078dc 	.word	0x080078dc
 8004e20:	08007bd8 	.word	0x08007bd8
 8004e24:	08007bf4 	.word	0x08007bf4
 8004e28:	08007c88 	.word	0x08007c88
 8004e2c:	08004279 	.word	0x08004279
 8004e30:	080047dd 	.word	0x080047dd
 8004e34:	08007c98 	.word	0x08007c98
 8004e38:	08007cac 	.word	0x08007cac
 8004e3c:	08007cc8 	.word	0x08007cc8
 8004e40:	08007ba4 	.word	0x08007ba4
 8004e44:	08007ce0 	.word	0x08007ce0
 8004e48:	08007d04 	.word	0x08007d04

08004e4c <rxTryParseFrame>:

/// Returns truth if the frame is valid and parsed successfully. False if the frame is not a valid Cyphal/CAN frame.
CANARD_PRIVATE bool rxTryParseFrame(const CanardMicrosecond  timestamp_usec,
                                    const CanardFrame* const frame,
                                    RxFrameModel* const      out)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b088      	sub	sp, #32
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
 8004e58:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d106      	bne.n	8004e6e <rxTryParseFrame+0x22>
 8004e60:	4b96      	ldr	r3, [pc, #600]	@ (80050bc <rxTryParseFrame+0x270>)
 8004e62:	4a97      	ldr	r2, [pc, #604]	@ (80050c0 <rxTryParseFrame+0x274>)
 8004e64:	f240 214f 	movw	r1, #591	@ 0x24f
 8004e68:	4896      	ldr	r0, [pc, #600]	@ (80050c4 <rxTryParseFrame+0x278>)
 8004e6a:	f001 f989 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->extended_can_id <= CAN_EXT_ID_MASK);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004e76:	d306      	bcc.n	8004e86 <rxTryParseFrame+0x3a>
 8004e78:	4b93      	ldr	r3, [pc, #588]	@ (80050c8 <rxTryParseFrame+0x27c>)
 8004e7a:	4a91      	ldr	r2, [pc, #580]	@ (80050c0 <rxTryParseFrame+0x274>)
 8004e7c:	f44f 7114 	mov.w	r1, #592	@ 0x250
 8004e80:	4890      	ldr	r0, [pc, #576]	@ (80050c4 <rxTryParseFrame+0x278>)
 8004e82:	f001 f97d 	bl	8006180 <__assert_func>
    CANARD_ASSERT(out != NULL);
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d106      	bne.n	8004e9a <rxTryParseFrame+0x4e>
 8004e8c:	4b8f      	ldr	r3, [pc, #572]	@ (80050cc <rxTryParseFrame+0x280>)
 8004e8e:	4a8c      	ldr	r2, [pc, #560]	@ (80050c0 <rxTryParseFrame+0x274>)
 8004e90:	f240 2151 	movw	r1, #593	@ 0x251
 8004e94:	488b      	ldr	r0, [pc, #556]	@ (80050c4 <rxTryParseFrame+0x278>)
 8004e96:	f001 f973 	bl	8006180 <__assert_func>
    bool valid = false;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	77fb      	strb	r3, [r7, #31]
    if (frame->payload_size > 0)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f000 8105 	beq.w	80050b2 <rxTryParseFrame+0x266>
    {
        CANARD_ASSERT(frame->payload != NULL);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	689b      	ldr	r3, [r3, #8]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d106      	bne.n	8004ebe <rxTryParseFrame+0x72>
 8004eb0:	4b87      	ldr	r3, [pc, #540]	@ (80050d0 <rxTryParseFrame+0x284>)
 8004eb2:	4a83      	ldr	r2, [pc, #524]	@ (80050c0 <rxTryParseFrame+0x274>)
 8004eb4:	f240 2155 	movw	r1, #597	@ 0x255
 8004eb8:	4882      	ldr	r0, [pc, #520]	@ (80050c4 <rxTryParseFrame+0x278>)
 8004eba:	f001 f961 	bl	8006180 <__assert_func>
        out->timestamp_usec = timestamp_usec;
 8004ebe:	6839      	ldr	r1, [r7, #0]
 8004ec0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ec4:	e9c1 2300 	strd	r2, r3, [r1]

        // CAN ID parsing.
        const uint32_t can_id = frame->extended_can_id;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	61bb      	str	r3, [r7, #24]
        out->priority         = (CanardPriority) ((can_id >> OFFSET_PRIORITY) & CANARD_PRIORITY_MAX);
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	0e9b      	lsrs	r3, r3, #26
 8004ed2:	b2db      	uxtb	r3, r3
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	b2da      	uxtb	r2, r3
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	721a      	strb	r2, [r3, #8]
        out->source_node_id   = (CanardNodeID) (can_id & CANARD_NODE_ID_MAX);
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004ee6:	b2da      	uxtb	r2, r3
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	731a      	strb	r2, [r3, #12]
        if (0 == (can_id & FLAG_SERVICE_NOT_MESSAGE))
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d128      	bne.n	8004f48 <rxTryParseFrame+0xfc>
        {
            out->transfer_kind = CanardTransferKindMessage;
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2200      	movs	r2, #0
 8004efa:	725a      	strb	r2, [r3, #9]
            out->port_id       = (CanardPortID) ((can_id >> OFFSET_SUBJECT_ID) & CANARD_SUBJECT_ID_MAX);
 8004efc:	69bb      	ldr	r3, [r7, #24]
 8004efe:	0a1b      	lsrs	r3, r3, #8
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f06:	b29a      	uxth	r2, r3
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	815a      	strh	r2, [r3, #10]
            if ((can_id & FLAG_ANONYMOUS_MESSAGE) != 0)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <rxTryParseFrame+0xd0>
            {
                out->source_node_id = CANARD_NODE_ID_UNSET;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	22ff      	movs	r2, #255	@ 0xff
 8004f1a:	731a      	strb	r2, [r3, #12]
            }
            out->destination_node_id = CANARD_NODE_ID_UNSET;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	22ff      	movs	r2, #255	@ 0xff
 8004f20:	735a      	strb	r2, [r3, #13]
            // Reserved bits may be unreserved in the future.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (0 == (can_id & FLAG_RESERVED_07));
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d106      	bne.n	8004f3a <rxTryParseFrame+0xee>
 8004f2c:	69bb      	ldr	r3, [r7, #24]
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <rxTryParseFrame+0xee>
 8004f36:	2301      	movs	r3, #1
 8004f38:	e000      	b.n	8004f3c <rxTryParseFrame+0xf0>
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	77fb      	strb	r3, [r7, #31]
 8004f3e:	7ffb      	ldrb	r3, [r7, #31]
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	77fb      	strb	r3, [r7, #31]
 8004f46:	e02c      	b.n	8004fa2 <rxTryParseFrame+0x156>
        }
        else
        {
            out->transfer_kind =
                ((can_id & FLAG_REQUEST_NOT_RESPONSE) != 0) ? CanardTransferKindRequest : CanardTransferKindResponse;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <rxTryParseFrame+0x10a>
 8004f52:	2202      	movs	r2, #2
 8004f54:	e000      	b.n	8004f58 <rxTryParseFrame+0x10c>
 8004f56:	2201      	movs	r2, #1
            out->transfer_kind =
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	725a      	strb	r2, [r3, #9]
            out->port_id             = (CanardPortID) ((can_id >> OFFSET_SERVICE_ID) & CANARD_SERVICE_ID_MAX);
 8004f5c:	69bb      	ldr	r3, [r7, #24]
 8004f5e:	0b9b      	lsrs	r3, r3, #14
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	815a      	strh	r2, [r3, #10]
            out->destination_node_id = (CanardNodeID) ((can_id >> OFFSET_DST_NODE_ID) & CANARD_NODE_ID_MAX);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	09db      	lsrs	r3, r3, #7
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f76:	b2da      	uxtb	r2, r3
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	735a      	strb	r2, [r3, #13]
            // The reserved bit may be unreserved in the future. It may be used to extend the service-ID to 10 bits.
            // Per Specification, source cannot be the same as the destination.
            valid = (0 == (can_id & FLAG_RESERVED_23)) && (out->source_node_id != out->destination_node_id);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d107      	bne.n	8004f96 <rxTryParseFrame+0x14a>
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	7b1a      	ldrb	r2, [r3, #12]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	7b5b      	ldrb	r3, [r3, #13]
 8004f8e:	429a      	cmp	r2, r3
 8004f90:	d001      	beq.n	8004f96 <rxTryParseFrame+0x14a>
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <rxTryParseFrame+0x14c>
 8004f96:	2300      	movs	r3, #0
 8004f98:	77fb      	strb	r3, [r7, #31]
 8004f9a:	7ffb      	ldrb	r3, [r7, #31]
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	77fb      	strb	r3, [r7, #31]
        }

        // Payload parsing.
        out->payload_size = frame->payload_size - 1U;  // Cut off the tail byte.
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	1e5a      	subs	r2, r3, #1
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	615a      	str	r2, [r3, #20]
        out->payload      = frame->payload;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	619a      	str	r2, [r3, #24]

        // Tail byte parsing.
        // Intentional violation of MISRA: pointer arithmetics is required to locate the tail byte. Unavoidable.
        const uint8_t tail     = *(((const uint8_t*) out->payload) + out->payload_size);  // NOSONAR
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	699a      	ldr	r2, [r3, #24]
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	75fb      	strb	r3, [r7, #23]
        out->transfer_id       = tail & CANARD_TRANSFER_ID_MAX;
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	f003 031f 	and.w	r3, r3, #31
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	739a      	strb	r2, [r3, #14]
        out->start_of_transfer = ((tail & TAIL_START_OF_TRANSFER) != 0);
 8004fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8004fd2:	b2db      	uxtb	r3, r3
 8004fd4:	09db      	lsrs	r3, r3, #7
 8004fd6:	b2da      	uxtb	r2, r3
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	73da      	strb	r2, [r3, #15]
        out->end_of_transfer   = ((tail & TAIL_END_OF_TRANSFER) != 0);
 8004fdc:	7dfb      	ldrb	r3, [r7, #23]
 8004fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	bf14      	ite	ne
 8004fe6:	2301      	movne	r3, #1
 8004fe8:	2300      	moveq	r3, #0
 8004fea:	b2da      	uxtb	r2, r3
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	741a      	strb	r2, [r3, #16]
        out->toggle            = ((tail & TAIL_TOGGLE) != 0);
 8004ff0:	7dfb      	ldrb	r3, [r7, #23]
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2da      	uxtb	r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	745a      	strb	r2, [r3, #17]

        // Final validation.
        // Protocol version check: if SOT is set, then the toggle shall also be set.
        valid = valid && ((!out->start_of_transfer) || (INITIAL_TOGGLE_STATE == out->toggle));
 8005004:	7ffb      	ldrb	r3, [r7, #31]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d00c      	beq.n	8005024 <rxTryParseFrame+0x1d8>
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	7bdb      	ldrb	r3, [r3, #15]
 800500e:	f083 0301 	eor.w	r3, r3, #1
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b00      	cmp	r3, #0
 8005016:	d103      	bne.n	8005020 <rxTryParseFrame+0x1d4>
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	7c5b      	ldrb	r3, [r3, #17]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <rxTryParseFrame+0x1d8>
 8005020:	2301      	movs	r3, #1
 8005022:	e000      	b.n	8005026 <rxTryParseFrame+0x1da>
 8005024:	2300      	movs	r3, #0
 8005026:	77fb      	strb	r3, [r7, #31]
 8005028:	7ffb      	ldrb	r3, [r7, #31]
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	77fb      	strb	r3, [r7, #31]
        // Anonymous transfers can be only single-frame transfers.
        valid = valid &&
 8005030:	7ffb      	ldrb	r3, [r7, #31]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d00d      	beq.n	8005052 <rxTryParseFrame+0x206>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	7bdb      	ldrb	r3, [r3, #15]
        valid = valid &&
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <rxTryParseFrame+0x1fa>
                ((out->start_of_transfer && out->end_of_transfer) || (CANARD_NODE_ID_UNSET != out->source_node_id));
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	7c1b      	ldrb	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d103      	bne.n	800504e <rxTryParseFrame+0x202>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	7b1b      	ldrb	r3, [r3, #12]
 800504a:	2bff      	cmp	r3, #255	@ 0xff
 800504c:	d001      	beq.n	8005052 <rxTryParseFrame+0x206>
        valid = valid &&
 800504e:	2301      	movs	r3, #1
 8005050:	e000      	b.n	8005054 <rxTryParseFrame+0x208>
 8005052:	2300      	movs	r3, #0
 8005054:	77fb      	strb	r3, [r7, #31]
 8005056:	7ffb      	ldrb	r3, [r7, #31]
 8005058:	f003 0301 	and.w	r3, r3, #1
 800505c:	77fb      	strb	r3, [r7, #31]
        // Non-last frames of a multi-frame transfer shall utilize the MTU fully.
        valid = valid && ((out->payload_size >= MFT_NON_LAST_FRAME_PAYLOAD_MIN) || out->end_of_transfer);
 800505e:	7ffb      	ldrb	r3, [r7, #31]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <rxTryParseFrame+0x22c>
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	2b06      	cmp	r3, #6
 800506a:	d803      	bhi.n	8005074 <rxTryParseFrame+0x228>
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	7c1b      	ldrb	r3, [r3, #16]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d001      	beq.n	8005078 <rxTryParseFrame+0x22c>
 8005074:	2301      	movs	r3, #1
 8005076:	e000      	b.n	800507a <rxTryParseFrame+0x22e>
 8005078:	2300      	movs	r3, #0
 800507a:	77fb      	strb	r3, [r7, #31]
 800507c:	7ffb      	ldrb	r3, [r7, #31]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	77fb      	strb	r3, [r7, #31]
        // A frame that is a part of a multi-frame transfer cannot be empty (tail byte not included).
        valid = valid && ((out->payload_size > 0) || (out->start_of_transfer && out->end_of_transfer));
 8005084:	7ffb      	ldrb	r3, [r7, #31]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00d      	beq.n	80050a6 <rxTryParseFrame+0x25a>
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	695b      	ldr	r3, [r3, #20]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d107      	bne.n	80050a2 <rxTryParseFrame+0x256>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	7bdb      	ldrb	r3, [r3, #15]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d005      	beq.n	80050a6 <rxTryParseFrame+0x25a>
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	7c1b      	ldrb	r3, [r3, #16]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d001      	beq.n	80050a6 <rxTryParseFrame+0x25a>
 80050a2:	2301      	movs	r3, #1
 80050a4:	e000      	b.n	80050a8 <rxTryParseFrame+0x25c>
 80050a6:	2300      	movs	r3, #0
 80050a8:	77fb      	strb	r3, [r7, #31]
 80050aa:	7ffb      	ldrb	r3, [r7, #31]
 80050ac:	f003 0301 	and.w	r3, r3, #1
 80050b0:	77fb      	strb	r3, [r7, #31]
    }
    return valid;
 80050b2:	7ffb      	ldrb	r3, [r7, #31]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3720      	adds	r7, #32
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	08007d1c 	.word	0x08007d1c
 80050c0:	08008624 	.word	0x08008624
 80050c4:	080078dc 	.word	0x080078dc
 80050c8:	08007d34 	.word	0x08007d34
 80050cc:	08007d64 	.word	0x08007d64
 80050d0:	08007d78 	.word	0x08007d78

080050d4 <rxInitTransferMetadataFromFrame>:

CANARD_PRIVATE void rxInitTransferMetadataFromFrame(const RxFrameModel* const     frame,
                                                    CanardTransferMetadata* const out_transfer)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(frame != NULL);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d106      	bne.n	80050f2 <rxInitTransferMetadataFromFrame+0x1e>
 80050e4:	4b19      	ldr	r3, [pc, #100]	@ (800514c <rxInitTransferMetadataFromFrame+0x78>)
 80050e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005150 <rxInitTransferMetadataFromFrame+0x7c>)
 80050e8:	f44f 7124 	mov.w	r1, #656	@ 0x290
 80050ec:	4819      	ldr	r0, [pc, #100]	@ (8005154 <rxInitTransferMetadataFromFrame+0x80>)
 80050ee:	f001 f847 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <rxInitTransferMetadataFromFrame+0x34>
 80050fa:	4b17      	ldr	r3, [pc, #92]	@ (8005158 <rxInitTransferMetadataFromFrame+0x84>)
 80050fc:	4a14      	ldr	r2, [pc, #80]	@ (8005150 <rxInitTransferMetadataFromFrame+0x7c>)
 80050fe:	f240 2191 	movw	r1, #657	@ 0x291
 8005102:	4814      	ldr	r0, [pc, #80]	@ (8005154 <rxInitTransferMetadataFromFrame+0x80>)
 8005104:	f001 f83c 	bl	8006180 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d106      	bne.n	800511c <rxInitTransferMetadataFromFrame+0x48>
 800510e:	4b13      	ldr	r3, [pc, #76]	@ (800515c <rxInitTransferMetadataFromFrame+0x88>)
 8005110:	4a0f      	ldr	r2, [pc, #60]	@ (8005150 <rxInitTransferMetadataFromFrame+0x7c>)
 8005112:	f240 2192 	movw	r1, #658	@ 0x292
 8005116:	480f      	ldr	r0, [pc, #60]	@ (8005154 <rxInitTransferMetadataFromFrame+0x80>)
 8005118:	f001 f832 	bl	8006180 <__assert_func>
    out_transfer->priority       = frame->priority;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	7a1a      	ldrb	r2, [r3, #8]
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	701a      	strb	r2, [r3, #0]
    out_transfer->transfer_kind  = frame->transfer_kind;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	7a5a      	ldrb	r2, [r3, #9]
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	705a      	strb	r2, [r3, #1]
    out_transfer->port_id        = frame->port_id;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	895a      	ldrh	r2, [r3, #10]
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	805a      	strh	r2, [r3, #2]
    out_transfer->remote_node_id = frame->source_node_id;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	7b1a      	ldrb	r2, [r3, #12]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	711a      	strb	r2, [r3, #4]
    out_transfer->transfer_id    = frame->transfer_id;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	7b9a      	ldrb	r2, [r3, #14]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	715a      	strb	r2, [r3, #5]
}
 8005144:	bf00      	nop
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	08007d1c 	.word	0x08007d1c
 8005150:	080086d0 	.word	0x080086d0
 8005154:	080078dc 	.word	0x080078dc
 8005158:	08007d78 	.word	0x08007d78
 800515c:	08007d98 	.word	0x08007d98

08005160 <rxComputeTransferIDDifference>:

/// The implementation is borrowed from the Specification.
CANARD_PRIVATE uint8_t rxComputeTransferIDDifference(const uint8_t a, const uint8_t b)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	4603      	mov	r3, r0
 8005168:	460a      	mov	r2, r1
 800516a:	71fb      	strb	r3, [r7, #7]
 800516c:	4613      	mov	r3, r2
 800516e:	71bb      	strb	r3, [r7, #6]
    CANARD_ASSERT(a <= CANARD_TRANSFER_ID_MAX);
 8005170:	79fb      	ldrb	r3, [r7, #7]
 8005172:	2b1f      	cmp	r3, #31
 8005174:	d906      	bls.n	8005184 <rxComputeTransferIDDifference+0x24>
 8005176:	4b15      	ldr	r3, [pc, #84]	@ (80051cc <rxComputeTransferIDDifference+0x6c>)
 8005178:	4a15      	ldr	r2, [pc, #84]	@ (80051d0 <rxComputeTransferIDDifference+0x70>)
 800517a:	f240 219d 	movw	r1, #669	@ 0x29d
 800517e:	4815      	ldr	r0, [pc, #84]	@ (80051d4 <rxComputeTransferIDDifference+0x74>)
 8005180:	f000 fffe 	bl	8006180 <__assert_func>
    CANARD_ASSERT(b <= CANARD_TRANSFER_ID_MAX);
 8005184:	79bb      	ldrb	r3, [r7, #6]
 8005186:	2b1f      	cmp	r3, #31
 8005188:	d906      	bls.n	8005198 <rxComputeTransferIDDifference+0x38>
 800518a:	4b13      	ldr	r3, [pc, #76]	@ (80051d8 <rxComputeTransferIDDifference+0x78>)
 800518c:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <rxComputeTransferIDDifference+0x70>)
 800518e:	f240 219e 	movw	r1, #670	@ 0x29e
 8005192:	4810      	ldr	r0, [pc, #64]	@ (80051d4 <rxComputeTransferIDDifference+0x74>)
 8005194:	f000 fff4 	bl	8006180 <__assert_func>
    int16_t diff = (int16_t) (((int16_t) a) - ((int16_t) b));
 8005198:	79fb      	ldrb	r3, [r7, #7]
 800519a:	b29a      	uxth	r2, r3
 800519c:	79bb      	ldrb	r3, [r7, #6]
 800519e:	b29b      	uxth	r3, r3
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	81fb      	strh	r3, [r7, #14]
    if (diff < 0)
 80051a6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	da07      	bge.n	80051be <rxComputeTransferIDDifference+0x5e>
    {
        const uint8_t modulo = 1U << CANARD_TRANSFER_ID_BIT_LENGTH;
 80051ae:	2320      	movs	r3, #32
 80051b0:	737b      	strb	r3, [r7, #13]
        diff                 = (int16_t) (diff + (int16_t) modulo);
 80051b2:	7b7b      	ldrb	r3, [r7, #13]
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	89fb      	ldrh	r3, [r7, #14]
 80051b8:	4413      	add	r3, r2
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	81fb      	strh	r3, [r7, #14]
    }
    return (uint8_t) diff;
 80051be:	89fb      	ldrh	r3, [r7, #14]
 80051c0:	b2db      	uxtb	r3, r3
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	08007db4 	.word	0x08007db4
 80051d0:	0800866c 	.word	0x0800866c
 80051d4:	080078dc 	.word	0x080078dc
 80051d8:	08007dcc 	.word	0x08007dcc

080051dc <rxSessionWritePayload>:
CANARD_PRIVATE int8_t rxSessionWritePayload(CanardInstance* const          ins,
                                            CanardInternalRxSession* const rxs,
                                            const size_t                   extent,
                                            const size_t                   payload_size,
                                            const void* const              payload)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	60f8      	str	r0, [r7, #12]
 80051e4:	60b9      	str	r1, [r7, #8]
 80051e6:	607a      	str	r2, [r7, #4]
 80051e8:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d106      	bne.n	80051fe <rxSessionWritePayload+0x22>
 80051f0:	4b67      	ldr	r3, [pc, #412]	@ (8005390 <rxSessionWritePayload+0x1b4>)
 80051f2:	4a68      	ldr	r2, [pc, #416]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 80051f4:	f240 21ae 	movw	r1, #686	@ 0x2ae
 80051f8:	4867      	ldr	r0, [pc, #412]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 80051fa:	f000 ffc1 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d106      	bne.n	8005212 <rxSessionWritePayload+0x36>
 8005204:	4b65      	ldr	r3, [pc, #404]	@ (800539c <rxSessionWritePayload+0x1c0>)
 8005206:	4a63      	ldr	r2, [pc, #396]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005208:	f240 21af 	movw	r1, #687	@ 0x2af
 800520c:	4862      	ldr	r0, [pc, #392]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 800520e:	f000 ffb7 	bl	8006180 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d109      	bne.n	800522c <rxSessionWritePayload+0x50>
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d006      	beq.n	800522c <rxSessionWritePayload+0x50>
 800521e:	4b60      	ldr	r3, [pc, #384]	@ (80053a0 <rxSessionWritePayload+0x1c4>)
 8005220:	4a5c      	ldr	r2, [pc, #368]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005222:	f44f 712c 	mov.w	r1, #688	@ 0x2b0
 8005226:	485c      	ldr	r0, [pc, #368]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 8005228:	f000 ffaa 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= extent);  // This invariant is enforced by the subscription logic.
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	687a      	ldr	r2, [r7, #4]
 8005232:	429a      	cmp	r2, r3
 8005234:	d206      	bcs.n	8005244 <rxSessionWritePayload+0x68>
 8005236:	4b5b      	ldr	r3, [pc, #364]	@ (80053a4 <rxSessionWritePayload+0x1c8>)
 8005238:	4a56      	ldr	r2, [pc, #344]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 800523a:	f240 21b1 	movw	r1, #689	@ 0x2b1
 800523e:	4856      	ldr	r0, [pc, #344]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 8005240:	f000 ff9e 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs->payload_size <= rxs->total_payload_size);
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	68da      	ldr	r2, [r3, #12]
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	429a      	cmp	r2, r3
 800524e:	d906      	bls.n	800525e <rxSessionWritePayload+0x82>
 8005250:	4b55      	ldr	r3, [pc, #340]	@ (80053a8 <rxSessionWritePayload+0x1cc>)
 8005252:	4a50      	ldr	r2, [pc, #320]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005254:	f240 21b2 	movw	r1, #690	@ 0x2b2
 8005258:	484f      	ldr	r0, [pc, #316]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 800525a:	f000 ff91 	bl	8006180 <__assert_func>

    rxs->total_payload_size += payload_size;
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	689a      	ldr	r2, [r3, #8]
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	441a      	add	r2, r3
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	609a      	str	r2, [r3, #8]

    // Allocate the payload lazily, as late as possible.
    if ((NULL == rxs->payload) && (extent > 0U))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d115      	bne.n	800529e <rxSessionWritePayload+0xc2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d012      	beq.n	800529e <rxSessionWritePayload+0xc2>
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8005278:	68bb      	ldr	r3, [r7, #8]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d006      	beq.n	800528e <rxSessionWritePayload+0xb2>
 8005280:	4b4a      	ldr	r3, [pc, #296]	@ (80053ac <rxSessionWritePayload+0x1d0>)
 8005282:	4a44      	ldr	r2, [pc, #272]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005284:	f240 21b9 	movw	r1, #697	@ 0x2b9
 8005288:	4843      	ldr	r0, [pc, #268]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 800528a:	f000 ff79 	bl	8006180 <__assert_func>
        rxs->payload = ins->memory_allocate(ins, extent);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	689b      	ldr	r3, [r3, #8]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	4798      	blx	r3
 8005298:	4602      	mov	r2, r0
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	611a      	str	r2, [r3, #16]
    }

    int8_t out = 0;
 800529e:	2300      	movs	r3, #0
 80052a0:	75fb      	strb	r3, [r7, #23]
    if (rxs->payload != NULL)
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d04e      	beq.n	8005348 <rxSessionWritePayload+0x16c>
    {
        // Copy the payload into the contiguous buffer. Apply the implicit truncation rule if necessary.
        size_t bytes_to_copy = payload_size;
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	613b      	str	r3, [r7, #16]
        if ((rxs->payload_size + bytes_to_copy) > extent)
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	68da      	ldr	r2, [r3, #12]
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	4413      	add	r3, r2
 80052b6:	687a      	ldr	r2, [r7, #4]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d229      	bcs.n	8005310 <rxSessionWritePayload+0x134>
        {
            CANARD_ASSERT(rxs->payload_size <= extent);
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	687a      	ldr	r2, [r7, #4]
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d206      	bcs.n	80052d4 <rxSessionWritePayload+0xf8>
 80052c6:	4b37      	ldr	r3, [pc, #220]	@ (80053a4 <rxSessionWritePayload+0x1c8>)
 80052c8:	4a32      	ldr	r2, [pc, #200]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 80052ca:	f44f 7131 	mov.w	r1, #708	@ 0x2c4
 80052ce:	4832      	ldr	r0, [pc, #200]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 80052d0:	f000 ff56 	bl	8006180 <__assert_func>
            bytes_to_copy = extent - rxs->payload_size;
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	613b      	str	r3, [r7, #16]
            CANARD_ASSERT((rxs->payload_size + bytes_to_copy) == extent);
 80052de:	68bb      	ldr	r3, [r7, #8]
 80052e0:	68da      	ldr	r2, [r3, #12]
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4413      	add	r3, r2
 80052e6:	687a      	ldr	r2, [r7, #4]
 80052e8:	429a      	cmp	r2, r3
 80052ea:	d006      	beq.n	80052fa <rxSessionWritePayload+0x11e>
 80052ec:	4b30      	ldr	r3, [pc, #192]	@ (80053b0 <rxSessionWritePayload+0x1d4>)
 80052ee:	4a29      	ldr	r2, [pc, #164]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 80052f0:	f240 21c6 	movw	r1, #710	@ 0x2c6
 80052f4:	4828      	ldr	r0, [pc, #160]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 80052f6:	f000 ff43 	bl	8006180 <__assert_func>
            CANARD_ASSERT(bytes_to_copy < payload_size);
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	429a      	cmp	r2, r3
 8005300:	d306      	bcc.n	8005310 <rxSessionWritePayload+0x134>
 8005302:	4b2c      	ldr	r3, [pc, #176]	@ (80053b4 <rxSessionWritePayload+0x1d8>)
 8005304:	4a23      	ldr	r2, [pc, #140]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005306:	f240 21c7 	movw	r1, #711	@ 0x2c7
 800530a:	4823      	ldr	r0, [pc, #140]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 800530c:	f000 ff38 	bl	8006180 <__assert_func>
        // the other one is the search of the matching subscription state.
        // Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
        // Intentional violation of MISRA: indexing on a pointer. This is done to avoid pointer arithmetics.
        // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memcpy(&rxs->payload[rxs->payload_size], payload, bytes_to_copy);  // NOLINT NOSONAR
 8005310:	68bb      	ldr	r3, [r7, #8]
 8005312:	691a      	ldr	r2, [r3, #16]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	68db      	ldr	r3, [r3, #12]
 8005318:	4413      	add	r3, r2
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	6a39      	ldr	r1, [r7, #32]
 800531e:	4618      	mov	r0, r3
 8005320:	f001 f9c7 	bl	80066b2 <memcpy>
        rxs->payload_size += bytes_to_copy;
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	68da      	ldr	r2, [r3, #12]
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	441a      	add	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	60da      	str	r2, [r3, #12]
        CANARD_ASSERT(rxs->payload_size <= extent);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	429a      	cmp	r2, r3
 8005338:	d219      	bcs.n	800536e <rxSessionWritePayload+0x192>
 800533a:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <rxSessionWritePayload+0x1c8>)
 800533c:	4a15      	ldr	r2, [pc, #84]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 800533e:	f240 21d1 	movw	r1, #721	@ 0x2d1
 8005342:	4815      	ldr	r0, [pc, #84]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 8005344:	f000 ff1c 	bl	8006180 <__assert_func>
    }
    else
    {
        CANARD_ASSERT(rxs->payload_size == 0);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d006      	beq.n	800535e <rxSessionWritePayload+0x182>
 8005350:	4b16      	ldr	r3, [pc, #88]	@ (80053ac <rxSessionWritePayload+0x1d0>)
 8005352:	4a10      	ldr	r2, [pc, #64]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 8005354:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8005358:	480f      	ldr	r0, [pc, #60]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 800535a:	f000 ff11 	bl	8006180 <__assert_func>
        out = (extent > 0U) ? -CANARD_ERROR_OUT_OF_MEMORY : 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <rxSessionWritePayload+0x18e>
 8005364:	f06f 0302 	mvn.w	r3, #2
 8005368:	e000      	b.n	800536c <rxSessionWritePayload+0x190>
 800536a:	2300      	movs	r3, #0
 800536c:	75fb      	strb	r3, [r7, #23]
    }
    CANARD_ASSERT(out <= 0);
 800536e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005372:	2b00      	cmp	r3, #0
 8005374:	dd06      	ble.n	8005384 <rxSessionWritePayload+0x1a8>
 8005376:	4b10      	ldr	r3, [pc, #64]	@ (80053b8 <rxSessionWritePayload+0x1dc>)
 8005378:	4a06      	ldr	r2, [pc, #24]	@ (8005394 <rxSessionWritePayload+0x1b8>)
 800537a:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 800537e:	4806      	ldr	r0, [pc, #24]	@ (8005398 <rxSessionWritePayload+0x1bc>)
 8005380:	f000 fefe 	bl	8006180 <__assert_func>
    return out;
 8005384:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005388:	4618      	mov	r0, r3
 800538a:	3718      	adds	r7, #24
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	08007a88 	.word	0x08007a88
 8005394:	080086a4 	.word	0x080086a4
 8005398:	080078dc 	.word	0x080078dc
 800539c:	08007de4 	.word	0x08007de4
 80053a0:	08007980 	.word	0x08007980
 80053a4:	08007df8 	.word	0x08007df8
 80053a8:	08007e14 	.word	0x08007e14
 80053ac:	08007e44 	.word	0x08007e44
 80053b0:	08007e5c 	.word	0x08007e5c
 80053b4:	08007e8c 	.word	0x08007e8c
 80053b8:	08007eac 	.word	0x08007eac

080053bc <rxSessionRestart>:

CANARD_PRIVATE void rxSessionRestart(CanardInstance* const ins, CanardInternalRxSession* const rxs)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	b082      	sub	sp, #8
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d106      	bne.n	80053da <rxSessionRestart+0x1e>
 80053cc:	4b1a      	ldr	r3, [pc, #104]	@ (8005438 <rxSessionRestart+0x7c>)
 80053ce:	4a1b      	ldr	r2, [pc, #108]	@ (800543c <rxSessionRestart+0x80>)
 80053d0:	f240 21de 	movw	r1, #734	@ 0x2de
 80053d4:	481a      	ldr	r0, [pc, #104]	@ (8005440 <rxSessionRestart+0x84>)
 80053d6:	f000 fed3 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d106      	bne.n	80053ee <rxSessionRestart+0x32>
 80053e0:	4b18      	ldr	r3, [pc, #96]	@ (8005444 <rxSessionRestart+0x88>)
 80053e2:	4a16      	ldr	r2, [pc, #88]	@ (800543c <rxSessionRestart+0x80>)
 80053e4:	f240 21df 	movw	r1, #735	@ 0x2df
 80053e8:	4815      	ldr	r0, [pc, #84]	@ (8005440 <rxSessionRestart+0x84>)
 80053ea:	f000 fec9 	bl	8006180 <__assert_func>
    ins->memory_free(ins, rxs->payload);  // May be NULL, which is OK.
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68db      	ldr	r3, [r3, #12]
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	6912      	ldr	r2, [r2, #16]
 80053f6:	4611      	mov	r1, r2
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	4798      	blx	r3
    rxs->total_payload_size = 0U;
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	2200      	movs	r2, #0
 8005400:	609a      	str	r2, [r3, #8]
    rxs->payload_size       = 0U;
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	2200      	movs	r2, #0
 8005406:	60da      	str	r2, [r3, #12]
    rxs->payload            = NULL;
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	2200      	movs	r2, #0
 800540c:	611a      	str	r2, [r3, #16]
    rxs->calculated_crc     = CRC_INITIAL;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005414:	829a      	strh	r2, [r3, #20]
    rxs->transfer_id        = (CanardTransferID) ((rxs->transfer_id + 1U) & CANARD_TRANSFER_ID_MAX);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	7d9b      	ldrb	r3, [r3, #22]
 800541a:	3301      	adds	r3, #1
 800541c:	b2db      	uxtb	r3, r3
 800541e:	f003 031f 	and.w	r3, r3, #31
 8005422:	b2da      	uxtb	r2, r3
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	759a      	strb	r2, [r3, #22]
    // The transport index is retained.
    rxs->toggle = INITIAL_TOGGLE_STATE;
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2201      	movs	r2, #1
 800542c:	761a      	strb	r2, [r3, #24]
}
 800542e:	bf00      	nop
 8005430:	3708      	adds	r7, #8
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	08007a88 	.word	0x08007a88
 800543c:	080086bc 	.word	0x080086bc
 8005440:	080078dc 	.word	0x080078dc
 8005444:	08007de4 	.word	0x08007de4

08005448 <rxSessionAcceptFrame>:
CANARD_PRIVATE int8_t rxSessionAcceptFrame(CanardInstance* const          ins,
                                           CanardInternalRxSession* const rxs,
                                           const RxFrameModel* const      frame,
                                           const size_t                   extent,
                                           CanardRxTransfer* const        out_transfer)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	60b9      	str	r1, [r7, #8]
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(ins != NULL);
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d106      	bne.n	800546a <rxSessionAcceptFrame+0x22>
 800545c:	4b81      	ldr	r3, [pc, #516]	@ (8005664 <rxSessionAcceptFrame+0x21c>)
 800545e:	4a82      	ldr	r2, [pc, #520]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 8005460:	f44f 713c 	mov.w	r1, #752	@ 0x2f0
 8005464:	4881      	ldr	r0, [pc, #516]	@ (800566c <rxSessionAcceptFrame+0x224>)
 8005466:	f000 fe8b 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <rxSessionAcceptFrame+0x36>
 8005470:	4b7f      	ldr	r3, [pc, #508]	@ (8005670 <rxSessionAcceptFrame+0x228>)
 8005472:	4a7d      	ldr	r2, [pc, #500]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 8005474:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8005478:	487c      	ldr	r0, [pc, #496]	@ (800566c <rxSessionAcceptFrame+0x224>)
 800547a:	f000 fe81 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d106      	bne.n	8005492 <rxSessionAcceptFrame+0x4a>
 8005484:	4b7b      	ldr	r3, [pc, #492]	@ (8005674 <rxSessionAcceptFrame+0x22c>)
 8005486:	4a78      	ldr	r2, [pc, #480]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 8005488:	f240 21f2 	movw	r1, #754	@ 0x2f2
 800548c:	4877      	ldr	r0, [pc, #476]	@ (800566c <rxSessionAcceptFrame+0x224>)
 800548e:	f000 fe77 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d106      	bne.n	80054a8 <rxSessionAcceptFrame+0x60>
 800549a:	4b77      	ldr	r3, [pc, #476]	@ (8005678 <rxSessionAcceptFrame+0x230>)
 800549c:	4a72      	ldr	r2, [pc, #456]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 800549e:	f240 21f3 	movw	r1, #755	@ 0x2f3
 80054a2:	4872      	ldr	r0, [pc, #456]	@ (800566c <rxSessionAcceptFrame+0x224>)
 80054a4:	f000 fe6c 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	7b9b      	ldrb	r3, [r3, #14]
 80054ac:	2b1f      	cmp	r3, #31
 80054ae:	d906      	bls.n	80054be <rxSessionAcceptFrame+0x76>
 80054b0:	4b72      	ldr	r3, [pc, #456]	@ (800567c <rxSessionAcceptFrame+0x234>)
 80054b2:	4a6d      	ldr	r2, [pc, #436]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 80054b4:	f44f 713d 	mov.w	r1, #756	@ 0x2f4
 80054b8:	486c      	ldr	r0, [pc, #432]	@ (800566c <rxSessionAcceptFrame+0x224>)
 80054ba:	f000 fe61 	bl	8006180 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d106      	bne.n	80054d2 <rxSessionAcceptFrame+0x8a>
 80054c4:	4b6e      	ldr	r3, [pc, #440]	@ (8005680 <rxSessionAcceptFrame+0x238>)
 80054c6:	4a68      	ldr	r2, [pc, #416]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 80054c8:	f240 21f5 	movw	r1, #757	@ 0x2f5
 80054cc:	4867      	ldr	r0, [pc, #412]	@ (800566c <rxSessionAcceptFrame+0x224>)
 80054ce:	f000 fe57 	bl	8006180 <__assert_func>

    if (frame->start_of_transfer)  // The transfer timestamp is the timestamp of its first frame.
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	7bdb      	ldrb	r3, [r3, #15]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d005      	beq.n	80054e6 <rxSessionAcceptFrame+0x9e>
    {
        rxs->transfer_timestamp_usec = frame->timestamp_usec;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	68b9      	ldr	r1, [r7, #8]
 80054e2:	e9c1 2300 	strd	r2, r3, [r1]
    }

    const bool single_frame = frame->start_of_transfer && frame->end_of_transfer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	7bdb      	ldrb	r3, [r3, #15]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <rxSessionAcceptFrame+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	7c1b      	ldrb	r3, [r3, #16]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d001      	beq.n	80054fa <rxSessionAcceptFrame+0xb2>
 80054f6:	2301      	movs	r3, #1
 80054f8:	e000      	b.n	80054fc <rxSessionAcceptFrame+0xb4>
 80054fa:	2300      	movs	r3, #0
 80054fc:	75bb      	strb	r3, [r7, #22]
 80054fe:	7dbb      	ldrb	r3, [r7, #22]
 8005500:	f003 0301 	and.w	r3, r3, #1
 8005504:	75bb      	strb	r3, [r7, #22]
    if (!single_frame)
 8005506:	7dbb      	ldrb	r3, [r7, #22]
 8005508:	f083 0301 	eor.w	r3, r3, #1
 800550c:	b2db      	uxtb	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00c      	beq.n	800552c <rxSessionAcceptFrame+0xe4>
    {
        // Update the CRC. Observe that the implicit truncation rule may apply here: the payload may be
        // truncated, but its CRC is validated always anyway.
        rxs->calculated_crc = crcAdd(rxs->calculated_crc, frame->payload_size, frame->payload);
 8005512:	68bb      	ldr	r3, [r7, #8]
 8005514:	8a98      	ldrh	r0, [r3, #20]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6959      	ldr	r1, [r3, #20]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	461a      	mov	r2, r3
 8005520:	f7fe fed6 	bl	80042d0 <crcAdd>
 8005524:	4603      	mov	r3, r0
 8005526:	461a      	mov	r2, r3
 8005528:	68bb      	ldr	r3, [r7, #8]
 800552a:	829a      	strh	r2, [r3, #20]
    }

    int8_t out = rxSessionWritePayload(ins, rxs, extent, frame->payload_size, frame->payload);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	9300      	str	r3, [sp, #0]
 8005536:	4613      	mov	r3, r2
 8005538:	683a      	ldr	r2, [r7, #0]
 800553a:	68b9      	ldr	r1, [r7, #8]
 800553c:	68f8      	ldr	r0, [r7, #12]
 800553e:	f7ff fe4d 	bl	80051dc <rxSessionWritePayload>
 8005542:	4603      	mov	r3, r0
 8005544:	75fb      	strb	r3, [r7, #23]
    if (out < 0)
 8005546:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800554a:	2b00      	cmp	r3, #0
 800554c:	da10      	bge.n	8005570 <rxSessionAcceptFrame+0x128>
    {
        CANARD_ASSERT(-CANARD_ERROR_OUT_OF_MEMORY == out);
 800554e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005552:	f113 0f03 	cmn.w	r3, #3
 8005556:	d006      	beq.n	8005566 <rxSessionAcceptFrame+0x11e>
 8005558:	4b4a      	ldr	r3, [pc, #296]	@ (8005684 <rxSessionAcceptFrame+0x23c>)
 800555a:	4a43      	ldr	r2, [pc, #268]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 800555c:	f240 3107 	movw	r1, #775	@ 0x307
 8005560:	4842      	ldr	r0, [pc, #264]	@ (800566c <rxSessionAcceptFrame+0x224>)
 8005562:	f000 fe0d 	bl	8006180 <__assert_func>
        rxSessionRestart(ins, rxs);  // Out-of-memory.
 8005566:	68b9      	ldr	r1, [r7, #8]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	f7ff ff27 	bl	80053bc <rxSessionRestart>
 800556e:	e072      	b.n	8005656 <rxSessionAcceptFrame+0x20e>
    }
    else if (frame->end_of_transfer)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	7c1b      	ldrb	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d05f      	beq.n	8005638 <rxSessionAcceptFrame+0x1f0>
    {
        CANARD_ASSERT(0 == out);
 8005578:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d006      	beq.n	800558e <rxSessionAcceptFrame+0x146>
 8005580:	4b41      	ldr	r3, [pc, #260]	@ (8005688 <rxSessionAcceptFrame+0x240>)
 8005582:	4a39      	ldr	r2, [pc, #228]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 8005584:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8005588:	4838      	ldr	r0, [pc, #224]	@ (800566c <rxSessionAcceptFrame+0x224>)
 800558a:	f000 fdf9 	bl	8006180 <__assert_func>
        if (single_frame || (CRC_RESIDUE == rxs->calculated_crc))
 800558e:	7dbb      	ldrb	r3, [r7, #22]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d103      	bne.n	800559c <rxSessionAcceptFrame+0x154>
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	8a9b      	ldrh	r3, [r3, #20]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d148      	bne.n	800562e <rxSessionAcceptFrame+0x1e6>
        {
            out = 1;  // One transfer received, notify the application.
 800559c:	2301      	movs	r3, #1
 800559e:	75fb      	strb	r3, [r7, #23]
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 80055a0:	6a3b      	ldr	r3, [r7, #32]
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fd95 	bl	80050d4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = rxs->transfer_timestamp_usec;
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = rxs->payload_size;
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	68da      	ldr	r2, [r3, #12]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = rxs->payload;
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	691a      	ldr	r2, [r3, #16]
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	615a      	str	r2, [r3, #20]

            // Cut off the CRC from the payload if it's there -- we don't want to expose it to the user.
            CANARD_ASSERT(rxs->total_payload_size >= rxs->payload_size);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	689a      	ldr	r2, [r3, #8]
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	68db      	ldr	r3, [r3, #12]
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d206      	bcs.n	80055e0 <rxSessionAcceptFrame+0x198>
 80055d2:	4b2e      	ldr	r3, [pc, #184]	@ (800568c <rxSessionAcceptFrame+0x244>)
 80055d4:	4a24      	ldr	r2, [pc, #144]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 80055d6:	f240 3116 	movw	r1, #790	@ 0x316
 80055da:	4824      	ldr	r0, [pc, #144]	@ (800566c <rxSessionAcceptFrame+0x224>)
 80055dc:	f000 fdd0 	bl	8006180 <__assert_func>
            const size_t truncated_amount = rxs->total_payload_size - rxs->payload_size;
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	689a      	ldr	r2, [r3, #8]
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	68db      	ldr	r3, [r3, #12]
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	613b      	str	r3, [r7, #16]
            if ((!single_frame) && (CRC_SIZE_BYTES > truncated_amount))  // Single-frame transfers don't have CRC.
 80055ec:	7dbb      	ldrb	r3, [r7, #22]
 80055ee:	f083 0301 	eor.w	r3, r3, #1
 80055f2:	b2db      	uxtb	r3, r3
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d017      	beq.n	8005628 <rxSessionAcceptFrame+0x1e0>
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d814      	bhi.n	8005628 <rxSessionAcceptFrame+0x1e0>
            {
                CANARD_ASSERT(out_transfer->payload_size >= (CRC_SIZE_BYTES - truncated_amount));
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	691a      	ldr	r2, [r3, #16]
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f1c3 0302 	rsb	r3, r3, #2
 8005608:	429a      	cmp	r2, r3
 800560a:	d206      	bcs.n	800561a <rxSessionAcceptFrame+0x1d2>
 800560c:	4b20      	ldr	r3, [pc, #128]	@ (8005690 <rxSessionAcceptFrame+0x248>)
 800560e:	4a16      	ldr	r2, [pc, #88]	@ (8005668 <rxSessionAcceptFrame+0x220>)
 8005610:	f240 311a 	movw	r1, #794	@ 0x31a
 8005614:	4815      	ldr	r0, [pc, #84]	@ (800566c <rxSessionAcceptFrame+0x224>)
 8005616:	f000 fdb3 	bl	8006180 <__assert_func>
                out_transfer->payload_size -= CRC_SIZE_BYTES - truncated_amount;
 800561a:	6a3b      	ldr	r3, [r7, #32]
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	4413      	add	r3, r2
 8005622:	1e9a      	subs	r2, r3, #2
 8005624:	6a3b      	ldr	r3, [r7, #32]
 8005626:	611a      	str	r2, [r3, #16]
            }

            rxs->payload = NULL;  // Ownership passed over to the application, nullify to prevent freeing.
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	2200      	movs	r2, #0
 800562c:	611a      	str	r2, [r3, #16]
        }
        rxSessionRestart(ins, rxs);  // Successful completion.
 800562e:	68b9      	ldr	r1, [r7, #8]
 8005630:	68f8      	ldr	r0, [r7, #12]
 8005632:	f7ff fec3 	bl	80053bc <rxSessionRestart>
 8005636:	e00e      	b.n	8005656 <rxSessionAcceptFrame+0x20e>
    }
    else
    {
        rxs->toggle = !rxs->toggle;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	7e1b      	ldrb	r3, [r3, #24]
 800563c:	2b00      	cmp	r3, #0
 800563e:	bf14      	ite	ne
 8005640:	2301      	movne	r3, #1
 8005642:	2300      	moveq	r3, #0
 8005644:	b2db      	uxtb	r3, r3
 8005646:	f083 0301 	eor.w	r3, r3, #1
 800564a:	b2db      	uxtb	r3, r3
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	b2da      	uxtb	r2, r3
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	761a      	strb	r2, [r3, #24]
    }
    return out;
 8005656:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800565a:	4618      	mov	r0, r3
 800565c:	3718      	adds	r7, #24
 800565e:	46bd      	mov	sp, r7
 8005660:	bd80      	pop	{r7, pc}
 8005662:	bf00      	nop
 8005664:	08007a88 	.word	0x08007a88
 8005668:	0800868c 	.word	0x0800868c
 800566c:	080078dc 	.word	0x080078dc
 8005670:	08007de4 	.word	0x08007de4
 8005674:	08007d1c 	.word	0x08007d1c
 8005678:	08007d78 	.word	0x08007d78
 800567c:	08007eb8 	.word	0x08007eb8
 8005680:	08007d98 	.word	0x08007d98
 8005684:	08007ee0 	.word	0x08007ee0
 8005688:	08007eec 	.word	0x08007eec
 800568c:	08007ef8 	.word	0x08007ef8
 8005690:	08007f28 	.word	0x08007f28

08005694 <rxSessionSynchronize>:
/// while this is not visible at the application layer, it may delay the transfer arrival.
CANARD_PRIVATE void rxSessionSynchronize(CanardInternalRxSession* const rxs,
                                         const RxFrameModel* const      frame,
                                         const uint8_t                  redundant_iface_index,
                                         const CanardMicrosecond        transfer_id_timeout_usec)
{
 8005694:	b5b0      	push	{r4, r5, r7, lr}
 8005696:	b086      	sub	sp, #24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	4613      	mov	r3, r2
 80056a0:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(rxs != NULL);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d106      	bne.n	80056b6 <rxSessionSynchronize+0x22>
 80056a8:	4b5c      	ldr	r3, [pc, #368]	@ (800581c <rxSessionSynchronize+0x188>)
 80056aa:	4a5d      	ldr	r2, [pc, #372]	@ (8005820 <rxSessionSynchronize+0x18c>)
 80056ac:	f44f 7150 	mov.w	r1, #832	@ 0x340
 80056b0:	485c      	ldr	r0, [pc, #368]	@ (8005824 <rxSessionSynchronize+0x190>)
 80056b2:	f000 fd65 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d106      	bne.n	80056ca <rxSessionSynchronize+0x36>
 80056bc:	4b5a      	ldr	r3, [pc, #360]	@ (8005828 <rxSessionSynchronize+0x194>)
 80056be:	4a58      	ldr	r2, [pc, #352]	@ (8005820 <rxSessionSynchronize+0x18c>)
 80056c0:	f240 3141 	movw	r1, #833	@ 0x341
 80056c4:	4857      	ldr	r0, [pc, #348]	@ (8005824 <rxSessionSynchronize+0x190>)
 80056c6:	f000 fd5b 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	7d9b      	ldrb	r3, [r3, #22]
 80056ce:	2b1f      	cmp	r3, #31
 80056d0:	d906      	bls.n	80056e0 <rxSessionSynchronize+0x4c>
 80056d2:	4b56      	ldr	r3, [pc, #344]	@ (800582c <rxSessionSynchronize+0x198>)
 80056d4:	4a52      	ldr	r2, [pc, #328]	@ (8005820 <rxSessionSynchronize+0x18c>)
 80056d6:	f240 3142 	movw	r1, #834	@ 0x342
 80056da:	4852      	ldr	r0, [pc, #328]	@ (8005824 <rxSessionSynchronize+0x190>)
 80056dc:	f000 fd50 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	7b9b      	ldrb	r3, [r3, #14]
 80056e4:	2b1f      	cmp	r3, #31
 80056e6:	d906      	bls.n	80056f6 <rxSessionSynchronize+0x62>
 80056e8:	4b51      	ldr	r3, [pc, #324]	@ (8005830 <rxSessionSynchronize+0x19c>)
 80056ea:	4a4d      	ldr	r2, [pc, #308]	@ (8005820 <rxSessionSynchronize+0x18c>)
 80056ec:	f240 3143 	movw	r1, #835	@ 0x343
 80056f0:	484c      	ldr	r0, [pc, #304]	@ (8005824 <rxSessionSynchronize+0x190>)
 80056f2:	f000 fd45 	bl	8006180 <__assert_func>

    const bool same_transport = rxs->redundant_iface_index == redundant_iface_index;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	7ddb      	ldrb	r3, [r3, #23]
 80056fa:	79fa      	ldrb	r2, [r7, #7]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	bf0c      	ite	eq
 8005700:	2301      	moveq	r3, #1
 8005702:	2300      	movne	r3, #0
 8005704:	75fb      	strb	r3, [r7, #23]
    // Examples: rxComputeTransferIDDifference(2, 3)==31
    //           rxComputeTransferIDDifference(2, 2)==0
    //           rxComputeTransferIDDifference(2, 1)==1
    const bool tid_match = rxs->transfer_id == frame->transfer_id;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	7d9a      	ldrb	r2, [r3, #22]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	7b9b      	ldrb	r3, [r3, #14]
 800570e:	429a      	cmp	r2, r3
 8005710:	bf0c      	ite	eq
 8005712:	2301      	moveq	r3, #1
 8005714:	2300      	movne	r3, #0
 8005716:	75bb      	strb	r3, [r7, #22]
    const bool tid_new   = rxComputeTransferIDDifference(rxs->transfer_id, frame->transfer_id) > 1;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	7d9a      	ldrb	r2, [r3, #22]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	7b9b      	ldrb	r3, [r3, #14]
 8005720:	4619      	mov	r1, r3
 8005722:	4610      	mov	r0, r2
 8005724:	f7ff fd1c 	bl	8005160 <rxComputeTransferIDDifference>
 8005728:	4603      	mov	r3, r0
 800572a:	2b01      	cmp	r3, #1
 800572c:	bf8c      	ite	hi
 800572e:	2301      	movhi	r3, #1
 8005730:	2300      	movls	r3, #0
 8005732:	757b      	strb	r3, [r7, #21]
    // The transfer ID timeout is measured relative to the timestamp of the last start-of-transfer frame.
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573a:	68f9      	ldr	r1, [r7, #12]
 800573c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005740:	4290      	cmp	r0, r2
 8005742:	eb71 0303 	sbcs.w	r3, r1, r3
 8005746:	d20f      	bcs.n	8005768 <rxSessionSynchronize+0xd4>
                             ((frame->timestamp_usec - rxs->transfer_timestamp_usec) > transfer_id_timeout_usec);
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	1a84      	subs	r4, r0, r2
 8005756:	eb61 0503 	sbc.w	r5, r1, r3
    const bool tid_timeout = (frame->timestamp_usec > rxs->transfer_timestamp_usec) &&
 800575a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800575e:	42a2      	cmp	r2, r4
 8005760:	41ab      	sbcs	r3, r5
 8005762:	d201      	bcs.n	8005768 <rxSessionSynchronize+0xd4>
 8005764:	2301      	movs	r3, #1
 8005766:	e000      	b.n	800576a <rxSessionSynchronize+0xd6>
 8005768:	2300      	movs	r3, #0
 800576a:	753b      	strb	r3, [r7, #20]
 800576c:	7d3b      	ldrb	r3, [r7, #20]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	753b      	strb	r3, [r7, #20]
    // The total payload size is zero when a new transfer reassembling has not been started yet, hence the idle.
    const bool idle = 0U == rxs->total_payload_size;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf0c      	ite	eq
 800577c:	2301      	moveq	r3, #1
 800577e:	2300      	movne	r3, #0
 8005780:	74fb      	strb	r3, [r7, #19]

    const bool restartable = (same_transport && tid_new) ||      //
                             (same_transport && tid_timeout) ||  //
                             (tid_timeout && tid_new) ||         //
 8005782:	7dfb      	ldrb	r3, [r7, #23]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <rxSessionSynchronize+0xfa>
    const bool restartable = (same_transport && tid_new) ||      //
 8005788:	7d7b      	ldrb	r3, [r7, #21]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d114      	bne.n	80057b8 <rxSessionSynchronize+0x124>
 800578e:	7dfb      	ldrb	r3, [r7, #23]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <rxSessionSynchronize+0x106>
                             (same_transport && tid_timeout) ||  //
 8005794:	7d3b      	ldrb	r3, [r7, #20]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d10e      	bne.n	80057b8 <rxSessionSynchronize+0x124>
 800579a:	7d3b      	ldrb	r3, [r7, #20]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d002      	beq.n	80057a6 <rxSessionSynchronize+0x112>
                             (tid_timeout && tid_new) ||         //
 80057a0:	7d7b      	ldrb	r3, [r7, #21]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d108      	bne.n	80057b8 <rxSessionSynchronize+0x124>
 80057a6:	7d3b      	ldrb	r3, [r7, #20]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d007      	beq.n	80057bc <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_match && idle);
 80057ac:	7dbb      	ldrb	r3, [r7, #22]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d004      	beq.n	80057bc <rxSessionSynchronize+0x128>
 80057b2:	7cfb      	ldrb	r3, [r7, #19]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d001      	beq.n	80057bc <rxSessionSynchronize+0x128>
                             (tid_timeout && tid_new) ||         //
 80057b8:	2301      	movs	r3, #1
 80057ba:	e000      	b.n	80057be <rxSessionSynchronize+0x12a>
 80057bc:	2300      	movs	r3, #0
    const bool restartable = (same_transport && tid_new) ||      //
 80057be:	74bb      	strb	r3, [r7, #18]
 80057c0:	7cbb      	ldrb	r3, [r7, #18]
 80057c2:	f003 0301 	and.w	r3, r3, #1
 80057c6:	74bb      	strb	r3, [r7, #18]
    // Restarting the transfer reassembly only makes sense if the new frame is a start of transfer.
    // Otherwise, the new transfer would be impossible to reassemble anyway since the first frame is lost.
    if (frame->start_of_transfer && restartable)
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	7bdb      	ldrb	r3, [r3, #15]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d021      	beq.n	8005814 <rxSessionSynchronize+0x180>
 80057d0:	7cbb      	ldrb	r3, [r7, #18]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d01e      	beq.n	8005814 <rxSessionSynchronize+0x180>
    {
        CANARD_ASSERT(frame->start_of_transfer);
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	7bdb      	ldrb	r3, [r3, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <rxSessionSynchronize+0x158>
 80057de:	4b15      	ldr	r3, [pc, #84]	@ (8005834 <rxSessionSynchronize+0x1a0>)
 80057e0:	4a0f      	ldr	r2, [pc, #60]	@ (8005820 <rxSessionSynchronize+0x18c>)
 80057e2:	f240 3159 	movw	r1, #857	@ 0x359
 80057e6:	480f      	ldr	r0, [pc, #60]	@ (8005824 <rxSessionSynchronize+0x190>)
 80057e8:	f000 fcca 	bl	8006180 <__assert_func>
        rxs->total_payload_size    = 0U;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2200      	movs	r2, #0
 80057f0:	609a      	str	r2, [r3, #8]
        rxs->payload_size          = 0U;  // The buffer is not released because we still need it.
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	2200      	movs	r2, #0
 80057f6:	60da      	str	r2, [r3, #12]
        rxs->calculated_crc        = CRC_INITIAL;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80057fe:	829a      	strh	r2, [r3, #20]
        rxs->transfer_id           = frame->transfer_id;
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	7b9a      	ldrb	r2, [r3, #14]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	759a      	strb	r2, [r3, #22]
        rxs->toggle                = INITIAL_TOGGLE_STATE;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	2201      	movs	r2, #1
 800580c:	761a      	strb	r2, [r3, #24]
        rxs->redundant_iface_index = redundant_iface_index;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	79fa      	ldrb	r2, [r7, #7]
 8005812:	75da      	strb	r2, [r3, #23]
    }
}
 8005814:	bf00      	nop
 8005816:	3718      	adds	r7, #24
 8005818:	46bd      	mov	sp, r7
 800581a:	bdb0      	pop	{r4, r5, r7, pc}
 800581c:	08007de4 	.word	0x08007de4
 8005820:	08008654 	.word	0x08008654
 8005824:	080078dc 	.word	0x080078dc
 8005828:	08007d1c 	.word	0x08007d1c
 800582c:	08007f60 	.word	0x08007f60
 8005830:	08007eb8 	.word	0x08007eb8
 8005834:	08007f88 	.word	0x08007f88

08005838 <rxSessionUpdate>:
                                      const RxFrameModel* const      frame,
                                      const uint8_t                  redundant_iface_index,
                                      const CanardMicrosecond        transfer_id_timeout_usec,
                                      const size_t                   extent,
                                      CanardRxTransfer* const        out_transfer)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af02      	add	r7, sp, #8
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d106      	bne.n	800585a <rxSessionUpdate+0x22>
 800584c:	4b48      	ldr	r3, [pc, #288]	@ (8005970 <rxSessionUpdate+0x138>)
 800584e:	4a49      	ldr	r2, [pc, #292]	@ (8005974 <rxSessionUpdate+0x13c>)
 8005850:	f240 3172 	movw	r1, #882	@ 0x372
 8005854:	4848      	ldr	r0, [pc, #288]	@ (8005978 <rxSessionUpdate+0x140>)
 8005856:	f000 fc93 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs != NULL);
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d106      	bne.n	800586e <rxSessionUpdate+0x36>
 8005860:	4b46      	ldr	r3, [pc, #280]	@ (800597c <rxSessionUpdate+0x144>)
 8005862:	4a44      	ldr	r2, [pc, #272]	@ (8005974 <rxSessionUpdate+0x13c>)
 8005864:	f240 3173 	movw	r1, #883	@ 0x373
 8005868:	4843      	ldr	r0, [pc, #268]	@ (8005978 <rxSessionUpdate+0x140>)
 800586a:	f000 fc89 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <rxSessionUpdate+0x4a>
 8005874:	4b42      	ldr	r3, [pc, #264]	@ (8005980 <rxSessionUpdate+0x148>)
 8005876:	4a3f      	ldr	r2, [pc, #252]	@ (8005974 <rxSessionUpdate+0x13c>)
 8005878:	f44f 715d 	mov.w	r1, #884	@ 0x374
 800587c:	483e      	ldr	r0, [pc, #248]	@ (8005978 <rxSessionUpdate+0x140>)
 800587e:	f000 fc7f 	bl	8006180 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8005882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005884:	2b00      	cmp	r3, #0
 8005886:	d106      	bne.n	8005896 <rxSessionUpdate+0x5e>
 8005888:	4b3e      	ldr	r3, [pc, #248]	@ (8005984 <rxSessionUpdate+0x14c>)
 800588a:	4a3a      	ldr	r2, [pc, #232]	@ (8005974 <rxSessionUpdate+0x13c>)
 800588c:	f240 3175 	movw	r1, #885	@ 0x375
 8005890:	4839      	ldr	r0, [pc, #228]	@ (8005978 <rxSessionUpdate+0x140>)
 8005892:	f000 fc75 	bl	8006180 <__assert_func>
    CANARD_ASSERT(rxs->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	7d9b      	ldrb	r3, [r3, #22]
 800589a:	2b1f      	cmp	r3, #31
 800589c:	d906      	bls.n	80058ac <rxSessionUpdate+0x74>
 800589e:	4b3a      	ldr	r3, [pc, #232]	@ (8005988 <rxSessionUpdate+0x150>)
 80058a0:	4a34      	ldr	r2, [pc, #208]	@ (8005974 <rxSessionUpdate+0x13c>)
 80058a2:	f240 3176 	movw	r1, #886	@ 0x376
 80058a6:	4834      	ldr	r0, [pc, #208]	@ (8005978 <rxSessionUpdate+0x140>)
 80058a8:	f000 fc6a 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	7b9b      	ldrb	r3, [r3, #14]
 80058b0:	2b1f      	cmp	r3, #31
 80058b2:	d906      	bls.n	80058c2 <rxSessionUpdate+0x8a>
 80058b4:	4b35      	ldr	r3, [pc, #212]	@ (800598c <rxSessionUpdate+0x154>)
 80058b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005974 <rxSessionUpdate+0x13c>)
 80058b8:	f240 3177 	movw	r1, #887	@ 0x377
 80058bc:	482e      	ldr	r0, [pc, #184]	@ (8005978 <rxSessionUpdate+0x140>)
 80058be:	f000 fc5f 	bl	8006180 <__assert_func>
    rxSessionSynchronize(rxs, frame, redundant_iface_index, transfer_id_timeout_usec);
 80058c2:	78f9      	ldrb	r1, [r7, #3]
 80058c4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058c8:	e9cd 2300 	strd	r2, r3, [sp]
 80058cc:	460a      	mov	r2, r1
 80058ce:	6879      	ldr	r1, [r7, #4]
 80058d0:	68b8      	ldr	r0, [r7, #8]
 80058d2:	f7ff fedf 	bl	8005694 <rxSessionSynchronize>
    int8_t out = 0;
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
    // 3. The CRC of said multi-frame transfer happens to yield the correct residue when applied to the fragment
    //    of the payload contained in the last frame of the transfer (a CRC collision is in effect).
    // 4. The last frame of the multi-frame transfer is erroneously accepted even though it is malformed.
    // The correct_start check eliminates this failure mode by ensuring that the first frame is observed.
    // See https://github.com/OpenCyphal/libcanard/issues/189.
    const bool correct_iface  = (rxs->redundant_iface_index == redundant_iface_index);
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	7ddb      	ldrb	r3, [r3, #23]
 80058de:	78fa      	ldrb	r2, [r7, #3]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	bf0c      	ite	eq
 80058e4:	2301      	moveq	r3, #1
 80058e6:	2300      	movne	r3, #0
 80058e8:	75bb      	strb	r3, [r7, #22]
    const bool correct_toggle = (frame->toggle == rxs->toggle);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	7c5a      	ldrb	r2, [r3, #17]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	7e1b      	ldrb	r3, [r3, #24]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	bf0c      	ite	eq
 80058f6:	2301      	moveq	r3, #1
 80058f8:	2300      	movne	r3, #0
 80058fa:	757b      	strb	r3, [r7, #21]
    const bool correct_tid    = (frame->transfer_id == rxs->transfer_id);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	7b9a      	ldrb	r2, [r3, #14]
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	7d9b      	ldrb	r3, [r3, #22]
 8005904:	429a      	cmp	r2, r3
 8005906:	bf0c      	ite	eq
 8005908:	2301      	moveq	r3, #1
 800590a:	2300      	movne	r3, #0
 800590c:	753b      	strb	r3, [r7, #20]
    const bool correct_start  = frame->start_of_transfer  //
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	7bdb      	ldrb	r3, [r3, #15]
                                    ? (0 == rxs->total_payload_size)
                                    : (rxs->total_payload_size > 0);
 8005912:	2b00      	cmp	r3, #0
 8005914:	d007      	beq.n	8005926 <rxSessionUpdate+0xee>
                                    ? (0 == rxs->total_payload_size)
 8005916:	68bb      	ldr	r3, [r7, #8]
 8005918:	689b      	ldr	r3, [r3, #8]
                                    : (rxs->total_payload_size > 0);
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf0c      	ite	eq
 800591e:	2301      	moveq	r3, #1
 8005920:	2300      	movne	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	e006      	b.n	8005934 <rxSessionUpdate+0xfc>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	bf14      	ite	ne
 800592e:	2301      	movne	r3, #1
 8005930:	2300      	moveq	r3, #0
 8005932:	b2db      	uxtb	r3, r3
    const bool correct_start  = frame->start_of_transfer  //
 8005934:	74fb      	strb	r3, [r7, #19]
    if (correct_iface && correct_toggle && correct_tid && correct_start)
 8005936:	7dbb      	ldrb	r3, [r7, #22]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d012      	beq.n	8005962 <rxSessionUpdate+0x12a>
 800593c:	7d7b      	ldrb	r3, [r7, #21]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00f      	beq.n	8005962 <rxSessionUpdate+0x12a>
 8005942:	7d3b      	ldrb	r3, [r7, #20]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00c      	beq.n	8005962 <rxSessionUpdate+0x12a>
 8005948:	7cfb      	ldrb	r3, [r7, #19]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d009      	beq.n	8005962 <rxSessionUpdate+0x12a>
    {
        out = rxSessionAcceptFrame(ins, rxs, frame, extent, out_transfer);
 800594e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005950:	9300      	str	r3, [sp, #0]
 8005952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005954:	687a      	ldr	r2, [r7, #4]
 8005956:	68b9      	ldr	r1, [r7, #8]
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f7ff fd75 	bl	8005448 <rxSessionAcceptFrame>
 800595e:	4603      	mov	r3, r0
 8005960:	75fb      	strb	r3, [r7, #23]
    }
    return out;
 8005962:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3718      	adds	r7, #24
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	08007a88 	.word	0x08007a88
 8005974:	08008644 	.word	0x08008644
 8005978:	080078dc 	.word	0x080078dc
 800597c:	08007de4 	.word	0x08007de4
 8005980:	08007d1c 	.word	0x08007d1c
 8005984:	08007d98 	.word	0x08007d98
 8005988:	08007f60 	.word	0x08007f60
 800598c:	08007eb8 	.word	0x08007eb8

08005990 <rxAcceptFrame>:
CANARD_PRIVATE int8_t rxAcceptFrame(CanardInstance* const       ins,
                                    CanardRxSubscription* const subscription,
                                    const RxFrameModel* const   frame,
                                    const uint8_t               redundant_iface_index,
                                    CanardRxTransfer* const     out_transfer)
{
 8005990:	b5b0      	push	{r4, r5, r7, lr}
 8005992:	b08c      	sub	sp, #48	@ 0x30
 8005994:	af04      	add	r7, sp, #16
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d106      	bne.n	80059b2 <rxAcceptFrame+0x22>
 80059a4:	4b85      	ldr	r3, [pc, #532]	@ (8005bbc <rxAcceptFrame+0x22c>)
 80059a6:	4a86      	ldr	r2, [pc, #536]	@ (8005bc0 <rxAcceptFrame+0x230>)
 80059a8:	f240 3196 	movw	r1, #918	@ 0x396
 80059ac:	4885      	ldr	r0, [pc, #532]	@ (8005bc4 <rxAcceptFrame+0x234>)
 80059ae:	f000 fbe7 	bl	8006180 <__assert_func>
    CANARD_ASSERT(subscription != NULL);
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d106      	bne.n	80059c6 <rxAcceptFrame+0x36>
 80059b8:	4b83      	ldr	r3, [pc, #524]	@ (8005bc8 <rxAcceptFrame+0x238>)
 80059ba:	4a81      	ldr	r2, [pc, #516]	@ (8005bc0 <rxAcceptFrame+0x230>)
 80059bc:	f240 3197 	movw	r1, #919	@ 0x397
 80059c0:	4880      	ldr	r0, [pc, #512]	@ (8005bc4 <rxAcceptFrame+0x234>)
 80059c2:	f000 fbdd 	bl	8006180 <__assert_func>
    CANARD_ASSERT(subscription->port_id == frame->port_id);
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	8b9a      	ldrh	r2, [r3, #28]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	895b      	ldrh	r3, [r3, #10]
 80059ce:	429a      	cmp	r2, r3
 80059d0:	d006      	beq.n	80059e0 <rxAcceptFrame+0x50>
 80059d2:	4b7e      	ldr	r3, [pc, #504]	@ (8005bcc <rxAcceptFrame+0x23c>)
 80059d4:	4a7a      	ldr	r2, [pc, #488]	@ (8005bc0 <rxAcceptFrame+0x230>)
 80059d6:	f44f 7166 	mov.w	r1, #920	@ 0x398
 80059da:	487a      	ldr	r0, [pc, #488]	@ (8005bc4 <rxAcceptFrame+0x234>)
 80059dc:	f000 fbd0 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame != NULL);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d106      	bne.n	80059f4 <rxAcceptFrame+0x64>
 80059e6:	4b7a      	ldr	r3, [pc, #488]	@ (8005bd0 <rxAcceptFrame+0x240>)
 80059e8:	4a75      	ldr	r2, [pc, #468]	@ (8005bc0 <rxAcceptFrame+0x230>)
 80059ea:	f240 3199 	movw	r1, #921	@ 0x399
 80059ee:	4875      	ldr	r0, [pc, #468]	@ (8005bc4 <rxAcceptFrame+0x234>)
 80059f0:	f000 fbc6 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->payload != NULL);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	699b      	ldr	r3, [r3, #24]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d106      	bne.n	8005a0a <rxAcceptFrame+0x7a>
 80059fc:	4b75      	ldr	r3, [pc, #468]	@ (8005bd4 <rxAcceptFrame+0x244>)
 80059fe:	4a70      	ldr	r2, [pc, #448]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005a00:	f240 319a 	movw	r1, #922	@ 0x39a
 8005a04:	486f      	ldr	r0, [pc, #444]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005a06:	f000 fbbb 	bl	8006180 <__assert_func>
    CANARD_ASSERT(frame->transfer_id <= CANARD_TRANSFER_ID_MAX);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	7b9b      	ldrb	r3, [r3, #14]
 8005a0e:	2b1f      	cmp	r3, #31
 8005a10:	d906      	bls.n	8005a20 <rxAcceptFrame+0x90>
 8005a12:	4b71      	ldr	r3, [pc, #452]	@ (8005bd8 <rxAcceptFrame+0x248>)
 8005a14:	4a6a      	ldr	r2, [pc, #424]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005a16:	f240 319b 	movw	r1, #923	@ 0x39b
 8005a1a:	486a      	ldr	r0, [pc, #424]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005a1c:	f000 fbb0 	bl	8006180 <__assert_func>
    CANARD_ASSERT((CANARD_NODE_ID_UNSET == frame->destination_node_id) || (ins->node_id == frame->destination_node_id));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	7b5b      	ldrb	r3, [r3, #13]
 8005a24:	2bff      	cmp	r3, #255	@ 0xff
 8005a26:	d00c      	beq.n	8005a42 <rxAcceptFrame+0xb2>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	791a      	ldrb	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	7b5b      	ldrb	r3, [r3, #13]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d006      	beq.n	8005a42 <rxAcceptFrame+0xb2>
 8005a34:	4b69      	ldr	r3, [pc, #420]	@ (8005bdc <rxAcceptFrame+0x24c>)
 8005a36:	4a62      	ldr	r2, [pc, #392]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005a38:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005a3c:	4861      	ldr	r0, [pc, #388]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005a3e:	f000 fb9f 	bl	8006180 <__assert_func>
    CANARD_ASSERT(out_transfer != NULL);
 8005a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d106      	bne.n	8005a56 <rxAcceptFrame+0xc6>
 8005a48:	4b65      	ldr	r3, [pc, #404]	@ (8005be0 <rxAcceptFrame+0x250>)
 8005a4a:	4a5d      	ldr	r2, [pc, #372]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005a4c:	f240 319d 	movw	r1, #925	@ 0x39d
 8005a50:	485c      	ldr	r0, [pc, #368]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005a52:	f000 fb95 	bl	8006180 <__assert_func>

    int8_t out = 0;
 8005a56:	2300      	movs	r3, #0
 8005a58:	77fb      	strb	r3, [r7, #31]
    if (frame->source_node_id <= CANARD_NODE_ID_MAX)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	7b1b      	ldrb	r3, [r3, #12]
 8005a5e:	b25b      	sxtb	r3, r3
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	db6c      	blt.n	8005b3e <rxAcceptFrame+0x1ae>
    {
        // If such session does not exist, create it. This only makes sense if this is the first frame of a
        // transfer, otherwise, we won't be able to receive the transfer anyway so we don't bother.
        if ((NULL == subscription->sessions[frame->source_node_id]) && frame->start_of_transfer)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	7b1b      	ldrb	r3, [r3, #12]
 8005a68:	68ba      	ldr	r2, [r7, #8]
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	009b      	lsls	r3, r3, #2
 8005a6e:	4413      	add	r3, r2
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d134      	bne.n	8005ae0 <rxAcceptFrame+0x150>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	7bdb      	ldrb	r3, [r3, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d030      	beq.n	8005ae0 <rxAcceptFrame+0x150>
        {
            CanardInternalRxSession* const rxs =
                (CanardInternalRxSession*) ins->memory_allocate(ins, sizeof(CanardInternalRxSession));
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	2120      	movs	r1, #32
 8005a84:	68f8      	ldr	r0, [r7, #12]
 8005a86:	4798      	blx	r3
 8005a88:	6138      	str	r0, [r7, #16]
            subscription->sessions[frame->source_node_id] = rxs;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	7b1b      	ldrb	r3, [r3, #12]
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	3308      	adds	r3, #8
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4413      	add	r3, r2
 8005a96:	693a      	ldr	r2, [r7, #16]
 8005a98:	605a      	str	r2, [r3, #4]
            if (rxs != NULL)
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d01d      	beq.n	8005adc <rxAcceptFrame+0x14c>
            {
                rxs->transfer_timestamp_usec = frame->timestamp_usec;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa6:	6939      	ldr	r1, [r7, #16]
 8005aa8:	e9c1 2300 	strd	r2, r3, [r1]
                rxs->total_payload_size      = 0U;
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	609a      	str	r2, [r3, #8]
                rxs->payload_size            = 0U;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	60da      	str	r2, [r3, #12]
                rxs->payload                 = NULL;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	2200      	movs	r2, #0
 8005abc:	611a      	str	r2, [r3, #16]
                rxs->calculated_crc          = CRC_INITIAL;
 8005abe:	693b      	ldr	r3, [r7, #16]
 8005ac0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005ac4:	829a      	strh	r2, [r3, #20]
                rxs->transfer_id             = frame->transfer_id;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	7b9a      	ldrb	r2, [r3, #14]
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	759a      	strb	r2, [r3, #22]
                rxs->redundant_iface_index   = redundant_iface_index;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	78fa      	ldrb	r2, [r7, #3]
 8005ad2:	75da      	strb	r2, [r3, #23]
                rxs->toggle                  = INITIAL_TOGGLE_STATE;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2201      	movs	r2, #1
 8005ad8:	761a      	strb	r2, [r3, #24]
 8005ada:	e001      	b.n	8005ae0 <rxAcceptFrame+0x150>
            }
            else
            {
                out = -CANARD_ERROR_OUT_OF_MEMORY;
 8005adc:	23fd      	movs	r3, #253	@ 0xfd
 8005ade:	77fb      	strb	r3, [r7, #31]
            }
        }
        // There are two possible reasons why the session may not exist: 1. OOM; 2. SOT-miss.
        if (subscription->sessions[frame->source_node_id] != NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	7b1b      	ldrb	r3, [r3, #12]
 8005ae4:	68ba      	ldr	r2, [r7, #8]
 8005ae6:	3308      	adds	r3, #8
 8005ae8:	009b      	lsls	r3, r3, #2
 8005aea:	4413      	add	r3, r2
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d05e      	beq.n	8005bb0 <rxAcceptFrame+0x220>
        {
            CANARD_ASSERT(out == 0);
 8005af2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d006      	beq.n	8005b08 <rxAcceptFrame+0x178>
 8005afa:	4b3a      	ldr	r3, [pc, #232]	@ (8005be4 <rxAcceptFrame+0x254>)
 8005afc:	4a30      	ldr	r2, [pc, #192]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005afe:	f44f 716f 	mov.w	r1, #956	@ 0x3bc
 8005b02:	4830      	ldr	r0, [pc, #192]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005b04:	f000 fb3c 	bl	8006180 <__assert_func>
            out = rxSessionUpdate(ins,
                                  subscription->sessions[frame->source_node_id],
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	7b1b      	ldrb	r3, [r3, #12]
 8005b0c:	68ba      	ldr	r2, [r7, #8]
 8005b0e:	3308      	adds	r3, #8
 8005b10:	009b      	lsls	r3, r3, #2
 8005b12:	4413      	add	r3, r2
 8005b14:	685c      	ldr	r4, [r3, #4]
            out = rxSessionUpdate(ins,
 8005b16:	68bb      	ldr	r3, [r7, #8]
 8005b18:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8005b1c:	68b9      	ldr	r1, [r7, #8]
 8005b1e:	6989      	ldr	r1, [r1, #24]
 8005b20:	78fd      	ldrb	r5, [r7, #3]
 8005b22:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b24:	9003      	str	r0, [sp, #12]
 8005b26:	9102      	str	r1, [sp, #8]
 8005b28:	e9cd 2300 	strd	r2, r3, [sp]
 8005b2c:	462b      	mov	r3, r5
 8005b2e:	687a      	ldr	r2, [r7, #4]
 8005b30:	4621      	mov	r1, r4
 8005b32:	68f8      	ldr	r0, [r7, #12]
 8005b34:	f7ff fe80 	bl	8005838 <rxSessionUpdate>
 8005b38:	4603      	mov	r3, r0
 8005b3a:	77fb      	strb	r3, [r7, #31]
 8005b3c:	e038      	b.n	8005bb0 <rxAcceptFrame+0x220>
                                  out_transfer);
        }
    }
    else
    {
        CANARD_ASSERT(frame->source_node_id == CANARD_NODE_ID_UNSET);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	7b1b      	ldrb	r3, [r3, #12]
 8005b42:	2bff      	cmp	r3, #255	@ 0xff
 8005b44:	d006      	beq.n	8005b54 <rxAcceptFrame+0x1c4>
 8005b46:	4b28      	ldr	r3, [pc, #160]	@ (8005be8 <rxAcceptFrame+0x258>)
 8005b48:	4a1d      	ldr	r2, [pc, #116]	@ (8005bc0 <rxAcceptFrame+0x230>)
 8005b4a:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8005b4e:	481d      	ldr	r0, [pc, #116]	@ (8005bc4 <rxAcceptFrame+0x234>)
 8005b50:	f000 fb16 	bl	8006180 <__assert_func>
        // Anonymous transfers are stateless. No need to update the state machine, just blindly accept it.
        // We have to copy the data into an allocated storage because the API expects it: the lifetime shall be
        // independent of the input data and the memory shall be free-able.
        const size_t payload_size =
            (subscription->extent < frame->payload_size) ? subscription->extent : frame->payload_size;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	699b      	ldr	r3, [r3, #24]
        const size_t payload_size =
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	bf28      	it	cs
 8005b60:	4613      	movcs	r3, r2
 8005b62:	61bb      	str	r3, [r7, #24]
        void* const payload = ins->memory_allocate(ins, payload_size);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	69b9      	ldr	r1, [r7, #24]
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	4798      	blx	r3
 8005b6e:	6178      	str	r0, [r7, #20]
        if (payload != NULL)
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d01a      	beq.n	8005bac <rxAcceptFrame+0x21c>
        {
            rxInitTransferMetadataFromFrame(frame, &out_transfer->metadata);
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	4619      	mov	r1, r3
 8005b7a:	6878      	ldr	r0, [r7, #4]
 8005b7c:	f7ff faaa 	bl	80050d4 <rxInitTransferMetadataFromFrame>
            out_transfer->timestamp_usec = frame->timestamp_usec;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b86:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005b88:	e9c1 2302 	strd	r2, r3, [r1, #8]
            out_transfer->payload_size   = payload_size;
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	611a      	str	r2, [r3, #16]
            out_transfer->payload        = payload;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	615a      	str	r2, [r3, #20]
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(payload, frame->payload, payload_size);  // NOLINT
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	699b      	ldr	r3, [r3, #24]
 8005b9c:	69ba      	ldr	r2, [r7, #24]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6978      	ldr	r0, [r7, #20]
 8005ba2:	f000 fd86 	bl	80066b2 <memcpy>
            out = 1;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	77fb      	strb	r3, [r7, #31]
 8005baa:	e001      	b.n	8005bb0 <rxAcceptFrame+0x220>
        }
        else
        {
            out = -CANARD_ERROR_OUT_OF_MEMORY;
 8005bac:	23fd      	movs	r3, #253	@ 0xfd
 8005bae:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8005bb0:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bdb0      	pop	{r4, r5, r7, pc}
 8005bbc:	08007a88 	.word	0x08007a88
 8005bc0:	08008634 	.word	0x08008634
 8005bc4:	080078dc 	.word	0x080078dc
 8005bc8:	08007fa4 	.word	0x08007fa4
 8005bcc:	08007fc0 	.word	0x08007fc0
 8005bd0:	08007d1c 	.word	0x08007d1c
 8005bd4:	08007d78 	.word	0x08007d78
 8005bd8:	08007eb8 	.word	0x08007eb8
 8005bdc:	08007fe8 	.word	0x08007fe8
 8005be0:	08007d98 	.word	0x08007d98
 8005be4:	08008040 	.word	0x08008040
 8005be8:	0800804c 	.word	0x0800804c

08005bec <rxSubscriptionPredicateOnPortID>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnPortID(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
    const CanardPortID  sought    = *((const CanardPortID*) user_reference);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	881b      	ldrh	r3, [r3, #0]
 8005bfa:	81fb      	strh	r3, [r7, #14]
    const CanardPortID  other     = ((const CanardRxSubscription*) (const void*) node)->port_id;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	8b9b      	ldrh	r3, [r3, #28]
 8005c00:	81bb      	strh	r3, [r7, #12]
    static const int8_t NegPos[2] = {-1, +1};
    // Clang-Tidy mistakenly identifies a narrowing cast to int8_t here, which is incorrect.
    return (sought == other) ? 0 : NegPos[sought > other];  // NOLINT no narrowing conversion is taking place here
 8005c02:	89fa      	ldrh	r2, [r7, #14]
 8005c04:	89bb      	ldrh	r3, [r7, #12]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d00a      	beq.n	8005c20 <rxSubscriptionPredicateOnPortID+0x34>
 8005c0a:	89fa      	ldrh	r2, [r7, #14]
 8005c0c:	89bb      	ldrh	r3, [r7, #12]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	bf8c      	ite	hi
 8005c12:	2301      	movhi	r3, #1
 8005c14:	2300      	movls	r3, #0
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b05      	ldr	r3, [pc, #20]	@ (8005c30 <rxSubscriptionPredicateOnPortID+0x44>)
 8005c1c:	569b      	ldrsb	r3, [r3, r2]
 8005c1e:	e000      	b.n	8005c22 <rxSubscriptionPredicateOnPortID+0x36>
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	08008620 	.word	0x08008620

08005c34 <rxSubscriptionPredicateOnStruct>:

CANARD_PRIVATE int8_t
rxSubscriptionPredicateOnStruct(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                const CanardTreeNode* const node)
{
 8005c34:	b580      	push	{r7, lr}
 8005c36:	b082      	sub	sp, #8
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	6039      	str	r1, [r7, #0]
    return rxSubscriptionPredicateOnPortID(&((CanardRxSubscription*) user_reference)->port_id, node);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	331c      	adds	r3, #28
 8005c42:	6839      	ldr	r1, [r7, #0]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f7ff ffd1 	bl	8005bec <rxSubscriptionPredicateOnPortID>
 8005c4a:	4603      	mov	r3, r0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3708      	adds	r7, #8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8005c54:	b5b0      	push	{r4, r5, r7, lr}
 8005c56:	b08c      	sub	sp, #48	@ 0x30
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	60f8      	str	r0, [r7, #12]
 8005c5c:	60b9      	str	r1, [r7, #8]
 8005c5e:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d106      	bne.n	8005c74 <canardInit+0x20>
 8005c66:	4b16      	ldr	r3, [pc, #88]	@ (8005cc0 <canardInit+0x6c>)
 8005c68:	4a16      	ldr	r2, [pc, #88]	@ (8005cc4 <canardInit+0x70>)
 8005c6a:	f240 4104 	movw	r1, #1028	@ 0x404
 8005c6e:	4816      	ldr	r0, [pc, #88]	@ (8005cc8 <canardInit+0x74>)
 8005c70:	f000 fa86 	bl	8006180 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <canardInit+0x34>
 8005c7a:	4b14      	ldr	r3, [pc, #80]	@ (8005ccc <canardInit+0x78>)
 8005c7c:	4a11      	ldr	r2, [pc, #68]	@ (8005cc4 <canardInit+0x70>)
 8005c7e:	f240 4105 	movw	r1, #1029	@ 0x405
 8005c82:	4811      	ldr	r0, [pc, #68]	@ (8005cc8 <canardInit+0x74>)
 8005c84:	f000 fa7c 	bl	8006180 <__assert_func>
    const CanardInstance out = {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	617b      	str	r3, [r7, #20]
 8005c8c:	23ff      	movs	r3, #255	@ 0xff
 8005c8e:	763b      	strb	r3, [r7, #24]
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	61fb      	str	r3, [r7, #28]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	623b      	str	r3, [r7, #32]
 8005c98:	2300      	movs	r3, #0
 8005c9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	461d      	mov	r5, r3
 8005ca8:	f107 0414 	add.w	r4, r7, #20
 8005cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cb0:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8005cb4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	3730      	adds	r7, #48	@ 0x30
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8005cc0:	0800806c 	.word	0x0800806c
 8005cc4:	080084a8 	.word	0x080084a8
 8005cc8:	080078dc 	.word	0x080078dc
 8005ccc:	0800808c 	.word	0x0800808c

08005cd0 <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 8005cd0:	b4b0      	push	{r4, r5, r7}
 8005cd2:	b08b      	sub	sp, #44	@ 0x2c
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	617b      	str	r3, [r7, #20]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	61bb      	str	r3, [r7, #24]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	61fb      	str	r3, [r7, #28]
 8005ce8:	2300      	movs	r3, #0
 8005cea:	623b      	str	r3, [r7, #32]
 8005cec:	2300      	movs	r3, #0
 8005cee:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	461d      	mov	r5, r3
 8005cf4:	f107 0414 	add.w	r4, r7, #20
 8005cf8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cfa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cfc:	6823      	ldr	r3, [r4, #0]
 8005cfe:	602b      	str	r3, [r5, #0]
}
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	372c      	adds	r7, #44	@ 0x2c
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bcb0      	pop	{r4, r5, r7}
 8005d08:	4770      	bx	lr
	...

08005d0c <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08e      	sub	sp, #56	@ 0x38
 8005d10:	af06      	add	r7, sp, #24
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005d1a:	f06f 0301 	mvn.w	r3, #1
 8005d1e:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d062      	beq.n	8005dec <canardTxPush+0xe0>
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d05f      	beq.n	8005dec <canardTxPush+0xe0>
 8005d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d05c      	beq.n	8005dec <canardTxPush+0xe0>
 8005d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <canardTxPush+0x32>
 8005d38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d156      	bne.n	8005dec <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fb7a 	bl	800443c <adjustPresentationLayerMTU>
 8005d48:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	791a      	ldrb	r2, [r3, #4]
 8005d4e:	69bb      	ldr	r3, [r7, #24]
 8005d50:	9300      	str	r3, [sp, #0]
 8005d52:	4613      	mov	r3, r2
 8005d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d5a:	f7fe fb9f 	bl	800449c <txMakeCANID>
 8005d5e:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	db40      	blt.n	8005de8 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8005d66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d81c      	bhi.n	8005da8 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 8005d6e:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 8005d70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005d72:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8005d74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005d76:	9103      	str	r1, [sp, #12]
 8005d78:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005d7a:	9102      	str	r1, [sp, #8]
 8005d7c:	9201      	str	r2, [sp, #4]
 8005d7e:	9300      	str	r3, [sp, #0]
 8005d80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	68f8      	ldr	r0, [r7, #12]
 8005d88:	f7fe fd52 	bl	8004830 <txPushSingleFrame>
 8005d8c:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	db2b      	blt.n	8005dec <canardTxPush+0xe0>
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d028      	beq.n	8005dec <canardTxPush+0xe0>
 8005d9a:	4b1c      	ldr	r3, [pc, #112]	@ (8005e0c <canardTxPush+0x100>)
 8005d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8005e10 <canardTxPush+0x104>)
 8005d9e:	f240 4133 	movw	r1, #1075	@ 0x433
 8005da2:	481c      	ldr	r0, [pc, #112]	@ (8005e14 <canardTxPush+0x108>)
 8005da4:	f000 f9ec 	bl	8006180 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8005da8:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8005daa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005dac:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 8005dae:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005db0:	9105      	str	r1, [sp, #20]
 8005db2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005db4:	9104      	str	r1, [sp, #16]
 8005db6:	9203      	str	r2, [sp, #12]
 8005db8:	9302      	str	r3, [sp, #8]
 8005dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dbe:	e9cd 2300 	strd	r2, r3, [sp]
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7fe ff4c 	bl	8004c64 <txPushMultiFrame>
 8005dcc:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	db0b      	blt.n	8005dec <canardTxPush+0xe0>
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	dc08      	bgt.n	8005dec <canardTxPush+0xe0>
 8005dda:	4b0f      	ldr	r3, [pc, #60]	@ (8005e18 <canardTxPush+0x10c>)
 8005ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e10 <canardTxPush+0x104>)
 8005dde:	f240 413f 	movw	r1, #1087	@ 0x43f
 8005de2:	480c      	ldr	r0, [pc, #48]	@ (8005e14 <canardTxPush+0x108>)
 8005de4:	f000 f9cc 	bl	8006180 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d106      	bne.n	8005e00 <canardTxPush+0xf4>
 8005df2:	4b0a      	ldr	r3, [pc, #40]	@ (8005e1c <canardTxPush+0x110>)
 8005df4:	4a06      	ldr	r2, [pc, #24]	@ (8005e10 <canardTxPush+0x104>)
 8005df6:	f240 4147 	movw	r1, #1095	@ 0x447
 8005dfa:	4806      	ldr	r0, [pc, #24]	@ (8005e14 <canardTxPush+0x108>)
 8005dfc:	f000 f9c0 	bl	8006180 <__assert_func>
    return out;
 8005e00:	69fb      	ldr	r3, [r7, #28]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3720      	adds	r7, #32
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}
 8005e0a:	bf00      	nop
 8005e0c:	08007bc0 	.word	0x08007bc0
 8005e10:	080084b4 	.word	0x080084b4
 8005e14:	080078dc 	.word	0x080078dc
 8005e18:	08007d04 	.word	0x08007d04
 8005e1c:	080080a8 	.word	0x080080a8

08005e20 <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d006      	beq.n	8005e40 <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	2100      	movs	r1, #0
 8005e38:	4618      	mov	r0, r3
 8005e3a:	f7fd fe95 	bl	8003b68 <cavlFindExtremum>
 8005e3e:	60f8      	str	r0, [r7, #12]
    }
    return out;
 8005e40:	68fb      	ldr	r3, [r7, #12]
}
 8005e42:	4618      	mov	r0, r3
 8005e44:	3710      	adds	r7, #16
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}

08005e4a <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8005e4a:	b580      	push	{r7, lr}
 8005e4c:	b084      	sub	sp, #16
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
 8005e52:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8005e54:	2300      	movs	r3, #0
 8005e56:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d010      	beq.n	8005e80 <canardTxPop+0x36>
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d00d      	beq.n	8005e80 <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	330c      	adds	r3, #12
 8005e6c:	683a      	ldr	r2, [r7, #0]
 8005e6e:	4611      	mov	r1, r2
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe f8cf 	bl	8004014 <cavlRemove>
        que->size--;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	1e5a      	subs	r2, r3, #1
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	609a      	str	r2, [r3, #8]
    }
    return out;
 8005e80:	68fb      	ldr	r3, [r7, #12]
}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3710      	adds	r7, #16
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <canardRxAccept>:
                      const CanardMicrosecond      timestamp_usec,
                      const CanardFrame* const     frame,
                      const uint8_t                redundant_iface_index,
                      CanardRxTransfer* const      out_transfer,
                      CanardRxSubscription** const out_subscription)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b090      	sub	sp, #64	@ 0x40
 8005e90:	af02      	add	r7, sp, #8
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	e9c7 2300 	strd	r2, r3, [r7]
    int8_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005e98:	23fe      	movs	r3, #254	@ 0xfe
 8005e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d068      	beq.n	8005f76 <canardRxAccept+0xea>
 8005ea4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d065      	beq.n	8005f76 <canardRxAccept+0xea>
 8005eaa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d062      	beq.n	8005f76 <canardRxAccept+0xea>
 8005eb0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005eb8:	d25d      	bcs.n	8005f76 <canardRxAccept+0xea>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8005eba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ebc:	689b      	ldr	r3, [r3, #8]
    if ((ins != NULL) && (out_transfer != NULL) && (frame != NULL) && (frame->extended_can_id <= CAN_EXT_ID_MASK) &&
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d103      	bne.n	8005eca <canardRxAccept+0x3e>
        ((frame->payload != NULL) || (0 == frame->payload_size)))
 8005ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec4:	685b      	ldr	r3, [r3, #4]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d155      	bne.n	8005f76 <canardRxAccept+0xea>
    {
        RxFrameModel model = {0};
 8005eca:	f107 0310 	add.w	r3, r7, #16
 8005ece:	2220      	movs	r2, #32
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 fb61 	bl	800659a <memset>
        if (rxTryParseFrame(timestamp_usec, frame, &model))
 8005ed8:	f107 0310 	add.w	r3, r7, #16
 8005edc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005ede:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005ee2:	f7fe ffb3 	bl	8004e4c <rxTryParseFrame>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d041      	beq.n	8005f70 <canardRxAccept+0xe4>
        {
            if ((CANARD_NODE_ID_UNSET == model.destination_node_id) || (ins->node_id == model.destination_node_id))
 8005eec:	7f7b      	ldrb	r3, [r7, #29]
 8005eee:	2bff      	cmp	r3, #255	@ 0xff
 8005ef0:	d004      	beq.n	8005efc <canardRxAccept+0x70>
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	791a      	ldrb	r2, [r3, #4]
 8005ef6:	7f7b      	ldrb	r3, [r7, #29]
 8005ef8:	429a      	cmp	r2, r3
 8005efa:	d135      	bne.n	8005f68 <canardRxAccept+0xdc>
            {
                // This is the reason the function has a logarithmic time complexity of the number of subscriptions.
                // Note also that this one of the two variable-complexity operations in the RX pipeline; the other one
                // is memcpy(). Excepting these two cases, the entire RX pipeline contains neither loops nor recursion.
                CanardRxSubscription* const sub =
                    (CanardRxSubscription*) (void*) cavlSearch(&ins->rx_subscriptions[(size_t) model.transfer_kind],
 8005efc:	7e7b      	ldrb	r3, [r7, #25]
 8005efe:	3304      	adds	r3, #4
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	18d0      	adds	r0, r2, r3
 8005f06:	f107 0310 	add.w	r3, r7, #16
 8005f0a:	f103 010a 	add.w	r1, r3, #10
 8005f0e:	2300      	movs	r3, #0
 8005f10:	4a21      	ldr	r2, [pc, #132]	@ (8005f98 <canardRxAccept+0x10c>)
 8005f12:	f7fe f801 	bl	8003f18 <cavlSearch>
 8005f16:	6338      	str	r0, [r7, #48]	@ 0x30
                                                               &model.port_id,
                                                               &rxSubscriptionPredicateOnPortID,
                                                               NULL);
                if (out_subscription != NULL)
 8005f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <canardRxAccept+0x98>
                {
                    *out_subscription = sub;  // Expose selected instance to the caller.
 8005f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f22:	601a      	str	r2, [r3, #0]
                }
                if (sub != NULL)
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01a      	beq.n	8005f60 <canardRxAccept+0xd4>
                {
                    CANARD_ASSERT(sub->port_id == model.port_id);
 8005f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f2c:	8b9a      	ldrh	r2, [r3, #28]
 8005f2e:	8b7b      	ldrh	r3, [r7, #26]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d006      	beq.n	8005f42 <canardRxAccept+0xb6>
 8005f34:	4b19      	ldr	r3, [pc, #100]	@ (8005f9c <canardRxAccept+0x110>)
 8005f36:	4a1a      	ldr	r2, [pc, #104]	@ (8005fa0 <canardRxAccept+0x114>)
 8005f38:	f44f 6191 	mov.w	r1, #1160	@ 0x488
 8005f3c:	4819      	ldr	r0, [pc, #100]	@ (8005fa4 <canardRxAccept+0x118>)
 8005f3e:	f000 f91f 	bl	8006180 <__assert_func>
                    out = rxAcceptFrame(ins, sub, &model, redundant_iface_index, out_transfer);
 8005f42:	f897 1044 	ldrb.w	r1, [r7, #68]	@ 0x44
 8005f46:	f107 0210 	add.w	r2, r7, #16
 8005f4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f4c:	9300      	str	r3, [sp, #0]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f7ff fd1c 	bl	8005990 <rxAcceptFrame>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8005f5e:	e00a      	b.n	8005f76 <canardRxAccept+0xea>
                }
                else
                {
                    out = 0;  // No matching subscription.
 8005f60:	2300      	movs	r3, #0
 8005f62:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
            {
 8005f66:	e006      	b.n	8005f76 <canardRxAccept+0xea>
                }
            }
            else
            {
                out = 0;  // Mis-addressed frame (normally it should be filtered out by the hardware).
 8005f68:	2300      	movs	r3, #0
 8005f6a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005f6e:	e002      	b.n	8005f76 <canardRxAccept+0xea>
            }
        }
        else
        {
            out = 0;  // A non-Cyphal/CAN input frame.
 8005f70:	2300      	movs	r3, #0
 8005f72:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }
    CANARD_ASSERT(out <= 1);
 8005f76:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	dd06      	ble.n	8005f8c <canardRxAccept+0x100>
 8005f7e:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa8 <canardRxAccept+0x11c>)
 8005f80:	4a07      	ldr	r2, [pc, #28]	@ (8005fa0 <canardRxAccept+0x114>)
 8005f82:	f240 419a 	movw	r1, #1178	@ 0x49a
 8005f86:	4807      	ldr	r0, [pc, #28]	@ (8005fa4 <canardRxAccept+0x118>)
 8005f88:	f000 f8fa 	bl	8006180 <__assert_func>
    return out;
 8005f8c:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3738      	adds	r7, #56	@ 0x38
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	08005bed 	.word	0x08005bed
 8005f9c:	080080b4 	.word	0x080080b4
 8005fa0:	08008610 	.word	0x08008610
 8005fa4:	080078dc 	.word	0x080078dc
 8005fa8:	080080d4 	.word	0x080080d4

08005fac <canardRxSubscribe>:
                         const CanardTransferKind    transfer_kind,
                         const CanardPortID          port_id,
                         const size_t                extent,
                         const CanardMicrosecond     transfer_id_timeout_usec,
                         CanardRxSubscription* const out_subscription)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	607b      	str	r3, [r7, #4]
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	72fb      	strb	r3, [r7, #11]
 8005fba:	4613      	mov	r3, r2
 8005fbc:	813b      	strh	r3, [r7, #8]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8005fbe:	23fe      	movs	r3, #254	@ 0xfe
 8005fc0:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8005fc2:	7afb      	ldrb	r3, [r7, #11]
 8005fc4:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (out_subscription != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d04a      	beq.n	8006062 <canardRxSubscribe+0xb6>
 8005fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d047      	beq.n	8006062 <canardRxSubscribe+0xb6>
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	2b02      	cmp	r3, #2
 8005fd6:	d844      	bhi.n	8006062 <canardRxSubscribe+0xb6>
    {
        // Reset to the initial state. This is absolutely critical because the new payload size limit may be larger
        // than the old value; if there are any payload buffers allocated, we may overrun them because they are shorter
        // than the new payload limit. So we clear the subscription and thus ensure that no overrun may occur.
        out = canardRxUnsubscribe(ins, transfer_kind, port_id);
 8005fd8:	893a      	ldrh	r2, [r7, #8]
 8005fda:	7afb      	ldrb	r3, [r7, #11]
 8005fdc:	4619      	mov	r1, r3
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f850 	bl	8006084 <canardRxUnsubscribe>
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	77fb      	strb	r3, [r7, #31]
        if (out >= 0)
 8005fe8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	db38      	blt.n	8006062 <canardRxSubscribe+0xb6>
        {
            out_subscription->transfer_id_timeout_usec = transfer_id_timeout_usec;
 8005ff0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005ff2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005ff6:	e9c1 2304 	strd	r2, r3, [r1, #16]
            out_subscription->extent                   = extent;
 8005ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	619a      	str	r2, [r3, #24]
            out_subscription->port_id                  = port_id;
 8006000:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006002:	893a      	ldrh	r2, [r7, #8]
 8006004:	839a      	strh	r2, [r3, #28]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006006:	2300      	movs	r3, #0
 8006008:	61bb      	str	r3, [r7, #24]
 800600a:	e009      	b.n	8006020 <canardRxSubscribe+0x74>
            {
                // The sessions will be created ad-hoc. Normally, for a low-jitter deterministic system,
                // we could have pre-allocated sessions here, but that requires too much memory to be feasible.
                // We could accept an extra argument that would instruct us to pre-allocate sessions here?
                out_subscription->sessions[i] = NULL;
 800600c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	3308      	adds	r3, #8
 8006012:	009b      	lsls	r3, r3, #2
 8006014:	4413      	add	r3, r2
 8006016:	2200      	movs	r2, #0
 8006018:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3301      	adds	r3, #1
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	2b7f      	cmp	r3, #127	@ 0x7f
 8006024:	d9f2      	bls.n	800600c <canardRxSubscribe+0x60>
            }
            const CanardTreeNode* const res = cavlSearch(&ins->rx_subscriptions[tk],
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	3304      	adds	r3, #4
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	18d0      	adds	r0, r2, r3
 8006030:	4b0f      	ldr	r3, [pc, #60]	@ (8006070 <canardRxSubscribe+0xc4>)
 8006032:	4a10      	ldr	r2, [pc, #64]	@ (8006074 <canardRxSubscribe+0xc8>)
 8006034:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006036:	f7fd ff6f 	bl	8003f18 <cavlSearch>
 800603a:	6138      	str	r0, [r7, #16]
                                                         out_subscription,
                                                         &rxSubscriptionPredicateOnStruct,
                                                         &avlTrivialFactory);
            (void) res;
            CANARD_ASSERT(res == &out_subscription->base);
 800603c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800603e:	693a      	ldr	r2, [r7, #16]
 8006040:	429a      	cmp	r2, r3
 8006042:	d006      	beq.n	8006052 <canardRxSubscribe+0xa6>
 8006044:	4b0c      	ldr	r3, [pc, #48]	@ (8006078 <canardRxSubscribe+0xcc>)
 8006046:	4a0d      	ldr	r2, [pc, #52]	@ (800607c <canardRxSubscribe+0xd0>)
 8006048:	f240 41be 	movw	r1, #1214	@ 0x4be
 800604c:	480c      	ldr	r0, [pc, #48]	@ (8006080 <canardRxSubscribe+0xd4>)
 800604e:	f000 f897 	bl	8006180 <__assert_func>
            out = (out > 0) ? 0 : 1;
 8006052:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006056:	2b00      	cmp	r3, #0
 8006058:	bfd4      	ite	le
 800605a:	2301      	movle	r3, #1
 800605c:	2300      	movgt	r3, #0
 800605e:	b2db      	uxtb	r3, r3
 8006060:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8006062:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3720      	adds	r7, #32
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	08004279 	.word	0x08004279
 8006074:	08005c35 	.word	0x08005c35
 8006078:	080080e0 	.word	0x080080e0
 800607c:	080086f0 	.word	0x080086f0
 8006080:	080078dc 	.word	0x080078dc

08006084 <canardRxUnsubscribe>:

int8_t canardRxUnsubscribe(CanardInstance* const    ins,
                           const CanardTransferKind transfer_kind,
                           const CanardPortID       port_id)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b088      	sub	sp, #32
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	460b      	mov	r3, r1
 800608e:	70fb      	strb	r3, [r7, #3]
 8006090:	4613      	mov	r3, r2
 8006092:	803b      	strh	r3, [r7, #0]
    int8_t       out = -CANARD_ERROR_INVALID_ARGUMENT;
 8006094:	23fe      	movs	r3, #254	@ 0xfe
 8006096:	77fb      	strb	r3, [r7, #31]
    const size_t tk  = (size_t) transfer_kind;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	617b      	str	r3, [r7, #20]
    if ((ins != NULL) && (tk < CANARD_NUM_TRANSFER_KINDS))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d05f      	beq.n	8006162 <canardRxUnsubscribe+0xde>
 80060a2:	697b      	ldr	r3, [r7, #20]
 80060a4:	2b02      	cmp	r3, #2
 80060a6:	d85c      	bhi.n	8006162 <canardRxUnsubscribe+0xde>
    {
        CanardPortID                port_id_mutable = port_id;
 80060a8:	883b      	ldrh	r3, [r7, #0]
 80060aa:	81fb      	strh	r3, [r7, #14]
        CanardRxSubscription* const sub             = (CanardRxSubscription*) (void*)
            cavlSearch(&ins->rx_subscriptions[tk], &port_id_mutable, &rxSubscriptionPredicateOnPortID, NULL);
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	3304      	adds	r3, #4
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	687a      	ldr	r2, [r7, #4]
 80060b4:	18d0      	adds	r0, r2, r3
 80060b6:	f107 010e 	add.w	r1, r7, #14
 80060ba:	2300      	movs	r3, #0
 80060bc:	4a2c      	ldr	r2, [pc, #176]	@ (8006170 <canardRxUnsubscribe+0xec>)
 80060be:	f7fd ff2b 	bl	8003f18 <cavlSearch>
 80060c2:	6138      	str	r0, [r7, #16]
        if (sub != NULL)
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d049      	beq.n	800615e <canardRxUnsubscribe+0xda>
        {
            cavlRemove(&ins->rx_subscriptions[tk], &sub->base);
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3304      	adds	r3, #4
 80060ce:	009b      	lsls	r3, r3, #2
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	4413      	add	r3, r2
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	4611      	mov	r1, r2
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fd ff9b 	bl	8004014 <cavlRemove>
            CANARD_ASSERT(sub->port_id == port_id);
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	8b9b      	ldrh	r3, [r3, #28]
 80060e2:	883a      	ldrh	r2, [r7, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d006      	beq.n	80060f6 <canardRxUnsubscribe+0x72>
 80060e8:	4b22      	ldr	r3, [pc, #136]	@ (8006174 <canardRxUnsubscribe+0xf0>)
 80060ea:	4a23      	ldr	r2, [pc, #140]	@ (8006178 <canardRxUnsubscribe+0xf4>)
 80060ec:	f240 41d3 	movw	r1, #1235	@ 0x4d3
 80060f0:	4822      	ldr	r0, [pc, #136]	@ (800617c <canardRxUnsubscribe+0xf8>)
 80060f2:	f000 f845 	bl	8006180 <__assert_func>
            out = 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	77fb      	strb	r3, [r7, #31]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 80060fa:	2300      	movs	r3, #0
 80060fc:	61bb      	str	r3, [r7, #24]
 80060fe:	e02a      	b.n	8006156 <canardRxUnsubscribe+0xd2>
            {
                ins->memory_free(ins, (sub->sessions[i] != NULL) ? sub->sessions[i]->payload : NULL);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	68da      	ldr	r2, [r3, #12]
 8006104:	6939      	ldr	r1, [r7, #16]
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	3308      	adds	r3, #8
 800610a:	009b      	lsls	r3, r3, #2
 800610c:	440b      	add	r3, r1
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d007      	beq.n	8006124 <canardRxUnsubscribe+0xa0>
 8006114:	6939      	ldr	r1, [r7, #16]
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	3308      	adds	r3, #8
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	440b      	add	r3, r1
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	e000      	b.n	8006126 <canardRxUnsubscribe+0xa2>
 8006124:	2300      	movs	r3, #0
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	4790      	blx	r2
                ins->memory_free(ins, sub->sessions[i]);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	68da      	ldr	r2, [r3, #12]
 8006130:	6939      	ldr	r1, [r7, #16]
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3308      	adds	r3, #8
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	4619      	mov	r1, r3
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	4790      	blx	r2
                sub->sessions[i] = NULL;
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	3308      	adds	r3, #8
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	4413      	add	r3, r2
 800614c:	2200      	movs	r2, #0
 800614e:	605a      	str	r2, [r3, #4]
            for (size_t i = 0; i < RX_SESSIONS_PER_SUBSCRIPTION; i++)
 8006150:	69bb      	ldr	r3, [r7, #24]
 8006152:	3301      	adds	r3, #1
 8006154:	61bb      	str	r3, [r7, #24]
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	2b7f      	cmp	r3, #127	@ 0x7f
 800615a:	d9d1      	bls.n	8006100 <canardRxUnsubscribe+0x7c>
 800615c:	e001      	b.n	8006162 <canardRxUnsubscribe+0xde>
            }
        }
        else
        {
            out = 0;
 800615e:	2300      	movs	r3, #0
 8006160:	77fb      	strb	r3, [r7, #31]
        }
    }
    return out;
 8006162:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3720      	adds	r7, #32
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	08005bed 	.word	0x08005bed
 8006174:	08008100 	.word	0x08008100
 8006178:	08008704 	.word	0x08008704
 800617c:	080078dc 	.word	0x080078dc

08006180 <__assert_func>:
 8006180:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006182:	4614      	mov	r4, r2
 8006184:	461a      	mov	r2, r3
 8006186:	4b09      	ldr	r3, [pc, #36]	@ (80061ac <__assert_func+0x2c>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4605      	mov	r5, r0
 800618c:	68d8      	ldr	r0, [r3, #12]
 800618e:	b954      	cbnz	r4, 80061a6 <__assert_func+0x26>
 8006190:	4b07      	ldr	r3, [pc, #28]	@ (80061b0 <__assert_func+0x30>)
 8006192:	461c      	mov	r4, r3
 8006194:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006198:	9100      	str	r1, [sp, #0]
 800619a:	462b      	mov	r3, r5
 800619c:	4905      	ldr	r1, [pc, #20]	@ (80061b4 <__assert_func+0x34>)
 800619e:	f000 f96f 	bl	8006480 <fiprintf>
 80061a2:	f000 fa94 	bl	80066ce <abort>
 80061a6:	4b04      	ldr	r3, [pc, #16]	@ (80061b8 <__assert_func+0x38>)
 80061a8:	e7f4      	b.n	8006194 <__assert_func+0x14>
 80061aa:	bf00      	nop
 80061ac:	20000020 	.word	0x20000020
 80061b0:	08008753 	.word	0x08008753
 80061b4:	08008725 	.word	0x08008725
 80061b8:	08008718 	.word	0x08008718

080061bc <malloc>:
 80061bc:	4b02      	ldr	r3, [pc, #8]	@ (80061c8 <malloc+0xc>)
 80061be:	4601      	mov	r1, r0
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	f000 b82d 	b.w	8006220 <_malloc_r>
 80061c6:	bf00      	nop
 80061c8:	20000020 	.word	0x20000020

080061cc <free>:
 80061cc:	4b02      	ldr	r3, [pc, #8]	@ (80061d8 <free+0xc>)
 80061ce:	4601      	mov	r1, r0
 80061d0:	6818      	ldr	r0, [r3, #0]
 80061d2:	f000 ba83 	b.w	80066dc <_free_r>
 80061d6:	bf00      	nop
 80061d8:	20000020 	.word	0x20000020

080061dc <sbrk_aligned>:
 80061dc:	b570      	push	{r4, r5, r6, lr}
 80061de:	4e0f      	ldr	r6, [pc, #60]	@ (800621c <sbrk_aligned+0x40>)
 80061e0:	460c      	mov	r4, r1
 80061e2:	6831      	ldr	r1, [r6, #0]
 80061e4:	4605      	mov	r5, r0
 80061e6:	b911      	cbnz	r1, 80061ee <sbrk_aligned+0x12>
 80061e8:	f000 fa14 	bl	8006614 <_sbrk_r>
 80061ec:	6030      	str	r0, [r6, #0]
 80061ee:	4621      	mov	r1, r4
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fa0f 	bl	8006614 <_sbrk_r>
 80061f6:	1c43      	adds	r3, r0, #1
 80061f8:	d103      	bne.n	8006202 <sbrk_aligned+0x26>
 80061fa:	f04f 34ff 	mov.w	r4, #4294967295
 80061fe:	4620      	mov	r0, r4
 8006200:	bd70      	pop	{r4, r5, r6, pc}
 8006202:	1cc4      	adds	r4, r0, #3
 8006204:	f024 0403 	bic.w	r4, r4, #3
 8006208:	42a0      	cmp	r0, r4
 800620a:	d0f8      	beq.n	80061fe <sbrk_aligned+0x22>
 800620c:	1a21      	subs	r1, r4, r0
 800620e:	4628      	mov	r0, r5
 8006210:	f000 fa00 	bl	8006614 <_sbrk_r>
 8006214:	3001      	adds	r0, #1
 8006216:	d1f2      	bne.n	80061fe <sbrk_aligned+0x22>
 8006218:	e7ef      	b.n	80061fa <sbrk_aligned+0x1e>
 800621a:	bf00      	nop
 800621c:	20000780 	.word	0x20000780

08006220 <_malloc_r>:
 8006220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006224:	1ccd      	adds	r5, r1, #3
 8006226:	f025 0503 	bic.w	r5, r5, #3
 800622a:	3508      	adds	r5, #8
 800622c:	2d0c      	cmp	r5, #12
 800622e:	bf38      	it	cc
 8006230:	250c      	movcc	r5, #12
 8006232:	2d00      	cmp	r5, #0
 8006234:	4606      	mov	r6, r0
 8006236:	db01      	blt.n	800623c <_malloc_r+0x1c>
 8006238:	42a9      	cmp	r1, r5
 800623a:	d904      	bls.n	8006246 <_malloc_r+0x26>
 800623c:	230c      	movs	r3, #12
 800623e:	6033      	str	r3, [r6, #0]
 8006240:	2000      	movs	r0, #0
 8006242:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006246:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800631c <_malloc_r+0xfc>
 800624a:	f000 f869 	bl	8006320 <__malloc_lock>
 800624e:	f8d8 3000 	ldr.w	r3, [r8]
 8006252:	461c      	mov	r4, r3
 8006254:	bb44      	cbnz	r4, 80062a8 <_malloc_r+0x88>
 8006256:	4629      	mov	r1, r5
 8006258:	4630      	mov	r0, r6
 800625a:	f7ff ffbf 	bl	80061dc <sbrk_aligned>
 800625e:	1c43      	adds	r3, r0, #1
 8006260:	4604      	mov	r4, r0
 8006262:	d158      	bne.n	8006316 <_malloc_r+0xf6>
 8006264:	f8d8 4000 	ldr.w	r4, [r8]
 8006268:	4627      	mov	r7, r4
 800626a:	2f00      	cmp	r7, #0
 800626c:	d143      	bne.n	80062f6 <_malloc_r+0xd6>
 800626e:	2c00      	cmp	r4, #0
 8006270:	d04b      	beq.n	800630a <_malloc_r+0xea>
 8006272:	6823      	ldr	r3, [r4, #0]
 8006274:	4639      	mov	r1, r7
 8006276:	4630      	mov	r0, r6
 8006278:	eb04 0903 	add.w	r9, r4, r3
 800627c:	f000 f9ca 	bl	8006614 <_sbrk_r>
 8006280:	4581      	cmp	r9, r0
 8006282:	d142      	bne.n	800630a <_malloc_r+0xea>
 8006284:	6821      	ldr	r1, [r4, #0]
 8006286:	1a6d      	subs	r5, r5, r1
 8006288:	4629      	mov	r1, r5
 800628a:	4630      	mov	r0, r6
 800628c:	f7ff ffa6 	bl	80061dc <sbrk_aligned>
 8006290:	3001      	adds	r0, #1
 8006292:	d03a      	beq.n	800630a <_malloc_r+0xea>
 8006294:	6823      	ldr	r3, [r4, #0]
 8006296:	442b      	add	r3, r5
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	f8d8 3000 	ldr.w	r3, [r8]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	bb62      	cbnz	r2, 80062fc <_malloc_r+0xdc>
 80062a2:	f8c8 7000 	str.w	r7, [r8]
 80062a6:	e00f      	b.n	80062c8 <_malloc_r+0xa8>
 80062a8:	6822      	ldr	r2, [r4, #0]
 80062aa:	1b52      	subs	r2, r2, r5
 80062ac:	d420      	bmi.n	80062f0 <_malloc_r+0xd0>
 80062ae:	2a0b      	cmp	r2, #11
 80062b0:	d917      	bls.n	80062e2 <_malloc_r+0xc2>
 80062b2:	1961      	adds	r1, r4, r5
 80062b4:	42a3      	cmp	r3, r4
 80062b6:	6025      	str	r5, [r4, #0]
 80062b8:	bf18      	it	ne
 80062ba:	6059      	strne	r1, [r3, #4]
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	bf08      	it	eq
 80062c0:	f8c8 1000 	streq.w	r1, [r8]
 80062c4:	5162      	str	r2, [r4, r5]
 80062c6:	604b      	str	r3, [r1, #4]
 80062c8:	4630      	mov	r0, r6
 80062ca:	f000 f82f 	bl	800632c <__malloc_unlock>
 80062ce:	f104 000b 	add.w	r0, r4, #11
 80062d2:	1d23      	adds	r3, r4, #4
 80062d4:	f020 0007 	bic.w	r0, r0, #7
 80062d8:	1ac2      	subs	r2, r0, r3
 80062da:	bf1c      	itt	ne
 80062dc:	1a1b      	subne	r3, r3, r0
 80062de:	50a3      	strne	r3, [r4, r2]
 80062e0:	e7af      	b.n	8006242 <_malloc_r+0x22>
 80062e2:	6862      	ldr	r2, [r4, #4]
 80062e4:	42a3      	cmp	r3, r4
 80062e6:	bf0c      	ite	eq
 80062e8:	f8c8 2000 	streq.w	r2, [r8]
 80062ec:	605a      	strne	r2, [r3, #4]
 80062ee:	e7eb      	b.n	80062c8 <_malloc_r+0xa8>
 80062f0:	4623      	mov	r3, r4
 80062f2:	6864      	ldr	r4, [r4, #4]
 80062f4:	e7ae      	b.n	8006254 <_malloc_r+0x34>
 80062f6:	463c      	mov	r4, r7
 80062f8:	687f      	ldr	r7, [r7, #4]
 80062fa:	e7b6      	b.n	800626a <_malloc_r+0x4a>
 80062fc:	461a      	mov	r2, r3
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	42a3      	cmp	r3, r4
 8006302:	d1fb      	bne.n	80062fc <_malloc_r+0xdc>
 8006304:	2300      	movs	r3, #0
 8006306:	6053      	str	r3, [r2, #4]
 8006308:	e7de      	b.n	80062c8 <_malloc_r+0xa8>
 800630a:	230c      	movs	r3, #12
 800630c:	6033      	str	r3, [r6, #0]
 800630e:	4630      	mov	r0, r6
 8006310:	f000 f80c 	bl	800632c <__malloc_unlock>
 8006314:	e794      	b.n	8006240 <_malloc_r+0x20>
 8006316:	6005      	str	r5, [r0, #0]
 8006318:	e7d6      	b.n	80062c8 <_malloc_r+0xa8>
 800631a:	bf00      	nop
 800631c:	20000784 	.word	0x20000784

08006320 <__malloc_lock>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__malloc_lock+0x8>)
 8006322:	f000 b9c4 	b.w	80066ae <__retarget_lock_acquire_recursive>
 8006326:	bf00      	nop
 8006328:	200008c8 	.word	0x200008c8

0800632c <__malloc_unlock>:
 800632c:	4801      	ldr	r0, [pc, #4]	@ (8006334 <__malloc_unlock+0x8>)
 800632e:	f000 b9bf 	b.w	80066b0 <__retarget_lock_release_recursive>
 8006332:	bf00      	nop
 8006334:	200008c8 	.word	0x200008c8

08006338 <std>:
 8006338:	2300      	movs	r3, #0
 800633a:	b510      	push	{r4, lr}
 800633c:	4604      	mov	r4, r0
 800633e:	e9c0 3300 	strd	r3, r3, [r0]
 8006342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006346:	6083      	str	r3, [r0, #8]
 8006348:	8181      	strh	r1, [r0, #12]
 800634a:	6643      	str	r3, [r0, #100]	@ 0x64
 800634c:	81c2      	strh	r2, [r0, #14]
 800634e:	6183      	str	r3, [r0, #24]
 8006350:	4619      	mov	r1, r3
 8006352:	2208      	movs	r2, #8
 8006354:	305c      	adds	r0, #92	@ 0x5c
 8006356:	f000 f920 	bl	800659a <memset>
 800635a:	4b0d      	ldr	r3, [pc, #52]	@ (8006390 <std+0x58>)
 800635c:	6263      	str	r3, [r4, #36]	@ 0x24
 800635e:	4b0d      	ldr	r3, [pc, #52]	@ (8006394 <std+0x5c>)
 8006360:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006362:	4b0d      	ldr	r3, [pc, #52]	@ (8006398 <std+0x60>)
 8006364:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006366:	4b0d      	ldr	r3, [pc, #52]	@ (800639c <std+0x64>)
 8006368:	6323      	str	r3, [r4, #48]	@ 0x30
 800636a:	4b0d      	ldr	r3, [pc, #52]	@ (80063a0 <std+0x68>)
 800636c:	6224      	str	r4, [r4, #32]
 800636e:	429c      	cmp	r4, r3
 8006370:	d006      	beq.n	8006380 <std+0x48>
 8006372:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006376:	4294      	cmp	r4, r2
 8006378:	d002      	beq.n	8006380 <std+0x48>
 800637a:	33d0      	adds	r3, #208	@ 0xd0
 800637c:	429c      	cmp	r4, r3
 800637e:	d105      	bne.n	800638c <std+0x54>
 8006380:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006388:	f000 b990 	b.w	80066ac <__retarget_lock_init_recursive>
 800638c:	bd10      	pop	{r4, pc}
 800638e:	bf00      	nop
 8006390:	080064e1 	.word	0x080064e1
 8006394:	08006503 	.word	0x08006503
 8006398:	0800653b 	.word	0x0800653b
 800639c:	0800655f 	.word	0x0800655f
 80063a0:	20000788 	.word	0x20000788

080063a4 <stdio_exit_handler>:
 80063a4:	4a02      	ldr	r2, [pc, #8]	@ (80063b0 <stdio_exit_handler+0xc>)
 80063a6:	4903      	ldr	r1, [pc, #12]	@ (80063b4 <stdio_exit_handler+0x10>)
 80063a8:	4803      	ldr	r0, [pc, #12]	@ (80063b8 <stdio_exit_handler+0x14>)
 80063aa:	f000 b87b 	b.w	80064a4 <_fwalk_sglue>
 80063ae:	bf00      	nop
 80063b0:	20000014 	.word	0x20000014
 80063b4:	08006e19 	.word	0x08006e19
 80063b8:	20000024 	.word	0x20000024

080063bc <cleanup_stdio>:
 80063bc:	6841      	ldr	r1, [r0, #4]
 80063be:	4b0c      	ldr	r3, [pc, #48]	@ (80063f0 <cleanup_stdio+0x34>)
 80063c0:	4299      	cmp	r1, r3
 80063c2:	b510      	push	{r4, lr}
 80063c4:	4604      	mov	r4, r0
 80063c6:	d001      	beq.n	80063cc <cleanup_stdio+0x10>
 80063c8:	f000 fd26 	bl	8006e18 <_fflush_r>
 80063cc:	68a1      	ldr	r1, [r4, #8]
 80063ce:	4b09      	ldr	r3, [pc, #36]	@ (80063f4 <cleanup_stdio+0x38>)
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d002      	beq.n	80063da <cleanup_stdio+0x1e>
 80063d4:	4620      	mov	r0, r4
 80063d6:	f000 fd1f 	bl	8006e18 <_fflush_r>
 80063da:	68e1      	ldr	r1, [r4, #12]
 80063dc:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <cleanup_stdio+0x3c>)
 80063de:	4299      	cmp	r1, r3
 80063e0:	d004      	beq.n	80063ec <cleanup_stdio+0x30>
 80063e2:	4620      	mov	r0, r4
 80063e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063e8:	f000 bd16 	b.w	8006e18 <_fflush_r>
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	bf00      	nop
 80063f0:	20000788 	.word	0x20000788
 80063f4:	200007f0 	.word	0x200007f0
 80063f8:	20000858 	.word	0x20000858

080063fc <global_stdio_init.part.0>:
 80063fc:	b510      	push	{r4, lr}
 80063fe:	4b0b      	ldr	r3, [pc, #44]	@ (800642c <global_stdio_init.part.0+0x30>)
 8006400:	4c0b      	ldr	r4, [pc, #44]	@ (8006430 <global_stdio_init.part.0+0x34>)
 8006402:	4a0c      	ldr	r2, [pc, #48]	@ (8006434 <global_stdio_init.part.0+0x38>)
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	4620      	mov	r0, r4
 8006408:	2200      	movs	r2, #0
 800640a:	2104      	movs	r1, #4
 800640c:	f7ff ff94 	bl	8006338 <std>
 8006410:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006414:	2201      	movs	r2, #1
 8006416:	2109      	movs	r1, #9
 8006418:	f7ff ff8e 	bl	8006338 <std>
 800641c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006420:	2202      	movs	r2, #2
 8006422:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006426:	2112      	movs	r1, #18
 8006428:	f7ff bf86 	b.w	8006338 <std>
 800642c:	200008c0 	.word	0x200008c0
 8006430:	20000788 	.word	0x20000788
 8006434:	080063a5 	.word	0x080063a5

08006438 <__sfp_lock_acquire>:
 8006438:	4801      	ldr	r0, [pc, #4]	@ (8006440 <__sfp_lock_acquire+0x8>)
 800643a:	f000 b938 	b.w	80066ae <__retarget_lock_acquire_recursive>
 800643e:	bf00      	nop
 8006440:	200008c9 	.word	0x200008c9

08006444 <__sfp_lock_release>:
 8006444:	4801      	ldr	r0, [pc, #4]	@ (800644c <__sfp_lock_release+0x8>)
 8006446:	f000 b933 	b.w	80066b0 <__retarget_lock_release_recursive>
 800644a:	bf00      	nop
 800644c:	200008c9 	.word	0x200008c9

08006450 <__sinit>:
 8006450:	b510      	push	{r4, lr}
 8006452:	4604      	mov	r4, r0
 8006454:	f7ff fff0 	bl	8006438 <__sfp_lock_acquire>
 8006458:	6a23      	ldr	r3, [r4, #32]
 800645a:	b11b      	cbz	r3, 8006464 <__sinit+0x14>
 800645c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006460:	f7ff bff0 	b.w	8006444 <__sfp_lock_release>
 8006464:	4b04      	ldr	r3, [pc, #16]	@ (8006478 <__sinit+0x28>)
 8006466:	6223      	str	r3, [r4, #32]
 8006468:	4b04      	ldr	r3, [pc, #16]	@ (800647c <__sinit+0x2c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d1f5      	bne.n	800645c <__sinit+0xc>
 8006470:	f7ff ffc4 	bl	80063fc <global_stdio_init.part.0>
 8006474:	e7f2      	b.n	800645c <__sinit+0xc>
 8006476:	bf00      	nop
 8006478:	080063bd 	.word	0x080063bd
 800647c:	200008c0 	.word	0x200008c0

08006480 <fiprintf>:
 8006480:	b40e      	push	{r1, r2, r3}
 8006482:	b503      	push	{r0, r1, lr}
 8006484:	4601      	mov	r1, r0
 8006486:	ab03      	add	r3, sp, #12
 8006488:	4805      	ldr	r0, [pc, #20]	@ (80064a0 <fiprintf+0x20>)
 800648a:	f853 2b04 	ldr.w	r2, [r3], #4
 800648e:	6800      	ldr	r0, [r0, #0]
 8006490:	9301      	str	r3, [sp, #4]
 8006492:	f000 f997 	bl	80067c4 <_vfiprintf_r>
 8006496:	b002      	add	sp, #8
 8006498:	f85d eb04 	ldr.w	lr, [sp], #4
 800649c:	b003      	add	sp, #12
 800649e:	4770      	bx	lr
 80064a0:	20000020 	.word	0x20000020

080064a4 <_fwalk_sglue>:
 80064a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064a8:	4607      	mov	r7, r0
 80064aa:	4688      	mov	r8, r1
 80064ac:	4614      	mov	r4, r2
 80064ae:	2600      	movs	r6, #0
 80064b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80064b4:	f1b9 0901 	subs.w	r9, r9, #1
 80064b8:	d505      	bpl.n	80064c6 <_fwalk_sglue+0x22>
 80064ba:	6824      	ldr	r4, [r4, #0]
 80064bc:	2c00      	cmp	r4, #0
 80064be:	d1f7      	bne.n	80064b0 <_fwalk_sglue+0xc>
 80064c0:	4630      	mov	r0, r6
 80064c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064c6:	89ab      	ldrh	r3, [r5, #12]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d907      	bls.n	80064dc <_fwalk_sglue+0x38>
 80064cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80064d0:	3301      	adds	r3, #1
 80064d2:	d003      	beq.n	80064dc <_fwalk_sglue+0x38>
 80064d4:	4629      	mov	r1, r5
 80064d6:	4638      	mov	r0, r7
 80064d8:	47c0      	blx	r8
 80064da:	4306      	orrs	r6, r0
 80064dc:	3568      	adds	r5, #104	@ 0x68
 80064de:	e7e9      	b.n	80064b4 <_fwalk_sglue+0x10>

080064e0 <__sread>:
 80064e0:	b510      	push	{r4, lr}
 80064e2:	460c      	mov	r4, r1
 80064e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064e8:	f000 f882 	bl	80065f0 <_read_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	bfab      	itete	ge
 80064f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80064f2:	89a3      	ldrhlt	r3, [r4, #12]
 80064f4:	181b      	addge	r3, r3, r0
 80064f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80064fa:	bfac      	ite	ge
 80064fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80064fe:	81a3      	strhlt	r3, [r4, #12]
 8006500:	bd10      	pop	{r4, pc}

08006502 <__swrite>:
 8006502:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006506:	461f      	mov	r7, r3
 8006508:	898b      	ldrh	r3, [r1, #12]
 800650a:	05db      	lsls	r3, r3, #23
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	4616      	mov	r6, r2
 8006512:	d505      	bpl.n	8006520 <__swrite+0x1e>
 8006514:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006518:	2302      	movs	r3, #2
 800651a:	2200      	movs	r2, #0
 800651c:	f000 f856 	bl	80065cc <_lseek_r>
 8006520:	89a3      	ldrh	r3, [r4, #12]
 8006522:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006526:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	4632      	mov	r2, r6
 800652e:	463b      	mov	r3, r7
 8006530:	4628      	mov	r0, r5
 8006532:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006536:	f000 b87d 	b.w	8006634 <_write_r>

0800653a <__sseek>:
 800653a:	b510      	push	{r4, lr}
 800653c:	460c      	mov	r4, r1
 800653e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006542:	f000 f843 	bl	80065cc <_lseek_r>
 8006546:	1c43      	adds	r3, r0, #1
 8006548:	89a3      	ldrh	r3, [r4, #12]
 800654a:	bf15      	itete	ne
 800654c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800654e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006552:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006556:	81a3      	strheq	r3, [r4, #12]
 8006558:	bf18      	it	ne
 800655a:	81a3      	strhne	r3, [r4, #12]
 800655c:	bd10      	pop	{r4, pc}

0800655e <__sclose>:
 800655e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006562:	f000 b823 	b.w	80065ac <_close_r>

08006566 <memmove>:
 8006566:	4288      	cmp	r0, r1
 8006568:	b510      	push	{r4, lr}
 800656a:	eb01 0402 	add.w	r4, r1, r2
 800656e:	d902      	bls.n	8006576 <memmove+0x10>
 8006570:	4284      	cmp	r4, r0
 8006572:	4623      	mov	r3, r4
 8006574:	d807      	bhi.n	8006586 <memmove+0x20>
 8006576:	1e43      	subs	r3, r0, #1
 8006578:	42a1      	cmp	r1, r4
 800657a:	d008      	beq.n	800658e <memmove+0x28>
 800657c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006580:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006584:	e7f8      	b.n	8006578 <memmove+0x12>
 8006586:	4402      	add	r2, r0
 8006588:	4601      	mov	r1, r0
 800658a:	428a      	cmp	r2, r1
 800658c:	d100      	bne.n	8006590 <memmove+0x2a>
 800658e:	bd10      	pop	{r4, pc}
 8006590:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006594:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006598:	e7f7      	b.n	800658a <memmove+0x24>

0800659a <memset>:
 800659a:	4402      	add	r2, r0
 800659c:	4603      	mov	r3, r0
 800659e:	4293      	cmp	r3, r2
 80065a0:	d100      	bne.n	80065a4 <memset+0xa>
 80065a2:	4770      	bx	lr
 80065a4:	f803 1b01 	strb.w	r1, [r3], #1
 80065a8:	e7f9      	b.n	800659e <memset+0x4>
	...

080065ac <_close_r>:
 80065ac:	b538      	push	{r3, r4, r5, lr}
 80065ae:	4d06      	ldr	r5, [pc, #24]	@ (80065c8 <_close_r+0x1c>)
 80065b0:	2300      	movs	r3, #0
 80065b2:	4604      	mov	r4, r0
 80065b4:	4608      	mov	r0, r1
 80065b6:	602b      	str	r3, [r5, #0]
 80065b8:	f7fb fa0a 	bl	80019d0 <_close>
 80065bc:	1c43      	adds	r3, r0, #1
 80065be:	d102      	bne.n	80065c6 <_close_r+0x1a>
 80065c0:	682b      	ldr	r3, [r5, #0]
 80065c2:	b103      	cbz	r3, 80065c6 <_close_r+0x1a>
 80065c4:	6023      	str	r3, [r4, #0]
 80065c6:	bd38      	pop	{r3, r4, r5, pc}
 80065c8:	200008c4 	.word	0x200008c4

080065cc <_lseek_r>:
 80065cc:	b538      	push	{r3, r4, r5, lr}
 80065ce:	4d07      	ldr	r5, [pc, #28]	@ (80065ec <_lseek_r+0x20>)
 80065d0:	4604      	mov	r4, r0
 80065d2:	4608      	mov	r0, r1
 80065d4:	4611      	mov	r1, r2
 80065d6:	2200      	movs	r2, #0
 80065d8:	602a      	str	r2, [r5, #0]
 80065da:	461a      	mov	r2, r3
 80065dc:	f7fb fa1f 	bl	8001a1e <_lseek>
 80065e0:	1c43      	adds	r3, r0, #1
 80065e2:	d102      	bne.n	80065ea <_lseek_r+0x1e>
 80065e4:	682b      	ldr	r3, [r5, #0]
 80065e6:	b103      	cbz	r3, 80065ea <_lseek_r+0x1e>
 80065e8:	6023      	str	r3, [r4, #0]
 80065ea:	bd38      	pop	{r3, r4, r5, pc}
 80065ec:	200008c4 	.word	0x200008c4

080065f0 <_read_r>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	4d07      	ldr	r5, [pc, #28]	@ (8006610 <_read_r+0x20>)
 80065f4:	4604      	mov	r4, r0
 80065f6:	4608      	mov	r0, r1
 80065f8:	4611      	mov	r1, r2
 80065fa:	2200      	movs	r2, #0
 80065fc:	602a      	str	r2, [r5, #0]
 80065fe:	461a      	mov	r2, r3
 8006600:	f7fb f9ad 	bl	800195e <_read>
 8006604:	1c43      	adds	r3, r0, #1
 8006606:	d102      	bne.n	800660e <_read_r+0x1e>
 8006608:	682b      	ldr	r3, [r5, #0]
 800660a:	b103      	cbz	r3, 800660e <_read_r+0x1e>
 800660c:	6023      	str	r3, [r4, #0]
 800660e:	bd38      	pop	{r3, r4, r5, pc}
 8006610:	200008c4 	.word	0x200008c4

08006614 <_sbrk_r>:
 8006614:	b538      	push	{r3, r4, r5, lr}
 8006616:	4d06      	ldr	r5, [pc, #24]	@ (8006630 <_sbrk_r+0x1c>)
 8006618:	2300      	movs	r3, #0
 800661a:	4604      	mov	r4, r0
 800661c:	4608      	mov	r0, r1
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	f7fb fa0a 	bl	8001a38 <_sbrk>
 8006624:	1c43      	adds	r3, r0, #1
 8006626:	d102      	bne.n	800662e <_sbrk_r+0x1a>
 8006628:	682b      	ldr	r3, [r5, #0]
 800662a:	b103      	cbz	r3, 800662e <_sbrk_r+0x1a>
 800662c:	6023      	str	r3, [r4, #0]
 800662e:	bd38      	pop	{r3, r4, r5, pc}
 8006630:	200008c4 	.word	0x200008c4

08006634 <_write_r>:
 8006634:	b538      	push	{r3, r4, r5, lr}
 8006636:	4d07      	ldr	r5, [pc, #28]	@ (8006654 <_write_r+0x20>)
 8006638:	4604      	mov	r4, r0
 800663a:	4608      	mov	r0, r1
 800663c:	4611      	mov	r1, r2
 800663e:	2200      	movs	r2, #0
 8006640:	602a      	str	r2, [r5, #0]
 8006642:	461a      	mov	r2, r3
 8006644:	f7fb f9a8 	bl	8001998 <_write>
 8006648:	1c43      	adds	r3, r0, #1
 800664a:	d102      	bne.n	8006652 <_write_r+0x1e>
 800664c:	682b      	ldr	r3, [r5, #0]
 800664e:	b103      	cbz	r3, 8006652 <_write_r+0x1e>
 8006650:	6023      	str	r3, [r4, #0]
 8006652:	bd38      	pop	{r3, r4, r5, pc}
 8006654:	200008c4 	.word	0x200008c4

08006658 <__errno>:
 8006658:	4b01      	ldr	r3, [pc, #4]	@ (8006660 <__errno+0x8>)
 800665a:	6818      	ldr	r0, [r3, #0]
 800665c:	4770      	bx	lr
 800665e:	bf00      	nop
 8006660:	20000020 	.word	0x20000020

08006664 <__libc_init_array>:
 8006664:	b570      	push	{r4, r5, r6, lr}
 8006666:	4d0d      	ldr	r5, [pc, #52]	@ (800669c <__libc_init_array+0x38>)
 8006668:	4c0d      	ldr	r4, [pc, #52]	@ (80066a0 <__libc_init_array+0x3c>)
 800666a:	1b64      	subs	r4, r4, r5
 800666c:	10a4      	asrs	r4, r4, #2
 800666e:	2600      	movs	r6, #0
 8006670:	42a6      	cmp	r6, r4
 8006672:	d109      	bne.n	8006688 <__libc_init_array+0x24>
 8006674:	4d0b      	ldr	r5, [pc, #44]	@ (80066a4 <__libc_init_array+0x40>)
 8006676:	4c0c      	ldr	r4, [pc, #48]	@ (80066a8 <__libc_init_array+0x44>)
 8006678:	f000 fd52 	bl	8007120 <_init>
 800667c:	1b64      	subs	r4, r4, r5
 800667e:	10a4      	asrs	r4, r4, #2
 8006680:	2600      	movs	r6, #0
 8006682:	42a6      	cmp	r6, r4
 8006684:	d105      	bne.n	8006692 <__libc_init_array+0x2e>
 8006686:	bd70      	pop	{r4, r5, r6, pc}
 8006688:	f855 3b04 	ldr.w	r3, [r5], #4
 800668c:	4798      	blx	r3
 800668e:	3601      	adds	r6, #1
 8006690:	e7ee      	b.n	8006670 <__libc_init_array+0xc>
 8006692:	f855 3b04 	ldr.w	r3, [r5], #4
 8006696:	4798      	blx	r3
 8006698:	3601      	adds	r6, #1
 800669a:	e7f2      	b.n	8006682 <__libc_init_array+0x1e>
 800669c:	08008790 	.word	0x08008790
 80066a0:	08008790 	.word	0x08008790
 80066a4:	08008790 	.word	0x08008790
 80066a8:	08008794 	.word	0x08008794

080066ac <__retarget_lock_init_recursive>:
 80066ac:	4770      	bx	lr

080066ae <__retarget_lock_acquire_recursive>:
 80066ae:	4770      	bx	lr

080066b0 <__retarget_lock_release_recursive>:
 80066b0:	4770      	bx	lr

080066b2 <memcpy>:
 80066b2:	440a      	add	r2, r1
 80066b4:	4291      	cmp	r1, r2
 80066b6:	f100 33ff 	add.w	r3, r0, #4294967295
 80066ba:	d100      	bne.n	80066be <memcpy+0xc>
 80066bc:	4770      	bx	lr
 80066be:	b510      	push	{r4, lr}
 80066c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066c8:	4291      	cmp	r1, r2
 80066ca:	d1f9      	bne.n	80066c0 <memcpy+0xe>
 80066cc:	bd10      	pop	{r4, pc}

080066ce <abort>:
 80066ce:	b508      	push	{r3, lr}
 80066d0:	2006      	movs	r0, #6
 80066d2:	f000 fc85 	bl	8006fe0 <raise>
 80066d6:	2001      	movs	r0, #1
 80066d8:	f7fb f936 	bl	8001948 <_exit>

080066dc <_free_r>:
 80066dc:	b538      	push	{r3, r4, r5, lr}
 80066de:	4605      	mov	r5, r0
 80066e0:	2900      	cmp	r1, #0
 80066e2:	d041      	beq.n	8006768 <_free_r+0x8c>
 80066e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80066e8:	1f0c      	subs	r4, r1, #4
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	bfb8      	it	lt
 80066ee:	18e4      	addlt	r4, r4, r3
 80066f0:	f7ff fe16 	bl	8006320 <__malloc_lock>
 80066f4:	4a1d      	ldr	r2, [pc, #116]	@ (800676c <_free_r+0x90>)
 80066f6:	6813      	ldr	r3, [r2, #0]
 80066f8:	b933      	cbnz	r3, 8006708 <_free_r+0x2c>
 80066fa:	6063      	str	r3, [r4, #4]
 80066fc:	6014      	str	r4, [r2, #0]
 80066fe:	4628      	mov	r0, r5
 8006700:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006704:	f7ff be12 	b.w	800632c <__malloc_unlock>
 8006708:	42a3      	cmp	r3, r4
 800670a:	d908      	bls.n	800671e <_free_r+0x42>
 800670c:	6820      	ldr	r0, [r4, #0]
 800670e:	1821      	adds	r1, r4, r0
 8006710:	428b      	cmp	r3, r1
 8006712:	bf01      	itttt	eq
 8006714:	6819      	ldreq	r1, [r3, #0]
 8006716:	685b      	ldreq	r3, [r3, #4]
 8006718:	1809      	addeq	r1, r1, r0
 800671a:	6021      	streq	r1, [r4, #0]
 800671c:	e7ed      	b.n	80066fa <_free_r+0x1e>
 800671e:	461a      	mov	r2, r3
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	b10b      	cbz	r3, 8006728 <_free_r+0x4c>
 8006724:	42a3      	cmp	r3, r4
 8006726:	d9fa      	bls.n	800671e <_free_r+0x42>
 8006728:	6811      	ldr	r1, [r2, #0]
 800672a:	1850      	adds	r0, r2, r1
 800672c:	42a0      	cmp	r0, r4
 800672e:	d10b      	bne.n	8006748 <_free_r+0x6c>
 8006730:	6820      	ldr	r0, [r4, #0]
 8006732:	4401      	add	r1, r0
 8006734:	1850      	adds	r0, r2, r1
 8006736:	4283      	cmp	r3, r0
 8006738:	6011      	str	r1, [r2, #0]
 800673a:	d1e0      	bne.n	80066fe <_free_r+0x22>
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	6053      	str	r3, [r2, #4]
 8006742:	4408      	add	r0, r1
 8006744:	6010      	str	r0, [r2, #0]
 8006746:	e7da      	b.n	80066fe <_free_r+0x22>
 8006748:	d902      	bls.n	8006750 <_free_r+0x74>
 800674a:	230c      	movs	r3, #12
 800674c:	602b      	str	r3, [r5, #0]
 800674e:	e7d6      	b.n	80066fe <_free_r+0x22>
 8006750:	6820      	ldr	r0, [r4, #0]
 8006752:	1821      	adds	r1, r4, r0
 8006754:	428b      	cmp	r3, r1
 8006756:	bf04      	itt	eq
 8006758:	6819      	ldreq	r1, [r3, #0]
 800675a:	685b      	ldreq	r3, [r3, #4]
 800675c:	6063      	str	r3, [r4, #4]
 800675e:	bf04      	itt	eq
 8006760:	1809      	addeq	r1, r1, r0
 8006762:	6021      	streq	r1, [r4, #0]
 8006764:	6054      	str	r4, [r2, #4]
 8006766:	e7ca      	b.n	80066fe <_free_r+0x22>
 8006768:	bd38      	pop	{r3, r4, r5, pc}
 800676a:	bf00      	nop
 800676c:	20000784 	.word	0x20000784

08006770 <__sfputc_r>:
 8006770:	6893      	ldr	r3, [r2, #8]
 8006772:	3b01      	subs	r3, #1
 8006774:	2b00      	cmp	r3, #0
 8006776:	b410      	push	{r4}
 8006778:	6093      	str	r3, [r2, #8]
 800677a:	da08      	bge.n	800678e <__sfputc_r+0x1e>
 800677c:	6994      	ldr	r4, [r2, #24]
 800677e:	42a3      	cmp	r3, r4
 8006780:	db01      	blt.n	8006786 <__sfputc_r+0x16>
 8006782:	290a      	cmp	r1, #10
 8006784:	d103      	bne.n	800678e <__sfputc_r+0x1e>
 8006786:	f85d 4b04 	ldr.w	r4, [sp], #4
 800678a:	f000 bb6d 	b.w	8006e68 <__swbuf_r>
 800678e:	6813      	ldr	r3, [r2, #0]
 8006790:	1c58      	adds	r0, r3, #1
 8006792:	6010      	str	r0, [r2, #0]
 8006794:	7019      	strb	r1, [r3, #0]
 8006796:	4608      	mov	r0, r1
 8006798:	f85d 4b04 	ldr.w	r4, [sp], #4
 800679c:	4770      	bx	lr

0800679e <__sfputs_r>:
 800679e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a0:	4606      	mov	r6, r0
 80067a2:	460f      	mov	r7, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	18d5      	adds	r5, r2, r3
 80067a8:	42ac      	cmp	r4, r5
 80067aa:	d101      	bne.n	80067b0 <__sfputs_r+0x12>
 80067ac:	2000      	movs	r0, #0
 80067ae:	e007      	b.n	80067c0 <__sfputs_r+0x22>
 80067b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067b4:	463a      	mov	r2, r7
 80067b6:	4630      	mov	r0, r6
 80067b8:	f7ff ffda 	bl	8006770 <__sfputc_r>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d1f3      	bne.n	80067a8 <__sfputs_r+0xa>
 80067c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080067c4 <_vfiprintf_r>:
 80067c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067c8:	460d      	mov	r5, r1
 80067ca:	b09d      	sub	sp, #116	@ 0x74
 80067cc:	4614      	mov	r4, r2
 80067ce:	4698      	mov	r8, r3
 80067d0:	4606      	mov	r6, r0
 80067d2:	b118      	cbz	r0, 80067dc <_vfiprintf_r+0x18>
 80067d4:	6a03      	ldr	r3, [r0, #32]
 80067d6:	b90b      	cbnz	r3, 80067dc <_vfiprintf_r+0x18>
 80067d8:	f7ff fe3a 	bl	8006450 <__sinit>
 80067dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80067de:	07d9      	lsls	r1, r3, #31
 80067e0:	d405      	bmi.n	80067ee <_vfiprintf_r+0x2a>
 80067e2:	89ab      	ldrh	r3, [r5, #12]
 80067e4:	059a      	lsls	r2, r3, #22
 80067e6:	d402      	bmi.n	80067ee <_vfiprintf_r+0x2a>
 80067e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80067ea:	f7ff ff60 	bl	80066ae <__retarget_lock_acquire_recursive>
 80067ee:	89ab      	ldrh	r3, [r5, #12]
 80067f0:	071b      	lsls	r3, r3, #28
 80067f2:	d501      	bpl.n	80067f8 <_vfiprintf_r+0x34>
 80067f4:	692b      	ldr	r3, [r5, #16]
 80067f6:	b99b      	cbnz	r3, 8006820 <_vfiprintf_r+0x5c>
 80067f8:	4629      	mov	r1, r5
 80067fa:	4630      	mov	r0, r6
 80067fc:	f000 fb72 	bl	8006ee4 <__swsetup_r>
 8006800:	b170      	cbz	r0, 8006820 <_vfiprintf_r+0x5c>
 8006802:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006804:	07dc      	lsls	r4, r3, #31
 8006806:	d504      	bpl.n	8006812 <_vfiprintf_r+0x4e>
 8006808:	f04f 30ff 	mov.w	r0, #4294967295
 800680c:	b01d      	add	sp, #116	@ 0x74
 800680e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006812:	89ab      	ldrh	r3, [r5, #12]
 8006814:	0598      	lsls	r0, r3, #22
 8006816:	d4f7      	bmi.n	8006808 <_vfiprintf_r+0x44>
 8006818:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800681a:	f7ff ff49 	bl	80066b0 <__retarget_lock_release_recursive>
 800681e:	e7f3      	b.n	8006808 <_vfiprintf_r+0x44>
 8006820:	2300      	movs	r3, #0
 8006822:	9309      	str	r3, [sp, #36]	@ 0x24
 8006824:	2320      	movs	r3, #32
 8006826:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800682a:	f8cd 800c 	str.w	r8, [sp, #12]
 800682e:	2330      	movs	r3, #48	@ 0x30
 8006830:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80069e0 <_vfiprintf_r+0x21c>
 8006834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006838:	f04f 0901 	mov.w	r9, #1
 800683c:	4623      	mov	r3, r4
 800683e:	469a      	mov	sl, r3
 8006840:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006844:	b10a      	cbz	r2, 800684a <_vfiprintf_r+0x86>
 8006846:	2a25      	cmp	r2, #37	@ 0x25
 8006848:	d1f9      	bne.n	800683e <_vfiprintf_r+0x7a>
 800684a:	ebba 0b04 	subs.w	fp, sl, r4
 800684e:	d00b      	beq.n	8006868 <_vfiprintf_r+0xa4>
 8006850:	465b      	mov	r3, fp
 8006852:	4622      	mov	r2, r4
 8006854:	4629      	mov	r1, r5
 8006856:	4630      	mov	r0, r6
 8006858:	f7ff ffa1 	bl	800679e <__sfputs_r>
 800685c:	3001      	adds	r0, #1
 800685e:	f000 80a7 	beq.w	80069b0 <_vfiprintf_r+0x1ec>
 8006862:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006864:	445a      	add	r2, fp
 8006866:	9209      	str	r2, [sp, #36]	@ 0x24
 8006868:	f89a 3000 	ldrb.w	r3, [sl]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f000 809f 	beq.w	80069b0 <_vfiprintf_r+0x1ec>
 8006872:	2300      	movs	r3, #0
 8006874:	f04f 32ff 	mov.w	r2, #4294967295
 8006878:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800687c:	f10a 0a01 	add.w	sl, sl, #1
 8006880:	9304      	str	r3, [sp, #16]
 8006882:	9307      	str	r3, [sp, #28]
 8006884:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006888:	931a      	str	r3, [sp, #104]	@ 0x68
 800688a:	4654      	mov	r4, sl
 800688c:	2205      	movs	r2, #5
 800688e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006892:	4853      	ldr	r0, [pc, #332]	@ (80069e0 <_vfiprintf_r+0x21c>)
 8006894:	f7f9 fc9c 	bl	80001d0 <memchr>
 8006898:	9a04      	ldr	r2, [sp, #16]
 800689a:	b9d8      	cbnz	r0, 80068d4 <_vfiprintf_r+0x110>
 800689c:	06d1      	lsls	r1, r2, #27
 800689e:	bf44      	itt	mi
 80068a0:	2320      	movmi	r3, #32
 80068a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068a6:	0713      	lsls	r3, r2, #28
 80068a8:	bf44      	itt	mi
 80068aa:	232b      	movmi	r3, #43	@ 0x2b
 80068ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80068b0:	f89a 3000 	ldrb.w	r3, [sl]
 80068b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068b6:	d015      	beq.n	80068e4 <_vfiprintf_r+0x120>
 80068b8:	9a07      	ldr	r2, [sp, #28]
 80068ba:	4654      	mov	r4, sl
 80068bc:	2000      	movs	r0, #0
 80068be:	f04f 0c0a 	mov.w	ip, #10
 80068c2:	4621      	mov	r1, r4
 80068c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068c8:	3b30      	subs	r3, #48	@ 0x30
 80068ca:	2b09      	cmp	r3, #9
 80068cc:	d94b      	bls.n	8006966 <_vfiprintf_r+0x1a2>
 80068ce:	b1b0      	cbz	r0, 80068fe <_vfiprintf_r+0x13a>
 80068d0:	9207      	str	r2, [sp, #28]
 80068d2:	e014      	b.n	80068fe <_vfiprintf_r+0x13a>
 80068d4:	eba0 0308 	sub.w	r3, r0, r8
 80068d8:	fa09 f303 	lsl.w	r3, r9, r3
 80068dc:	4313      	orrs	r3, r2
 80068de:	9304      	str	r3, [sp, #16]
 80068e0:	46a2      	mov	sl, r4
 80068e2:	e7d2      	b.n	800688a <_vfiprintf_r+0xc6>
 80068e4:	9b03      	ldr	r3, [sp, #12]
 80068e6:	1d19      	adds	r1, r3, #4
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	9103      	str	r1, [sp, #12]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	bfbb      	ittet	lt
 80068f0:	425b      	neglt	r3, r3
 80068f2:	f042 0202 	orrlt.w	r2, r2, #2
 80068f6:	9307      	strge	r3, [sp, #28]
 80068f8:	9307      	strlt	r3, [sp, #28]
 80068fa:	bfb8      	it	lt
 80068fc:	9204      	strlt	r2, [sp, #16]
 80068fe:	7823      	ldrb	r3, [r4, #0]
 8006900:	2b2e      	cmp	r3, #46	@ 0x2e
 8006902:	d10a      	bne.n	800691a <_vfiprintf_r+0x156>
 8006904:	7863      	ldrb	r3, [r4, #1]
 8006906:	2b2a      	cmp	r3, #42	@ 0x2a
 8006908:	d132      	bne.n	8006970 <_vfiprintf_r+0x1ac>
 800690a:	9b03      	ldr	r3, [sp, #12]
 800690c:	1d1a      	adds	r2, r3, #4
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	9203      	str	r2, [sp, #12]
 8006912:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006916:	3402      	adds	r4, #2
 8006918:	9305      	str	r3, [sp, #20]
 800691a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80069f0 <_vfiprintf_r+0x22c>
 800691e:	7821      	ldrb	r1, [r4, #0]
 8006920:	2203      	movs	r2, #3
 8006922:	4650      	mov	r0, sl
 8006924:	f7f9 fc54 	bl	80001d0 <memchr>
 8006928:	b138      	cbz	r0, 800693a <_vfiprintf_r+0x176>
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	eba0 000a 	sub.w	r0, r0, sl
 8006930:	2240      	movs	r2, #64	@ 0x40
 8006932:	4082      	lsls	r2, r0
 8006934:	4313      	orrs	r3, r2
 8006936:	3401      	adds	r4, #1
 8006938:	9304      	str	r3, [sp, #16]
 800693a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800693e:	4829      	ldr	r0, [pc, #164]	@ (80069e4 <_vfiprintf_r+0x220>)
 8006940:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006944:	2206      	movs	r2, #6
 8006946:	f7f9 fc43 	bl	80001d0 <memchr>
 800694a:	2800      	cmp	r0, #0
 800694c:	d03f      	beq.n	80069ce <_vfiprintf_r+0x20a>
 800694e:	4b26      	ldr	r3, [pc, #152]	@ (80069e8 <_vfiprintf_r+0x224>)
 8006950:	bb1b      	cbnz	r3, 800699a <_vfiprintf_r+0x1d6>
 8006952:	9b03      	ldr	r3, [sp, #12]
 8006954:	3307      	adds	r3, #7
 8006956:	f023 0307 	bic.w	r3, r3, #7
 800695a:	3308      	adds	r3, #8
 800695c:	9303      	str	r3, [sp, #12]
 800695e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006960:	443b      	add	r3, r7
 8006962:	9309      	str	r3, [sp, #36]	@ 0x24
 8006964:	e76a      	b.n	800683c <_vfiprintf_r+0x78>
 8006966:	fb0c 3202 	mla	r2, ip, r2, r3
 800696a:	460c      	mov	r4, r1
 800696c:	2001      	movs	r0, #1
 800696e:	e7a8      	b.n	80068c2 <_vfiprintf_r+0xfe>
 8006970:	2300      	movs	r3, #0
 8006972:	3401      	adds	r4, #1
 8006974:	9305      	str	r3, [sp, #20]
 8006976:	4619      	mov	r1, r3
 8006978:	f04f 0c0a 	mov.w	ip, #10
 800697c:	4620      	mov	r0, r4
 800697e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006982:	3a30      	subs	r2, #48	@ 0x30
 8006984:	2a09      	cmp	r2, #9
 8006986:	d903      	bls.n	8006990 <_vfiprintf_r+0x1cc>
 8006988:	2b00      	cmp	r3, #0
 800698a:	d0c6      	beq.n	800691a <_vfiprintf_r+0x156>
 800698c:	9105      	str	r1, [sp, #20]
 800698e:	e7c4      	b.n	800691a <_vfiprintf_r+0x156>
 8006990:	fb0c 2101 	mla	r1, ip, r1, r2
 8006994:	4604      	mov	r4, r0
 8006996:	2301      	movs	r3, #1
 8006998:	e7f0      	b.n	800697c <_vfiprintf_r+0x1b8>
 800699a:	ab03      	add	r3, sp, #12
 800699c:	9300      	str	r3, [sp, #0]
 800699e:	462a      	mov	r2, r5
 80069a0:	4b12      	ldr	r3, [pc, #72]	@ (80069ec <_vfiprintf_r+0x228>)
 80069a2:	a904      	add	r1, sp, #16
 80069a4:	4630      	mov	r0, r6
 80069a6:	f3af 8000 	nop.w
 80069aa:	4607      	mov	r7, r0
 80069ac:	1c78      	adds	r0, r7, #1
 80069ae:	d1d6      	bne.n	800695e <_vfiprintf_r+0x19a>
 80069b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80069b2:	07d9      	lsls	r1, r3, #31
 80069b4:	d405      	bmi.n	80069c2 <_vfiprintf_r+0x1fe>
 80069b6:	89ab      	ldrh	r3, [r5, #12]
 80069b8:	059a      	lsls	r2, r3, #22
 80069ba:	d402      	bmi.n	80069c2 <_vfiprintf_r+0x1fe>
 80069bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80069be:	f7ff fe77 	bl	80066b0 <__retarget_lock_release_recursive>
 80069c2:	89ab      	ldrh	r3, [r5, #12]
 80069c4:	065b      	lsls	r3, r3, #25
 80069c6:	f53f af1f 	bmi.w	8006808 <_vfiprintf_r+0x44>
 80069ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80069cc:	e71e      	b.n	800680c <_vfiprintf_r+0x48>
 80069ce:	ab03      	add	r3, sp, #12
 80069d0:	9300      	str	r3, [sp, #0]
 80069d2:	462a      	mov	r2, r5
 80069d4:	4b05      	ldr	r3, [pc, #20]	@ (80069ec <_vfiprintf_r+0x228>)
 80069d6:	a904      	add	r1, sp, #16
 80069d8:	4630      	mov	r0, r6
 80069da:	f000 f879 	bl	8006ad0 <_printf_i>
 80069de:	e7e4      	b.n	80069aa <_vfiprintf_r+0x1e6>
 80069e0:	08008754 	.word	0x08008754
 80069e4:	0800875e 	.word	0x0800875e
 80069e8:	00000000 	.word	0x00000000
 80069ec:	0800679f 	.word	0x0800679f
 80069f0:	0800875a 	.word	0x0800875a

080069f4 <_printf_common>:
 80069f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069f8:	4616      	mov	r6, r2
 80069fa:	4698      	mov	r8, r3
 80069fc:	688a      	ldr	r2, [r1, #8]
 80069fe:	690b      	ldr	r3, [r1, #16]
 8006a00:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006a04:	4293      	cmp	r3, r2
 8006a06:	bfb8      	it	lt
 8006a08:	4613      	movlt	r3, r2
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006a10:	4607      	mov	r7, r0
 8006a12:	460c      	mov	r4, r1
 8006a14:	b10a      	cbz	r2, 8006a1a <_printf_common+0x26>
 8006a16:	3301      	adds	r3, #1
 8006a18:	6033      	str	r3, [r6, #0]
 8006a1a:	6823      	ldr	r3, [r4, #0]
 8006a1c:	0699      	lsls	r1, r3, #26
 8006a1e:	bf42      	ittt	mi
 8006a20:	6833      	ldrmi	r3, [r6, #0]
 8006a22:	3302      	addmi	r3, #2
 8006a24:	6033      	strmi	r3, [r6, #0]
 8006a26:	6825      	ldr	r5, [r4, #0]
 8006a28:	f015 0506 	ands.w	r5, r5, #6
 8006a2c:	d106      	bne.n	8006a3c <_printf_common+0x48>
 8006a2e:	f104 0a19 	add.w	sl, r4, #25
 8006a32:	68e3      	ldr	r3, [r4, #12]
 8006a34:	6832      	ldr	r2, [r6, #0]
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc26      	bgt.n	8006a8a <_printf_common+0x96>
 8006a3c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006a40:	6822      	ldr	r2, [r4, #0]
 8006a42:	3b00      	subs	r3, #0
 8006a44:	bf18      	it	ne
 8006a46:	2301      	movne	r3, #1
 8006a48:	0692      	lsls	r2, r2, #26
 8006a4a:	d42b      	bmi.n	8006aa4 <_printf_common+0xb0>
 8006a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006a50:	4641      	mov	r1, r8
 8006a52:	4638      	mov	r0, r7
 8006a54:	47c8      	blx	r9
 8006a56:	3001      	adds	r0, #1
 8006a58:	d01e      	beq.n	8006a98 <_printf_common+0xa4>
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	6922      	ldr	r2, [r4, #16]
 8006a5e:	f003 0306 	and.w	r3, r3, #6
 8006a62:	2b04      	cmp	r3, #4
 8006a64:	bf02      	ittt	eq
 8006a66:	68e5      	ldreq	r5, [r4, #12]
 8006a68:	6833      	ldreq	r3, [r6, #0]
 8006a6a:	1aed      	subeq	r5, r5, r3
 8006a6c:	68a3      	ldr	r3, [r4, #8]
 8006a6e:	bf0c      	ite	eq
 8006a70:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a74:	2500      	movne	r5, #0
 8006a76:	4293      	cmp	r3, r2
 8006a78:	bfc4      	itt	gt
 8006a7a:	1a9b      	subgt	r3, r3, r2
 8006a7c:	18ed      	addgt	r5, r5, r3
 8006a7e:	2600      	movs	r6, #0
 8006a80:	341a      	adds	r4, #26
 8006a82:	42b5      	cmp	r5, r6
 8006a84:	d11a      	bne.n	8006abc <_printf_common+0xc8>
 8006a86:	2000      	movs	r0, #0
 8006a88:	e008      	b.n	8006a9c <_printf_common+0xa8>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	4652      	mov	r2, sl
 8006a8e:	4641      	mov	r1, r8
 8006a90:	4638      	mov	r0, r7
 8006a92:	47c8      	blx	r9
 8006a94:	3001      	adds	r0, #1
 8006a96:	d103      	bne.n	8006aa0 <_printf_common+0xac>
 8006a98:	f04f 30ff 	mov.w	r0, #4294967295
 8006a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006aa0:	3501      	adds	r5, #1
 8006aa2:	e7c6      	b.n	8006a32 <_printf_common+0x3e>
 8006aa4:	18e1      	adds	r1, r4, r3
 8006aa6:	1c5a      	adds	r2, r3, #1
 8006aa8:	2030      	movs	r0, #48	@ 0x30
 8006aaa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006aae:	4422      	add	r2, r4
 8006ab0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ab4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ab8:	3302      	adds	r3, #2
 8006aba:	e7c7      	b.n	8006a4c <_printf_common+0x58>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4641      	mov	r1, r8
 8006ac2:	4638      	mov	r0, r7
 8006ac4:	47c8      	blx	r9
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	d0e6      	beq.n	8006a98 <_printf_common+0xa4>
 8006aca:	3601      	adds	r6, #1
 8006acc:	e7d9      	b.n	8006a82 <_printf_common+0x8e>
	...

08006ad0 <_printf_i>:
 8006ad0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad4:	7e0f      	ldrb	r7, [r1, #24]
 8006ad6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006ad8:	2f78      	cmp	r7, #120	@ 0x78
 8006ada:	4691      	mov	r9, r2
 8006adc:	4680      	mov	r8, r0
 8006ade:	460c      	mov	r4, r1
 8006ae0:	469a      	mov	sl, r3
 8006ae2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006ae6:	d807      	bhi.n	8006af8 <_printf_i+0x28>
 8006ae8:	2f62      	cmp	r7, #98	@ 0x62
 8006aea:	d80a      	bhi.n	8006b02 <_printf_i+0x32>
 8006aec:	2f00      	cmp	r7, #0
 8006aee:	f000 80d2 	beq.w	8006c96 <_printf_i+0x1c6>
 8006af2:	2f58      	cmp	r7, #88	@ 0x58
 8006af4:	f000 80b9 	beq.w	8006c6a <_printf_i+0x19a>
 8006af8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006afc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006b00:	e03a      	b.n	8006b78 <_printf_i+0xa8>
 8006b02:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006b06:	2b15      	cmp	r3, #21
 8006b08:	d8f6      	bhi.n	8006af8 <_printf_i+0x28>
 8006b0a:	a101      	add	r1, pc, #4	@ (adr r1, 8006b10 <_printf_i+0x40>)
 8006b0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006b10:	08006b69 	.word	0x08006b69
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	08006af9 	.word	0x08006af9
 8006b1c:	08006af9 	.word	0x08006af9
 8006b20:	08006af9 	.word	0x08006af9
 8006b24:	08006af9 	.word	0x08006af9
 8006b28:	08006b7d 	.word	0x08006b7d
 8006b2c:	08006af9 	.word	0x08006af9
 8006b30:	08006af9 	.word	0x08006af9
 8006b34:	08006af9 	.word	0x08006af9
 8006b38:	08006af9 	.word	0x08006af9
 8006b3c:	08006c7d 	.word	0x08006c7d
 8006b40:	08006ba7 	.word	0x08006ba7
 8006b44:	08006c37 	.word	0x08006c37
 8006b48:	08006af9 	.word	0x08006af9
 8006b4c:	08006af9 	.word	0x08006af9
 8006b50:	08006c9f 	.word	0x08006c9f
 8006b54:	08006af9 	.word	0x08006af9
 8006b58:	08006ba7 	.word	0x08006ba7
 8006b5c:	08006af9 	.word	0x08006af9
 8006b60:	08006af9 	.word	0x08006af9
 8006b64:	08006c3f 	.word	0x08006c3f
 8006b68:	6833      	ldr	r3, [r6, #0]
 8006b6a:	1d1a      	adds	r2, r3, #4
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	6032      	str	r2, [r6, #0]
 8006b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006b74:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006b78:	2301      	movs	r3, #1
 8006b7a:	e09d      	b.n	8006cb8 <_printf_i+0x1e8>
 8006b7c:	6833      	ldr	r3, [r6, #0]
 8006b7e:	6820      	ldr	r0, [r4, #0]
 8006b80:	1d19      	adds	r1, r3, #4
 8006b82:	6031      	str	r1, [r6, #0]
 8006b84:	0606      	lsls	r6, r0, #24
 8006b86:	d501      	bpl.n	8006b8c <_printf_i+0xbc>
 8006b88:	681d      	ldr	r5, [r3, #0]
 8006b8a:	e003      	b.n	8006b94 <_printf_i+0xc4>
 8006b8c:	0645      	lsls	r5, r0, #25
 8006b8e:	d5fb      	bpl.n	8006b88 <_printf_i+0xb8>
 8006b90:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006b94:	2d00      	cmp	r5, #0
 8006b96:	da03      	bge.n	8006ba0 <_printf_i+0xd0>
 8006b98:	232d      	movs	r3, #45	@ 0x2d
 8006b9a:	426d      	negs	r5, r5
 8006b9c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ba0:	4859      	ldr	r0, [pc, #356]	@ (8006d08 <_printf_i+0x238>)
 8006ba2:	230a      	movs	r3, #10
 8006ba4:	e011      	b.n	8006bca <_printf_i+0xfa>
 8006ba6:	6821      	ldr	r1, [r4, #0]
 8006ba8:	6833      	ldr	r3, [r6, #0]
 8006baa:	0608      	lsls	r0, r1, #24
 8006bac:	f853 5b04 	ldr.w	r5, [r3], #4
 8006bb0:	d402      	bmi.n	8006bb8 <_printf_i+0xe8>
 8006bb2:	0649      	lsls	r1, r1, #25
 8006bb4:	bf48      	it	mi
 8006bb6:	b2ad      	uxthmi	r5, r5
 8006bb8:	2f6f      	cmp	r7, #111	@ 0x6f
 8006bba:	4853      	ldr	r0, [pc, #332]	@ (8006d08 <_printf_i+0x238>)
 8006bbc:	6033      	str	r3, [r6, #0]
 8006bbe:	bf14      	ite	ne
 8006bc0:	230a      	movne	r3, #10
 8006bc2:	2308      	moveq	r3, #8
 8006bc4:	2100      	movs	r1, #0
 8006bc6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006bca:	6866      	ldr	r6, [r4, #4]
 8006bcc:	60a6      	str	r6, [r4, #8]
 8006bce:	2e00      	cmp	r6, #0
 8006bd0:	bfa2      	ittt	ge
 8006bd2:	6821      	ldrge	r1, [r4, #0]
 8006bd4:	f021 0104 	bicge.w	r1, r1, #4
 8006bd8:	6021      	strge	r1, [r4, #0]
 8006bda:	b90d      	cbnz	r5, 8006be0 <_printf_i+0x110>
 8006bdc:	2e00      	cmp	r6, #0
 8006bde:	d04b      	beq.n	8006c78 <_printf_i+0x1a8>
 8006be0:	4616      	mov	r6, r2
 8006be2:	fbb5 f1f3 	udiv	r1, r5, r3
 8006be6:	fb03 5711 	mls	r7, r3, r1, r5
 8006bea:	5dc7      	ldrb	r7, [r0, r7]
 8006bec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006bf0:	462f      	mov	r7, r5
 8006bf2:	42bb      	cmp	r3, r7
 8006bf4:	460d      	mov	r5, r1
 8006bf6:	d9f4      	bls.n	8006be2 <_printf_i+0x112>
 8006bf8:	2b08      	cmp	r3, #8
 8006bfa:	d10b      	bne.n	8006c14 <_printf_i+0x144>
 8006bfc:	6823      	ldr	r3, [r4, #0]
 8006bfe:	07df      	lsls	r7, r3, #31
 8006c00:	d508      	bpl.n	8006c14 <_printf_i+0x144>
 8006c02:	6923      	ldr	r3, [r4, #16]
 8006c04:	6861      	ldr	r1, [r4, #4]
 8006c06:	4299      	cmp	r1, r3
 8006c08:	bfde      	ittt	le
 8006c0a:	2330      	movle	r3, #48	@ 0x30
 8006c0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c14:	1b92      	subs	r2, r2, r6
 8006c16:	6122      	str	r2, [r4, #16]
 8006c18:	f8cd a000 	str.w	sl, [sp]
 8006c1c:	464b      	mov	r3, r9
 8006c1e:	aa03      	add	r2, sp, #12
 8006c20:	4621      	mov	r1, r4
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff fee6 	bl	80069f4 <_printf_common>
 8006c28:	3001      	adds	r0, #1
 8006c2a:	d14a      	bne.n	8006cc2 <_printf_i+0x1f2>
 8006c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c30:	b004      	add	sp, #16
 8006c32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c36:	6823      	ldr	r3, [r4, #0]
 8006c38:	f043 0320 	orr.w	r3, r3, #32
 8006c3c:	6023      	str	r3, [r4, #0]
 8006c3e:	4833      	ldr	r0, [pc, #204]	@ (8006d0c <_printf_i+0x23c>)
 8006c40:	2778      	movs	r7, #120	@ 0x78
 8006c42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006c46:	6823      	ldr	r3, [r4, #0]
 8006c48:	6831      	ldr	r1, [r6, #0]
 8006c4a:	061f      	lsls	r7, r3, #24
 8006c4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006c50:	d402      	bmi.n	8006c58 <_printf_i+0x188>
 8006c52:	065f      	lsls	r7, r3, #25
 8006c54:	bf48      	it	mi
 8006c56:	b2ad      	uxthmi	r5, r5
 8006c58:	6031      	str	r1, [r6, #0]
 8006c5a:	07d9      	lsls	r1, r3, #31
 8006c5c:	bf44      	itt	mi
 8006c5e:	f043 0320 	orrmi.w	r3, r3, #32
 8006c62:	6023      	strmi	r3, [r4, #0]
 8006c64:	b11d      	cbz	r5, 8006c6e <_printf_i+0x19e>
 8006c66:	2310      	movs	r3, #16
 8006c68:	e7ac      	b.n	8006bc4 <_printf_i+0xf4>
 8006c6a:	4827      	ldr	r0, [pc, #156]	@ (8006d08 <_printf_i+0x238>)
 8006c6c:	e7e9      	b.n	8006c42 <_printf_i+0x172>
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	f023 0320 	bic.w	r3, r3, #32
 8006c74:	6023      	str	r3, [r4, #0]
 8006c76:	e7f6      	b.n	8006c66 <_printf_i+0x196>
 8006c78:	4616      	mov	r6, r2
 8006c7a:	e7bd      	b.n	8006bf8 <_printf_i+0x128>
 8006c7c:	6833      	ldr	r3, [r6, #0]
 8006c7e:	6825      	ldr	r5, [r4, #0]
 8006c80:	6961      	ldr	r1, [r4, #20]
 8006c82:	1d18      	adds	r0, r3, #4
 8006c84:	6030      	str	r0, [r6, #0]
 8006c86:	062e      	lsls	r6, r5, #24
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0x1c0>
 8006c8c:	6019      	str	r1, [r3, #0]
 8006c8e:	e002      	b.n	8006c96 <_printf_i+0x1c6>
 8006c90:	0668      	lsls	r0, r5, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0x1bc>
 8006c94:	8019      	strh	r1, [r3, #0]
 8006c96:	2300      	movs	r3, #0
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	4616      	mov	r6, r2
 8006c9c:	e7bc      	b.n	8006c18 <_printf_i+0x148>
 8006c9e:	6833      	ldr	r3, [r6, #0]
 8006ca0:	1d1a      	adds	r2, r3, #4
 8006ca2:	6032      	str	r2, [r6, #0]
 8006ca4:	681e      	ldr	r6, [r3, #0]
 8006ca6:	6862      	ldr	r2, [r4, #4]
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4630      	mov	r0, r6
 8006cac:	f7f9 fa90 	bl	80001d0 <memchr>
 8006cb0:	b108      	cbz	r0, 8006cb6 <_printf_i+0x1e6>
 8006cb2:	1b80      	subs	r0, r0, r6
 8006cb4:	6060      	str	r0, [r4, #4]
 8006cb6:	6863      	ldr	r3, [r4, #4]
 8006cb8:	6123      	str	r3, [r4, #16]
 8006cba:	2300      	movs	r3, #0
 8006cbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006cc0:	e7aa      	b.n	8006c18 <_printf_i+0x148>
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	4632      	mov	r2, r6
 8006cc6:	4649      	mov	r1, r9
 8006cc8:	4640      	mov	r0, r8
 8006cca:	47d0      	blx	sl
 8006ccc:	3001      	adds	r0, #1
 8006cce:	d0ad      	beq.n	8006c2c <_printf_i+0x15c>
 8006cd0:	6823      	ldr	r3, [r4, #0]
 8006cd2:	079b      	lsls	r3, r3, #30
 8006cd4:	d413      	bmi.n	8006cfe <_printf_i+0x22e>
 8006cd6:	68e0      	ldr	r0, [r4, #12]
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	4298      	cmp	r0, r3
 8006cdc:	bfb8      	it	lt
 8006cde:	4618      	movlt	r0, r3
 8006ce0:	e7a6      	b.n	8006c30 <_printf_i+0x160>
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	4632      	mov	r2, r6
 8006ce6:	4649      	mov	r1, r9
 8006ce8:	4640      	mov	r0, r8
 8006cea:	47d0      	blx	sl
 8006cec:	3001      	adds	r0, #1
 8006cee:	d09d      	beq.n	8006c2c <_printf_i+0x15c>
 8006cf0:	3501      	adds	r5, #1
 8006cf2:	68e3      	ldr	r3, [r4, #12]
 8006cf4:	9903      	ldr	r1, [sp, #12]
 8006cf6:	1a5b      	subs	r3, r3, r1
 8006cf8:	42ab      	cmp	r3, r5
 8006cfa:	dcf2      	bgt.n	8006ce2 <_printf_i+0x212>
 8006cfc:	e7eb      	b.n	8006cd6 <_printf_i+0x206>
 8006cfe:	2500      	movs	r5, #0
 8006d00:	f104 0619 	add.w	r6, r4, #25
 8006d04:	e7f5      	b.n	8006cf2 <_printf_i+0x222>
 8006d06:	bf00      	nop
 8006d08:	08008765 	.word	0x08008765
 8006d0c:	08008776 	.word	0x08008776

08006d10 <__sflush_r>:
 8006d10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d18:	0716      	lsls	r6, r2, #28
 8006d1a:	4605      	mov	r5, r0
 8006d1c:	460c      	mov	r4, r1
 8006d1e:	d454      	bmi.n	8006dca <__sflush_r+0xba>
 8006d20:	684b      	ldr	r3, [r1, #4]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	dc02      	bgt.n	8006d2c <__sflush_r+0x1c>
 8006d26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	dd48      	ble.n	8006dbe <__sflush_r+0xae>
 8006d2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d2e:	2e00      	cmp	r6, #0
 8006d30:	d045      	beq.n	8006dbe <__sflush_r+0xae>
 8006d32:	2300      	movs	r3, #0
 8006d34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006d38:	682f      	ldr	r7, [r5, #0]
 8006d3a:	6a21      	ldr	r1, [r4, #32]
 8006d3c:	602b      	str	r3, [r5, #0]
 8006d3e:	d030      	beq.n	8006da2 <__sflush_r+0x92>
 8006d40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006d42:	89a3      	ldrh	r3, [r4, #12]
 8006d44:	0759      	lsls	r1, r3, #29
 8006d46:	d505      	bpl.n	8006d54 <__sflush_r+0x44>
 8006d48:	6863      	ldr	r3, [r4, #4]
 8006d4a:	1ad2      	subs	r2, r2, r3
 8006d4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006d4e:	b10b      	cbz	r3, 8006d54 <__sflush_r+0x44>
 8006d50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006d52:	1ad2      	subs	r2, r2, r3
 8006d54:	2300      	movs	r3, #0
 8006d56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006d58:	6a21      	ldr	r1, [r4, #32]
 8006d5a:	4628      	mov	r0, r5
 8006d5c:	47b0      	blx	r6
 8006d5e:	1c43      	adds	r3, r0, #1
 8006d60:	89a3      	ldrh	r3, [r4, #12]
 8006d62:	d106      	bne.n	8006d72 <__sflush_r+0x62>
 8006d64:	6829      	ldr	r1, [r5, #0]
 8006d66:	291d      	cmp	r1, #29
 8006d68:	d82b      	bhi.n	8006dc2 <__sflush_r+0xb2>
 8006d6a:	4a2a      	ldr	r2, [pc, #168]	@ (8006e14 <__sflush_r+0x104>)
 8006d6c:	410a      	asrs	r2, r1
 8006d6e:	07d6      	lsls	r6, r2, #31
 8006d70:	d427      	bmi.n	8006dc2 <__sflush_r+0xb2>
 8006d72:	2200      	movs	r2, #0
 8006d74:	6062      	str	r2, [r4, #4]
 8006d76:	04d9      	lsls	r1, r3, #19
 8006d78:	6922      	ldr	r2, [r4, #16]
 8006d7a:	6022      	str	r2, [r4, #0]
 8006d7c:	d504      	bpl.n	8006d88 <__sflush_r+0x78>
 8006d7e:	1c42      	adds	r2, r0, #1
 8006d80:	d101      	bne.n	8006d86 <__sflush_r+0x76>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	b903      	cbnz	r3, 8006d88 <__sflush_r+0x78>
 8006d86:	6560      	str	r0, [r4, #84]	@ 0x54
 8006d88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006d8a:	602f      	str	r7, [r5, #0]
 8006d8c:	b1b9      	cbz	r1, 8006dbe <__sflush_r+0xae>
 8006d8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006d92:	4299      	cmp	r1, r3
 8006d94:	d002      	beq.n	8006d9c <__sflush_r+0x8c>
 8006d96:	4628      	mov	r0, r5
 8006d98:	f7ff fca0 	bl	80066dc <_free_r>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6363      	str	r3, [r4, #52]	@ 0x34
 8006da0:	e00d      	b.n	8006dbe <__sflush_r+0xae>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4628      	mov	r0, r5
 8006da6:	47b0      	blx	r6
 8006da8:	4602      	mov	r2, r0
 8006daa:	1c50      	adds	r0, r2, #1
 8006dac:	d1c9      	bne.n	8006d42 <__sflush_r+0x32>
 8006dae:	682b      	ldr	r3, [r5, #0]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d0c6      	beq.n	8006d42 <__sflush_r+0x32>
 8006db4:	2b1d      	cmp	r3, #29
 8006db6:	d001      	beq.n	8006dbc <__sflush_r+0xac>
 8006db8:	2b16      	cmp	r3, #22
 8006dba:	d11e      	bne.n	8006dfa <__sflush_r+0xea>
 8006dbc:	602f      	str	r7, [r5, #0]
 8006dbe:	2000      	movs	r0, #0
 8006dc0:	e022      	b.n	8006e08 <__sflush_r+0xf8>
 8006dc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006dc6:	b21b      	sxth	r3, r3
 8006dc8:	e01b      	b.n	8006e02 <__sflush_r+0xf2>
 8006dca:	690f      	ldr	r7, [r1, #16]
 8006dcc:	2f00      	cmp	r7, #0
 8006dce:	d0f6      	beq.n	8006dbe <__sflush_r+0xae>
 8006dd0:	0793      	lsls	r3, r2, #30
 8006dd2:	680e      	ldr	r6, [r1, #0]
 8006dd4:	bf08      	it	eq
 8006dd6:	694b      	ldreq	r3, [r1, #20]
 8006dd8:	600f      	str	r7, [r1, #0]
 8006dda:	bf18      	it	ne
 8006ddc:	2300      	movne	r3, #0
 8006dde:	eba6 0807 	sub.w	r8, r6, r7
 8006de2:	608b      	str	r3, [r1, #8]
 8006de4:	f1b8 0f00 	cmp.w	r8, #0
 8006de8:	dde9      	ble.n	8006dbe <__sflush_r+0xae>
 8006dea:	6a21      	ldr	r1, [r4, #32]
 8006dec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006dee:	4643      	mov	r3, r8
 8006df0:	463a      	mov	r2, r7
 8006df2:	4628      	mov	r0, r5
 8006df4:	47b0      	blx	r6
 8006df6:	2800      	cmp	r0, #0
 8006df8:	dc08      	bgt.n	8006e0c <__sflush_r+0xfc>
 8006dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e02:	81a3      	strh	r3, [r4, #12]
 8006e04:	f04f 30ff 	mov.w	r0, #4294967295
 8006e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e0c:	4407      	add	r7, r0
 8006e0e:	eba8 0800 	sub.w	r8, r8, r0
 8006e12:	e7e7      	b.n	8006de4 <__sflush_r+0xd4>
 8006e14:	dfbffffe 	.word	0xdfbffffe

08006e18 <_fflush_r>:
 8006e18:	b538      	push	{r3, r4, r5, lr}
 8006e1a:	690b      	ldr	r3, [r1, #16]
 8006e1c:	4605      	mov	r5, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b913      	cbnz	r3, 8006e28 <_fflush_r+0x10>
 8006e22:	2500      	movs	r5, #0
 8006e24:	4628      	mov	r0, r5
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	b118      	cbz	r0, 8006e32 <_fflush_r+0x1a>
 8006e2a:	6a03      	ldr	r3, [r0, #32]
 8006e2c:	b90b      	cbnz	r3, 8006e32 <_fflush_r+0x1a>
 8006e2e:	f7ff fb0f 	bl	8006450 <__sinit>
 8006e32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f3      	beq.n	8006e22 <_fflush_r+0xa>
 8006e3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006e3c:	07d0      	lsls	r0, r2, #31
 8006e3e:	d404      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e40:	0599      	lsls	r1, r3, #22
 8006e42:	d402      	bmi.n	8006e4a <_fflush_r+0x32>
 8006e44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e46:	f7ff fc32 	bl	80066ae <__retarget_lock_acquire_recursive>
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f7ff ff5f 	bl	8006d10 <__sflush_r>
 8006e52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e54:	07da      	lsls	r2, r3, #31
 8006e56:	4605      	mov	r5, r0
 8006e58:	d4e4      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e5a:	89a3      	ldrh	r3, [r4, #12]
 8006e5c:	059b      	lsls	r3, r3, #22
 8006e5e:	d4e1      	bmi.n	8006e24 <_fflush_r+0xc>
 8006e60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006e62:	f7ff fc25 	bl	80066b0 <__retarget_lock_release_recursive>
 8006e66:	e7dd      	b.n	8006e24 <_fflush_r+0xc>

08006e68 <__swbuf_r>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	460e      	mov	r6, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	4605      	mov	r5, r0
 8006e70:	b118      	cbz	r0, 8006e7a <__swbuf_r+0x12>
 8006e72:	6a03      	ldr	r3, [r0, #32]
 8006e74:	b90b      	cbnz	r3, 8006e7a <__swbuf_r+0x12>
 8006e76:	f7ff faeb 	bl	8006450 <__sinit>
 8006e7a:	69a3      	ldr	r3, [r4, #24]
 8006e7c:	60a3      	str	r3, [r4, #8]
 8006e7e:	89a3      	ldrh	r3, [r4, #12]
 8006e80:	071a      	lsls	r2, r3, #28
 8006e82:	d501      	bpl.n	8006e88 <__swbuf_r+0x20>
 8006e84:	6923      	ldr	r3, [r4, #16]
 8006e86:	b943      	cbnz	r3, 8006e9a <__swbuf_r+0x32>
 8006e88:	4621      	mov	r1, r4
 8006e8a:	4628      	mov	r0, r5
 8006e8c:	f000 f82a 	bl	8006ee4 <__swsetup_r>
 8006e90:	b118      	cbz	r0, 8006e9a <__swbuf_r+0x32>
 8006e92:	f04f 37ff 	mov.w	r7, #4294967295
 8006e96:	4638      	mov	r0, r7
 8006e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	6922      	ldr	r2, [r4, #16]
 8006e9e:	1a98      	subs	r0, r3, r2
 8006ea0:	6963      	ldr	r3, [r4, #20]
 8006ea2:	b2f6      	uxtb	r6, r6
 8006ea4:	4283      	cmp	r3, r0
 8006ea6:	4637      	mov	r7, r6
 8006ea8:	dc05      	bgt.n	8006eb6 <__swbuf_r+0x4e>
 8006eaa:	4621      	mov	r1, r4
 8006eac:	4628      	mov	r0, r5
 8006eae:	f7ff ffb3 	bl	8006e18 <_fflush_r>
 8006eb2:	2800      	cmp	r0, #0
 8006eb4:	d1ed      	bne.n	8006e92 <__swbuf_r+0x2a>
 8006eb6:	68a3      	ldr	r3, [r4, #8]
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	60a3      	str	r3, [r4, #8]
 8006ebc:	6823      	ldr	r3, [r4, #0]
 8006ebe:	1c5a      	adds	r2, r3, #1
 8006ec0:	6022      	str	r2, [r4, #0]
 8006ec2:	701e      	strb	r6, [r3, #0]
 8006ec4:	6962      	ldr	r2, [r4, #20]
 8006ec6:	1c43      	adds	r3, r0, #1
 8006ec8:	429a      	cmp	r2, r3
 8006eca:	d004      	beq.n	8006ed6 <__swbuf_r+0x6e>
 8006ecc:	89a3      	ldrh	r3, [r4, #12]
 8006ece:	07db      	lsls	r3, r3, #31
 8006ed0:	d5e1      	bpl.n	8006e96 <__swbuf_r+0x2e>
 8006ed2:	2e0a      	cmp	r6, #10
 8006ed4:	d1df      	bne.n	8006e96 <__swbuf_r+0x2e>
 8006ed6:	4621      	mov	r1, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f7ff ff9d 	bl	8006e18 <_fflush_r>
 8006ede:	2800      	cmp	r0, #0
 8006ee0:	d0d9      	beq.n	8006e96 <__swbuf_r+0x2e>
 8006ee2:	e7d6      	b.n	8006e92 <__swbuf_r+0x2a>

08006ee4 <__swsetup_r>:
 8006ee4:	b538      	push	{r3, r4, r5, lr}
 8006ee6:	4b29      	ldr	r3, [pc, #164]	@ (8006f8c <__swsetup_r+0xa8>)
 8006ee8:	4605      	mov	r5, r0
 8006eea:	6818      	ldr	r0, [r3, #0]
 8006eec:	460c      	mov	r4, r1
 8006eee:	b118      	cbz	r0, 8006ef8 <__swsetup_r+0x14>
 8006ef0:	6a03      	ldr	r3, [r0, #32]
 8006ef2:	b90b      	cbnz	r3, 8006ef8 <__swsetup_r+0x14>
 8006ef4:	f7ff faac 	bl	8006450 <__sinit>
 8006ef8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006efc:	0719      	lsls	r1, r3, #28
 8006efe:	d422      	bmi.n	8006f46 <__swsetup_r+0x62>
 8006f00:	06da      	lsls	r2, r3, #27
 8006f02:	d407      	bmi.n	8006f14 <__swsetup_r+0x30>
 8006f04:	2209      	movs	r2, #9
 8006f06:	602a      	str	r2, [r5, #0]
 8006f08:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006f0c:	81a3      	strh	r3, [r4, #12]
 8006f0e:	f04f 30ff 	mov.w	r0, #4294967295
 8006f12:	e033      	b.n	8006f7c <__swsetup_r+0x98>
 8006f14:	0758      	lsls	r0, r3, #29
 8006f16:	d512      	bpl.n	8006f3e <__swsetup_r+0x5a>
 8006f18:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006f1a:	b141      	cbz	r1, 8006f2e <__swsetup_r+0x4a>
 8006f1c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006f20:	4299      	cmp	r1, r3
 8006f22:	d002      	beq.n	8006f2a <__swsetup_r+0x46>
 8006f24:	4628      	mov	r0, r5
 8006f26:	f7ff fbd9 	bl	80066dc <_free_r>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	6363      	str	r3, [r4, #52]	@ 0x34
 8006f2e:	89a3      	ldrh	r3, [r4, #12]
 8006f30:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006f34:	81a3      	strh	r3, [r4, #12]
 8006f36:	2300      	movs	r3, #0
 8006f38:	6063      	str	r3, [r4, #4]
 8006f3a:	6923      	ldr	r3, [r4, #16]
 8006f3c:	6023      	str	r3, [r4, #0]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	f043 0308 	orr.w	r3, r3, #8
 8006f44:	81a3      	strh	r3, [r4, #12]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	b94b      	cbnz	r3, 8006f5e <__swsetup_r+0x7a>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006f50:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f54:	d003      	beq.n	8006f5e <__swsetup_r+0x7a>
 8006f56:	4621      	mov	r1, r4
 8006f58:	4628      	mov	r0, r5
 8006f5a:	f000 f883 	bl	8007064 <__smakebuf_r>
 8006f5e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f62:	f013 0201 	ands.w	r2, r3, #1
 8006f66:	d00a      	beq.n	8006f7e <__swsetup_r+0x9a>
 8006f68:	2200      	movs	r2, #0
 8006f6a:	60a2      	str	r2, [r4, #8]
 8006f6c:	6962      	ldr	r2, [r4, #20]
 8006f6e:	4252      	negs	r2, r2
 8006f70:	61a2      	str	r2, [r4, #24]
 8006f72:	6922      	ldr	r2, [r4, #16]
 8006f74:	b942      	cbnz	r2, 8006f88 <__swsetup_r+0xa4>
 8006f76:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f7a:	d1c5      	bne.n	8006f08 <__swsetup_r+0x24>
 8006f7c:	bd38      	pop	{r3, r4, r5, pc}
 8006f7e:	0799      	lsls	r1, r3, #30
 8006f80:	bf58      	it	pl
 8006f82:	6962      	ldrpl	r2, [r4, #20]
 8006f84:	60a2      	str	r2, [r4, #8]
 8006f86:	e7f4      	b.n	8006f72 <__swsetup_r+0x8e>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	e7f7      	b.n	8006f7c <__swsetup_r+0x98>
 8006f8c:	20000020 	.word	0x20000020

08006f90 <_raise_r>:
 8006f90:	291f      	cmp	r1, #31
 8006f92:	b538      	push	{r3, r4, r5, lr}
 8006f94:	4605      	mov	r5, r0
 8006f96:	460c      	mov	r4, r1
 8006f98:	d904      	bls.n	8006fa4 <_raise_r+0x14>
 8006f9a:	2316      	movs	r3, #22
 8006f9c:	6003      	str	r3, [r0, #0]
 8006f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006fa6:	b112      	cbz	r2, 8006fae <_raise_r+0x1e>
 8006fa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006fac:	b94b      	cbnz	r3, 8006fc2 <_raise_r+0x32>
 8006fae:	4628      	mov	r0, r5
 8006fb0:	f000 f830 	bl	8007014 <_getpid_r>
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	4601      	mov	r1, r0
 8006fb8:	4628      	mov	r0, r5
 8006fba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006fbe:	f000 b817 	b.w	8006ff0 <_kill_r>
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d00a      	beq.n	8006fdc <_raise_r+0x4c>
 8006fc6:	1c59      	adds	r1, r3, #1
 8006fc8:	d103      	bne.n	8006fd2 <_raise_r+0x42>
 8006fca:	2316      	movs	r3, #22
 8006fcc:	6003      	str	r3, [r0, #0]
 8006fce:	2001      	movs	r0, #1
 8006fd0:	e7e7      	b.n	8006fa2 <_raise_r+0x12>
 8006fd2:	2100      	movs	r1, #0
 8006fd4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8006fd8:	4620      	mov	r0, r4
 8006fda:	4798      	blx	r3
 8006fdc:	2000      	movs	r0, #0
 8006fde:	e7e0      	b.n	8006fa2 <_raise_r+0x12>

08006fe0 <raise>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	@ (8006fec <raise+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f7ff bfd3 	b.w	8006f90 <_raise_r>
 8006fea:	bf00      	nop
 8006fec:	20000020 	.word	0x20000020

08006ff0 <_kill_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	4d07      	ldr	r5, [pc, #28]	@ (8007010 <_kill_r+0x20>)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	4604      	mov	r4, r0
 8006ff8:	4608      	mov	r0, r1
 8006ffa:	4611      	mov	r1, r2
 8006ffc:	602b      	str	r3, [r5, #0]
 8006ffe:	f7fa fc93 	bl	8001928 <_kill>
 8007002:	1c43      	adds	r3, r0, #1
 8007004:	d102      	bne.n	800700c <_kill_r+0x1c>
 8007006:	682b      	ldr	r3, [r5, #0]
 8007008:	b103      	cbz	r3, 800700c <_kill_r+0x1c>
 800700a:	6023      	str	r3, [r4, #0]
 800700c:	bd38      	pop	{r3, r4, r5, pc}
 800700e:	bf00      	nop
 8007010:	200008c4 	.word	0x200008c4

08007014 <_getpid_r>:
 8007014:	f7fa bc80 	b.w	8001918 <_getpid>

08007018 <__swhatbuf_r>:
 8007018:	b570      	push	{r4, r5, r6, lr}
 800701a:	460c      	mov	r4, r1
 800701c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007020:	2900      	cmp	r1, #0
 8007022:	b096      	sub	sp, #88	@ 0x58
 8007024:	4615      	mov	r5, r2
 8007026:	461e      	mov	r6, r3
 8007028:	da0d      	bge.n	8007046 <__swhatbuf_r+0x2e>
 800702a:	89a3      	ldrh	r3, [r4, #12]
 800702c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007030:	f04f 0100 	mov.w	r1, #0
 8007034:	bf14      	ite	ne
 8007036:	2340      	movne	r3, #64	@ 0x40
 8007038:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800703c:	2000      	movs	r0, #0
 800703e:	6031      	str	r1, [r6, #0]
 8007040:	602b      	str	r3, [r5, #0]
 8007042:	b016      	add	sp, #88	@ 0x58
 8007044:	bd70      	pop	{r4, r5, r6, pc}
 8007046:	466a      	mov	r2, sp
 8007048:	f000 f848 	bl	80070dc <_fstat_r>
 800704c:	2800      	cmp	r0, #0
 800704e:	dbec      	blt.n	800702a <__swhatbuf_r+0x12>
 8007050:	9901      	ldr	r1, [sp, #4]
 8007052:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007056:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800705a:	4259      	negs	r1, r3
 800705c:	4159      	adcs	r1, r3
 800705e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007062:	e7eb      	b.n	800703c <__swhatbuf_r+0x24>

08007064 <__smakebuf_r>:
 8007064:	898b      	ldrh	r3, [r1, #12]
 8007066:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007068:	079d      	lsls	r5, r3, #30
 800706a:	4606      	mov	r6, r0
 800706c:	460c      	mov	r4, r1
 800706e:	d507      	bpl.n	8007080 <__smakebuf_r+0x1c>
 8007070:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007074:	6023      	str	r3, [r4, #0]
 8007076:	6123      	str	r3, [r4, #16]
 8007078:	2301      	movs	r3, #1
 800707a:	6163      	str	r3, [r4, #20]
 800707c:	b003      	add	sp, #12
 800707e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007080:	ab01      	add	r3, sp, #4
 8007082:	466a      	mov	r2, sp
 8007084:	f7ff ffc8 	bl	8007018 <__swhatbuf_r>
 8007088:	9f00      	ldr	r7, [sp, #0]
 800708a:	4605      	mov	r5, r0
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	f7ff f8c6 	bl	8006220 <_malloc_r>
 8007094:	b948      	cbnz	r0, 80070aa <__smakebuf_r+0x46>
 8007096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800709a:	059a      	lsls	r2, r3, #22
 800709c:	d4ee      	bmi.n	800707c <__smakebuf_r+0x18>
 800709e:	f023 0303 	bic.w	r3, r3, #3
 80070a2:	f043 0302 	orr.w	r3, r3, #2
 80070a6:	81a3      	strh	r3, [r4, #12]
 80070a8:	e7e2      	b.n	8007070 <__smakebuf_r+0xc>
 80070aa:	89a3      	ldrh	r3, [r4, #12]
 80070ac:	6020      	str	r0, [r4, #0]
 80070ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070b2:	81a3      	strh	r3, [r4, #12]
 80070b4:	9b01      	ldr	r3, [sp, #4]
 80070b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80070ba:	b15b      	cbz	r3, 80070d4 <__smakebuf_r+0x70>
 80070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070c0:	4630      	mov	r0, r6
 80070c2:	f000 f81d 	bl	8007100 <_isatty_r>
 80070c6:	b128      	cbz	r0, 80070d4 <__smakebuf_r+0x70>
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	f023 0303 	bic.w	r3, r3, #3
 80070ce:	f043 0301 	orr.w	r3, r3, #1
 80070d2:	81a3      	strh	r3, [r4, #12]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	431d      	orrs	r5, r3
 80070d8:	81a5      	strh	r5, [r4, #12]
 80070da:	e7cf      	b.n	800707c <__smakebuf_r+0x18>

080070dc <_fstat_r>:
 80070dc:	b538      	push	{r3, r4, r5, lr}
 80070de:	4d07      	ldr	r5, [pc, #28]	@ (80070fc <_fstat_r+0x20>)
 80070e0:	2300      	movs	r3, #0
 80070e2:	4604      	mov	r4, r0
 80070e4:	4608      	mov	r0, r1
 80070e6:	4611      	mov	r1, r2
 80070e8:	602b      	str	r3, [r5, #0]
 80070ea:	f7fa fc7d 	bl	80019e8 <_fstat>
 80070ee:	1c43      	adds	r3, r0, #1
 80070f0:	d102      	bne.n	80070f8 <_fstat_r+0x1c>
 80070f2:	682b      	ldr	r3, [r5, #0]
 80070f4:	b103      	cbz	r3, 80070f8 <_fstat_r+0x1c>
 80070f6:	6023      	str	r3, [r4, #0]
 80070f8:	bd38      	pop	{r3, r4, r5, pc}
 80070fa:	bf00      	nop
 80070fc:	200008c4 	.word	0x200008c4

08007100 <_isatty_r>:
 8007100:	b538      	push	{r3, r4, r5, lr}
 8007102:	4d06      	ldr	r5, [pc, #24]	@ (800711c <_isatty_r+0x1c>)
 8007104:	2300      	movs	r3, #0
 8007106:	4604      	mov	r4, r0
 8007108:	4608      	mov	r0, r1
 800710a:	602b      	str	r3, [r5, #0]
 800710c:	f7fa fc7c 	bl	8001a08 <_isatty>
 8007110:	1c43      	adds	r3, r0, #1
 8007112:	d102      	bne.n	800711a <_isatty_r+0x1a>
 8007114:	682b      	ldr	r3, [r5, #0]
 8007116:	b103      	cbz	r3, 800711a <_isatty_r+0x1a>
 8007118:	6023      	str	r3, [r4, #0]
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	200008c4 	.word	0x200008c4

08007120 <_init>:
 8007120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007122:	bf00      	nop
 8007124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007126:	bc08      	pop	{r3}
 8007128:	469e      	mov	lr, r3
 800712a:	4770      	bx	lr

0800712c <_fini>:
 800712c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800712e:	bf00      	nop
 8007130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007132:	bc08      	pop	{r3}
 8007134:	469e      	mov	lr, r3
 8007136:	4770      	bx	lr
