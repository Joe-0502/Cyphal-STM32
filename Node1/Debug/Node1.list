
Node1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005570  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013e4  08005700  08005700  00006700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ae4  08006ae4  0000806c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ae4  08006ae4  00007ae4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006aec  08006aec  0000806c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006aec  08006aec  00007aec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006af0  08006af0  00007af0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006af4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001dc  2000006c  08006b60  0000806c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000248  08006b60  00008248  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000806c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009a39  00000000  00000000  0000809c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c45  00000000  00000000  00011ad5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000948  00000000  00000000  00013720  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074b  00000000  00000000  00014068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020949  00000000  00000000  000147b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a130  00000000  00000000  000350fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c070c  00000000  00000000  0003f22c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ff938  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e5c  00000000  00000000  000ff97c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  001027d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080056e8 	.word	0x080056e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080056e8 	.word	0x080056e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <nunavutChooseMin>:

// ---------------------------------------------------- HELPERS ----------------------------------------------------

/// Returns the smallest value.
static inline size_t nunavutChooseMin(const size_t a, const size_t b)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	6078      	str	r0, [r7, #4]
 8000278:	6039      	str	r1, [r7, #0]
    return (a < b) ? a : b;
 800027a:	683a      	ldr	r2, [r7, #0]
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4293      	cmp	r3, r2
 8000280:	bf28      	it	cs
 8000282:	4613      	movcs	r3, r2
}
 8000284:	4618      	mov	r0, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <nunavutCopyBits>:
static inline void nunavutCopyBits(void* const dst,
                                   const size_t dst_offset_bits,
                                   const size_t length_bits,
                                   const void* const src,
                                   const size_t src_offset_bits)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b092      	sub	sp, #72	@ 0x48
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
 800029c:	603b      	str	r3, [r7, #0]
    NUNAVUT_ASSERT(src != NULL);
 800029e:	683b      	ldr	r3, [r7, #0]
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d105      	bne.n	80002b0 <nunavutCopyBits+0x20>
 80002a4:	4b91      	ldr	r3, [pc, #580]	@ (80004ec <nunavutCopyBits+0x25c>)
 80002a6:	4a92      	ldr	r2, [pc, #584]	@ (80004f0 <nunavutCopyBits+0x260>)
 80002a8:	2183      	movs	r1, #131	@ 0x83
 80002aa:	4892      	ldr	r0, [pc, #584]	@ (80004f4 <nunavutCopyBits+0x264>)
 80002ac:	f004 fa4c 	bl	8004748 <__assert_func>
    NUNAVUT_ASSERT(dst != NULL);
 80002b0:	68fb      	ldr	r3, [r7, #12]
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d105      	bne.n	80002c2 <nunavutCopyBits+0x32>
 80002b6:	4b90      	ldr	r3, [pc, #576]	@ (80004f8 <nunavutCopyBits+0x268>)
 80002b8:	4a8d      	ldr	r2, [pc, #564]	@ (80004f0 <nunavutCopyBits+0x260>)
 80002ba:	2184      	movs	r1, #132	@ 0x84
 80002bc:	488d      	ldr	r0, [pc, #564]	@ (80004f4 <nunavutCopyBits+0x264>)
 80002be:	f004 fa43 	bl	8004748 <__assert_func>
    NUNAVUT_ASSERT(src != dst);
 80002c2:	683a      	ldr	r2, [r7, #0]
 80002c4:	68fb      	ldr	r3, [r7, #12]
 80002c6:	429a      	cmp	r2, r3
 80002c8:	d105      	bne.n	80002d6 <nunavutCopyBits+0x46>
 80002ca:	4b8c      	ldr	r3, [pc, #560]	@ (80004fc <nunavutCopyBits+0x26c>)
 80002cc:	4a88      	ldr	r2, [pc, #544]	@ (80004f0 <nunavutCopyBits+0x260>)
 80002ce:	2185      	movs	r1, #133	@ 0x85
 80002d0:	4888      	ldr	r0, [pc, #544]	@ (80004f4 <nunavutCopyBits+0x264>)
 80002d2:	f004 fa39 	bl	8004748 <__assert_func>
    if ((0U == (src_offset_bits % 8U)) && (0U == (dst_offset_bits % 8U)))  // Aligned copy, optimized, most common case.
 80002d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80002d8:	f003 0307 	and.w	r3, r3, #7
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14f      	bne.n	8000380 <nunavutCopyBits+0xf0>
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d14a      	bne.n	8000380 <nunavutCopyBits+0xf0>
    {
        const size_t length_bytes = (size_t)(length_bits / 8U);
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	08db      	lsrs	r3, r3, #3
 80002ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        // Intentional violation of MISRA: Pointer arithmetics. This is done to remove the API constraint that
        // offsets be under 8 bits. Fewer constraints reduce the chance of API misuse.
        const uint8_t* const psrc = (src_offset_bits / 8U) + (const uint8_t*) src;  // NOSONAR NOLINT
 80002f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80002f2:	08db      	lsrs	r3, r3, #3
 80002f4:	683a      	ldr	r2, [r7, #0]
 80002f6:	4413      	add	r3, r2
 80002f8:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint8_t*       const pdst = (dst_offset_bits / 8U) +       (uint8_t*) dst;  // NOSONAR NOLINT
 80002fa:	68bb      	ldr	r3, [r7, #8]
 80002fc:	08db      	lsrs	r3, r3, #3
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	4413      	add	r3, r2
 8000302:	637b      	str	r3, [r7, #52]	@ 0x34
        (void) memmove(pdst, psrc, length_bytes);
 8000304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000306:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8000308:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 800030a:	f004 fc10 	bl	8004b2e <memmove>
        const uint8_t length_mod = (uint8_t)(length_bits % 8U);
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	b2db      	uxtb	r3, r3
 8000312:	f003 0307 	and.w	r3, r3, #7
 8000316:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        if (0U != length_mod)  // If the length is unaligned, the last byte requires special treatment.
 800031a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800031e:	2b00      	cmp	r3, #0
 8000320:	f000 80df 	beq.w	80004e2 <nunavutCopyBits+0x252>
        {
            // Intentional violation of MISRA: Pointer arithmetics. It is unavoidable in this context.
            const uint8_t* const last_src = psrc + length_bytes;  // NOLINT NOSONAR
 8000324:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000326:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000328:	4413      	add	r3, r2
 800032a:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint8_t* const last_dst       = pdst + length_bytes;  // NOLINT NOSONAR
 800032c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800032e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000330:	4413      	add	r3, r2
 8000332:	62bb      	str	r3, [r7, #40]	@ 0x28
            NUNAVUT_ASSERT(length_mod < 8U);
 8000334:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000338:	2b07      	cmp	r3, #7
 800033a:	d905      	bls.n	8000348 <nunavutCopyBits+0xb8>
 800033c:	4b70      	ldr	r3, [pc, #448]	@ (8000500 <nunavutCopyBits+0x270>)
 800033e:	4a6c      	ldr	r2, [pc, #432]	@ (80004f0 <nunavutCopyBits+0x260>)
 8000340:	2194      	movs	r1, #148	@ 0x94
 8000342:	486c      	ldr	r0, [pc, #432]	@ (80004f4 <nunavutCopyBits+0x264>)
 8000344:	f004 fa00 	bl	8004748 <__assert_func>
            const uint8_t mask = (uint8_t)((1U << length_mod) - 1U);
 8000348:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800034c:	2201      	movs	r2, #1
 800034e:	fa02 f303 	lsl.w	r3, r2, r3
 8000352:	b2db      	uxtb	r3, r3
 8000354:	3b01      	subs	r3, #1
 8000356:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            *last_dst = (*last_dst & (uint8_t)~mask) | (*last_src & mask);
 800035a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800035c:	781a      	ldrb	r2, [r3, #0]
 800035e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000362:	43db      	mvns	r3, r3
 8000364:	b2db      	uxtb	r3, r3
 8000366:	4013      	ands	r3, r2
 8000368:	b2da      	uxtb	r2, r3
 800036a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800036c:	7819      	ldrb	r1, [r3, #0]
 800036e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000372:	400b      	ands	r3, r1
 8000374:	b2db      	uxtb	r3, r3
 8000376:	4313      	orrs	r3, r2
 8000378:	b2da      	uxtb	r2, r3
 800037a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800037c:	701a      	strb	r2, [r3, #0]
    {
 800037e:	e0b0      	b.n	80004e2 <nunavutCopyBits+0x252>
    else
    {
        // The algorithm was originally designed by Ben Dyer for Libuavcan v0:
        // https://github.com/OpenCyphal/libuavcan/blob/legacy-v0/libuavcan/src/marshal/uc_bit_array_copy.cpp
        // This version is modified for v1 where the bit order is the opposite.
        const uint8_t* const psrc = (const uint8_t*) src;
 8000380:	683b      	ldr	r3, [r7, #0]
 8000382:	623b      	str	r3, [r7, #32]
        uint8_t*       const pdst =       (uint8_t*) dst;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	61fb      	str	r3, [r7, #28]
        size_t       src_off  = src_offset_bits;
 8000388:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800038a:	647b      	str	r3, [r7, #68]	@ 0x44
        size_t       dst_off  = dst_offset_bits;
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	643b      	str	r3, [r7, #64]	@ 0x40
        const size_t last_bit = src_off + length_bits;
 8000390:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	4413      	add	r3, r2
 8000396:	61bb      	str	r3, [r7, #24]
        NUNAVUT_ASSERT(((psrc < pdst) ? ((uintptr_t)(psrc + ((src_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)pdst) : 1));
 8000398:	6a3a      	ldr	r2, [r7, #32]
 800039a:	69fb      	ldr	r3, [r7, #28]
 800039c:	429a      	cmp	r2, r3
 800039e:	d210      	bcs.n	80003c2 <nunavutCopyBits+0x132>
 80003a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	3308      	adds	r3, #8
 80003a8:	08db      	lsrs	r3, r3, #3
 80003aa:	6a3a      	ldr	r2, [r7, #32]
 80003ac:	4413      	add	r3, r2
 80003ae:	461a      	mov	r2, r3
 80003b0:	69fb      	ldr	r3, [r7, #28]
 80003b2:	429a      	cmp	r2, r3
 80003b4:	d905      	bls.n	80003c2 <nunavutCopyBits+0x132>
 80003b6:	4b53      	ldr	r3, [pc, #332]	@ (8000504 <nunavutCopyBits+0x274>)
 80003b8:	4a4d      	ldr	r2, [pc, #308]	@ (80004f0 <nunavutCopyBits+0x260>)
 80003ba:	21a3      	movs	r1, #163	@ 0xa3
 80003bc:	484d      	ldr	r0, [pc, #308]	@ (80004f4 <nunavutCopyBits+0x264>)
 80003be:	f004 f9c3 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT(((psrc > pdst) ? ((uintptr_t)(pdst + ((dst_offset_bits + length_bits + 8U) / 8U)) <= (uintptr_t)psrc) : 1));
 80003c2:	6a3a      	ldr	r2, [r7, #32]
 80003c4:	69fb      	ldr	r3, [r7, #28]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	d97d      	bls.n	80004c6 <nunavutCopyBits+0x236>
 80003ca:	68ba      	ldr	r2, [r7, #8]
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	4413      	add	r3, r2
 80003d0:	3308      	adds	r3, #8
 80003d2:	08db      	lsrs	r3, r3, #3
 80003d4:	69fa      	ldr	r2, [r7, #28]
 80003d6:	4413      	add	r3, r2
 80003d8:	461a      	mov	r2, r3
 80003da:	6a3b      	ldr	r3, [r7, #32]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d972      	bls.n	80004c6 <nunavutCopyBits+0x236>
 80003e0:	4b49      	ldr	r3, [pc, #292]	@ (8000508 <nunavutCopyBits+0x278>)
 80003e2:	4a43      	ldr	r2, [pc, #268]	@ (80004f0 <nunavutCopyBits+0x260>)
 80003e4:	21a4      	movs	r1, #164	@ 0xa4
 80003e6:	4843      	ldr	r0, [pc, #268]	@ (80004f4 <nunavutCopyBits+0x264>)
 80003e8:	f004 f9ae 	bl	8004748 <__assert_func>
        while (last_bit > src_off)
        {
            const uint8_t src_mod = (uint8_t)(src_off % 8U);
 80003ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	f003 0307 	and.w	r3, r3, #7
 80003f4:	75fb      	strb	r3, [r7, #23]
            const uint8_t dst_mod = (uint8_t)(dst_off % 8U);
 80003f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	f003 0307 	and.w	r3, r3, #7
 80003fe:	75bb      	strb	r3, [r7, #22]
            const uint8_t max_mod = (src_mod > dst_mod) ? src_mod : dst_mod;
 8000400:	7dba      	ldrb	r2, [r7, #22]
 8000402:	7dfb      	ldrb	r3, [r7, #23]
 8000404:	4293      	cmp	r3, r2
 8000406:	bf38      	it	cc
 8000408:	4613      	movcc	r3, r2
 800040a:	757b      	strb	r3, [r7, #21]
            const uint8_t size = (uint8_t) nunavutChooseMin(8U - max_mod, last_bit - src_off);
 800040c:	7d7b      	ldrb	r3, [r7, #21]
 800040e:	f1c3 0008 	rsb	r0, r3, #8
 8000412:	69ba      	ldr	r2, [r7, #24]
 8000414:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000416:	1ad3      	subs	r3, r2, r3
 8000418:	4619      	mov	r1, r3
 800041a:	f7ff ff29 	bl	8000270 <nunavutChooseMin>
 800041e:	4603      	mov	r3, r0
 8000420:	753b      	strb	r3, [r7, #20]
            NUNAVUT_ASSERT(size > 0U);
 8000422:	7d3b      	ldrb	r3, [r7, #20]
 8000424:	2b00      	cmp	r3, #0
 8000426:	d105      	bne.n	8000434 <nunavutCopyBits+0x1a4>
 8000428:	4b38      	ldr	r3, [pc, #224]	@ (800050c <nunavutCopyBits+0x27c>)
 800042a:	4a31      	ldr	r2, [pc, #196]	@ (80004f0 <nunavutCopyBits+0x260>)
 800042c:	21ab      	movs	r1, #171	@ 0xab
 800042e:	4831      	ldr	r0, [pc, #196]	@ (80004f4 <nunavutCopyBits+0x264>)
 8000430:	f004 f98a 	bl	8004748 <__assert_func>
            NUNAVUT_ASSERT(size <= 8U);
 8000434:	7d3b      	ldrb	r3, [r7, #20]
 8000436:	2b08      	cmp	r3, #8
 8000438:	d905      	bls.n	8000446 <nunavutCopyBits+0x1b6>
 800043a:	4b35      	ldr	r3, [pc, #212]	@ (8000510 <nunavutCopyBits+0x280>)
 800043c:	4a2c      	ldr	r2, [pc, #176]	@ (80004f0 <nunavutCopyBits+0x260>)
 800043e:	21ac      	movs	r1, #172	@ 0xac
 8000440:	482c      	ldr	r0, [pc, #176]	@ (80004f4 <nunavutCopyBits+0x264>)
 8000442:	f004 f981 	bl	8004748 <__assert_func>
            // Suppress a false warning from Clang-Tidy & Sonar that size is being over-shifted. It's not.
            const uint8_t mask = (uint8_t)((((1U << size) - 1U) << dst_mod) & 0xFFU);  // NOLINT NOSONAR
 8000446:	7d3b      	ldrb	r3, [r7, #20]
 8000448:	2201      	movs	r2, #1
 800044a:	fa02 f303 	lsl.w	r3, r2, r3
 800044e:	1e5a      	subs	r2, r3, #1
 8000450:	7dbb      	ldrb	r3, [r7, #22]
 8000452:	fa02 f303 	lsl.w	r3, r2, r3
 8000456:	74fb      	strb	r3, [r7, #19]
            NUNAVUT_ASSERT(mask > 0U);
 8000458:	7cfb      	ldrb	r3, [r7, #19]
 800045a:	2b00      	cmp	r3, #0
 800045c:	d105      	bne.n	800046a <nunavutCopyBits+0x1da>
 800045e:	4b2d      	ldr	r3, [pc, #180]	@ (8000514 <nunavutCopyBits+0x284>)
 8000460:	4a23      	ldr	r2, [pc, #140]	@ (80004f0 <nunavutCopyBits+0x260>)
 8000462:	21af      	movs	r1, #175	@ 0xaf
 8000464:	4823      	ldr	r0, [pc, #140]	@ (80004f4 <nunavutCopyBits+0x264>)
 8000466:	f004 f96f 	bl	8004748 <__assert_func>
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t in = (uint8_t)((uint8_t)(psrc[src_off / 8U] >> src_mod) << dst_mod) & 0xFFU;  // NOSONAR
 800046a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800046c:	08db      	lsrs	r3, r3, #3
 800046e:	6a3a      	ldr	r2, [r7, #32]
 8000470:	4413      	add	r3, r2
 8000472:	781b      	ldrb	r3, [r3, #0]
 8000474:	461a      	mov	r2, r3
 8000476:	7dfb      	ldrb	r3, [r7, #23]
 8000478:	fa42 f303 	asr.w	r3, r2, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	461a      	mov	r2, r3
 8000480:	7dbb      	ldrb	r3, [r7, #22]
 8000482:	fa02 f303 	lsl.w	r3, r2, r3
 8000486:	74bb      	strb	r3, [r7, #18]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            const uint8_t a = pdst[dst_off / 8U] & ((uint8_t) ~mask);  // NOSONAR
 8000488:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800048a:	08db      	lsrs	r3, r3, #3
 800048c:	69fa      	ldr	r2, [r7, #28]
 800048e:	4413      	add	r3, r2
 8000490:	781a      	ldrb	r2, [r3, #0]
 8000492:	7cfb      	ldrb	r3, [r7, #19]
 8000494:	43db      	mvns	r3, r3
 8000496:	b2db      	uxtb	r3, r3
 8000498:	4013      	ands	r3, r2
 800049a:	747b      	strb	r3, [r7, #17]
            const uint8_t b = in & mask;
 800049c:	7cba      	ldrb	r2, [r7, #18]
 800049e:	7cfb      	ldrb	r3, [r7, #19]
 80004a0:	4013      	ands	r3, r2
 80004a2:	743b      	strb	r3, [r7, #16]
            // Intentional violation of MISRA: indexing on a pointer.
            // This simplifies the implementation greatly and avoids pointer arithmetics.
            pdst[dst_off / 8U] = a | b;  // NOSONAR
 80004a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004a6:	08db      	lsrs	r3, r3, #3
 80004a8:	69fa      	ldr	r2, [r7, #28]
 80004aa:	4413      	add	r3, r2
 80004ac:	7c79      	ldrb	r1, [r7, #17]
 80004ae:	7c3a      	ldrb	r2, [r7, #16]
 80004b0:	430a      	orrs	r2, r1
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	701a      	strb	r2, [r3, #0]
            src_off += size;
 80004b6:	7d3b      	ldrb	r3, [r7, #20]
 80004b8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80004ba:	4413      	add	r3, r2
 80004bc:	647b      	str	r3, [r7, #68]	@ 0x44
            dst_off += size;
 80004be:	7d3b      	ldrb	r3, [r7, #20]
 80004c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80004c2:	4413      	add	r3, r2
 80004c4:	643b      	str	r3, [r7, #64]	@ 0x40
        while (last_bit > src_off)
 80004c6:	69ba      	ldr	r2, [r7, #24]
 80004c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d88e      	bhi.n	80003ec <nunavutCopyBits+0x15c>
        }
        NUNAVUT_ASSERT(last_bit == src_off);
 80004ce:	69ba      	ldr	r2, [r7, #24]
 80004d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004d2:	429a      	cmp	r2, r3
 80004d4:	d006      	beq.n	80004e4 <nunavutCopyBits+0x254>
 80004d6:	4b10      	ldr	r3, [pc, #64]	@ (8000518 <nunavutCopyBits+0x288>)
 80004d8:	4a05      	ldr	r2, [pc, #20]	@ (80004f0 <nunavutCopyBits+0x260>)
 80004da:	21bd      	movs	r1, #189	@ 0xbd
 80004dc:	4805      	ldr	r0, [pc, #20]	@ (80004f4 <nunavutCopyBits+0x264>)
 80004de:	f004 f933 	bl	8004748 <__assert_func>
    {
 80004e2:	bf00      	nop
    }
}
 80004e4:	bf00      	nop
 80004e6:	3748      	adds	r7, #72	@ 0x48
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	08005700 	.word	0x08005700
 80004f0:	08006668 	.word	0x08006668
 80004f4:	08005714 	.word	0x08005714
 80004f8:	08005764 	.word	0x08005764
 80004fc:	08005778 	.word	0x08005778
 8000500:	08005784 	.word	0x08005784
 8000504:	08005794 	.word	0x08005794
 8000508:	08005800 	.word	0x08005800
 800050c:	0800586c 	.word	0x0800586c
 8000510:	08005878 	.word	0x08005878
 8000514:	08005884 	.word	0x08005884
 8000518:	08005890 	.word	0x08005890

0800051c <nunavutSetUxx>:
    uint8_t* const buf,
    const size_t buf_size_bytes,
    const size_t off_bits,
    const uint64_t value,
    const uint8_t len_bits)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b088      	sub	sp, #32
 8000520:	af02      	add	r7, sp, #8
 8000522:	60f8      	str	r0, [r7, #12]
 8000524:	60b9      	str	r1, [r7, #8]
 8000526:	607a      	str	r2, [r7, #4]
    static_assert(64U == (sizeof(uint64_t) * 8U), "Unexpected size of uint64_t");
    NUNAVUT_ASSERT(buf != NULL);
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d105      	bne.n	800053a <nunavutSetUxx+0x1e>
 800052e:	4b13      	ldr	r3, [pc, #76]	@ (800057c <nunavutSetUxx+0x60>)
 8000530:	4a13      	ldr	r2, [pc, #76]	@ (8000580 <nunavutSetUxx+0x64>)
 8000532:	21fb      	movs	r1, #251	@ 0xfb
 8000534:	4813      	ldr	r0, [pc, #76]	@ (8000584 <nunavutSetUxx+0x68>)
 8000536:	f004 f907 	bl	8004748 <__assert_func>
    if ((buf_size_bytes * 8) < (off_bits + len_bits))
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	00da      	lsls	r2, r3, #3
 800053e:	f897 1028 	ldrb.w	r1, [r7, #40]	@ 0x28
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	440b      	add	r3, r1
 8000546:	429a      	cmp	r2, r3
 8000548:	d202      	bcs.n	8000550 <nunavutSetUxx+0x34>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800054a:	f06f 0302 	mvn.w	r3, #2
 800054e:	e010      	b.n	8000572 <nunavutSetUxx+0x56>
    }
    const size_t saturated_len_bits = nunavutChooseMin(len_bits, 64U);
 8000550:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000554:	2140      	movs	r1, #64	@ 0x40
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe8a 	bl	8000270 <nunavutChooseMin>
 800055c:	6178      	str	r0, [r7, #20]
    nunavutCopyBits(buf, off_bits, saturated_len_bits, (const uint8_t*) &value, 0U);
 800055e:	2300      	movs	r3, #0
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	f107 0320 	add.w	r3, r7, #32
 8000566:	697a      	ldr	r2, [r7, #20]
 8000568:	6879      	ldr	r1, [r7, #4]
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff fe90 	bl	8000290 <nunavutCopyBits>
    return NUNAVUT_SUCCESS;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	080058a4 	.word	0x080058a4
 8000580:	08006658 	.word	0x08006658
 8000584:	08005714 	.word	0x08005714

08000588 <uavcan_node_Health_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Health_1_0_serialize_(
    const uavcan_node_Health_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000588:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800058c:	b08c      	sub	sp, #48	@ 0x30
 800058e:	af04      	add	r7, sp, #16
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d005      	beq.n	80005a8 <uavcan_node_Health_1_0_serialize_+0x20>
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d002      	beq.n	80005a8 <uavcan_node_Health_1_0_serialize_+0x20>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <uavcan_node_Health_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 80005a8:	f06f 0301 	mvn.w	r3, #1
 80005ac:	e092      	b.n	80006d4 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 80005b4:	697b      	ldr	r3, [r7, #20]
 80005b6:	00db      	lsls	r3, r3, #3
 80005b8:	2b07      	cmp	r3, #7
 80005ba:	d802      	bhi.n	80005c2 <uavcan_node_Health_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 80005bc:	f06f 0302 	mvn.w	r3, #2
 80005c0:	e088      	b.n	80006d4 <uavcan_node_Health_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80005c2:	2300      	movs	r3, #0
 80005c4:	61fb      	str	r3, [r7, #28]
    {   // saturated uint2 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80005c6:	69fb      	ldr	r3, [r7, #28]
 80005c8:	f003 0307 	and.w	r3, r3, #7
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d005      	beq.n	80005dc <uavcan_node_Health_1_0_serialize_+0x54>
 80005d0:	4b43      	ldr	r3, [pc, #268]	@ (80006e0 <uavcan_node_Health_1_0_serialize_+0x158>)
 80005d2:	4a44      	ldr	r2, [pc, #272]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80005d4:	2185      	movs	r1, #133	@ 0x85
 80005d6:	4844      	ldr	r0, [pc, #272]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 80005d8:	f004 f8b6 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 2ULL) <= (capacity_bytes * 8U));
 80005dc:	69fb      	ldr	r3, [r7, #28]
 80005de:	2200      	movs	r2, #0
 80005e0:	469a      	mov	sl, r3
 80005e2:	4693      	mov	fp, r2
 80005e4:	f11a 0402 	adds.w	r4, sl, #2
 80005e8:	f14b 0500 	adc.w	r5, fp, #0
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	00db      	lsls	r3, r3, #3
 80005f0:	2200      	movs	r2, #0
 80005f2:	4698      	mov	r8, r3
 80005f4:	4691      	mov	r9, r2
 80005f6:	45a0      	cmp	r8, r4
 80005f8:	eb79 0305 	sbcs.w	r3, r9, r5
 80005fc:	d205      	bcs.n	800060a <uavcan_node_Health_1_0_serialize_+0x82>
 80005fe:	4b3b      	ldr	r3, [pc, #236]	@ (80006ec <uavcan_node_Health_1_0_serialize_+0x164>)
 8000600:	4a38      	ldr	r2, [pc, #224]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000602:	2186      	movs	r1, #134	@ 0x86
 8000604:	4838      	ldr	r0, [pc, #224]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000606:	f004 f89f 	bl	8004748 <__assert_func>
        uint8_t _sat0_ = obj->value;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 3U)
 8000610:	7efb      	ldrb	r3, [r7, #27]
 8000612:	2b03      	cmp	r3, #3
 8000614:	d901      	bls.n	800061a <uavcan_node_Health_1_0_serialize_+0x92>
        {
            _sat0_ = 3U;
 8000616:	2303      	movs	r3, #3
 8000618:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800061a:	69fb      	ldr	r3, [r7, #28]
 800061c:	08db      	lsrs	r3, r3, #3
 800061e:	68ba      	ldr	r2, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	7efa      	ldrb	r2, [r7, #27]
 8000624:	701a      	strb	r2, [r3, #0]
        offset_bits += 2U;
 8000626:	69fb      	ldr	r3, [r7, #28]
 8000628:	3302      	adds	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800062c:	69fb      	ldr	r3, [r7, #28]
 800062e:	f003 0307 	and.w	r3, r3, #7
 8000632:	2b00      	cmp	r3, #0
 8000634:	d035      	beq.n	80006a2 <uavcan_node_Health_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8000636:	69fb      	ldr	r3, [r7, #28]
 8000638:	b2db      	uxtb	r3, r3
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	b2db      	uxtb	r3, r3
 8000640:	f1c3 0308 	rsb	r3, r3, #8
 8000644:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 8000646:	7cfb      	ldrb	r3, [r7, #19]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d105      	bne.n	8000658 <uavcan_node_Health_1_0_serialize_+0xd0>
 800064c:	4b28      	ldr	r3, [pc, #160]	@ (80006f0 <uavcan_node_Health_1_0_serialize_+0x168>)
 800064e:	4a25      	ldr	r2, [pc, #148]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 8000650:	2192      	movs	r1, #146	@ 0x92
 8000652:	4825      	ldr	r0, [pc, #148]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 8000654:	f004 f878 	bl	8004748 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 8000658:	7cfb      	ldrb	r3, [r7, #19]
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	f04f 0200 	mov.w	r2, #0
 8000660:	f04f 0300 	mov.w	r3, #0
 8000664:	e9cd 2300 	strd	r2, r3, [sp]
 8000668:	69fa      	ldr	r2, [r7, #28]
 800066a:	6979      	ldr	r1, [r7, #20]
 800066c:	68b8      	ldr	r0, [r7, #8]
 800066e:	f7ff ff55 	bl	800051c <nunavutSetUxx>
 8000672:	4603      	mov	r3, r0
 8000674:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 8000676:	f997 3012 	ldrsb.w	r3, [r7, #18]
 800067a:	2b00      	cmp	r3, #0
 800067c:	da02      	bge.n	8000684 <uavcan_node_Health_1_0_serialize_+0xfc>
        {
            return _err0_;
 800067e:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000682:	e027      	b.n	80006d4 <uavcan_node_Health_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 8000684:	7cfb      	ldrb	r3, [r7, #19]
 8000686:	69fa      	ldr	r2, [r7, #28]
 8000688:	4413      	add	r3, r2
 800068a:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800068c:	69fb      	ldr	r3, [r7, #28]
 800068e:	f003 0307 	and.w	r3, r3, #7
 8000692:	2b00      	cmp	r3, #0
 8000694:	d005      	beq.n	80006a2 <uavcan_node_Health_1_0_serialize_+0x11a>
 8000696:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <uavcan_node_Health_1_0_serialize_+0x158>)
 8000698:	4a12      	ldr	r2, [pc, #72]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 800069a:	2199      	movs	r1, #153	@ 0x99
 800069c:	4812      	ldr	r0, [pc, #72]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 800069e:	f004 f853 	bl	8004748 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d005      	beq.n	80006b4 <uavcan_node_Health_1_0_serialize_+0x12c>
 80006a8:	4b12      	ldr	r3, [pc, #72]	@ (80006f4 <uavcan_node_Health_1_0_serialize_+0x16c>)
 80006aa:	4a0e      	ldr	r2, [pc, #56]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80006ac:	219c      	movs	r1, #156	@ 0x9c
 80006ae:	480e      	ldr	r0, [pc, #56]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 80006b0:	f004 f84a 	bl	8004748 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80006b4:	69fb      	ldr	r3, [r7, #28]
 80006b6:	f003 0307 	and.w	r3, r3, #7
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d005      	beq.n	80006ca <uavcan_node_Health_1_0_serialize_+0x142>
 80006be:	4b08      	ldr	r3, [pc, #32]	@ (80006e0 <uavcan_node_Health_1_0_serialize_+0x158>)
 80006c0:	4a08      	ldr	r2, [pc, #32]	@ (80006e4 <uavcan_node_Health_1_0_serialize_+0x15c>)
 80006c2:	219d      	movs	r1, #157	@ 0x9d
 80006c4:	4808      	ldr	r0, [pc, #32]	@ (80006e8 <uavcan_node_Health_1_0_serialize_+0x160>)
 80006c6:	f004 f83f 	bl	8004748 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 80006ca:	69fb      	ldr	r3, [r7, #28]
 80006cc:	08da      	lsrs	r2, r3, #3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 80006d2:	2300      	movs	r3, #0
}
 80006d4:	4618      	mov	r0, r3
 80006d6:	3720      	adds	r7, #32
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80006de:	bf00      	nop
 80006e0:	080058b8 	.word	0x080058b8
 80006e4:	08006614 	.word	0x08006614
 80006e8:	080058d0 	.word	0x080058d0
 80006ec:	08005918 	.word	0x08005918
 80006f0:	08005948 	.word	0x08005948
 80006f4:	08005954 	.word	0x08005954

080006f8 <uavcan_node_Mode_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Mode_1_0_serialize_(
    const uavcan_node_Mode_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 80006f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80006fc:	b08c      	sub	sp, #48	@ 0x30
 80006fe:	af04      	add	r7, sp, #16
 8000700:	60f8      	str	r0, [r7, #12]
 8000702:	60b9      	str	r1, [r7, #8]
 8000704:	607a      	str	r2, [r7, #4]
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	2b00      	cmp	r3, #0
 800070a:	d005      	beq.n	8000718 <uavcan_node_Mode_1_0_serialize_+0x20>
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d002      	beq.n	8000718 <uavcan_node_Mode_1_0_serialize_+0x20>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2b00      	cmp	r3, #0
 8000716:	d102      	bne.n	800071e <uavcan_node_Mode_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000718:	f06f 0301 	mvn.w	r3, #1
 800071c:	e092      	b.n	8000844 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	617b      	str	r3, [r7, #20]
    if ((8U * (size_t) capacity_bytes) < 8UL)
 8000724:	697b      	ldr	r3, [r7, #20]
 8000726:	00db      	lsls	r3, r3, #3
 8000728:	2b07      	cmp	r3, #7
 800072a:	d802      	bhi.n	8000732 <uavcan_node_Mode_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800072c:	f06f 0302 	mvn.w	r3, #2
 8000730:	e088      	b.n	8000844 <uavcan_node_Mode_1_0_serialize_+0x14c>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 8000732:	2300      	movs	r3, #0
 8000734:	61fb      	str	r3, [r7, #28]
    {   // saturated uint3 value
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000736:	69fb      	ldr	r3, [r7, #28]
 8000738:	f003 0307 	and.w	r3, r3, #7
 800073c:	2b00      	cmp	r3, #0
 800073e:	d005      	beq.n	800074c <uavcan_node_Mode_1_0_serialize_+0x54>
 8000740:	4b43      	ldr	r3, [pc, #268]	@ (8000850 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8000742:	4a44      	ldr	r2, [pc, #272]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8000744:	2185      	movs	r1, #133	@ 0x85
 8000746:	4844      	ldr	r0, [pc, #272]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000748:	f003 fffe 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 3ULL) <= (capacity_bytes * 8U));
 800074c:	69fb      	ldr	r3, [r7, #28]
 800074e:	2200      	movs	r2, #0
 8000750:	469a      	mov	sl, r3
 8000752:	4693      	mov	fp, r2
 8000754:	f11a 0403 	adds.w	r4, sl, #3
 8000758:	f14b 0500 	adc.w	r5, fp, #0
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	00db      	lsls	r3, r3, #3
 8000760:	2200      	movs	r2, #0
 8000762:	4698      	mov	r8, r3
 8000764:	4691      	mov	r9, r2
 8000766:	45a0      	cmp	r8, r4
 8000768:	eb79 0305 	sbcs.w	r3, r9, r5
 800076c:	d205      	bcs.n	800077a <uavcan_node_Mode_1_0_serialize_+0x82>
 800076e:	4b3b      	ldr	r3, [pc, #236]	@ (800085c <uavcan_node_Mode_1_0_serialize_+0x164>)
 8000770:	4a38      	ldr	r2, [pc, #224]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8000772:	2186      	movs	r1, #134	@ 0x86
 8000774:	4838      	ldr	r0, [pc, #224]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000776:	f003 ffe7 	bl	8004748 <__assert_func>
        uint8_t _sat0_ = obj->value;
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	76fb      	strb	r3, [r7, #27]
        if (_sat0_ > 7U)
 8000780:	7efb      	ldrb	r3, [r7, #27]
 8000782:	2b07      	cmp	r3, #7
 8000784:	d901      	bls.n	800078a <uavcan_node_Mode_1_0_serialize_+0x92>
        {
            _sat0_ = 7U;
 8000786:	2307      	movs	r3, #7
 8000788:	76fb      	strb	r3, [r7, #27]
        }
        buffer[offset_bits / 8U] = (uint8_t)(_sat0_);  // C std, 6.3.1.3 Signed and unsigned integers
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	08db      	lsrs	r3, r3, #3
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	7efa      	ldrb	r2, [r7, #27]
 8000794:	701a      	strb	r2, [r3, #0]
        offset_bits += 3U;
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3303      	adds	r3, #3
 800079a:	61fb      	str	r3, [r7, #28]
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f003 0307 	and.w	r3, r3, #7
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d035      	beq.n	8000812 <uavcan_node_Mode_1_0_serialize_+0x11a>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	f003 0307 	and.w	r3, r3, #7
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	f1c3 0308 	rsb	r3, r3, #8
 80007b4:	74fb      	strb	r3, [r7, #19]
        NUNAVUT_ASSERT(_pad0_ > 0);
 80007b6:	7cfb      	ldrb	r3, [r7, #19]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d105      	bne.n	80007c8 <uavcan_node_Mode_1_0_serialize_+0xd0>
 80007bc:	4b28      	ldr	r3, [pc, #160]	@ (8000860 <uavcan_node_Mode_1_0_serialize_+0x168>)
 80007be:	4a25      	ldr	r2, [pc, #148]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 80007c0:	2192      	movs	r1, #146	@ 0x92
 80007c2:	4825      	ldr	r0, [pc, #148]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 80007c4:	f003 ffc0 	bl	8004748 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 80007c8:	7cfb      	ldrb	r3, [r7, #19]
 80007ca:	9302      	str	r3, [sp, #8]
 80007cc:	f04f 0200 	mov.w	r2, #0
 80007d0:	f04f 0300 	mov.w	r3, #0
 80007d4:	e9cd 2300 	strd	r2, r3, [sp]
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	6979      	ldr	r1, [r7, #20]
 80007dc:	68b8      	ldr	r0, [r7, #8]
 80007de:	f7ff fe9d 	bl	800051c <nunavutSetUxx>
 80007e2:	4603      	mov	r3, r0
 80007e4:	74bb      	strb	r3, [r7, #18]
        if (_err0_ < 0)
 80007e6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	da02      	bge.n	80007f4 <uavcan_node_Mode_1_0_serialize_+0xfc>
        {
            return _err0_;
 80007ee:	f997 3012 	ldrsb.w	r3, [r7, #18]
 80007f2:	e027      	b.n	8000844 <uavcan_node_Mode_1_0_serialize_+0x14c>
        }
        offset_bits += _pad0_;
 80007f4:	7cfb      	ldrb	r3, [r7, #19]
 80007f6:	69fa      	ldr	r2, [r7, #28]
 80007f8:	4413      	add	r3, r2
 80007fa:	61fb      	str	r3, [r7, #28]
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	f003 0307 	and.w	r3, r3, #7
 8000802:	2b00      	cmp	r3, #0
 8000804:	d005      	beq.n	8000812 <uavcan_node_Mode_1_0_serialize_+0x11a>
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8000808:	4a12      	ldr	r2, [pc, #72]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800080a:	2199      	movs	r1, #153	@ 0x99
 800080c:	4812      	ldr	r0, [pc, #72]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 800080e:	f003 ff9b 	bl	8004748 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 8ULL);
 8000812:	69fb      	ldr	r3, [r7, #28]
 8000814:	2b08      	cmp	r3, #8
 8000816:	d005      	beq.n	8000824 <uavcan_node_Mode_1_0_serialize_+0x12c>
 8000818:	4b12      	ldr	r3, [pc, #72]	@ (8000864 <uavcan_node_Mode_1_0_serialize_+0x16c>)
 800081a:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 800081c:	219c      	movs	r1, #156	@ 0x9c
 800081e:	480e      	ldr	r0, [pc, #56]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000820:	f003 ff92 	bl	8004748 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f003 0307 	and.w	r3, r3, #7
 800082a:	2b00      	cmp	r3, #0
 800082c:	d005      	beq.n	800083a <uavcan_node_Mode_1_0_serialize_+0x142>
 800082e:	4b08      	ldr	r3, [pc, #32]	@ (8000850 <uavcan_node_Mode_1_0_serialize_+0x158>)
 8000830:	4a08      	ldr	r2, [pc, #32]	@ (8000854 <uavcan_node_Mode_1_0_serialize_+0x15c>)
 8000832:	219d      	movs	r1, #157	@ 0x9d
 8000834:	4808      	ldr	r0, [pc, #32]	@ (8000858 <uavcan_node_Mode_1_0_serialize_+0x160>)
 8000836:	f003 ff87 	bl	8004748 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	08da      	lsrs	r2, r3, #3
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8000842:	2300      	movs	r3, #0
}
 8000844:	4618      	mov	r0, r3
 8000846:	3720      	adds	r7, #32
 8000848:	46bd      	mov	sp, r7
 800084a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800084e:	bf00      	nop
 8000850:	080058b8 	.word	0x080058b8
 8000854:	08006638 	.word	0x08006638
 8000858:	08005968 	.word	0x08005968
 800085c:	080059b0 	.word	0x080059b0
 8000860:	08005948 	.word	0x08005948
 8000864:	08005954 	.word	0x08005954

08000868 <uavcan_node_Heartbeat_1_0_serialize_>:
///                                 layer. In case of error this value is undefined.
///
/// @returns Negative on error, zero on success.
static inline int8_t uavcan_node_Heartbeat_1_0_serialize_(
    const uavcan_node_Heartbeat_1_0* const obj, uint8_t* const buffer,  size_t* const inout_buffer_size_bytes)
{
 8000868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800086c:	b0a0      	sub	sp, #128	@ 0x80
 800086e:	af04      	add	r7, sp, #16
 8000870:	6578      	str	r0, [r7, #84]	@ 0x54
 8000872:	6539      	str	r1, [r7, #80]	@ 0x50
 8000874:	64fa      	str	r2, [r7, #76]	@ 0x4c
    if ((obj == NULL) || (buffer == NULL) || (inout_buffer_size_bytes == NULL))
 8000876:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000878:	2b00      	cmp	r3, #0
 800087a:	d005      	beq.n	8000888 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 800087c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800087e:	2b00      	cmp	r3, #0
 8000880:	d002      	beq.n	8000888 <uavcan_node_Heartbeat_1_0_serialize_+0x20>
 8000882:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000884:	2b00      	cmp	r3, #0
 8000886:	d102      	bne.n	800088e <uavcan_node_Heartbeat_1_0_serialize_+0x26>
    {
        return -NUNAVUT_ERROR_INVALID_ARGUMENT;
 8000888:	f06f 0301 	mvn.w	r3, #1
 800088c:	e260      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    const size_t capacity_bytes = *inout_buffer_size_bytes;
 800088e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	66bb      	str	r3, [r7, #104]	@ 0x68
    if ((8U * (size_t) capacity_bytes) < 56UL)
 8000894:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000896:	00db      	lsls	r3, r3, #3
 8000898:	2b37      	cmp	r3, #55	@ 0x37
 800089a:	d802      	bhi.n	80008a2 <uavcan_node_Heartbeat_1_0_serialize_+0x3a>
    {
        return -NUNAVUT_ERROR_SERIALIZATION_BUFFER_TOO_SMALL;
 800089c:	f06f 0302 	mvn.w	r3, #2
 80008a0:	e256      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
    }
    // Notice that fields that are not an integer number of bytes long may overrun the space allocated for them
    // in the serialization buffer up to the next byte boundary. This is by design and is guaranteed to be safe.
    size_t offset_bits = 0U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
    {   // saturated uint32 uptime
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80008a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008a8:	f003 0307 	and.w	r3, r3, #7
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d005      	beq.n	80008bc <uavcan_node_Heartbeat_1_0_serialize_+0x54>
 80008b0:	4bb0      	ldr	r3, [pc, #704]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80008b2:	4ab1      	ldr	r2, [pc, #708]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80008b4:	218a      	movs	r1, #138	@ 0x8a
 80008b6:	48b1      	ldr	r0, [pc, #708]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80008b8:	f003 ff46 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 32ULL) <= (capacity_bytes * 8U));
 80008bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008be:	2200      	movs	r2, #0
 80008c0:	4698      	mov	r8, r3
 80008c2:	4691      	mov	r9, r2
 80008c4:	f118 0420 	adds.w	r4, r8, #32
 80008c8:	f149 0500 	adc.w	r5, r9, #0
 80008cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80008ce:	00db      	lsls	r3, r3, #3
 80008d0:	2200      	movs	r2, #0
 80008d2:	469a      	mov	sl, r3
 80008d4:	4693      	mov	fp, r2
 80008d6:	45a2      	cmp	sl, r4
 80008d8:	eb7b 0305 	sbcs.w	r3, fp, r5
 80008dc:	d205      	bcs.n	80008ea <uavcan_node_Heartbeat_1_0_serialize_+0x82>
 80008de:	4ba8      	ldr	r3, [pc, #672]	@ (8000b80 <uavcan_node_Heartbeat_1_0_serialize_+0x318>)
 80008e0:	4aa5      	ldr	r2, [pc, #660]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80008e2:	218b      	movs	r1, #139	@ 0x8b
 80008e4:	48a5      	ldr	r0, [pc, #660]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80008e6:	f003 ff2f 	bl	8004748 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        (void) memmove(&buffer[offset_bits / 8U], &obj->uptime, 4U);
 80008ea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008ec:	08da      	lsrs	r2, r3, #3
 80008ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80008f0:	441a      	add	r2, r3
 80008f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	6013      	str	r3, [r2, #0]
        offset_bits += 32U;
 80008f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80008fa:	3320      	adds	r3, #32
 80008fc:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 80008fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000900:	f003 0307 	and.w	r3, r3, #7
 8000904:	2b00      	cmp	r3, #0
 8000906:	d03a      	beq.n	800097e <uavcan_node_Heartbeat_1_0_serialize_+0x116>
    {
        const uint8_t _pad0_ = (uint8_t)(8U - offset_bits % 8U);
 8000908:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f1c3 0308 	rsb	r3, r3, #8
 8000916:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        NUNAVUT_ASSERT(_pad0_ > 0);
 800091a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <uavcan_node_Heartbeat_1_0_serialize_+0xc6>
 8000922:	4b98      	ldr	r3, [pc, #608]	@ (8000b84 <uavcan_node_Heartbeat_1_0_serialize_+0x31c>)
 8000924:	4a94      	ldr	r2, [pc, #592]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000926:	2193      	movs	r1, #147	@ 0x93
 8000928:	4894      	ldr	r0, [pc, #592]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800092a:	f003 ff0d 	bl	8004748 <__assert_func>
        const int8_t _err0_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad0_);  // Optimize?
 800092e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8000932:	9302      	str	r3, [sp, #8]
 8000934:	f04f 0200 	mov.w	r2, #0
 8000938:	f04f 0300 	mov.w	r3, #0
 800093c:	e9cd 2300 	strd	r2, r3, [sp]
 8000940:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000942:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000944:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000946:	f7ff fde9 	bl	800051c <nunavutSetUxx>
 800094a:	4603      	mov	r3, r0
 800094c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
        if (_err0_ < 0)
 8000950:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 8000954:	2b00      	cmp	r3, #0
 8000956:	da02      	bge.n	800095e <uavcan_node_Heartbeat_1_0_serialize_+0xf6>
        {
            return _err0_;
 8000958:	f997 3066 	ldrsb.w	r3, [r7, #102]	@ 0x66
 800095c:	e1f8      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad0_;
 800095e:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8000962:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000964:	4413      	add	r3, r2
 8000966:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000968:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	2b00      	cmp	r3, #0
 8000970:	d005      	beq.n	800097e <uavcan_node_Heartbeat_1_0_serialize_+0x116>
 8000972:	4b80      	ldr	r3, [pc, #512]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000974:	4a80      	ldr	r2, [pc, #512]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000976:	219a      	movs	r1, #154	@ 0x9a
 8000978:	4880      	ldr	r0, [pc, #512]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 800097a:	f003 fee5 	bl	8004748 <__assert_func>
    }
    {   // uavcan.node.Health.1.0 health
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 800097e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000980:	f003 0307 	and.w	r3, r3, #7
 8000984:	2b00      	cmp	r3, #0
 8000986:	d005      	beq.n	8000994 <uavcan_node_Heartbeat_1_0_serialize_+0x12c>
 8000988:	4b7a      	ldr	r3, [pc, #488]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 800098a:	4a7b      	ldr	r2, [pc, #492]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 800098c:	219d      	movs	r1, #157	@ 0x9d
 800098e:	487b      	ldr	r0, [pc, #492]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000990:	f003 feda 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000994:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000996:	f003 0307 	and.w	r3, r3, #7
 800099a:	2b00      	cmp	r3, #0
 800099c:	d005      	beq.n	80009aa <uavcan_node_Heartbeat_1_0_serialize_+0x142>
 800099e:	4b75      	ldr	r3, [pc, #468]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 80009a0:	4a75      	ldr	r2, [pc, #468]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80009a2:	219e      	movs	r1, #158	@ 0x9e
 80009a4:	4875      	ldr	r0, [pc, #468]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80009a6:	f003 fecf 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 80009aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009ac:	2200      	movs	r2, #0
 80009ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80009b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80009b2:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80009b6:	460b      	mov	r3, r1
 80009b8:	3308      	adds	r3, #8
 80009ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80009bc:	4613      	mov	r3, r2
 80009be:	f143 0300 	adc.w	r3, r3, #0
 80009c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80009c4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80009c6:	00db      	lsls	r3, r3, #3
 80009c8:	2200      	movs	r2, #0
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80009cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80009ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80009d2:	4623      	mov	r3, r4
 80009d4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 80009d8:	4602      	mov	r2, r0
 80009da:	4293      	cmp	r3, r2
 80009dc:	462b      	mov	r3, r5
 80009de:	460a      	mov	r2, r1
 80009e0:	4193      	sbcs	r3, r2
 80009e2:	d205      	bcs.n	80009f0 <uavcan_node_Heartbeat_1_0_serialize_+0x188>
 80009e4:	4b68      	ldr	r3, [pc, #416]	@ (8000b88 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 80009e6:	4a64      	ldr	r2, [pc, #400]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 80009e8:	219f      	movs	r1, #159	@ 0x9f
 80009ea:	4864      	ldr	r0, [pc, #400]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 80009ec:	f003 feac 	bl	8004748 <__assert_func>
        size_t _size_bytes0_ = 1UL;  // Nested object (max) size, in bytes.
 80009f0:	2301      	movs	r3, #1
 80009f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 80009f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80009f6:	f003 0307 	and.w	r3, r3, #7
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d005      	beq.n	8000a0a <uavcan_node_Heartbeat_1_0_serialize_+0x1a2>
 80009fe:	4b5d      	ldr	r3, [pc, #372]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000a00:	4a5d      	ldr	r2, [pc, #372]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a02:	21a1      	movs	r1, #161	@ 0xa1
 8000a04:	485d      	ldr	r0, [pc, #372]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a06:	f003 fe9f 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes0_) <= capacity_bytes);
 8000a0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a0c:	08da      	lsrs	r2, r3, #3
 8000a0e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a10:	4413      	add	r3, r2
 8000a12:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d205      	bcs.n	8000a24 <uavcan_node_Heartbeat_1_0_serialize_+0x1bc>
 8000a18:	4b5c      	ldr	r3, [pc, #368]	@ (8000b8c <uavcan_node_Heartbeat_1_0_serialize_+0x324>)
 8000a1a:	4a57      	ldr	r2, [pc, #348]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a1c:	21a2      	movs	r1, #162	@ 0xa2
 8000a1e:	4857      	ldr	r0, [pc, #348]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a20:	f003 fe92 	bl	8004748 <__assert_func>
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000a26:	1d18      	adds	r0, r3, #4
            &obj->health, &buffer[offset_bits / 8U], &_size_bytes0_);
 8000a28:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a2a:	08da      	lsrs	r2, r3, #3
 8000a2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000a2e:	1899      	adds	r1, r3, r2
        int8_t _err1_ = uavcan_node_Health_1_0_serialize_(
 8000a30:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000a34:	461a      	mov	r2, r3
 8000a36:	f7ff fda7 	bl	8000588 <uavcan_node_Health_1_0_serialize_>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
        if (_err1_ < 0)
 8000a40:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	da02      	bge.n	8000a4e <uavcan_node_Heartbeat_1_0_serialize_+0x1e6>
        {
            return _err1_;
 8000a48:	f997 3065 	ldrsb.w	r3, [r7, #101]	@ 0x65
 8000a4c:	e180      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes0_ * 8U) == 8ULL);
 8000a4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a50:	00db      	lsls	r3, r3, #3
 8000a52:	2b08      	cmp	r3, #8
 8000a54:	d005      	beq.n	8000a62 <uavcan_node_Heartbeat_1_0_serialize_+0x1fa>
 8000a56:	4b4e      	ldr	r3, [pc, #312]	@ (8000b90 <uavcan_node_Heartbeat_1_0_serialize_+0x328>)
 8000a58:	4a47      	ldr	r2, [pc, #284]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a5a:	21aa      	movs	r1, #170	@ 0xaa
 8000a5c:	4847      	ldr	r0, [pc, #284]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a5e:	f003 fe73 	bl	8004748 <__assert_func>
        offset_bits += _size_bytes0_ * 8U;  // Advance by the size of the nested object.
 8000a62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a68:	4413      	add	r3, r2
 8000a6a:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000a6e:	00db      	lsls	r3, r3, #3
 8000a70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d905      	bls.n	8000a82 <uavcan_node_Heartbeat_1_0_serialize_+0x21a>
 8000a76:	4b47      	ldr	r3, [pc, #284]	@ (8000b94 <uavcan_node_Heartbeat_1_0_serialize_+0x32c>)
 8000a78:	4a3f      	ldr	r2, [pc, #252]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000a7a:	21ac      	movs	r1, #172	@ 0xac
 8000a7c:	483f      	ldr	r0, [pc, #252]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000a7e:	f003 fe63 	bl	8004748 <__assert_func>
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000a82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a84:	f003 0307 	and.w	r3, r3, #7
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d03a      	beq.n	8000b02 <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
    {
        const uint8_t _pad1_ = (uint8_t)(8U - offset_bits % 8U);
 8000a8c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	f1c3 0308 	rsb	r3, r3, #8
 8000a9a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
        NUNAVUT_ASSERT(_pad1_ > 0);
 8000a9e:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d105      	bne.n	8000ab2 <uavcan_node_Heartbeat_1_0_serialize_+0x24a>
 8000aa6:	4b3c      	ldr	r3, [pc, #240]	@ (8000b98 <uavcan_node_Heartbeat_1_0_serialize_+0x330>)
 8000aa8:	4a33      	ldr	r2, [pc, #204]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000aaa:	21b1      	movs	r1, #177	@ 0xb1
 8000aac:	4833      	ldr	r0, [pc, #204]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000aae:	f003 fe4b 	bl	8004748 <__assert_func>
        const int8_t _err2_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad1_);  // Optimize?
 8000ab2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000ab6:	9302      	str	r3, [sp, #8]
 8000ab8:	f04f 0200 	mov.w	r2, #0
 8000abc:	f04f 0300 	mov.w	r3, #0
 8000ac0:	e9cd 2300 	strd	r2, r3, [sp]
 8000ac4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ac6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000ac8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000aca:	f7ff fd27 	bl	800051c <nunavutSetUxx>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
        if (_err2_ < 0)
 8000ad4:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	da02      	bge.n	8000ae2 <uavcan_node_Heartbeat_1_0_serialize_+0x27a>
        {
            return _err2_;
 8000adc:	f997 3063 	ldrsb.w	r3, [r7, #99]	@ 0x63
 8000ae0:	e136      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad1_;
 8000ae2:	f897 3064 	ldrb.w	r3, [r7, #100]	@ 0x64
 8000ae6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ae8:	4413      	add	r3, r2
 8000aea:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000aec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d005      	beq.n	8000b02 <uavcan_node_Heartbeat_1_0_serialize_+0x29a>
 8000af6:	4b1f      	ldr	r3, [pc, #124]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000afa:	21b8      	movs	r1, #184	@ 0xb8
 8000afc:	481f      	ldr	r0, [pc, #124]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000afe:	f003 fe23 	bl	8004748 <__assert_func>
    }
    {   // uavcan.node.Mode.1.0 mode
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d005      	beq.n	8000b18 <uavcan_node_Heartbeat_1_0_serialize_+0x2b0>
 8000b0c:	4b19      	ldr	r3, [pc, #100]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000b0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b10:	21bb      	movs	r1, #187	@ 0xbb
 8000b12:	481a      	ldr	r0, [pc, #104]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b14:	f003 fe18 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000b18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d005      	beq.n	8000b2e <uavcan_node_Heartbeat_1_0_serialize_+0x2c6>
 8000b22:	4b14      	ldr	r3, [pc, #80]	@ (8000b74 <uavcan_node_Heartbeat_1_0_serialize_+0x30c>)
 8000b24:	4a14      	ldr	r2, [pc, #80]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b26:	21bc      	movs	r1, #188	@ 0xbc
 8000b28:	4814      	ldr	r0, [pc, #80]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b2a:	f003 fe0d 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000b2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000b30:	2200      	movs	r2, #0
 8000b32:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000b34:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000b36:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8000b3a:	460b      	mov	r3, r1
 8000b3c:	3308      	adds	r3, #8
 8000b3e:	623b      	str	r3, [r7, #32]
 8000b40:	4613      	mov	r3, r2
 8000b42:	f143 0300 	adc.w	r3, r3, #0
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000b4a:	00db      	lsls	r3, r3, #3
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	61bb      	str	r3, [r7, #24]
 8000b50:	61fa      	str	r2, [r7, #28]
 8000b52:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000b56:	4623      	mov	r3, r4
 8000b58:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8000b5c:	4602      	mov	r2, r0
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	462b      	mov	r3, r5
 8000b62:	460a      	mov	r2, r1
 8000b64:	4193      	sbcs	r3, r2
 8000b66:	d219      	bcs.n	8000b9c <uavcan_node_Heartbeat_1_0_serialize_+0x334>
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <uavcan_node_Heartbeat_1_0_serialize_+0x320>)
 8000b6a:	4a03      	ldr	r2, [pc, #12]	@ (8000b78 <uavcan_node_Heartbeat_1_0_serialize_+0x310>)
 8000b6c:	21bd      	movs	r1, #189	@ 0xbd
 8000b6e:	4803      	ldr	r0, [pc, #12]	@ (8000b7c <uavcan_node_Heartbeat_1_0_serialize_+0x314>)
 8000b70:	f003 fdea 	bl	8004748 <__assert_func>
 8000b74:	080058b8 	.word	0x080058b8
 8000b78:	080065ec 	.word	0x080065ec
 8000b7c:	080059e0 	.word	0x080059e0
 8000b80:	08005a2c 	.word	0x08005a2c
 8000b84:	08005948 	.word	0x08005948
 8000b88:	08005a5c 	.word	0x08005a5c
 8000b8c:	08005a8c 	.word	0x08005a8c
 8000b90:	08005ac4 	.word	0x08005ac4
 8000b94:	08005ae4 	.word	0x08005ae4
 8000b98:	08005b0c 	.word	0x08005b0c
        size_t _size_bytes1_ = 1UL;  // Nested object (max) size, in bytes.
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	65bb      	str	r3, [r7, #88]	@ 0x58
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000ba0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ba2:	f003 0307 	and.w	r3, r3, #7
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d005      	beq.n	8000bb6 <uavcan_node_Heartbeat_1_0_serialize_+0x34e>
 8000baa:	4b6c      	ldr	r3, [pc, #432]	@ (8000d5c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000bac:	4a6c      	ldr	r2, [pc, #432]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000bae:	21bf      	movs	r1, #191	@ 0xbf
 8000bb0:	486c      	ldr	r0, [pc, #432]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000bb2:	f003 fdc9 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits / 8U + _size_bytes1_) <= capacity_bytes);
 8000bb6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bb8:	08da      	lsrs	r2, r3, #3
 8000bba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bbc:	4413      	add	r3, r2
 8000bbe:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8000bc0:	429a      	cmp	r2, r3
 8000bc2:	d205      	bcs.n	8000bd0 <uavcan_node_Heartbeat_1_0_serialize_+0x368>
 8000bc4:	4b68      	ldr	r3, [pc, #416]	@ (8000d68 <uavcan_node_Heartbeat_1_0_serialize_+0x500>)
 8000bc6:	4a66      	ldr	r2, [pc, #408]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000bc8:	21c0      	movs	r1, #192	@ 0xc0
 8000bca:	4866      	ldr	r0, [pc, #408]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000bcc:	f003 fdbc 	bl	8004748 <__assert_func>
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000bd2:	1d58      	adds	r0, r3, #5
            &obj->mode, &buffer[offset_bits / 8U], &_size_bytes1_);
 8000bd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000bd6:	08db      	lsrs	r3, r3, #3
 8000bd8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000bda:	4413      	add	r3, r2
        int8_t _err3_ = uavcan_node_Mode_1_0_serialize_(
 8000bdc:	f107 0258 	add.w	r2, r7, #88	@ 0x58
 8000be0:	4619      	mov	r1, r3
 8000be2:	f7ff fd89 	bl	80006f8 <uavcan_node_Mode_1_0_serialize_>
 8000be6:	4603      	mov	r3, r0
 8000be8:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
        if (_err3_ < 0)
 8000bec:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	da02      	bge.n	8000bfa <uavcan_node_Heartbeat_1_0_serialize_+0x392>
        {
            return _err3_;
 8000bf4:	f997 3062 	ldrsb.w	r3, [r7, #98]	@ 0x62
 8000bf8:	e0aa      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
        NUNAVUT_ASSERT((_size_bytes1_ * 8U) == 8ULL);
 8000bfa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000bfc:	00db      	lsls	r3, r3, #3
 8000bfe:	2b08      	cmp	r3, #8
 8000c00:	d005      	beq.n	8000c0e <uavcan_node_Heartbeat_1_0_serialize_+0x3a6>
 8000c02:	4b5a      	ldr	r3, [pc, #360]	@ (8000d6c <uavcan_node_Heartbeat_1_0_serialize_+0x504>)
 8000c04:	4a56      	ldr	r2, [pc, #344]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c06:	21c8      	movs	r1, #200	@ 0xc8
 8000c08:	4856      	ldr	r0, [pc, #344]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c0a:	f003 fd9d 	bl	8004748 <__assert_func>
        offset_bits += _size_bytes1_ * 8U;  // Advance by the size of the nested object.
 8000c0e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c10:	00db      	lsls	r3, r3, #3
 8000c12:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c14:	4413      	add	r3, r2
 8000c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits <= (capacity_bytes * 8U));
 8000c18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c1a:	00db      	lsls	r3, r3, #3
 8000c1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000c1e:	429a      	cmp	r2, r3
 8000c20:	d905      	bls.n	8000c2e <uavcan_node_Heartbeat_1_0_serialize_+0x3c6>
 8000c22:	4b53      	ldr	r3, [pc, #332]	@ (8000d70 <uavcan_node_Heartbeat_1_0_serialize_+0x508>)
 8000c24:	4a4e      	ldr	r2, [pc, #312]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c26:	21ca      	movs	r1, #202	@ 0xca
 8000c28:	484e      	ldr	r0, [pc, #312]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c2a:	f003 fd8d 	bl	8004748 <__assert_func>
    }
    {   // saturated uint8 vendor_specific_status_code
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000c2e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d005      	beq.n	8000c44 <uavcan_node_Heartbeat_1_0_serialize_+0x3dc>
 8000c38:	4b48      	ldr	r3, [pc, #288]	@ (8000d5c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000c3a:	4a49      	ldr	r2, [pc, #292]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c3c:	21cd      	movs	r1, #205	@ 0xcd
 8000c3e:	4849      	ldr	r0, [pc, #292]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c40:	f003 fd82 	bl	8004748 <__assert_func>
        NUNAVUT_ASSERT((offset_bits + 8ULL) <= (capacity_bytes * 8U));
 8000c44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c46:	2200      	movs	r2, #0
 8000c48:	613b      	str	r3, [r7, #16]
 8000c4a:	617a      	str	r2, [r7, #20]
 8000c4c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8000c50:	460b      	mov	r3, r1
 8000c52:	3308      	adds	r3, #8
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	4613      	mov	r3, r2
 8000c58:	f143 0300 	adc.w	r3, r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8000c60:	00db      	lsls	r3, r3, #3
 8000c62:	2200      	movs	r2, #0
 8000c64:	603b      	str	r3, [r7, #0]
 8000c66:	607a      	str	r2, [r7, #4]
 8000c68:	e9d7 4500 	ldrd	r4, r5, [r7]
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000c72:	4602      	mov	r2, r0
 8000c74:	4293      	cmp	r3, r2
 8000c76:	462b      	mov	r3, r5
 8000c78:	460a      	mov	r2, r1
 8000c7a:	4193      	sbcs	r3, r2
 8000c7c:	d205      	bcs.n	8000c8a <uavcan_node_Heartbeat_1_0_serialize_+0x422>
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d74 <uavcan_node_Heartbeat_1_0_serialize_+0x50c>)
 8000c80:	4a37      	ldr	r2, [pc, #220]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000c82:	21ce      	movs	r1, #206	@ 0xce
 8000c84:	4837      	ldr	r0, [pc, #220]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000c86:	f003 fd5f 	bl	8004748 <__assert_func>
        // Saturation code not emitted -- native representation matches the serialized representation.
        buffer[offset_bits / 8U] = (uint8_t)(obj->vendor_specific_status_code);  // C std, 6.3.1.3 Signed and unsigned integers
 8000c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c8c:	08db      	lsrs	r3, r3, #3
 8000c8e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000c90:	4413      	add	r3, r2
 8000c92:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000c94:	7992      	ldrb	r2, [r2, #6]
 8000c96:	701a      	strb	r2, [r3, #0]
        offset_bits += 8U;
 8000c98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000c9a:	3308      	adds	r3, #8
 8000c9c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }
    if (offset_bits % 8U != 0U)  // Pad to 8 bits. TODO: Eliminate redundant padding checks.
 8000c9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000ca0:	f003 0307 	and.w	r3, r3, #7
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d03a      	beq.n	8000d1e <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
    {
        const uint8_t _pad2_ = (uint8_t)(8U - offset_bits % 8U);
 8000ca8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	b2db      	uxtb	r3, r3
 8000cb2:	f1c3 0308 	rsb	r3, r3, #8
 8000cb6:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
        NUNAVUT_ASSERT(_pad2_ > 0);
 8000cba:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d105      	bne.n	8000cce <uavcan_node_Heartbeat_1_0_serialize_+0x466>
 8000cc2:	4b2d      	ldr	r3, [pc, #180]	@ (8000d78 <uavcan_node_Heartbeat_1_0_serialize_+0x510>)
 8000cc4:	4a26      	ldr	r2, [pc, #152]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000cc6:	21d6      	movs	r1, #214	@ 0xd6
 8000cc8:	4826      	ldr	r0, [pc, #152]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000cca:	f003 fd3d 	bl	8004748 <__assert_func>
        const int8_t _err4_ = nunavutSetUxx(&buffer[0], capacity_bytes, offset_bits, 0U, _pad2_);  // Optimize?
 8000cce:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000cd2:	9302      	str	r3, [sp, #8]
 8000cd4:	f04f 0200 	mov.w	r2, #0
 8000cd8:	f04f 0300 	mov.w	r3, #0
 8000cdc:	e9cd 2300 	strd	r2, r3, [sp]
 8000ce0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000ce2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000ce4:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8000ce6:	f7ff fc19 	bl	800051c <nunavutSetUxx>
 8000cea:	4603      	mov	r3, r0
 8000cec:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
        if (_err4_ < 0)
 8000cf0:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da02      	bge.n	8000cfe <uavcan_node_Heartbeat_1_0_serialize_+0x496>
        {
            return _err4_;
 8000cf8:	f997 3060 	ldrsb.w	r3, [r7, #96]	@ 0x60
 8000cfc:	e028      	b.n	8000d50 <uavcan_node_Heartbeat_1_0_serialize_+0x4e8>
        }
        offset_bits += _pad2_;
 8000cfe:	f897 3061 	ldrb.w	r3, [r7, #97]	@ 0x61
 8000d02:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000d04:	4413      	add	r3, r2
 8000d06:	66fb      	str	r3, [r7, #108]	@ 0x6c
        NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000d08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d0a:	f003 0307 	and.w	r3, r3, #7
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d005      	beq.n	8000d1e <uavcan_node_Heartbeat_1_0_serialize_+0x4b6>
 8000d12:	4b12      	ldr	r3, [pc, #72]	@ (8000d5c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000d14:	4a12      	ldr	r2, [pc, #72]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d16:	21dd      	movs	r1, #221	@ 0xdd
 8000d18:	4812      	ldr	r0, [pc, #72]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d1a:	f003 fd15 	bl	8004748 <__assert_func>
    }
    // It is assumed that we know the exact type of the serialized entity, hence we expect the size to match.
    NUNAVUT_ASSERT(offset_bits == 56ULL);
 8000d1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d20:	2b38      	cmp	r3, #56	@ 0x38
 8000d22:	d005      	beq.n	8000d30 <uavcan_node_Heartbeat_1_0_serialize_+0x4c8>
 8000d24:	4b15      	ldr	r3, [pc, #84]	@ (8000d7c <uavcan_node_Heartbeat_1_0_serialize_+0x514>)
 8000d26:	4a0e      	ldr	r2, [pc, #56]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d28:	21e0      	movs	r1, #224	@ 0xe0
 8000d2a:	480e      	ldr	r0, [pc, #56]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d2c:	f003 fd0c 	bl	8004748 <__assert_func>
    NUNAVUT_ASSERT(offset_bits % 8U == 0U);
 8000d30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d005      	beq.n	8000d46 <uavcan_node_Heartbeat_1_0_serialize_+0x4de>
 8000d3a:	4b08      	ldr	r3, [pc, #32]	@ (8000d5c <uavcan_node_Heartbeat_1_0_serialize_+0x4f4>)
 8000d3c:	4a08      	ldr	r2, [pc, #32]	@ (8000d60 <uavcan_node_Heartbeat_1_0_serialize_+0x4f8>)
 8000d3e:	21e1      	movs	r1, #225	@ 0xe1
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <uavcan_node_Heartbeat_1_0_serialize_+0x4fc>)
 8000d42:	f003 fd01 	bl	8004748 <__assert_func>
    *inout_buffer_size_bytes = (size_t) (offset_bits / 8U);
 8000d46:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000d4c:	601a      	str	r2, [r3, #0]
    return NUNAVUT_SUCCESS;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	3770      	adds	r7, #112	@ 0x70
 8000d54:	46bd      	mov	sp, r7
 8000d56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8000d5a:	bf00      	nop
 8000d5c:	080058b8 	.word	0x080058b8
 8000d60:	080065ec 	.word	0x080065ec
 8000d64:	080059e0 	.word	0x080059e0
 8000d68:	08005b18 	.word	0x08005b18
 8000d6c:	08005b50 	.word	0x08005b50
 8000d70:	08005ae4 	.word	0x08005ae4
 8000d74:	08005a5c 	.word	0x08005a5c
 8000d78:	08005b70 	.word	0x08005b70
 8000d7c:	08005b7c 	.word	0x08005b7c

08000d80 <micros>:
// Application-specific function prototypes
void process_canard_TX_queue(void);

// return useconds - not implemented yet
uint32_t micros(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8e:	4770      	bx	lr

08000d90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d90:	b5b0      	push	{r4, r5, r7, lr}
 8000d92:	b09c      	sub	sp, #112	@ 0x70
 8000d94:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d96:	f000 fb98 	bl	80014ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d9a:	f000 f8ad 	bl	8000ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d9e:	f000 f927 	bl	8000ff0 <MX_GPIO_Init>
  MX_CAN1_Init();
 8000da2:	f000 f8ef 	bl	8000f84 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_Start(&hcan1);
 8000da6:	484b      	ldr	r0, [pc, #300]	@ (8000ed4 <main+0x144>)
 8000da8:	f000 fded 	bl	8001986 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000dac:	2102      	movs	r1, #2
 8000dae:	4849      	ldr	r0, [pc, #292]	@ (8000ed4 <main+0x144>)
 8000db0:	f000 fefd 	bl	8001bae <HAL_CAN_ActivateNotification>

    CAN_FilterTypeDef Filter;

    // accept all frames - filtration is managed by software
    Filter.FilterIdHigh = 0x0000;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	@ 0x34
    Filter.FilterIdLow = 0x0000;
 8000db8:	2300      	movs	r3, #0
 8000dba:	63bb      	str	r3, [r7, #56]	@ 0x38
    Filter.FilterMaskIdHigh = 0x0000;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
    Filter.FilterMaskIdLow = 0x0000;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	643b      	str	r3, [r7, #64]	@ 0x40
    Filter.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	647b      	str	r3, [r7, #68]	@ 0x44
    Filter.FilterBank = 0;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	64bb      	str	r3, [r7, #72]	@ 0x48
    Filter.FilterMode = CAN_FILTERMODE_IDMASK;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    Filter.FilterScale = CAN_FILTERSCALE_32BIT;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	653b      	str	r3, [r7, #80]	@ 0x50
    Filter.FilterActivation = ENABLE;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	657b      	str	r3, [r7, #84]	@ 0x54
    Filter.SlaveStartFilterBank = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	65bb      	str	r3, [r7, #88]	@ 0x58

    HAL_CAN_ConfigFilter(&hcan1, &Filter);
 8000ddc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000de0:	4619      	mov	r1, r3
 8000de2:	483c      	ldr	r0, [pc, #240]	@ (8000ed4 <main+0x144>)
 8000de4:	f000 fd05 	bl	80017f2 <HAL_CAN_ConfigFilter>

    // Initialization of a canard instance with the previous allocator
    canard = canardInit(&memAllocate, &memFree);
 8000de8:	4c3b      	ldr	r4, [pc, #236]	@ (8000ed8 <main+0x148>)
 8000dea:	463b      	mov	r3, r7
 8000dec:	4a3b      	ldr	r2, [pc, #236]	@ (8000edc <main+0x14c>)
 8000dee:	493c      	ldr	r1, [pc, #240]	@ (8000ee0 <main+0x150>)
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 fb8d 	bl	8004510 <canardInit>
 8000df6:	4625      	mov	r5, r4
 8000df8:	463c      	mov	r4, r7
 8000dfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dfe:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8000e02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    canard.node_id = 1;
 8000e06:	4b34      	ldr	r3, [pc, #208]	@ (8000ed8 <main+0x148>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	711a      	strb	r2, [r3, #4]

    queue = canardTxInit(	100,                 		// Limit the size of the queue at 100 frames.
 8000e0c:	4c35      	ldr	r4, [pc, #212]	@ (8000ee4 <main+0x154>)
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2208      	movs	r2, #8
 8000e12:	2164      	movs	r1, #100	@ 0x64
 8000e14:	4618      	mov	r0, r3
 8000e16:	f003 fbb9 	bl	800458c <canardTxInit>
 8000e1a:	4625      	mov	r5, r4
 8000e1c:	463c      	mov	r4, r7
 8000e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e22:	6823      	ldr	r3, [r4, #0]
 8000e24:	602b      	str	r3, [r5, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Create a heartbeat message
	      uavcan_node_Heartbeat_1_0 test_heartbeat = {.uptime = test_uptimeSec,
 8000e26:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	601a      	str	r2, [r3, #0]
 8000e2e:	605a      	str	r2, [r3, #4]
 8000e30:	4b2d      	ldr	r3, [pc, #180]	@ (8000ee8 <main+0x158>)
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
	                                                  .health = {uavcan_node_Health_1_0_NOMINAL},
	                                                  .mode = {uavcan_node_Mode_1_0_OPERATIONAL}};

	      // Serialize the heartbeat message
	      if (uavcan_node_Heartbeat_1_0_serialize_(&test_heartbeat, hbeat_ser_buf, &hbeat_ser_buf_size) < 0)
 8000e36:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e3a:	4a2c      	ldr	r2, [pc, #176]	@ (8000eec <main+0x15c>)
 8000e3c:	492c      	ldr	r1, [pc, #176]	@ (8000ef0 <main+0x160>)
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f7ff fd12 	bl	8000868 <uavcan_node_Heartbeat_1_0_serialize_>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	da01      	bge.n	8000e4e <main+0xbe>
	      {
	        Error_Handler();
 8000e4a:	f000 f956 	bl	80010fa <Error_Handler>
	      }

	      // Create a transfer for the heartbeat message
	      const CanardTransferMetadata transfer_metadata = {.priority = CanardPriorityNominal,
 8000e4e:	2304      	movs	r3, #4
 8000e50:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 8000e5a:	f641 5355 	movw	r3, #7509	@ 0x1d55
 8000e5e:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000e60:	23ff      	movs	r3, #255	@ 0xff
 8000e62:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000e66:	4b23      	ldr	r3, [pc, #140]	@ (8000ef4 <main+0x164>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
	                                                        .transfer_kind = CanardTransferKindMessage,
	                                                        .port_id = uavcan_node_Heartbeat_1_0_FIXED_PORT_ID_,
	                                                        .remote_node_id = CANARD_NODE_ID_UNSET,
	                                                        .transfer_id = my_message_transfer_id,};

	      if(canardTxPush(&queue,               	// Call this once per redundant CAN interface (queue)
 8000e6e:	4b1f      	ldr	r3, [pc, #124]	@ (8000eec <main+0x15c>)
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	4a1f      	ldr	r2, [pc, #124]	@ (8000ef0 <main+0x160>)
 8000e74:	9202      	str	r2, [sp, #8]
 8000e76:	9301      	str	r3, [sp, #4]
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	f04f 0200 	mov.w	r2, #0
 8000e82:	f04f 0300 	mov.w	r3, #0
 8000e86:	4914      	ldr	r1, [pc, #80]	@ (8000ed8 <main+0x148>)
 8000e88:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <main+0x154>)
 8000e8a:	f003 fb9d 	bl	80045c8 <canardTxPush>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	da01      	bge.n	8000e98 <main+0x108>
	                      0,     					// Zero if transmission deadline is not limited.
	                      &transfer_metadata,
	                      hbeat_ser_buf_size,		// Size of the message payload (see Nunavut transpiler)
	                      hbeat_ser_buf) < 0 )
	                      {
	                        Error_Handler();
 8000e94:	f000 f931 	bl	80010fa <Error_Handler>
	                      }

          // GetInfo request section has been removed.

	      // Block for a second before generating the next transfer
	      uint32_t timestamp = HAL_GetTick();
 8000e98:	f000 fb80 	bl	800159c <HAL_GetTick>
 8000e9c:	65f8      	str	r0, [r7, #92]	@ 0x5c
	      while( HAL_GetTick() < timestamp + 1000u )
 8000e9e:	e004      	b.n	8000eaa <main+0x11a>
	      {
	        process_canard_TX_queue();
 8000ea0:	f000 f8be 	bl	8001020 <process_canard_TX_queue>
	        HAL_Delay(10);
 8000ea4:	200a      	movs	r0, #10
 8000ea6:	f000 fb85 	bl	80015b4 <HAL_Delay>
	      while( HAL_GetTick() < timestamp + 1000u )
 8000eaa:	f000 fb77 	bl	800159c <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000eb2:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8000eb6:	429a      	cmp	r2, r3
 8000eb8:	d3f2      	bcc.n	8000ea0 <main+0x110>
	      }

	      // Increase uptime
	      test_uptimeSec++;
 8000eba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee8 <main+0x158>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a09      	ldr	r2, [pc, #36]	@ (8000ee8 <main+0x158>)
 8000ec2:	6013      	str	r3, [r2, #0]
	      // Increment the transfer_id variable
	      my_message_transfer_id++;
 8000ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef4 <main+0x164>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	b2da      	uxtb	r2, r3
 8000ecc:	4b09      	ldr	r3, [pc, #36]	@ (8000ef4 <main+0x164>)
 8000ece:	701a      	strb	r2, [r3, #0]
  {
 8000ed0:	e7a9      	b.n	8000e26 <main+0x96>
 8000ed2:	bf00      	nop
 8000ed4:	20000088 	.word	0x20000088
 8000ed8:	200000b0 	.word	0x200000b0
 8000edc:	080010e3 	.word	0x080010e3
 8000ee0:	080010c9 	.word	0x080010c9
 8000ee4:	200000cc 	.word	0x200000cc
 8000ee8:	200000e4 	.word	0x200000e4
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	200000e8 	.word	0x200000e8
 8000ef4:	200000e0 	.word	0x200000e0

08000ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b096      	sub	sp, #88	@ 0x58
 8000efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000efe:	f107 0314 	add.w	r3, r7, #20
 8000f02:	2244      	movs	r2, #68	@ 0x44
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fe2b 	bl	8004b62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	2200      	movs	r2, #0
 8000f10:	601a      	str	r2, [r3, #0]
 8000f12:	605a      	str	r2, [r3, #4]
 8000f14:	609a      	str	r2, [r3, #8]
 8000f16:	60da      	str	r2, [r3, #12]
 8000f18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f1e:	f001 fb2f 	bl	8002580 <HAL_PWREx_ControlVoltageScaling>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f28:	f000 f8e7 	bl	80010fa <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f30:	2301      	movs	r3, #1
 8000f32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f38:	2360      	movs	r3, #96	@ 0x60
 8000f3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	4618      	mov	r0, r3
 8000f46:	f001 fb71 	bl	800262c <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000f50:	f000 f8d3 	bl	80010fa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f60:	2300      	movs	r3, #0
 8000f62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f68:	463b      	mov	r3, r7
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f001 ff71 	bl	8002e54 <HAL_RCC_ClockConfig>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000f78:	f000 f8bf 	bl	80010fa <Error_Handler>
  }
}
 8000f7c:	bf00      	nop
 8000f7e:	3758      	adds	r7, #88	@ 0x58
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000f88:	4b17      	ldr	r3, [pc, #92]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000f8a:	4a18      	ldr	r2, [pc, #96]	@ (8000fec <MX_CAN1_Init+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 1;
 8000f8e:	4b16      	ldr	r3, [pc, #88]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000f94:	4b14      	ldr	r3, [pc, #80]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000f9a:	4b13      	ldr	r3, [pc, #76]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8000fa0:	4b11      	ldr	r3, [pc, #68]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fa2:	f44f 2240 	mov.w	r2, #786432	@ 0xc0000
 8000fa6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000faa:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8000fae:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000fb0:	4b0d      	ldr	r3, [pc, #52]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000fc2:	4b09      	ldr	r3, [pc, #36]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000fc8:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000fce:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000fd4:	4804      	ldr	r0, [pc, #16]	@ (8000fe8 <MX_CAN1_Init+0x64>)
 8000fd6:	f000 fb11 	bl	80015fc <HAL_CAN_Init>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d001      	beq.n	8000fe4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000fe0:	f000 f88b 	bl	80010fa <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000fe4:	bf00      	nop
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	20000088 	.word	0x20000088
 8000fec:	40006400 	.word	0x40006400

08000ff0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	4b09      	ldr	r3, [pc, #36]	@ (800101c <MX_GPIO_Init+0x2c>)
 8000ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffa:	4a08      	ldr	r2, [pc, #32]	@ (800101c <MX_GPIO_Init+0x2c>)
 8000ffc:	f043 0301 	orr.w	r3, r3, #1
 8001000:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <MX_GPIO_Init+0x2c>)
 8001004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001006:	f003 0301 	and.w	r3, r3, #1
 800100a:	607b      	str	r3, [r7, #4]
 800100c:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800100e:	bf00      	nop
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	40021000 	.word	0x40021000

08001020 <process_canard_TX_queue>:

/* USER CODE BEGIN 4 */
void process_canard_TX_queue(void)
{
 8001020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001024:	b08b      	sub	sp, #44	@ 0x2c
 8001026:	af00      	add	r7, sp, #0
  // Look at top of the TX queue of individual CAN frames
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
 800102c:	e039      	b.n	80010a2 <process_canard_TX_queue+0x82>
  {
    if ((0U == ti->tx_deadline_usec) || (ti->tx_deadline_usec > micros()))  // Check the deadline.
 800102e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001030:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001034:	4313      	orrs	r3, r2
 8001036:	d00c      	beq.n	8001052 <process_canard_TX_queue+0x32>
 8001038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800103a:	e9d3 8906 	ldrd	r8, r9, [r3, #24]
 800103e:	f7ff fe9f 	bl	8000d80 <micros>
 8001042:	4603      	mov	r3, r0
 8001044:	2200      	movs	r2, #0
 8001046:	461c      	mov	r4, r3
 8001048:	4615      	mov	r5, r2
 800104a:	4544      	cmp	r4, r8
 800104c:	eb75 0309 	sbcs.w	r3, r5, r9
 8001050:	d21d      	bcs.n	800108e <process_canard_TX_queue+0x6e>
    {
      /* Instantiate a frame for the media layer */
      CAN_TxHeaderTypeDef TxHeader;
      TxHeader.IDE = CAN_ID_EXT;
 8001052:	2304      	movs	r3, #4
 8001054:	617b      	str	r3, [r7, #20]
      TxHeader.RTR = CAN_RTR_DATA;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]

      TxHeader.DLC = ti->frame.payload_size;
 800105a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800105c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800105e:	61fb      	str	r3, [r7, #28]
      TxHeader.ExtId = ti->frame.extended_can_id;
 8001060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001062:	6a1b      	ldr	r3, [r3, #32]
 8001064:	613b      	str	r3, [r7, #16]

      uint8_t TxData[8];
      uint32_t TxMailbox;

      memcpy( TxData, (uint8_t *)ti->frame.payload, ti->frame.payload_size );
 8001066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001068:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800106a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800106c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	4618      	mov	r0, r3
 8001072:	f003 fe02 	bl	8004c7a <memcpy>

      if ( HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001076:	463b      	mov	r3, r7
 8001078:	1d3a      	adds	r2, r7, #4
 800107a:	f107 010c 	add.w	r1, r7, #12
 800107e:	480f      	ldr	r0, [pc, #60]	@ (80010bc <process_canard_TX_queue+0x9c>)
 8001080:	f000 fcc5 	bl	8001a0e <HAL_CAN_AddTxMessage>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <process_canard_TX_queue+0x6e>
      {
        break;
 800108a:	bf00      	nop
      }
    }
    // After the frame is transmitted or if it has timed out while waiting, pop it from the queue and deallocate:
    canard.memory_free(&canard, canardTxPop(&queue, ti));
  }
}
 800108c:	e010      	b.n	80010b0 <process_canard_TX_queue+0x90>
    canard.memory_free(&canard, canardTxPop(&queue, ti));
 800108e:	4b0c      	ldr	r3, [pc, #48]	@ (80010c0 <process_canard_TX_queue+0xa0>)
 8001090:	68de      	ldr	r6, [r3, #12]
 8001092:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001094:	480b      	ldr	r0, [pc, #44]	@ (80010c4 <process_canard_TX_queue+0xa4>)
 8001096:	f003 fb36 	bl	8004706 <canardTxPop>
 800109a:	4603      	mov	r3, r0
 800109c:	4619      	mov	r1, r3
 800109e:	4808      	ldr	r0, [pc, #32]	@ (80010c0 <process_canard_TX_queue+0xa0>)
 80010a0:	47b0      	blx	r6
  for (const CanardTxQueueItem* ti = NULL; (ti = canardTxPeek(&queue)) != NULL;)
 80010a2:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <process_canard_TX_queue+0xa4>)
 80010a4:	f003 fb1a 	bl	80046dc <canardTxPeek>
 80010a8:	6278      	str	r0, [r7, #36]	@ 0x24
 80010aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1be      	bne.n	800102e <process_canard_TX_queue+0xe>
}
 80010b0:	bf00      	nop
 80010b2:	372c      	adds	r7, #44	@ 0x2c
 80010b4:	46bd      	mov	sp, r7
 80010b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80010ba:	bf00      	nop
 80010bc:	20000088 	.word	0x20000088
 80010c0:	200000b0 	.word	0x200000b0
 80010c4:	200000cc 	.word	0x200000cc

080010c8 <memAllocate>:


static void* memAllocate(CanardInstance* const ins, const size_t amount)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  (void) ins;
  return malloc(amount);
 80010d2:	6838      	ldr	r0, [r7, #0]
 80010d4:	f003 fb56 	bl	8004784 <malloc>
 80010d8:	4603      	mov	r3, r0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3708      	adds	r7, #8
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <memFree>:

static void memFree(CanardInstance* const ins, void* const pointer)
{
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b082      	sub	sp, #8
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
 80010ea:	6039      	str	r1, [r7, #0]
  (void) ins;
  free( pointer );
 80010ec:	6838      	ldr	r0, [r7, #0]
 80010ee:	f003 fb51 	bl	8004794 <free>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fa:	b480      	push	{r7}
 80010fc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010fe:	b672      	cpsid	i
}
 8001100:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001102:	bf00      	nop
 8001104:	e7fd      	b.n	8001102 <Error_Handler+0x8>
	...

08001108 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800110e:	4b0f      	ldr	r3, [pc, #60]	@ (800114c <HAL_MspInit+0x44>)
 8001110:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001112:	4a0e      	ldr	r2, [pc, #56]	@ (800114c <HAL_MspInit+0x44>)
 8001114:	f043 0301 	orr.w	r3, r3, #1
 8001118:	6613      	str	r3, [r2, #96]	@ 0x60
 800111a:	4b0c      	ldr	r3, [pc, #48]	@ (800114c <HAL_MspInit+0x44>)
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	607b      	str	r3, [r7, #4]
 8001124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001126:	4b09      	ldr	r3, [pc, #36]	@ (800114c <HAL_MspInit+0x44>)
 8001128:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800112a:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x44>)
 800112c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001130:	6593      	str	r3, [r2, #88]	@ 0x58
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x44>)
 8001134:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800113a:	603b      	str	r3, [r7, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113e:	bf00      	nop
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	40021000 	.word	0x40021000

08001150 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b08a      	sub	sp, #40	@ 0x28
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 0314 	add.w	r3, r7, #20
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a28      	ldr	r2, [pc, #160]	@ (8001210 <HAL_CAN_MspInit+0xc0>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d149      	bne.n	8001206 <HAL_CAN_MspInit+0xb6>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8001172:	4b28      	ldr	r3, [pc, #160]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 8001174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001176:	4a27      	ldr	r2, [pc, #156]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 8001178:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800117c:	6593      	str	r3, [r2, #88]	@ 0x58
 800117e:	4b25      	ldr	r3, [pc, #148]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 8001180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	4b22      	ldr	r3, [pc, #136]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 800118c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118e:	4a21      	ldr	r2, [pc, #132]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 8001190:	f043 0301 	orr.w	r3, r3, #1
 8001194:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001196:	4b1f      	ldr	r3, [pc, #124]	@ (8001214 <HAL_CAN_MspInit+0xc4>)
 8001198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800119a:	f003 0301 	and.w	r3, r3, #1
 800119e:	60fb      	str	r3, [r7, #12]
 80011a0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80011a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a8:	2302      	movs	r3, #2
 80011aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ac:	2300      	movs	r3, #0
 80011ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	2303      	movs	r3, #3
 80011b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80011b4:	2309      	movs	r3, #9
 80011b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	4619      	mov	r1, r3
 80011be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011c2:	f001 f865 	bl	8002290 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 0, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	2100      	movs	r1, #0
 80011ca:	2013      	movs	r0, #19
 80011cc:	f001 f829 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80011d0:	2013      	movs	r0, #19
 80011d2:	f001 f842 	bl	800225a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2014      	movs	r0, #20
 80011dc:	f001 f821 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80011e0:	2014      	movs	r0, #20
 80011e2:	f001 f83a 	bl	800225a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 0, 0);
 80011e6:	2200      	movs	r2, #0
 80011e8:	2100      	movs	r1, #0
 80011ea:	2015      	movs	r0, #21
 80011ec:	f001 f819 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 80011f0:	2015      	movs	r0, #21
 80011f2:	f001 f832 	bl	800225a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 0, 0);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2100      	movs	r1, #0
 80011fa:	2016      	movs	r0, #22
 80011fc:	f001 f811 	bl	8002222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001200:	2016      	movs	r0, #22
 8001202:	f001 f82a 	bl	800225a <HAL_NVIC_EnableIRQ>

  /* USER CODE END CAN1_MspInit 1 */

  }

}
 8001206:	bf00      	nop
 8001208:	3728      	adds	r7, #40	@ 0x28
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	40006400 	.word	0x40006400
 8001214:	40021000 	.word	0x40021000

08001218 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800121c:	bf00      	nop
 800121e:	e7fd      	b.n	800121c <NMI_Handler+0x4>

08001220 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001220:	b480      	push	{r7}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001224:	bf00      	nop
 8001226:	e7fd      	b.n	8001224 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	bf00      	nop
 800122e:	e7fd      	b.n	800122c <MemManage_Handler+0x4>

08001230 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001234:	bf00      	nop
 8001236:	e7fd      	b.n	8001234 <BusFault_Handler+0x4>

08001238 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <UsageFault_Handler+0x4>

08001240 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001244:	bf00      	nop
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr

0800124e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001252:	bf00      	nop
 8001254:	46bd      	mov	sp, r7
 8001256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125a:	4770      	bx	lr

0800125c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800126e:	f000 f981 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
	...

08001278 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800127c:	4802      	ldr	r0, [pc, #8]	@ (8001288 <CAN1_TX_IRQHandler+0x10>)
 800127e:	f000 fcbc 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000088 	.word	0x20000088

0800128c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001290:	4802      	ldr	r0, [pc, #8]	@ (800129c <CAN1_RX0_IRQHandler+0x10>)
 8001292:	f000 fcb2 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000088 	.word	0x20000088

080012a0 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012a4:	4802      	ldr	r0, [pc, #8]	@ (80012b0 <CAN1_RX1_IRQHandler+0x10>)
 80012a6:	f000 fca8 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000088 	.word	0x20000088

080012b4 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80012b8:	4802      	ldr	r0, [pc, #8]	@ (80012c4 <CAN1_SCE_IRQHandler+0x10>)
 80012ba:	f000 fc9e 	bl	8001bfa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000088 	.word	0x20000088

080012c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return 1;
 80012cc:	2301      	movs	r3, #1
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <_kill>:

int _kill(int pid, int sig)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012e2:	f003 fc9d 	bl	8004c20 <__errno>
 80012e6:	4603      	mov	r3, r0
 80012e8:	2216      	movs	r2, #22
 80012ea:	601a      	str	r2, [r3, #0]
  return -1;
 80012ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <_exit>:

void _exit (int status)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001300:	f04f 31ff 	mov.w	r1, #4294967295
 8001304:	6878      	ldr	r0, [r7, #4]
 8001306:	f7ff ffe7 	bl	80012d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800130a:	bf00      	nop
 800130c:	e7fd      	b.n	800130a <_exit+0x12>

0800130e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800130e:	b580      	push	{r7, lr}
 8001310:	b086      	sub	sp, #24
 8001312:	af00      	add	r7, sp, #0
 8001314:	60f8      	str	r0, [r7, #12]
 8001316:	60b9      	str	r1, [r7, #8]
 8001318:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	e00a      	b.n	8001336 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001320:	f3af 8000 	nop.w
 8001324:	4601      	mov	r1, r0
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	1c5a      	adds	r2, r3, #1
 800132a:	60ba      	str	r2, [r7, #8]
 800132c:	b2ca      	uxtb	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001330:	697b      	ldr	r3, [r7, #20]
 8001332:	3301      	adds	r3, #1
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	429a      	cmp	r2, r3
 800133c:	dbf0      	blt.n	8001320 <_read+0x12>
  }

  return len;
 800133e:	687b      	ldr	r3, [r7, #4]
}
 8001340:	4618      	mov	r0, r3
 8001342:	3718      	adds	r7, #24
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}

08001348 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e009      	b.n	800136e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	3301      	adds	r3, #1
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	dbf1      	blt.n	800135a <_write+0x12>
  }
  return len;
 8001376:	687b      	ldr	r3, [r7, #4]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <_close>:

int _close(int file)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001388:	f04f 33ff 	mov.w	r3, #4294967295
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013a8:	605a      	str	r2, [r3, #4]
  return 0;
 80013aa:	2300      	movs	r3, #0
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	370c      	adds	r7, #12
 80013b0:	46bd      	mov	sp, r7
 80013b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b6:	4770      	bx	lr

080013b8 <_isatty>:

int _isatty(int file)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013c0:	2301      	movs	r3, #1
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013ce:	b480      	push	{r7}
 80013d0:	b085      	sub	sp, #20
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	60f8      	str	r0, [r7, #12]
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013f0:	4a14      	ldr	r2, [pc, #80]	@ (8001444 <_sbrk+0x5c>)
 80013f2:	4b15      	ldr	r3, [pc, #84]	@ (8001448 <_sbrk+0x60>)
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013f8:	697b      	ldr	r3, [r7, #20]
 80013fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013fc:	4b13      	ldr	r3, [pc, #76]	@ (800144c <_sbrk+0x64>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d102      	bne.n	800140a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001404:	4b11      	ldr	r3, [pc, #68]	@ (800144c <_sbrk+0x64>)
 8001406:	4a12      	ldr	r2, [pc, #72]	@ (8001450 <_sbrk+0x68>)
 8001408:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800140a:	4b10      	ldr	r3, [pc, #64]	@ (800144c <_sbrk+0x64>)
 800140c:	681a      	ldr	r2, [r3, #0]
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4413      	add	r3, r2
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	429a      	cmp	r2, r3
 8001416:	d207      	bcs.n	8001428 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001418:	f003 fc02 	bl	8004c20 <__errno>
 800141c:	4603      	mov	r3, r0
 800141e:	220c      	movs	r2, #12
 8001420:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001422:	f04f 33ff 	mov.w	r3, #4294967295
 8001426:	e009      	b.n	800143c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001428:	4b08      	ldr	r3, [pc, #32]	@ (800144c <_sbrk+0x64>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800142e:	4b07      	ldr	r3, [pc, #28]	@ (800144c <_sbrk+0x64>)
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4413      	add	r3, r2
 8001436:	4a05      	ldr	r2, [pc, #20]	@ (800144c <_sbrk+0x64>)
 8001438:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800143a:	68fb      	ldr	r3, [r7, #12]
}
 800143c:	4618      	mov	r0, r3
 800143e:	3718      	adds	r7, #24
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	20010000 	.word	0x20010000
 8001448:	00000400 	.word	0x00000400
 800144c:	200000f4 	.word	0x200000f4
 8001450:	20000248 	.word	0x20000248

08001454 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	@ (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	@ (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014b0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800147c:	f7ff ffea 	bl	8001454 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001480:	480c      	ldr	r0, [pc, #48]	@ (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001482:	490d      	ldr	r1, [pc, #52]	@ (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001484:	4a0d      	ldr	r2, [pc, #52]	@ (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001486:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001488:	e002      	b.n	8001490 <LoopCopyDataInit>

0800148a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800148a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800148c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148e:	3304      	adds	r3, #4

08001490 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001490:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001492:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001494:	d3f9      	bcc.n	800148a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001496:	4a0a      	ldr	r2, [pc, #40]	@ (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001498:	4c0a      	ldr	r4, [pc, #40]	@ (80014c4 <LoopForever+0x16>)
  movs r3, #0
 800149a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800149c:	e001      	b.n	80014a2 <LoopFillZerobss>

0800149e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014a0:	3204      	adds	r2, #4

080014a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a4:	d3fb      	bcc.n	800149e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014a6:	f003 fbc1 	bl	8004c2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff fc71 	bl	8000d90 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80014bc:	08006af4 	.word	0x08006af4
  ldr r2, =_sbss
 80014c0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80014c4:	20000248 	.word	0x20000248

080014c8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_IRQHandler>

080014ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f000 fe99 	bl	800220c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	200f      	movs	r0, #15
 80014dc:	f000 f80e 	bl	80014fc <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e001      	b.n	80014f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ec:	f7ff fe0c 	bl	8001108 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001508:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_InitTick+0x6c>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d023      	beq.n	8001558 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001510:	4b16      	ldr	r3, [pc, #88]	@ (800156c <HAL_InitTick+0x70>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b14      	ldr	r3, [pc, #80]	@ (8001568 <HAL_InitTick+0x6c>)
 8001516:	781b      	ldrb	r3, [r3, #0]
 8001518:	4619      	mov	r1, r3
 800151a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800151e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001522:	fbb2 f3f3 	udiv	r3, r2, r3
 8001526:	4618      	mov	r0, r3
 8001528:	f000 fea5 	bl	8002276 <HAL_SYSTICK_Config>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2b0f      	cmp	r3, #15
 8001536:	d809      	bhi.n	800154c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001538:	2200      	movs	r2, #0
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	f04f 30ff 	mov.w	r0, #4294967295
 8001540:	f000 fe6f 	bl	8002222 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001544:	4a0a      	ldr	r2, [pc, #40]	@ (8001570 <HAL_InitTick+0x74>)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6013      	str	r3, [r2, #0]
 800154a:	e007      	b.n	800155c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	73fb      	strb	r3, [r7, #15]
 8001550:	e004      	b.n	800155c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	73fb      	strb	r3, [r7, #15]
 8001556:	e001      	b.n	800155c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155c:	7bfb      	ldrb	r3, [r7, #15]
}
 800155e:	4618      	mov	r0, r3
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000004 	.word	0x20000004
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	2000000c 	.word	0x2000000c
 8001598:	200000f8 	.word	0x200000f8

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	200000f8 	.word	0x200000f8

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	2000000c 	.word	0x2000000c

080015fc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d101      	bne.n	800160e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0ed      	b.n	80017ea <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001614:	b2db      	uxtb	r3, r3
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f7ff fd98 	bl	8001150 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f042 0201 	orr.w	r2, r2, #1
 800162e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001630:	f7ff ffb4 	bl	800159c <HAL_GetTick>
 8001634:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001636:	e012      	b.n	800165e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001638:	f7ff ffb0 	bl	800159c <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b0a      	cmp	r3, #10
 8001644:	d90b      	bls.n	800165e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2205      	movs	r2, #5
 8001656:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e0c5      	b.n	80017ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0301 	and.w	r3, r3, #1
 8001668:	2b00      	cmp	r3, #0
 800166a:	d0e5      	beq.n	8001638 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 0202 	bic.w	r2, r2, #2
 800167a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800167c:	f7ff ff8e 	bl	800159c <HAL_GetTick>
 8001680:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001682:	e012      	b.n	80016aa <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001684:	f7ff ff8a 	bl	800159c <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b0a      	cmp	r3, #10
 8001690:	d90b      	bls.n	80016aa <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001696:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2205      	movs	r2, #5
 80016a2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e09f      	b.n	80017ea <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f003 0302 	and.w	r3, r3, #2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d1e5      	bne.n	8001684 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	7e1b      	ldrb	r3, [r3, #24]
 80016bc:	2b01      	cmp	r3, #1
 80016be:	d108      	bne.n	80016d2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e007      	b.n	80016e2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80016e0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7e5b      	ldrb	r3, [r3, #25]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80016f8:	601a      	str	r2, [r3, #0]
 80016fa:	e007      	b.n	800170c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800170a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	7e9b      	ldrb	r3, [r3, #26]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d108      	bne.n	8001726 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0220 	orr.w	r2, r2, #32
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	e007      	b.n	8001736 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0220 	bic.w	r2, r2, #32
 8001734:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	7edb      	ldrb	r3, [r3, #27]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d108      	bne.n	8001750 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0210 	bic.w	r2, r2, #16
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	e007      	b.n	8001760 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f042 0210 	orr.w	r2, r2, #16
 800175e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7f1b      	ldrb	r3, [r3, #28]
 8001764:	2b01      	cmp	r3, #1
 8001766:	d108      	bne.n	800177a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f042 0208 	orr.w	r2, r2, #8
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	e007      	b.n	800178a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f022 0208 	bic.w	r2, r2, #8
 8001788:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	7f5b      	ldrb	r3, [r3, #29]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d108      	bne.n	80017a4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681a      	ldr	r2, [r3, #0]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f042 0204 	orr.w	r2, r2, #4
 80017a0:	601a      	str	r2, [r3, #0]
 80017a2:	e007      	b.n	80017b4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f022 0204 	bic.w	r2, r2, #4
 80017b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	691b      	ldr	r3, [r3, #16]
 80017c2:	431a      	orrs	r2, r3
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	695b      	ldr	r3, [r3, #20]
 80017c8:	ea42 0103 	orr.w	r1, r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	1e5a      	subs	r2, r3, #1
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	430a      	orrs	r2, r1
 80017d8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2201      	movs	r2, #1
 80017e4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b087      	sub	sp, #28
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
 80017fa:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001808:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800180a:	7cfb      	ldrb	r3, [r7, #19]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d003      	beq.n	8001818 <HAL_CAN_ConfigFilter+0x26>
 8001810:	7cfb      	ldrb	r3, [r7, #19]
 8001812:	2b02      	cmp	r3, #2
 8001814:	f040 80aa 	bne.w	800196c <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800181e:	f043 0201 	orr.w	r2, r3, #1
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	695b      	ldr	r3, [r3, #20]
 800182c:	f003 031f 	and.w	r3, r3, #31
 8001830:	2201      	movs	r2, #1
 8001832:	fa02 f303 	lsl.w	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	43db      	mvns	r3, r3
 8001842:	401a      	ands	r2, r3
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	69db      	ldr	r3, [r3, #28]
 800184e:	2b00      	cmp	r3, #0
 8001850:	d123      	bne.n	800189a <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	43db      	mvns	r3, r3
 800185c:	401a      	ands	r2, r3
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	685b      	ldr	r3, [r3, #4]
 800186e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001874:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	3248      	adds	r2, #72	@ 0x48
 800187a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800188e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001890:	6979      	ldr	r1, [r7, #20]
 8001892:	3348      	adds	r3, #72	@ 0x48
 8001894:	00db      	lsls	r3, r3, #3
 8001896:	440b      	add	r3, r1
 8001898:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	2b01      	cmp	r3, #1
 80018a0:	d122      	bne.n	80018e8 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018c2:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	3248      	adds	r2, #72	@ 0x48
 80018c8:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018dc:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018de:	6979      	ldr	r1, [r7, #20]
 80018e0:	3348      	adds	r3, #72	@ 0x48
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	699b      	ldr	r3, [r3, #24]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d109      	bne.n	8001904 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	401a      	ands	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001902:	e007      	b.n	8001914 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	431a      	orrs	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	691b      	ldr	r3, [r3, #16]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d109      	bne.n	8001930 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	43db      	mvns	r3, r3
 8001926:	401a      	ands	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 800192e:	e007      	b.n	8001940 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	431a      	orrs	r2, r3
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d107      	bne.n	8001958 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	431a      	orrs	r2, r3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800195e:	f023 0201 	bic.w	r2, r3, #1
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001968:	2300      	movs	r3, #0
 800196a:	e006      	b.n	800197a <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001970:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001978:	2301      	movs	r3, #1
  }
}
 800197a:	4618      	mov	r0, r3
 800197c:	371c      	adds	r7, #28
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr

08001986 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b084      	sub	sp, #16
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001994:	b2db      	uxtb	r3, r3
 8001996:	2b01      	cmp	r3, #1
 8001998:	d12e      	bne.n	80019f8 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2202      	movs	r2, #2
 800199e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0201 	bic.w	r2, r2, #1
 80019b0:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019b2:	f7ff fdf3 	bl	800159c <HAL_GetTick>
 80019b6:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019b8:	e012      	b.n	80019e0 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ba:	f7ff fdef 	bl	800159c <HAL_GetTick>
 80019be:	4602      	mov	r2, r0
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	1ad3      	subs	r3, r2, r3
 80019c4:	2b0a      	cmp	r3, #10
 80019c6:	d90b      	bls.n	80019e0 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019cc:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2205      	movs	r2, #5
 80019d8:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e012      	b.n	8001a06 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f003 0301 	and.w	r3, r3, #1
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1e5      	bne.n	80019ba <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2200      	movs	r2, #0
 80019f2:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 80019f4:	2300      	movs	r3, #0
 80019f6:	e006      	b.n	8001a06 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019fc:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001a04:	2301      	movs	r3, #1
  }
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}

08001a0e <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b089      	sub	sp, #36	@ 0x24
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
 8001a1a:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a2c:	7ffb      	ldrb	r3, [r7, #31]
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d003      	beq.n	8001a3a <HAL_CAN_AddTxMessage+0x2c>
 8001a32:	7ffb      	ldrb	r3, [r7, #31]
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	f040 80ad 	bne.w	8001b94 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3a:	69bb      	ldr	r3, [r7, #24]
 8001a3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d10a      	bne.n	8001a5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a44:	69bb      	ldr	r3, [r7, #24]
 8001a46:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d105      	bne.n	8001a5a <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8095 	beq.w	8001b84 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	0e1b      	lsrs	r3, r3, #24
 8001a5e:	f003 0303 	and.w	r3, r3, #3
 8001a62:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a64:	2201      	movs	r2, #1
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10d      	bne.n	8001a92 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a80:	68f9      	ldr	r1, [r7, #12]
 8001a82:	6809      	ldr	r1, [r1, #0]
 8001a84:	431a      	orrs	r2, r3
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	3318      	adds	r3, #24
 8001a8a:	011b      	lsls	r3, r3, #4
 8001a8c:	440b      	add	r3, r1
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	e00f      	b.n	8001ab2 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa2:	68f9      	ldr	r1, [r7, #12]
 8001aa4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aa6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	3318      	adds	r3, #24
 8001aac:	011b      	lsls	r3, r3, #4
 8001aae:	440b      	add	r3, r1
 8001ab0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	6819      	ldr	r1, [r3, #0]
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	3318      	adds	r3, #24
 8001abe:	011b      	lsls	r3, r3, #4
 8001ac0:	440b      	add	r3, r1
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	7d1b      	ldrb	r3, [r3, #20]
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d111      	bne.n	8001af2 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681a      	ldr	r2, [r3, #0]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3318      	adds	r3, #24
 8001ad6:	011b      	lsls	r3, r3, #4
 8001ad8:	4413      	add	r3, r2
 8001ada:	3304      	adds	r3, #4
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68fa      	ldr	r2, [r7, #12]
 8001ae0:	6811      	ldr	r1, [r2, #0]
 8001ae2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	3318      	adds	r3, #24
 8001aea:	011b      	lsls	r3, r3, #4
 8001aec:	440b      	add	r3, r1
 8001aee:	3304      	adds	r3, #4
 8001af0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	3307      	adds	r3, #7
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	061a      	lsls	r2, r3, #24
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3306      	adds	r3, #6
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	041b      	lsls	r3, r3, #16
 8001b02:	431a      	orrs	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3305      	adds	r3, #5
 8001b08:	781b      	ldrb	r3, [r3, #0]
 8001b0a:	021b      	lsls	r3, r3, #8
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	3204      	adds	r2, #4
 8001b12:	7812      	ldrb	r2, [r2, #0]
 8001b14:	4610      	mov	r0, r2
 8001b16:	68fa      	ldr	r2, [r7, #12]
 8001b18:	6811      	ldr	r1, [r2, #0]
 8001b1a:	ea43 0200 	orr.w	r2, r3, r0
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	011b      	lsls	r3, r3, #4
 8001b22:	440b      	add	r3, r1
 8001b24:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8001b28:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3303      	adds	r3, #3
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	061a      	lsls	r2, r3, #24
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3302      	adds	r3, #2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	041b      	lsls	r3, r3, #16
 8001b3a:	431a      	orrs	r2, r3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	021b      	lsls	r3, r3, #8
 8001b44:	4313      	orrs	r3, r2
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	7812      	ldrb	r2, [r2, #0]
 8001b4a:	4610      	mov	r0, r2
 8001b4c:	68fa      	ldr	r2, [r7, #12]
 8001b4e:	6811      	ldr	r1, [r2, #0]
 8001b50:	ea43 0200 	orr.w	r2, r3, r0
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	011b      	lsls	r3, r3, #4
 8001b58:	440b      	add	r3, r1
 8001b5a:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8001b5e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	3318      	adds	r3, #24
 8001b68:	011b      	lsls	r3, r3, #4
 8001b6a:	4413      	add	r3, r2
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	68fa      	ldr	r2, [r7, #12]
 8001b70:	6811      	ldr	r1, [r2, #0]
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3318      	adds	r3, #24
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	440b      	add	r3, r1
 8001b7e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b80:	2300      	movs	r3, #0
 8001b82:	e00e      	b.n	8001ba2 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b88:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e006      	b.n	8001ba2 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
  }
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3724      	adds	r7, #36	@ 0x24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr

08001bae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	6078      	str	r0, [r7, #4]
 8001bb6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bbe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc0:	7bfb      	ldrb	r3, [r7, #15]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d002      	beq.n	8001bcc <HAL_CAN_ActivateNotification+0x1e>
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d109      	bne.n	8001be0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	6959      	ldr	r1, [r3, #20]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	430a      	orrs	r2, r1
 8001bda:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	e006      	b.n	8001bee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
  }
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3714      	adds	r7, #20
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr

08001bfa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b08a      	sub	sp, #40	@ 0x28
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	691b      	ldr	r3, [r3, #16]
 8001c2c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	699b      	ldr	r3, [r3, #24]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f003 0301 	and.w	r3, r3, #1
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d07c      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d023      	beq.n	8001c92 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	2201      	movs	r2, #1
 8001c50:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0302 	and.w	r3, r3, #2
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d003      	beq.n	8001c64 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f000 f983 	bl	8001f68 <HAL_CAN_TxMailbox0CompleteCallback>
 8001c62:	e016      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c76:	e00c      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	f003 0308 	and.w	r3, r3, #8
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d004      	beq.n	8001c8c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c8a:	e002      	b.n	8001c92 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f000 f989 	bl	8001fa4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001c92:	69bb      	ldr	r3, [r7, #24]
 8001c94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d024      	beq.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ca4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d003      	beq.n	8001cb8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f000 f963 	bl	8001f7c <HAL_CAN_TxMailbox1CompleteCallback>
 8001cb6:	e016      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001cb8:	69bb      	ldr	r3, [r7, #24]
 8001cba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d004      	beq.n	8001ccc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cca:	e00c      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8001cde:	e002      	b.n	8001ce6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001ce0:	6878      	ldr	r0, [r7, #4]
 8001ce2:	f000 f969 	bl	8001fb8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d024      	beq.n	8001d3a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001cf8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f943 	bl	8001f90 <HAL_CAN_TxMailbox2CompleteCallback>
 8001d0a:	e016      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d004      	beq.n	8001d20 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001d1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d1e:	e00c      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d004      	beq.n	8001d34 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d30:	627b      	str	r3, [r7, #36]	@ 0x24
 8001d32:	e002      	b.n	8001d3a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f000 f949 	bl	8001fcc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001d3a:	6a3b      	ldr	r3, [r7, #32]
 8001d3c:	f003 0308 	and.w	r3, r3, #8
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d00c      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0310 	and.w	r3, r3, #16
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001d54:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2210      	movs	r2, #16
 8001d5c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001d5e:	6a3b      	ldr	r3, [r7, #32]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d00b      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d006      	beq.n	8001d80 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	2208      	movs	r2, #8
 8001d78:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f000 f93a 	bl	8001ff4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d009      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0303 	and.w	r3, r3, #3
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d002      	beq.n	8001d9e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001d98:	6878      	ldr	r0, [r7, #4]
 8001d9a:	f000 f921 	bl	8001fe0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d00c      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	f003 0310 	and.w	r3, r3, #16
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d007      	beq.n	8001dc2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001db4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001db8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	2210      	movs	r2, #16
 8001dc0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001dc2:	6a3b      	ldr	r3, [r7, #32]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00b      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	f003 0308 	and.w	r3, r3, #8
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d006      	beq.n	8001de4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2208      	movs	r2, #8
 8001ddc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f000 f91c 	bl	800201c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001de4:	6a3b      	ldr	r3, [r7, #32]
 8001de6:	f003 0310 	and.w	r3, r3, #16
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d009      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d002      	beq.n	8001e02 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f000 f903 	bl	8002008 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001e02:	6a3b      	ldr	r3, [r7, #32]
 8001e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d00b      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001e0c:	69fb      	ldr	r3, [r7, #28]
 8001e0e:	f003 0310 	and.w	r3, r3, #16
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d006      	beq.n	8001e24 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2210      	movs	r2, #16
 8001e1c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f906 	bl	8002030 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001e24:	6a3b      	ldr	r3, [r7, #32]
 8001e26:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d00b      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d006      	beq.n	8001e46 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f8ff 	bl	8002044 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001e46:	6a3b      	ldr	r3, [r7, #32]
 8001e48:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d07b      	beq.n	8001f48 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	f003 0304 	and.w	r3, r3, #4
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d072      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e5a:	6a3b      	ldr	r3, [r7, #32]
 8001e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d008      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d003      	beq.n	8001e76 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e70:	f043 0301 	orr.w	r3, r3, #1
 8001e74:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e76:	6a3b      	ldr	r3, [r7, #32]
 8001e78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d003      	beq.n	8001e92 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8c:	f043 0302 	orr.w	r3, r3, #2
 8001e90:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001e92:	6a3b      	ldr	r3, [r7, #32]
 8001e94:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d008      	beq.n	8001eae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d003      	beq.n	8001eae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	f043 0304 	orr.w	r3, r3, #4
 8001eac:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d043      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03e      	beq.n	8001f40 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001ec8:	2b60      	cmp	r3, #96	@ 0x60
 8001eca:	d02b      	beq.n	8001f24 <HAL_CAN_IRQHandler+0x32a>
 8001ecc:	2b60      	cmp	r3, #96	@ 0x60
 8001ece:	d82e      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ed0:	2b50      	cmp	r3, #80	@ 0x50
 8001ed2:	d022      	beq.n	8001f1a <HAL_CAN_IRQHandler+0x320>
 8001ed4:	2b50      	cmp	r3, #80	@ 0x50
 8001ed6:	d82a      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ed8:	2b40      	cmp	r3, #64	@ 0x40
 8001eda:	d019      	beq.n	8001f10 <HAL_CAN_IRQHandler+0x316>
 8001edc:	2b40      	cmp	r3, #64	@ 0x40
 8001ede:	d826      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ee0:	2b30      	cmp	r3, #48	@ 0x30
 8001ee2:	d010      	beq.n	8001f06 <HAL_CAN_IRQHandler+0x30c>
 8001ee4:	2b30      	cmp	r3, #48	@ 0x30
 8001ee6:	d822      	bhi.n	8001f2e <HAL_CAN_IRQHandler+0x334>
 8001ee8:	2b10      	cmp	r3, #16
 8001eea:	d002      	beq.n	8001ef2 <HAL_CAN_IRQHandler+0x2f8>
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d005      	beq.n	8001efc <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001ef0:	e01d      	b.n	8001f2e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ef4:	f043 0308 	orr.w	r3, r3, #8
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001efa:	e019      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001efe:	f043 0310 	orr.w	r3, r3, #16
 8001f02:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f04:	e014      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001f06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f08:	f043 0320 	orr.w	r3, r3, #32
 8001f0c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f0e:	e00f      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8001f10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001f16:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f18:	e00a      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f20:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f22:	e005      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f26:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f2a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8001f2c:	e000      	b.n	8001f30 <HAL_CAN_IRQHandler+0x336>
            break;
 8001f2e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	699a      	ldr	r2, [r3, #24]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8001f3e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2204      	movs	r2, #4
 8001f46:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d008      	beq.n	8001f60 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 f87c 	bl	8002058 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	@ 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}

08001f68 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001fc0:	bf00      	nop
 8001fc2:	370c      	adds	r7, #12
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr

08001fcc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001fd4:	bf00      	nop
 8001fd6:	370c      	adds	r7, #12
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr

08001fe0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b083      	sub	sp, #12
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001fe8:	bf00      	nop
 8001fea:	370c      	adds	r7, #12
 8001fec:	46bd      	mov	sp, r7
 8001fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff2:	4770      	bx	lr

08001ff4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001ffc:	bf00      	nop
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002038:	bf00      	nop
 800203a:	370c      	adds	r7, #12
 800203c:	46bd      	mov	sp, r7
 800203e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002042:	4770      	bx	lr

08002044 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr

08002058 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002058:	b480      	push	{r7}
 800205a:	b083      	sub	sp, #12
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800207c:	4b0c      	ldr	r3, [pc, #48]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002088:	4013      	ands	r3, r2
 800208a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002094:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002098:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800209c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800209e:	4a04      	ldr	r2, [pc, #16]	@ (80020b0 <__NVIC_SetPriorityGrouping+0x44>)
 80020a0:	68bb      	ldr	r3, [r7, #8]
 80020a2:	60d3      	str	r3, [r2, #12]
}
 80020a4:	bf00      	nop
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	e000ed00 	.word	0xe000ed00

080020b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80020b8:	4b04      	ldr	r3, [pc, #16]	@ (80020cc <__NVIC_GetPriorityGrouping+0x18>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	f003 0307 	and.w	r3, r3, #7
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr
 80020cc:	e000ed00 	.word	0xe000ed00

080020d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	db0b      	blt.n	80020fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020e2:	79fb      	ldrb	r3, [r7, #7]
 80020e4:	f003 021f 	and.w	r2, r3, #31
 80020e8:	4907      	ldr	r1, [pc, #28]	@ (8002108 <__NVIC_EnableIRQ+0x38>)
 80020ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ee:	095b      	lsrs	r3, r3, #5
 80020f0:	2001      	movs	r0, #1
 80020f2:	fa00 f202 	lsl.w	r2, r0, r2
 80020f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020fa:	bf00      	nop
 80020fc:	370c      	adds	r7, #12
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100

0800210c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800210c:	b480      	push	{r7}
 800210e:	b083      	sub	sp, #12
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	6039      	str	r1, [r7, #0]
 8002116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800211c:	2b00      	cmp	r3, #0
 800211e:	db0a      	blt.n	8002136 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	b2da      	uxtb	r2, r3
 8002124:	490c      	ldr	r1, [pc, #48]	@ (8002158 <__NVIC_SetPriority+0x4c>)
 8002126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800212a:	0112      	lsls	r2, r2, #4
 800212c:	b2d2      	uxtb	r2, r2
 800212e:	440b      	add	r3, r1
 8002130:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002134:	e00a      	b.n	800214c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	b2da      	uxtb	r2, r3
 800213a:	4908      	ldr	r1, [pc, #32]	@ (800215c <__NVIC_SetPriority+0x50>)
 800213c:	79fb      	ldrb	r3, [r7, #7]
 800213e:	f003 030f 	and.w	r3, r3, #15
 8002142:	3b04      	subs	r3, #4
 8002144:	0112      	lsls	r2, r2, #4
 8002146:	b2d2      	uxtb	r2, r2
 8002148:	440b      	add	r3, r1
 800214a:	761a      	strb	r2, [r3, #24]
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000e100 	.word	0xe000e100
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002160:	b480      	push	{r7}
 8002162:	b089      	sub	sp, #36	@ 0x24
 8002164:	af00      	add	r7, sp, #0
 8002166:	60f8      	str	r0, [r7, #12]
 8002168:	60b9      	str	r1, [r7, #8]
 800216a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	f003 0307 	and.w	r3, r3, #7
 8002172:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	f1c3 0307 	rsb	r3, r3, #7
 800217a:	2b04      	cmp	r3, #4
 800217c:	bf28      	it	cs
 800217e:	2304      	movcs	r3, #4
 8002180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	3304      	adds	r3, #4
 8002186:	2b06      	cmp	r3, #6
 8002188:	d902      	bls.n	8002190 <NVIC_EncodePriority+0x30>
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	3b03      	subs	r3, #3
 800218e:	e000      	b.n	8002192 <NVIC_EncodePriority+0x32>
 8002190:	2300      	movs	r3, #0
 8002192:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	f04f 32ff 	mov.w	r2, #4294967295
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	fa02 f303 	lsl.w	r3, r2, r3
 800219e:	43da      	mvns	r2, r3
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	401a      	ands	r2, r3
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80021a8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa01 f303 	lsl.w	r3, r1, r3
 80021b2:	43d9      	mvns	r1, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80021b8:	4313      	orrs	r3, r2
         );
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3724      	adds	r7, #36	@ 0x24
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr
	...

080021c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	3b01      	subs	r3, #1
 80021d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80021d8:	d301      	bcc.n	80021de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021da:	2301      	movs	r3, #1
 80021dc:	e00f      	b.n	80021fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021de:	4a0a      	ldr	r2, [pc, #40]	@ (8002208 <SysTick_Config+0x40>)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3b01      	subs	r3, #1
 80021e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021e6:	210f      	movs	r1, #15
 80021e8:	f04f 30ff 	mov.w	r0, #4294967295
 80021ec:	f7ff ff8e 	bl	800210c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021f0:	4b05      	ldr	r3, [pc, #20]	@ (8002208 <SysTick_Config+0x40>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021f6:	4b04      	ldr	r3, [pc, #16]	@ (8002208 <SysTick_Config+0x40>)
 80021f8:	2207      	movs	r2, #7
 80021fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	e000e010 	.word	0xe000e010

0800220c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff ff29 	bl	800206c <__NVIC_SetPriorityGrouping>
}
 800221a:	bf00      	nop
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	4603      	mov	r3, r0
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002230:	2300      	movs	r3, #0
 8002232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002234:	f7ff ff3e 	bl	80020b4 <__NVIC_GetPriorityGrouping>
 8002238:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	6978      	ldr	r0, [r7, #20]
 8002240:	f7ff ff8e 	bl	8002160 <NVIC_EncodePriority>
 8002244:	4602      	mov	r2, r0
 8002246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800224a:	4611      	mov	r1, r2
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff ff5d 	bl	800210c <__NVIC_SetPriority>
}
 8002252:	bf00      	nop
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800225a:	b580      	push	{r7, lr}
 800225c:	b082      	sub	sp, #8
 800225e:	af00      	add	r7, sp, #0
 8002260:	4603      	mov	r3, r0
 8002262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	4618      	mov	r0, r3
 800226a:	f7ff ff31 	bl	80020d0 <__NVIC_EnableIRQ>
}
 800226e:	bf00      	nop
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b082      	sub	sp, #8
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7ff ffa2 	bl	80021c8 <SysTick_Config>
 8002284:	4603      	mov	r3, r0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
	...

08002290 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002290:	b480      	push	{r7}
 8002292:	b087      	sub	sp, #28
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800229a:	2300      	movs	r3, #0
 800229c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800229e:	e148      	b.n	8002532 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2101      	movs	r1, #1
 80022a6:	697b      	ldr	r3, [r7, #20]
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	4013      	ands	r3, r2
 80022ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 813a 	beq.w	800252c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d005      	beq.n	80022d0 <HAL_GPIO_Init+0x40>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d130      	bne.n	8002332 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	2203      	movs	r2, #3
 80022dc:	fa02 f303 	lsl.w	r3, r2, r3
 80022e0:	43db      	mvns	r3, r3
 80022e2:	693a      	ldr	r2, [r7, #16]
 80022e4:	4013      	ands	r3, r2
 80022e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	4313      	orrs	r3, r2
 80022f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	693a      	ldr	r2, [r7, #16]
 80022fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002306:	2201      	movs	r2, #1
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	fa02 f303 	lsl.w	r3, r2, r3
 800230e:	43db      	mvns	r3, r3
 8002310:	693a      	ldr	r2, [r7, #16]
 8002312:	4013      	ands	r3, r2
 8002314:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	091b      	lsrs	r3, r3, #4
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	697b      	ldr	r3, [r7, #20]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	693a      	ldr	r2, [r7, #16]
 8002328:	4313      	orrs	r3, r2
 800232a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f003 0303 	and.w	r3, r3, #3
 800233a:	2b03      	cmp	r3, #3
 800233c:	d017      	beq.n	800236e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	2203      	movs	r2, #3
 800234a:	fa02 f303 	lsl.w	r3, r2, r3
 800234e:	43db      	mvns	r3, r3
 8002350:	693a      	ldr	r2, [r7, #16]
 8002352:	4013      	ands	r3, r2
 8002354:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689a      	ldr	r2, [r3, #8]
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	fa02 f303 	lsl.w	r3, r2, r3
 8002362:	693a      	ldr	r2, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	693a      	ldr	r2, [r7, #16]
 800236c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f003 0303 	and.w	r3, r3, #3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d123      	bne.n	80023c2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	08da      	lsrs	r2, r3, #3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	3208      	adds	r2, #8
 8002382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002386:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002388:	697b      	ldr	r3, [r7, #20]
 800238a:	f003 0307 	and.w	r3, r3, #7
 800238e:	009b      	lsls	r3, r3, #2
 8002390:	220f      	movs	r2, #15
 8002392:	fa02 f303 	lsl.w	r3, r2, r3
 8002396:	43db      	mvns	r3, r3
 8002398:	693a      	ldr	r2, [r7, #16]
 800239a:	4013      	ands	r3, r2
 800239c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	691a      	ldr	r2, [r3, #16]
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	009b      	lsls	r3, r3, #2
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	693a      	ldr	r2, [r7, #16]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	08da      	lsrs	r2, r3, #3
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	3208      	adds	r2, #8
 80023bc:	6939      	ldr	r1, [r7, #16]
 80023be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	2203      	movs	r2, #3
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43db      	mvns	r3, r3
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	4013      	ands	r3, r2
 80023d8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 0203 	and.w	r2, r3, #3
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	693a      	ldr	r2, [r7, #16]
 80023f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8094 	beq.w	800252c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002404:	4b52      	ldr	r3, [pc, #328]	@ (8002550 <HAL_GPIO_Init+0x2c0>)
 8002406:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002408:	4a51      	ldr	r2, [pc, #324]	@ (8002550 <HAL_GPIO_Init+0x2c0>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002410:	4b4f      	ldr	r3, [pc, #316]	@ (8002550 <HAL_GPIO_Init+0x2c0>)
 8002412:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800241c:	4a4d      	ldr	r2, [pc, #308]	@ (8002554 <HAL_GPIO_Init+0x2c4>)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002428:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800242a:	697b      	ldr	r3, [r7, #20]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	220f      	movs	r2, #15
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	43db      	mvns	r3, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4013      	ands	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002446:	d00d      	beq.n	8002464 <HAL_GPIO_Init+0x1d4>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	4a43      	ldr	r2, [pc, #268]	@ (8002558 <HAL_GPIO_Init+0x2c8>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d007      	beq.n	8002460 <HAL_GPIO_Init+0x1d0>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	4a42      	ldr	r2, [pc, #264]	@ (800255c <HAL_GPIO_Init+0x2cc>)
 8002454:	4293      	cmp	r3, r2
 8002456:	d101      	bne.n	800245c <HAL_GPIO_Init+0x1cc>
 8002458:	2302      	movs	r3, #2
 800245a:	e004      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 800245c:	2307      	movs	r3, #7
 800245e:	e002      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002460:	2301      	movs	r3, #1
 8002462:	e000      	b.n	8002466 <HAL_GPIO_Init+0x1d6>
 8002464:	2300      	movs	r3, #0
 8002466:	697a      	ldr	r2, [r7, #20]
 8002468:	f002 0203 	and.w	r2, r2, #3
 800246c:	0092      	lsls	r2, r2, #2
 800246e:	4093      	lsls	r3, r2
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002476:	4937      	ldr	r1, [pc, #220]	@ (8002554 <HAL_GPIO_Init+0x2c4>)
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	089b      	lsrs	r3, r3, #2
 800247c:	3302      	adds	r3, #2
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	43db      	mvns	r3, r3
 800248e:	693a      	ldr	r2, [r7, #16]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800249c:	2b00      	cmp	r3, #0
 800249e:	d003      	beq.n	80024a8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80024a0:	693a      	ldr	r2, [r7, #16]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4313      	orrs	r3, r2
 80024a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80024a8:	4a2d      	ldr	r2, [pc, #180]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80024ae:	4b2c      	ldr	r3, [pc, #176]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024b0:	68db      	ldr	r3, [r3, #12]
 80024b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	43db      	mvns	r3, r3
 80024b8:	693a      	ldr	r2, [r7, #16]
 80024ba:	4013      	ands	r3, r2
 80024bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d003      	beq.n	80024d2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4313      	orrs	r3, r2
 80024d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80024d2:	4a23      	ldr	r2, [pc, #140]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024d8:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	43db      	mvns	r3, r3
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	4013      	ands	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d003      	beq.n	80024fc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80024f4:	693a      	ldr	r2, [r7, #16]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80024fc:	4a18      	ldr	r2, [pc, #96]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002502:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	43db      	mvns	r3, r3
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	4013      	ands	r3, r2
 8002510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	685b      	ldr	r3, [r3, #4]
 8002516:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d003      	beq.n	8002526 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4313      	orrs	r3, r2
 8002524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002526:	4a0e      	ldr	r2, [pc, #56]	@ (8002560 <HAL_GPIO_Init+0x2d0>)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	3301      	adds	r3, #1
 8002530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	2b00      	cmp	r3, #0
 800253e:	f47f aeaf 	bne.w	80022a0 <HAL_GPIO_Init+0x10>
  }
}
 8002542:	bf00      	nop
 8002544:	bf00      	nop
 8002546:	371c      	adds	r7, #28
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	40021000 	.word	0x40021000
 8002554:	40010000 	.word	0x40010000
 8002558:	48000400 	.word	0x48000400
 800255c:	48000800 	.word	0x48000800
 8002560:	40010400 	.word	0x40010400

08002564 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002568:	4b04      	ldr	r3, [pc, #16]	@ (800257c <HAL_PWREx_GetVoltageRange+0x18>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002570:	4618      	mov	r0, r3
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	40007000 	.word	0x40007000

08002580 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002580:	b480      	push	{r7}
 8002582:	b085      	sub	sp, #20
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800258e:	d130      	bne.n	80025f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002590:	4b23      	ldr	r3, [pc, #140]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800259c:	d038      	beq.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800259e:	4b20      	ldr	r3, [pc, #128]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80025a6:	4a1e      	ldr	r2, [pc, #120]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025a8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80025ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2232      	movs	r2, #50	@ 0x32
 80025b4:	fb02 f303 	mul.w	r3, r2, r3
 80025b8:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80025ba:	fba2 2303 	umull	r2, r3, r2, r3
 80025be:	0c9b      	lsrs	r3, r3, #18
 80025c0:	3301      	adds	r3, #1
 80025c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025c4:	e002      	b.n	80025cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	3b01      	subs	r3, #1
 80025ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025ce:	695b      	ldr	r3, [r3, #20]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025d8:	d102      	bne.n	80025e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d1f2      	bne.n	80025c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80025e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025ec:	d110      	bne.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e00f      	b.n	8002612 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80025f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80025fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80025fe:	d007      	beq.n	8002610 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002600:	4b07      	ldr	r3, [pc, #28]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002608:	4a05      	ldr	r2, [pc, #20]	@ (8002620 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800260a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800260e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002610:	2300      	movs	r3, #0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3714      	adds	r7, #20
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr
 800261e:	bf00      	nop
 8002620:	40007000 	.word	0x40007000
 8002624:	20000004 	.word	0x20000004
 8002628:	431bde83 	.word	0x431bde83

0800262c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d102      	bne.n	8002640 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	f000 bc02 	b.w	8002e44 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002640:	4b96      	ldr	r3, [pc, #600]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800264a:	4b94      	ldr	r3, [pc, #592]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 80e4 	beq.w	800282a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_RCC_OscConfig+0x4c>
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	2b0c      	cmp	r3, #12
 800266c:	f040 808b 	bne.w	8002786 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	2b01      	cmp	r3, #1
 8002674:	f040 8087 	bne.w	8002786 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002678:	4b88      	ldr	r3, [pc, #544]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d005      	beq.n	8002690 <HAL_RCC_OscConfig+0x64>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e3d9      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a1a      	ldr	r2, [r3, #32]
 8002694:	4b81      	ldr	r3, [pc, #516]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0308 	and.w	r3, r3, #8
 800269c:	2b00      	cmp	r3, #0
 800269e:	d004      	beq.n	80026aa <HAL_RCC_OscConfig+0x7e>
 80026a0:	4b7e      	ldr	r3, [pc, #504]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026a8:	e005      	b.n	80026b6 <HAL_RCC_OscConfig+0x8a>
 80026aa:	4b7c      	ldr	r3, [pc, #496]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b0:	091b      	lsrs	r3, r3, #4
 80026b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d223      	bcs.n	8002702 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
 80026be:	4618      	mov	r0, r3
 80026c0:	f000 fd54 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d001      	beq.n	80026ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e3ba      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026ce:	4b73      	ldr	r3, [pc, #460]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a72      	ldr	r2, [pc, #456]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026d4:	f043 0308 	orr.w	r3, r3, #8
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	4b70      	ldr	r3, [pc, #448]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	496d      	ldr	r1, [pc, #436]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026ec:	4b6b      	ldr	r3, [pc, #428]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	69db      	ldr	r3, [r3, #28]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	4968      	ldr	r1, [pc, #416]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
 8002700:	e025      	b.n	800274e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002702:	4b66      	ldr	r3, [pc, #408]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a65      	ldr	r2, [pc, #404]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002708:	f043 0308 	orr.w	r3, r3, #8
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b63      	ldr	r3, [pc, #396]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a1b      	ldr	r3, [r3, #32]
 800271a:	4960      	ldr	r1, [pc, #384]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002720:	4b5e      	ldr	r3, [pc, #376]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	021b      	lsls	r3, r3, #8
 800272e:	495b      	ldr	r1, [pc, #364]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002730:	4313      	orrs	r3, r2
 8002732:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d109      	bne.n	800274e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a1b      	ldr	r3, [r3, #32]
 800273e:	4618      	mov	r0, r3
 8002740:	f000 fd14 	bl	800316c <RCC_SetFlashLatencyFromMSIRange>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e37a      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800274e:	f000 fc81 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 8002752:	4602      	mov	r2, r0
 8002754:	4b51      	ldr	r3, [pc, #324]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	091b      	lsrs	r3, r3, #4
 800275a:	f003 030f 	and.w	r3, r3, #15
 800275e:	4950      	ldr	r1, [pc, #320]	@ (80028a0 <HAL_RCC_OscConfig+0x274>)
 8002760:	5ccb      	ldrb	r3, [r1, r3]
 8002762:	f003 031f 	and.w	r3, r3, #31
 8002766:	fa22 f303 	lsr.w	r3, r2, r3
 800276a:	4a4e      	ldr	r2, [pc, #312]	@ (80028a4 <HAL_RCC_OscConfig+0x278>)
 800276c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800276e:	4b4e      	ldr	r3, [pc, #312]	@ (80028a8 <HAL_RCC_OscConfig+0x27c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fe fec2 	bl	80014fc <HAL_InitTick>
 8002778:	4603      	mov	r3, r0
 800277a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800277c:	7bfb      	ldrb	r3, [r7, #15]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d052      	beq.n	8002828 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002782:	7bfb      	ldrb	r3, [r7, #15]
 8002784:	e35e      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d032      	beq.n	80027f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800278e:	4b43      	ldr	r3, [pc, #268]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a42      	ldr	r2, [pc, #264]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800279a:	f7fe feff 	bl	800159c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80027a2:	f7fe fefb 	bl	800159c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e347      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027b4:	4b39      	ldr	r3, [pc, #228]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027c0:	4b36      	ldr	r3, [pc, #216]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a35      	ldr	r2, [pc, #212]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027c6:	f043 0308 	orr.w	r3, r3, #8
 80027ca:	6013      	str	r3, [r2, #0]
 80027cc:	4b33      	ldr	r3, [pc, #204]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	4930      	ldr	r1, [pc, #192]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027de:	4b2f      	ldr	r3, [pc, #188]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	021b      	lsls	r3, r3, #8
 80027ec:	492b      	ldr	r1, [pc, #172]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	604b      	str	r3, [r1, #4]
 80027f2:	e01a      	b.n	800282a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80027f4:	4b29      	ldr	r3, [pc, #164]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a28      	ldr	r2, [pc, #160]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 80027fa:	f023 0301 	bic.w	r3, r3, #1
 80027fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002800:	f7fe fecc 	bl	800159c <HAL_GetTick>
 8002804:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002806:	e008      	b.n	800281a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002808:	f7fe fec8 	bl	800159c <HAL_GetTick>
 800280c:	4602      	mov	r2, r0
 800280e:	693b      	ldr	r3, [r7, #16]
 8002810:	1ad3      	subs	r3, r2, r3
 8002812:	2b02      	cmp	r3, #2
 8002814:	d901      	bls.n	800281a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002816:	2303      	movs	r3, #3
 8002818:	e314      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800281a:	4b20      	ldr	r3, [pc, #128]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f003 0302 	and.w	r3, r3, #2
 8002822:	2b00      	cmp	r3, #0
 8002824:	d1f0      	bne.n	8002808 <HAL_RCC_OscConfig+0x1dc>
 8002826:	e000      	b.n	800282a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002828:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	2b00      	cmp	r3, #0
 8002834:	d073      	beq.n	800291e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2b08      	cmp	r3, #8
 800283a:	d005      	beq.n	8002848 <HAL_RCC_OscConfig+0x21c>
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	2b0c      	cmp	r3, #12
 8002840:	d10e      	bne.n	8002860 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2b03      	cmp	r3, #3
 8002846:	d10b      	bne.n	8002860 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002848:	4b14      	ldr	r3, [pc, #80]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d063      	beq.n	800291c <HAL_RCC_OscConfig+0x2f0>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	685b      	ldr	r3, [r3, #4]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d15f      	bne.n	800291c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	e2f1      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	685b      	ldr	r3, [r3, #4]
 8002864:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002868:	d106      	bne.n	8002878 <HAL_RCC_OscConfig+0x24c>
 800286a:	4b0c      	ldr	r3, [pc, #48]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a0b      	ldr	r2, [pc, #44]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002870:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002874:	6013      	str	r3, [r2, #0]
 8002876:	e025      	b.n	80028c4 <HAL_RCC_OscConfig+0x298>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002880:	d114      	bne.n	80028ac <HAL_RCC_OscConfig+0x280>
 8002882:	4b06      	ldr	r3, [pc, #24]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a05      	ldr	r2, [pc, #20]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002888:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800288c:	6013      	str	r3, [r2, #0]
 800288e:	4b03      	ldr	r3, [pc, #12]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a02      	ldr	r2, [pc, #8]	@ (800289c <HAL_RCC_OscConfig+0x270>)
 8002894:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002898:	6013      	str	r3, [r2, #0]
 800289a:	e013      	b.n	80028c4 <HAL_RCC_OscConfig+0x298>
 800289c:	40021000 	.word	0x40021000
 80028a0:	08006678 	.word	0x08006678
 80028a4:	20000004 	.word	0x20000004
 80028a8:	20000008 	.word	0x20000008
 80028ac:	4ba0      	ldr	r3, [pc, #640]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a9f      	ldr	r2, [pc, #636]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b9d      	ldr	r3, [pc, #628]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a9c      	ldr	r2, [pc, #624]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7fe fe66 	bl	800159c <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028d4:	f7fe fe62 	bl	800159c <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e2ae      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e6:	4b92      	ldr	r3, [pc, #584]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0x2a8>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fe52 	bl	800159c <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80028fc:	f7fe fe4e 	bl	800159c <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e29a      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800290e:	4b88      	ldr	r3, [pc, #544]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0x2d0>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d060      	beq.n	80029ec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800292a:	69bb      	ldr	r3, [r7, #24]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d005      	beq.n	800293c <HAL_RCC_OscConfig+0x310>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	2b0c      	cmp	r3, #12
 8002934:	d119      	bne.n	800296a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2b02      	cmp	r3, #2
 800293a:	d116      	bne.n	800296a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800293c:	4b7c      	ldr	r3, [pc, #496]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_OscConfig+0x328>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d101      	bne.n	8002954 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e277      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002954:	4b76      	ldr	r3, [pc, #472]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	061b      	lsls	r3, r3, #24
 8002962:	4973      	ldr	r1, [pc, #460]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002964:	4313      	orrs	r3, r2
 8002966:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002968:	e040      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68db      	ldr	r3, [r3, #12]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d023      	beq.n	80029ba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002972:	4b6f      	ldr	r3, [pc, #444]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a6e      	ldr	r2, [pc, #440]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002978:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fe0d 	bl	800159c <HAL_GetTick>
 8002982:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002986:	f7fe fe09 	bl	800159c <HAL_GetTick>
 800298a:	4602      	mov	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e255      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002998:	4b65      	ldr	r3, [pc, #404]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029a4:	4b62      	ldr	r3, [pc, #392]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	495f      	ldr	r1, [pc, #380]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80029b4:	4313      	orrs	r3, r2
 80029b6:	604b      	str	r3, [r1, #4]
 80029b8:	e018      	b.n	80029ec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a5c      	ldr	r2, [pc, #368]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80029c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80029c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe fde9 	bl	800159c <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029ce:	f7fe fde5 	bl	800159c <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e231      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80029e0:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d1f0      	bne.n	80029ce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0308 	and.w	r3, r3, #8
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d03c      	beq.n	8002a72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	695b      	ldr	r3, [r3, #20]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d01c      	beq.n	8002a3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a00:	4b4b      	ldr	r3, [pc, #300]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a06:	4a4a      	ldr	r2, [pc, #296]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a08:	f043 0301 	orr.w	r3, r3, #1
 8002a0c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a10:	f7fe fdc4 	bl	800159c <HAL_GetTick>
 8002a14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a16:	e008      	b.n	8002a2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a18:	f7fe fdc0 	bl	800159c <HAL_GetTick>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d901      	bls.n	8002a2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002a26:	2303      	movs	r3, #3
 8002a28:	e20c      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002a2a:	4b41      	ldr	r3, [pc, #260]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d0ef      	beq.n	8002a18 <HAL_RCC_OscConfig+0x3ec>
 8002a38:	e01b      	b.n	8002a72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a3a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a40:	4a3b      	ldr	r2, [pc, #236]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a42:	f023 0301 	bic.w	r3, r3, #1
 8002a46:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a4a:	f7fe fda7 	bl	800159c <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a50:	e008      	b.n	8002a64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a52:	f7fe fda3 	bl	800159c <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	2b02      	cmp	r3, #2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e1ef      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002a64:	4b32      	ldr	r3, [pc, #200]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1ef      	bne.n	8002a52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0304 	and.w	r3, r3, #4
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	f000 80a6 	beq.w	8002bcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a80:	2300      	movs	r3, #0
 8002a82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002a84:	4b2a      	ldr	r3, [pc, #168]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d10d      	bne.n	8002aac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a90:	4b27      	ldr	r3, [pc, #156]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a92:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a94:	4a26      	ldr	r2, [pc, #152]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a9a:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a9c:	4b24      	ldr	r3, [pc, #144]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	60bb      	str	r3, [r7, #8]
 8002aa6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aac:	4b21      	ldr	r3, [pc, #132]	@ (8002b34 <HAL_RCC_OscConfig+0x508>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d118      	bne.n	8002aea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ab8:	4b1e      	ldr	r3, [pc, #120]	@ (8002b34 <HAL_RCC_OscConfig+0x508>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a1d      	ldr	r2, [pc, #116]	@ (8002b34 <HAL_RCC_OscConfig+0x508>)
 8002abe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac4:	f7fe fd6a 	bl	800159c <HAL_GetTick>
 8002ac8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002aca:	e008      	b.n	8002ade <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002acc:	f7fe fd66 	bl	800159c <HAL_GetTick>
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	1ad3      	subs	r3, r2, r3
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d901      	bls.n	8002ade <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e1b2      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_RCC_OscConfig+0x508>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d0f0      	beq.n	8002acc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d108      	bne.n	8002b04 <HAL_RCC_OscConfig+0x4d8>
 8002af2:	4b0f      	ldr	r3, [pc, #60]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002afa:	f043 0301 	orr.w	r3, r3, #1
 8002afe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b02:	e029      	b.n	8002b58 <HAL_RCC_OscConfig+0x52c>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	2b05      	cmp	r3, #5
 8002b0a:	d115      	bne.n	8002b38 <HAL_RCC_OscConfig+0x50c>
 8002b0c:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b12:	4a07      	ldr	r2, [pc, #28]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002b14:	f043 0304 	orr.w	r3, r3, #4
 8002b18:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b1c:	4b04      	ldr	r3, [pc, #16]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b22:	4a03      	ldr	r2, [pc, #12]	@ (8002b30 <HAL_RCC_OscConfig+0x504>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b2c:	e014      	b.n	8002b58 <HAL_RCC_OscConfig+0x52c>
 8002b2e:	bf00      	nop
 8002b30:	40021000 	.word	0x40021000
 8002b34:	40007000 	.word	0x40007000
 8002b38:	4b9a      	ldr	r3, [pc, #616]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b3e:	4a99      	ldr	r2, [pc, #612]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002b40:	f023 0301 	bic.w	r3, r3, #1
 8002b44:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002b48:	4b96      	ldr	r3, [pc, #600]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b4e:	4a95      	ldr	r2, [pc, #596]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002b50:	f023 0304 	bic.w	r3, r3, #4
 8002b54:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d016      	beq.n	8002b8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b60:	f7fe fd1c 	bl	800159c <HAL_GetTick>
 8002b64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b66:	e00a      	b.n	8002b7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b68:	f7fe fd18 	bl	800159c <HAL_GetTick>
 8002b6c:	4602      	mov	r2, r0
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	1ad3      	subs	r3, r2, r3
 8002b72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e162      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b7e:	4b89      	ldr	r3, [pc, #548]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ed      	beq.n	8002b68 <HAL_RCC_OscConfig+0x53c>
 8002b8c:	e015      	b.n	8002bba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8e:	f7fe fd05 	bl	800159c <HAL_GetTick>
 8002b92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b94:	e00a      	b.n	8002bac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b96:	f7fe fd01 	bl	800159c <HAL_GetTick>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	693b      	ldr	r3, [r7, #16]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e14b      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002bac:	4b7d      	ldr	r3, [pc, #500]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d1ed      	bne.n	8002b96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002bba:	7ffb      	ldrb	r3, [r7, #31]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d105      	bne.n	8002bcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bc0:	4b78      	ldr	r3, [pc, #480]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002bc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc4:	4a77      	ldr	r2, [pc, #476]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002bc6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bca:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0320 	and.w	r3, r3, #32
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d03c      	beq.n	8002c52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d01c      	beq.n	8002c1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002be0:	4b70      	ldr	r3, [pc, #448]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002be2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002be6:	4a6f      	ldr	r2, [pc, #444]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002be8:	f043 0301 	orr.w	r3, r3, #1
 8002bec:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fcd4 	bl	800159c <HAL_GetTick>
 8002bf4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002bf6:	e008      	b.n	8002c0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bf8:	f7fe fcd0 	bl	800159c <HAL_GetTick>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	1ad3      	subs	r3, r2, r3
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	d901      	bls.n	8002c0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c06:	2303      	movs	r3, #3
 8002c08:	e11c      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c0a:	4b66      	ldr	r3, [pc, #408]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002c0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0ef      	beq.n	8002bf8 <HAL_RCC_OscConfig+0x5cc>
 8002c18:	e01b      	b.n	8002c52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002c1a:	4b62      	ldr	r3, [pc, #392]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c20:	4a60      	ldr	r2, [pc, #384]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002c22:	f023 0301 	bic.w	r3, r3, #1
 8002c26:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c2a:	f7fe fcb7 	bl	800159c <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c32:	f7fe fcb3 	bl	800159c <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e0ff      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002c44:	4b57      	ldr	r3, [pc, #348]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002c46:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d1ef      	bne.n	8002c32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	f000 80f3 	beq.w	8002e42 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	f040 80c9 	bne.w	8002df8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002c66:	4b4f      	ldr	r3, [pc, #316]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002c68:	68db      	ldr	r3, [r3, #12]
 8002c6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f003 0203 	and.w	r2, r3, #3
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d12c      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c84:	3b01      	subs	r3, #1
 8002c86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d123      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d11b      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ca6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ca8:	429a      	cmp	r2, r3
 8002caa:	d113      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb6:	085b      	lsrs	r3, r3, #1
 8002cb8:	3b01      	subs	r3, #1
 8002cba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d109      	bne.n	8002cd4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	085b      	lsrs	r3, r3, #1
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d06b      	beq.n	8002dac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	2b0c      	cmp	r3, #12
 8002cd8:	d062      	beq.n	8002da0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002cda:	4b32      	ldr	r3, [pc, #200]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d001      	beq.n	8002cea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e0ac      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002cea:	4b2e      	ldr	r3, [pc, #184]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	4a2d      	ldr	r2, [pc, #180]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002cf0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cf4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002cf6:	f7fe fc51 	bl	800159c <HAL_GetTick>
 8002cfa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cfc:	e008      	b.n	8002d10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cfe:	f7fe fc4d 	bl	800159c <HAL_GetTick>
 8002d02:	4602      	mov	r2, r0
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	1ad3      	subs	r3, r2, r3
 8002d08:	2b02      	cmp	r3, #2
 8002d0a:	d901      	bls.n	8002d10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d0c:	2303      	movs	r3, #3
 8002d0e:	e099      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d10:	4b24      	ldr	r3, [pc, #144]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f0      	bne.n	8002cfe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d1c:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d1e:	68da      	ldr	r2, [r3, #12]
 8002d20:	4b21      	ldr	r3, [pc, #132]	@ (8002da8 <HAL_RCC_OscConfig+0x77c>)
 8002d22:	4013      	ands	r3, r2
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002d28:	687a      	ldr	r2, [r7, #4]
 8002d2a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002d2c:	3a01      	subs	r2, #1
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	4311      	orrs	r1, r2
 8002d32:	687a      	ldr	r2, [r7, #4]
 8002d34:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002d36:	0212      	lsls	r2, r2, #8
 8002d38:	4311      	orrs	r1, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002d3e:	0852      	lsrs	r2, r2, #1
 8002d40:	3a01      	subs	r2, #1
 8002d42:	0552      	lsls	r2, r2, #21
 8002d44:	4311      	orrs	r1, r2
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002d4a:	0852      	lsrs	r2, r2, #1
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	0652      	lsls	r2, r2, #25
 8002d50:	4311      	orrs	r1, r2
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d56:	06d2      	lsls	r2, r2, #27
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	4912      	ldr	r1, [pc, #72]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002d60:	4b10      	ldr	r3, [pc, #64]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a0f      	ldr	r2, [pc, #60]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002d6c:	4b0d      	ldr	r3, [pc, #52]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a0c      	ldr	r2, [pc, #48]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d72:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002d76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d78:	f7fe fc10 	bl	800159c <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d80:	f7fe fc0c 	bl	800159c <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b02      	cmp	r3, #2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e058      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d92:	4b04      	ldr	r3, [pc, #16]	@ (8002da4 <HAL_RCC_OscConfig+0x778>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0f0      	beq.n	8002d80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d9e:	e050      	b.n	8002e42 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002da0:	2301      	movs	r3, #1
 8002da2:	e04f      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
 8002da4:	40021000 	.word	0x40021000
 8002da8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dac:	4b27      	ldr	r3, [pc, #156]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d144      	bne.n	8002e42 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002db8:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a23      	ldr	r2, [pc, #140]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002dc4:	4b21      	ldr	r3, [pc, #132]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	4a20      	ldr	r2, [pc, #128]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002dce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002dd0:	f7fe fbe4 	bl	800159c <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dd8:	f7fe fbe0 	bl	800159c <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e02c      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dea:	4b18      	ldr	r3, [pc, #96]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d0f0      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x7ac>
 8002df6:	e024      	b.n	8002e42 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2b0c      	cmp	r3, #12
 8002dfc:	d01f      	beq.n	8002e3e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dfe:	4b13      	ldr	r3, [pc, #76]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a12      	ldr	r2, [pc, #72]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002e04:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e0a:	f7fe fbc7 	bl	800159c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe fbc3 	bl	800159c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e00f      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002e30:	4b06      	ldr	r3, [pc, #24]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002e32:	68da      	ldr	r2, [r3, #12]
 8002e34:	4905      	ldr	r1, [pc, #20]	@ (8002e4c <HAL_RCC_OscConfig+0x820>)
 8002e36:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_RCC_OscConfig+0x824>)
 8002e38:	4013      	ands	r3, r2
 8002e3a:	60cb      	str	r3, [r1, #12]
 8002e3c:	e001      	b.n	8002e42 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e000      	b.n	8002e44 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3720      	adds	r7, #32
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	40021000 	.word	0x40021000
 8002e50:	feeefffc 	.word	0xfeeefffc

08002e54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
 8002e5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d101      	bne.n	8002e68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e64:	2301      	movs	r3, #1
 8002e66:	e0e7      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e68:	4b75      	ldr	r3, [pc, #468]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	429a      	cmp	r2, r3
 8002e74:	d910      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e76:	4b72      	ldr	r3, [pc, #456]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f023 0207 	bic.w	r2, r3, #7
 8002e7e:	4970      	ldr	r1, [pc, #448]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b6e      	ldr	r3, [pc, #440]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0cf      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d010      	beq.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689a      	ldr	r2, [r3, #8]
 8002ea8:	4b66      	ldr	r3, [pc, #408]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002eaa:	689b      	ldr	r3, [r3, #8]
 8002eac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d908      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eb4:	4b63      	ldr	r3, [pc, #396]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	689b      	ldr	r3, [r3, #8]
 8002ec0:	4960      	ldr	r1, [pc, #384]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0301 	and.w	r3, r3, #1
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d04c      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	2b03      	cmp	r3, #3
 8002ed8:	d107      	bne.n	8002eea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eda:	4b5a      	ldr	r3, [pc, #360]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d121      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e0a6      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ef2:	4b54      	ldr	r3, [pc, #336]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d115      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e09a      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d107      	bne.n	8002f1a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f0a:	4b4e      	ldr	r3, [pc, #312]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d109      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e08e      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e086      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f2a:	4b46      	ldr	r3, [pc, #280]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	f023 0203 	bic.w	r2, r3, #3
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4943      	ldr	r1, [pc, #268]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f3c:	f7fe fb2e 	bl	800159c <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	e00a      	b.n	8002f5a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f44:	f7fe fb2a 	bl	800159c <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d901      	bls.n	8002f5a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	e06e      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f5a:	4b3a      	ldr	r3, [pc, #232]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	f003 020c 	and.w	r2, r3, #12
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d1eb      	bne.n	8002f44 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d010      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	4b31      	ldr	r3, [pc, #196]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d208      	bcs.n	8002f9a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f88:	4b2e      	ldr	r3, [pc, #184]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	492b      	ldr	r1, [pc, #172]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f9a:	4b29      	ldr	r3, [pc, #164]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0307 	and.w	r3, r3, #7
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d210      	bcs.n	8002fca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa8:	4b25      	ldr	r3, [pc, #148]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f023 0207 	bic.w	r2, r3, #7
 8002fb0:	4923      	ldr	r1, [pc, #140]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fb8:	4b21      	ldr	r3, [pc, #132]	@ (8003040 <HAL_RCC_ClockConfig+0x1ec>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	683a      	ldr	r2, [r7, #0]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d001      	beq.n	8002fca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	e036      	b.n	8003038 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0304 	and.w	r3, r3, #4
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d008      	beq.n	8002fe8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fd6:	4b1b      	ldr	r3, [pc, #108]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	68db      	ldr	r3, [r3, #12]
 8002fe2:	4918      	ldr	r1, [pc, #96]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 0308 	and.w	r3, r3, #8
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d009      	beq.n	8003008 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ff4:	4b13      	ldr	r3, [pc, #76]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	4910      	ldr	r1, [pc, #64]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8003004:	4313      	orrs	r3, r2
 8003006:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003008:	f000 f824 	bl	8003054 <HAL_RCC_GetSysClockFreq>
 800300c:	4602      	mov	r2, r0
 800300e:	4b0d      	ldr	r3, [pc, #52]	@ (8003044 <HAL_RCC_ClockConfig+0x1f0>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	091b      	lsrs	r3, r3, #4
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	490b      	ldr	r1, [pc, #44]	@ (8003048 <HAL_RCC_ClockConfig+0x1f4>)
 800301a:	5ccb      	ldrb	r3, [r1, r3]
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	fa22 f303 	lsr.w	r3, r2, r3
 8003024:	4a09      	ldr	r2, [pc, #36]	@ (800304c <HAL_RCC_ClockConfig+0x1f8>)
 8003026:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003028:	4b09      	ldr	r3, [pc, #36]	@ (8003050 <HAL_RCC_ClockConfig+0x1fc>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4618      	mov	r0, r3
 800302e:	f7fe fa65 	bl	80014fc <HAL_InitTick>
 8003032:	4603      	mov	r3, r0
 8003034:	72fb      	strb	r3, [r7, #11]

  return status;
 8003036:	7afb      	ldrb	r3, [r7, #11]
}
 8003038:	4618      	mov	r0, r3
 800303a:	3710      	adds	r7, #16
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40022000 	.word	0x40022000
 8003044:	40021000 	.word	0x40021000
 8003048:	08006678 	.word	0x08006678
 800304c:	20000004 	.word	0x20000004
 8003050:	20000008 	.word	0x20000008

08003054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003054:	b480      	push	{r7}
 8003056:	b089      	sub	sp, #36	@ 0x24
 8003058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003062:	4b3e      	ldr	r3, [pc, #248]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f003 030c 	and.w	r3, r3, #12
 800306a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800306c:	4b3b      	ldr	r3, [pc, #236]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	f003 0303 	and.w	r3, r3, #3
 8003074:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d005      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0x34>
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d121      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d11e      	bne.n	80030c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003088:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0308 	and.w	r3, r3, #8
 8003090:	2b00      	cmp	r3, #0
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003094:	4b31      	ldr	r3, [pc, #196]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003096:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800309a:	0a1b      	lsrs	r3, r3, #8
 800309c:	f003 030f 	and.w	r3, r3, #15
 80030a0:	61fb      	str	r3, [r7, #28]
 80030a2:	e005      	b.n	80030b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80030a4:	4b2d      	ldr	r3, [pc, #180]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 030f 	and.w	r3, r3, #15
 80030ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80030b0:	4a2b      	ldr	r2, [pc, #172]	@ (8003160 <HAL_RCC_GetSysClockFreq+0x10c>)
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d10d      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	2b04      	cmp	r3, #4
 80030ca:	d102      	bne.n	80030d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80030cc:	4b25      	ldr	r3, [pc, #148]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x110>)
 80030ce:	61bb      	str	r3, [r7, #24]
 80030d0:	e004      	b.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d101      	bne.n	80030dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80030d8:	4b23      	ldr	r3, [pc, #140]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x114>)
 80030da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	2b0c      	cmp	r3, #12
 80030e0:	d134      	bne.n	800314c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80030e2:	4b1e      	ldr	r3, [pc, #120]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 80030e4:	68db      	ldr	r3, [r3, #12]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b02      	cmp	r3, #2
 80030f0:	d003      	beq.n	80030fa <HAL_RCC_GetSysClockFreq+0xa6>
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	2b03      	cmp	r3, #3
 80030f6:	d003      	beq.n	8003100 <HAL_RCC_GetSysClockFreq+0xac>
 80030f8:	e005      	b.n	8003106 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80030fa:	4b1a      	ldr	r3, [pc, #104]	@ (8003164 <HAL_RCC_GetSysClockFreq+0x110>)
 80030fc:	617b      	str	r3, [r7, #20]
      break;
 80030fe:	e005      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003100:	4b19      	ldr	r3, [pc, #100]	@ (8003168 <HAL_RCC_GetSysClockFreq+0x114>)
 8003102:	617b      	str	r3, [r7, #20]
      break;
 8003104:	e002      	b.n	800310c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	617b      	str	r3, [r7, #20]
      break;
 800310a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800310c:	4b13      	ldr	r3, [pc, #76]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	3301      	adds	r3, #1
 8003118:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800311a:	4b10      	ldr	r3, [pc, #64]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	0a1b      	lsrs	r3, r3, #8
 8003120:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	fb03 f202 	mul.w	r2, r3, r2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003130:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003132:	4b0a      	ldr	r3, [pc, #40]	@ (800315c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	0e5b      	lsrs	r3, r3, #25
 8003138:	f003 0303 	and.w	r3, r3, #3
 800313c:	3301      	adds	r3, #1
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003142:	697a      	ldr	r2, [r7, #20]
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	fbb2 f3f3 	udiv	r3, r2, r3
 800314a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800314c:	69bb      	ldr	r3, [r7, #24]
}
 800314e:	4618      	mov	r0, r3
 8003150:	3724      	adds	r7, #36	@ 0x24
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40021000 	.word	0x40021000
 8003160:	08006688 	.word	0x08006688
 8003164:	00f42400 	.word	0x00f42400
 8003168:	007a1200 	.word	0x007a1200

0800316c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b086      	sub	sp, #24
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003174:	2300      	movs	r3, #0
 8003176:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003178:	4b2a      	ldr	r3, [pc, #168]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003184:	f7ff f9ee 	bl	8002564 <HAL_PWREx_GetVoltageRange>
 8003188:	6178      	str	r0, [r7, #20]
 800318a:	e014      	b.n	80031b6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800318c:	4b25      	ldr	r3, [pc, #148]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800318e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003190:	4a24      	ldr	r2, [pc, #144]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003196:	6593      	str	r3, [r2, #88]	@ 0x58
 8003198:	4b22      	ldr	r3, [pc, #136]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800319a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800319c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80031a4:	f7ff f9de 	bl	8002564 <HAL_PWREx_GetVoltageRange>
 80031a8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80031aa:	4b1e      	ldr	r3, [pc, #120]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031ae:	4a1d      	ldr	r2, [pc, #116]	@ (8003224 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80031b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031bc:	d10b      	bne.n	80031d6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b80      	cmp	r3, #128	@ 0x80
 80031c2:	d919      	bls.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2ba0      	cmp	r3, #160	@ 0xa0
 80031c8:	d902      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ca:	2302      	movs	r3, #2
 80031cc:	613b      	str	r3, [r7, #16]
 80031ce:	e013      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031d0:	2301      	movs	r3, #1
 80031d2:	613b      	str	r3, [r7, #16]
 80031d4:	e010      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2b80      	cmp	r3, #128	@ 0x80
 80031da:	d902      	bls.n	80031e2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80031dc:	2303      	movs	r3, #3
 80031de:	613b      	str	r3, [r7, #16]
 80031e0:	e00a      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b80      	cmp	r3, #128	@ 0x80
 80031e6:	d102      	bne.n	80031ee <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031e8:	2302      	movs	r3, #2
 80031ea:	613b      	str	r3, [r7, #16]
 80031ec:	e004      	b.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b70      	cmp	r3, #112	@ 0x70
 80031f2:	d101      	bne.n	80031f8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031f4:	2301      	movs	r3, #1
 80031f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f023 0207 	bic.w	r2, r3, #7
 8003200:	4909      	ldr	r1, [pc, #36]	@ (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003208:	4b07      	ldr	r3, [pc, #28]	@ (8003228 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0307 	and.w	r3, r3, #7
 8003210:	693a      	ldr	r2, [r7, #16]
 8003212:	429a      	cmp	r2, r3
 8003214:	d001      	beq.n	800321a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	40022000 	.word	0x40022000

0800322c <cavlFindExtremum>:
static inline void cavlRemove(Cavl** const root, const Cavl* const node);

/// Return the min-/max-valued node stored in the tree, depending on the flag. This is an extremely fast query.
/// Returns NULL iff the argument is NULL (i.e., the tree is empty). The worst-case complexity is O(log n).
static inline Cavl* cavlFindExtremum(Cavl* const root, const bool maximum)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	460b      	mov	r3, r1
 8003236:	70fb      	strb	r3, [r7, #3]
    Cavl* result = NULL;
 8003238:	2300      	movs	r3, #0
 800323a:	60fb      	str	r3, [r7, #12]
    Cavl* c      = root;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8003240:	e007      	b.n	8003252 <cavlFindExtremum+0x26>
    {
        result = c;
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	60fb      	str	r3, [r7, #12]
        c      = c->lr[maximum];
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	68ba      	ldr	r2, [r7, #8]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	4413      	add	r3, r2
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60bb      	str	r3, [r7, #8]
    while (c != NULL)
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d1f4      	bne.n	8003242 <cavlFindExtremum+0x16>
    }
    return result;
 8003258:	68fb      	ldr	r3, [r7, #12]
}
 800325a:	4618      	mov	r0, r3
 800325c:	3714      	adds	r7, #20
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
	...

08003268 <cavlPrivateRotate>:
// ----------------------------------------     END OF PUBLIC API SECTION      ----------------------------------------
// ----------------------------------------      POLICE LINE DO NOT CROSS      ----------------------------------------

/// INTERNAL USE ONLY. Makes the '!r' child of node 'x' its parent; i.e., rotates 'x' toward 'r'.
static inline void cavlPrivateRotate(Cavl* const x, const bool r)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && (x->lr[!r] != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d014      	beq.n	80032a4 <cavlPrivateRotate+0x3c>
 800327a:	78fb      	ldrb	r3, [r7, #3]
 800327c:	f083 0301 	eor.w	r3, r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	687a      	ldr	r2, [r7, #4]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d00a      	beq.n	80032a4 <cavlPrivateRotate+0x3c>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003298:	db04      	blt.n	80032a4 <cavlPrivateRotate+0x3c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	dd05      	ble.n	80032b0 <cavlPrivateRotate+0x48>
 80032a4:	4b2a      	ldr	r3, [pc, #168]	@ (8003350 <cavlPrivateRotate+0xe8>)
 80032a6:	4a2b      	ldr	r2, [pc, #172]	@ (8003354 <cavlPrivateRotate+0xec>)
 80032a8:	2162      	movs	r1, #98	@ 0x62
 80032aa:	482b      	ldr	r0, [pc, #172]	@ (8003358 <cavlPrivateRotate+0xf0>)
 80032ac:	f001 fa4c 	bl	8004748 <__assert_func>
    Cavl* const z = x->lr[!r];
 80032b0:	78fb      	ldrb	r3, [r7, #3]
 80032b2:	f083 0301 	eor.w	r3, r3, #1
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	687a      	ldr	r2, [r7, #4]
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	4413      	add	r3, r2
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	60fb      	str	r3, [r7, #12]
    if (x->up != NULL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00e      	beq.n	80032e8 <cavlPrivateRotate+0x80>
    {
        x->up->lr[x->up->lr[1] == x] = z;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	6879      	ldr	r1, [r7, #4]
 80032d6:	4299      	cmp	r1, r3
 80032d8:	bf0c      	ite	eq
 80032da:	2301      	moveq	r3, #1
 80032dc:	2300      	movne	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	68fa      	ldr	r2, [r7, #12]
 80032e6:	605a      	str	r2, [r3, #4]
    }
    z->up     = x->up;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	601a      	str	r2, [r3, #0]
    x->up     = z;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68fa      	ldr	r2, [r7, #12]
 80032f4:	601a      	str	r2, [r3, #0]
    x->lr[!r] = z->lr[r];
 80032f6:	78fb      	ldrb	r3, [r7, #3]
 80032f8:	78fa      	ldrb	r2, [r7, #3]
 80032fa:	f082 0201 	eor.w	r2, r2, #1
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	4610      	mov	r0, r2
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	0083      	lsls	r3, r0, #2
 800330e:	440b      	add	r3, r1
 8003310:	605a      	str	r2, [r3, #4]
    if (x->lr[!r] != NULL)
 8003312:	78fb      	ldrb	r3, [r7, #3]
 8003314:	f083 0301 	eor.w	r3, r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	4413      	add	r3, r2
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d009      	beq.n	800333a <cavlPrivateRotate+0xd2>
    {
        x->lr[!r]->up = x;
 8003326:	78fb      	ldrb	r3, [r7, #3]
 8003328:	f083 0301 	eor.w	r3, r3, #1
 800332c:	b2db      	uxtb	r3, r3
 800332e:	687a      	ldr	r2, [r7, #4]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	601a      	str	r2, [r3, #0]
    }
    z->lr[r] = x;
 800333a:	78fb      	ldrb	r3, [r7, #3]
 800333c:	68fa      	ldr	r2, [r7, #12]
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4413      	add	r3, r2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	605a      	str	r2, [r3, #4]
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	08005b94 	.word	0x08005b94
 8003354:	08006a24 	.word	0x08006a24
 8003358:	08005bec 	.word	0x08005bec

0800335c <cavlPrivateAdjustBalance>:

/// INTERNAL USE ONLY.
/// Accepts a node and how its balance factor needs to be changed -- either +1 or -1.
/// Returns the new node to replace the old one if tree rotation took place, same node otherwise.
static inline Cavl* cavlPrivateAdjustBalance(Cavl* const x, const bool increment)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
    CAVL_ASSERT((x != NULL) && ((x->bf >= -1) && (x->bf <= +1)));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <cavlPrivateAdjustBalance+0x28>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003378:	db04      	blt.n	8003384 <cavlPrivateAdjustBalance+0x28>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003380:	2b01      	cmp	r3, #1
 8003382:	dd05      	ble.n	8003390 <cavlPrivateAdjustBalance+0x34>
 8003384:	4b61      	ldr	r3, [pc, #388]	@ (800350c <cavlPrivateAdjustBalance+0x1b0>)
 8003386:	4a62      	ldr	r2, [pc, #392]	@ (8003510 <cavlPrivateAdjustBalance+0x1b4>)
 8003388:	2177      	movs	r1, #119	@ 0x77
 800338a:	4862      	ldr	r0, [pc, #392]	@ (8003514 <cavlPrivateAdjustBalance+0x1b8>)
 800338c:	f001 f9dc 	bl	8004748 <__assert_func>
    Cavl*        out    = x;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	617b      	str	r3, [r7, #20]
    const int8_t new_bf = (int8_t) (x->bf + (increment ? +1 : -1));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800339a:	b2db      	uxtb	r3, r3
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	2a00      	cmp	r2, #0
 80033a0:	d001      	beq.n	80033a6 <cavlPrivateAdjustBalance+0x4a>
 80033a2:	2201      	movs	r2, #1
 80033a4:	e000      	b.n	80033a8 <cavlPrivateAdjustBalance+0x4c>
 80033a6:	22ff      	movs	r2, #255	@ 0xff
 80033a8:	4413      	add	r3, r2
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	74fb      	strb	r3, [r7, #19]
    if ((new_bf < -1) || (new_bf > 1))
 80033ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80033b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033b6:	db04      	blt.n	80033c2 <cavlPrivateAdjustBalance+0x66>
 80033b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	f340 809c 	ble.w	80034fa <cavlPrivateAdjustBalance+0x19e>
    {
        const bool   r    = new_bf < 0;   // bf<0 if left-heavy --> right rotation is needed.
 80033c2:	7cfb      	ldrb	r3, [r7, #19]
 80033c4:	09db      	lsrs	r3, r3, #7
 80033c6:	74bb      	strb	r3, [r7, #18]
        const int8_t sign = r ? +1 : -1;  // Positive if we are rotating right.
 80033c8:	7cbb      	ldrb	r3, [r7, #18]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d001      	beq.n	80033d2 <cavlPrivateAdjustBalance+0x76>
 80033ce:	2301      	movs	r3, #1
 80033d0:	e001      	b.n	80033d6 <cavlPrivateAdjustBalance+0x7a>
 80033d2:	f04f 33ff 	mov.w	r3, #4294967295
 80033d6:	747b      	strb	r3, [r7, #17]
        Cavl* const  z    = x->lr[!r];
 80033d8:	7cbb      	ldrb	r3, [r7, #18]
 80033da:	f083 0301 	eor.w	r3, r3, #1
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	009b      	lsls	r3, r3, #2
 80033e4:	4413      	add	r3, r2
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
        CAVL_ASSERT(z != NULL);   // Heavy side cannot be empty.
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d105      	bne.n	80033fc <cavlPrivateAdjustBalance+0xa0>
 80033f0:	4b49      	ldr	r3, [pc, #292]	@ (8003518 <cavlPrivateAdjustBalance+0x1bc>)
 80033f2:	4a47      	ldr	r2, [pc, #284]	@ (8003510 <cavlPrivateAdjustBalance+0x1b4>)
 80033f4:	217f      	movs	r1, #127	@ 0x7f
 80033f6:	4847      	ldr	r0, [pc, #284]	@ (8003514 <cavlPrivateAdjustBalance+0x1b8>)
 80033f8:	f001 f9a6 	bl	8004748 <__assert_func>
        if ((z->bf * sign) <= 0)  // Parent and child are heavy on the same side or the child is balanced.
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003402:	461a      	mov	r2, r3
 8003404:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8003408:	fb02 f303 	mul.w	r3, r2, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	dc1c      	bgt.n	800344a <cavlPrivateAdjustBalance+0xee>
        {
            out = z;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(x, r);
 8003414:	7cbb      	ldrb	r3, [r7, #18]
 8003416:	4619      	mov	r1, r3
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff25 	bl	8003268 <cavlPrivateRotate>
            if (0 == z->bf)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d109      	bne.n	800343c <cavlPrivateAdjustBalance+0xe0>
            {
                x->bf = (int8_t) (-sign);
 8003428:	7c7b      	ldrb	r3, [r7, #17]
 800342a:	425b      	negs	r3, r3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	b25a      	sxtb	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (+sign);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	7c7a      	ldrb	r2, [r7, #17]
 8003438:	731a      	strb	r2, [r3, #12]
    {
 800343a:	e061      	b.n	8003500 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2200      	movs	r2, #0
 8003446:	731a      	strb	r2, [r3, #12]
    {
 8003448:	e05a      	b.n	8003500 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
        else  // Otherwise, the child needs to be rotated in the opposite direction first.
        {
            Cavl* const y = z->lr[r];
 800344a:	7cbb      	ldrb	r3, [r7, #18]
 800344c:	68fa      	ldr	r2, [r7, #12]
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	60bb      	str	r3, [r7, #8]
            CAVL_ASSERT(y != NULL);  // Heavy side cannot be empty.
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d105      	bne.n	8003468 <cavlPrivateAdjustBalance+0x10c>
 800345c:	4b2f      	ldr	r3, [pc, #188]	@ (800351c <cavlPrivateAdjustBalance+0x1c0>)
 800345e:	4a2c      	ldr	r2, [pc, #176]	@ (8003510 <cavlPrivateAdjustBalance+0x1b4>)
 8003460:	2192      	movs	r1, #146	@ 0x92
 8003462:	482c      	ldr	r0, [pc, #176]	@ (8003514 <cavlPrivateAdjustBalance+0x1b8>)
 8003464:	f001 f970 	bl	8004748 <__assert_func>
            out = y;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	617b      	str	r3, [r7, #20]
            cavlPrivateRotate(z, !r);
 800346c:	7cbb      	ldrb	r3, [r7, #18]
 800346e:	2b00      	cmp	r3, #0
 8003470:	bf14      	ite	ne
 8003472:	2301      	movne	r3, #1
 8003474:	2300      	moveq	r3, #0
 8003476:	b2db      	uxtb	r3, r3
 8003478:	f083 0301 	eor.w	r3, r3, #1
 800347c:	b2db      	uxtb	r3, r3
 800347e:	f003 0301 	and.w	r3, r3, #1
 8003482:	b2db      	uxtb	r3, r3
 8003484:	4619      	mov	r1, r3
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7ff feee 	bl	8003268 <cavlPrivateRotate>
            cavlPrivateRotate(x, r);
 800348c:	7cbb      	ldrb	r3, [r7, #18]
 800348e:	4619      	mov	r1, r3
 8003490:	6878      	ldr	r0, [r7, #4]
 8003492:	f7ff fee9 	bl	8003268 <cavlPrivateRotate>
            if ((y->bf * sign) < 0)
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	f993 300c 	ldrsb.w	r3, [r3, #12]
 800349c:	461a      	mov	r2, r3
 800349e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80034a2:	fb02 f303 	mul.w	r3, r2, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	da09      	bge.n	80034be <cavlPrivateAdjustBalance+0x162>
            {
                x->bf = (int8_t) (+sign);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	7c7a      	ldrb	r2, [r7, #17]
 80034ae:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	2200      	movs	r2, #0
 80034b4:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	731a      	strb	r2, [r3, #12]
    {
 80034bc:	e020      	b.n	8003500 <cavlPrivateAdjustBalance+0x1a4>
            }
            else if ((y->bf * sign) > 0)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80034c4:	461a      	mov	r2, r3
 80034c6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80034ca:	fb02 f303 	mul.w	r3, r2, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	dd0c      	ble.n	80034ec <cavlPrivateAdjustBalance+0x190>
            {
                x->bf = 0;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2200      	movs	r2, #0
 80034d6:	731a      	strb	r2, [r3, #12]
                y->bf = 0;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	2200      	movs	r2, #0
 80034dc:	731a      	strb	r2, [r3, #12]
                z->bf = (int8_t) (-sign);
 80034de:	7c7b      	ldrb	r3, [r7, #17]
 80034e0:	425b      	negs	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	b25a      	sxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	731a      	strb	r2, [r3, #12]
    {
 80034ea:	e009      	b.n	8003500 <cavlPrivateAdjustBalance+0x1a4>
            }
            else
            {
                x->bf = 0;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	731a      	strb	r2, [r3, #12]
                z->bf = 0;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	731a      	strb	r2, [r3, #12]
    {
 80034f8:	e002      	b.n	8003500 <cavlPrivateAdjustBalance+0x1a4>
            }
        }
    }
    else
    {
        x->bf = new_bf;  // Balancing not needed, just update the balance factor and call it a day.
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	7cfa      	ldrb	r2, [r7, #19]
 80034fe:	731a      	strb	r2, [r3, #12]
    }
    return out;
 8003500:	697b      	ldr	r3, [r7, #20]
}
 8003502:	4618      	mov	r0, r3
 8003504:	3718      	adds	r7, #24
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	08005c08 	.word	0x08005c08
 8003510:	08006a08 	.word	0x08006a08
 8003514:	08005bec 	.word	0x08005bec
 8003518:	08005c40 	.word	0x08005c40
 800351c:	08005c54 	.word	0x08005c54

08003520 <cavlPrivateRetraceOnGrowth>:

/// INTERNAL USE ONLY.
/// Takes the culprit node (the one that is added); returns NULL or the root of the tree (possibly new one).
/// When adding a new node, set its balance factor to zero and call this function to propagate the changes upward.
static inline Cavl* cavlPrivateRetraceOnGrowth(Cavl* const added)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
    CAVL_ASSERT((added != NULL) && (0 == added->bf));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d004      	beq.n	8003538 <cavlPrivateRetraceOnGrowth+0x18>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d005      	beq.n	8003544 <cavlPrivateRetraceOnGrowth+0x24>
 8003538:	4b23      	ldr	r3, [pc, #140]	@ (80035c8 <cavlPrivateRetraceOnGrowth+0xa8>)
 800353a:	4a24      	ldr	r2, [pc, #144]	@ (80035cc <cavlPrivateRetraceOnGrowth+0xac>)
 800353c:	21b5      	movs	r1, #181	@ 0xb5
 800353e:	4824      	ldr	r0, [pc, #144]	@ (80035d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 8003540:	f001 f902 	bl	8004748 <__assert_func>
    Cavl* c = added;      // Child
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	617b      	str	r3, [r7, #20]
    Cavl* p = added->up;  // Parent
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	613b      	str	r3, [r7, #16]
    while (p != NULL)
 800354e:	e023      	b.n	8003598 <cavlPrivateRetraceOnGrowth+0x78>
    {
        const bool r = p->lr[1] == c;  // c is the right child of parent
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	697a      	ldr	r2, [r7, #20]
 8003556:	429a      	cmp	r2, r3
 8003558:	bf0c      	ite	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	2300      	movne	r3, #0
 800355e:	73fb      	strb	r3, [r7, #15]
        CAVL_ASSERT(p->lr[r] == c);
 8003560:	7bfb      	ldrb	r3, [r7, #15]
 8003562:	693a      	ldr	r2, [r7, #16]
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	697a      	ldr	r2, [r7, #20]
 800356c:	429a      	cmp	r2, r3
 800356e:	d005      	beq.n	800357c <cavlPrivateRetraceOnGrowth+0x5c>
 8003570:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <cavlPrivateRetraceOnGrowth+0xb4>)
 8003572:	4a16      	ldr	r2, [pc, #88]	@ (80035cc <cavlPrivateRetraceOnGrowth+0xac>)
 8003574:	21bb      	movs	r1, #187	@ 0xbb
 8003576:	4816      	ldr	r0, [pc, #88]	@ (80035d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 8003578:	f001 f8e6 	bl	8004748 <__assert_func>
        c = cavlPrivateAdjustBalance(p, r);
 800357c:	7bfb      	ldrb	r3, [r7, #15]
 800357e:	4619      	mov	r1, r3
 8003580:	6938      	ldr	r0, [r7, #16]
 8003582:	f7ff feeb 	bl	800335c <cavlPrivateAdjustBalance>
 8003586:	6178      	str	r0, [r7, #20]
        p = c->up;
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	613b      	str	r3, [r7, #16]
        if (0 == c->bf)
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d003      	beq.n	80035a0 <cavlPrivateRetraceOnGrowth+0x80>
    while (p != NULL)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1d8      	bne.n	8003550 <cavlPrivateRetraceOnGrowth+0x30>
 800359e:	e000      	b.n	80035a2 <cavlPrivateRetraceOnGrowth+0x82>
        {           // The height change of the subtree made this parent perfectly balanced (as all things should be),
            break;  // hence, the height of the outer subtree is unchanged, so upper balance factors are unchanged.
 80035a0:	bf00      	nop
        }
    }
    CAVL_ASSERT(c != NULL);
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d105      	bne.n	80035b4 <cavlPrivateRetraceOnGrowth+0x94>
 80035a8:	4b0b      	ldr	r3, [pc, #44]	@ (80035d8 <cavlPrivateRetraceOnGrowth+0xb8>)
 80035aa:	4a08      	ldr	r2, [pc, #32]	@ (80035cc <cavlPrivateRetraceOnGrowth+0xac>)
 80035ac:	21c3      	movs	r1, #195	@ 0xc3
 80035ae:	4808      	ldr	r0, [pc, #32]	@ (80035d0 <cavlPrivateRetraceOnGrowth+0xb0>)
 80035b0:	f001 f8ca 	bl	8004748 <__assert_func>
    return (NULL == p) ? c : NULL;  // New root or nothing.
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <cavlPrivateRetraceOnGrowth+0x9e>
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	e000      	b.n	80035c0 <cavlPrivateRetraceOnGrowth+0xa0>
 80035be:	2300      	movs	r3, #0
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	3718      	adds	r7, #24
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	08005c68 	.word	0x08005c68
 80035cc:	080069ec 	.word	0x080069ec
 80035d0:	08005bec 	.word	0x08005bec
 80035d4:	08005c94 	.word	0x08005c94
 80035d8:	08005ca4 	.word	0x08005ca4

080035dc <cavlSearch>:

static inline Cavl* cavlSearch(Cavl** const        root,
                               void* const         user_reference,
                               const CavlPredicate predicate,
                               const CavlFactory   factory)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b08a      	sub	sp, #40	@ 0x28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
 80035e8:	603b      	str	r3, [r7, #0]
    Cavl* out = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((root != NULL) && (predicate != NULL))
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d065      	beq.n	80036c0 <cavlSearch+0xe4>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d062      	beq.n	80036c0 <cavlSearch+0xe4>
    {
        Cavl*  up = *root;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	623b      	str	r3, [r7, #32]
        Cavl** n  = root;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	61fb      	str	r3, [r7, #28]
        while (*n != NULL)
 8003604:	e02f      	b.n	8003666 <cavlSearch+0x8a>
        {
            const int8_t cmp = predicate(user_reference, *n);
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	681a      	ldr	r2, [r3, #0]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4611      	mov	r1, r2
 800360e:	68b8      	ldr	r0, [r7, #8]
 8003610:	4798      	blx	r3
 8003612:	4603      	mov	r3, r0
 8003614:	76fb      	strb	r3, [r7, #27]
            if (0 == cmp)
 8003616:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d103      	bne.n	8003626 <cavlSearch+0x4a>
            {
                out = *n;
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	627b      	str	r3, [r7, #36]	@ 0x24
                break;
 8003624:	e023      	b.n	800366e <cavlSearch+0x92>
            }
            up = *n;
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	623b      	str	r3, [r7, #32]
            n  = &(*n)->lr[cmp > 0];
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8003634:	2b00      	cmp	r3, #0
 8003636:	bfcc      	ite	gt
 8003638:	2301      	movgt	r3, #1
 800363a:	2300      	movle	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	4413      	add	r3, r2
 8003642:	3304      	adds	r3, #4
 8003644:	61fb      	str	r3, [r7, #28]
            CAVL_ASSERT((NULL == *n) || ((*n)->up == up));
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <cavlSearch+0x8a>
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6a3a      	ldr	r2, [r7, #32]
 8003656:	429a      	cmp	r2, r3
 8003658:	d005      	beq.n	8003666 <cavlSearch+0x8a>
 800365a:	4b1c      	ldr	r3, [pc, #112]	@ (80036cc <cavlSearch+0xf0>)
 800365c:	4a1c      	ldr	r2, [pc, #112]	@ (80036d0 <cavlSearch+0xf4>)
 800365e:	21db      	movs	r1, #219	@ 0xdb
 8003660:	481c      	ldr	r0, [pc, #112]	@ (80036d4 <cavlSearch+0xf8>)
 8003662:	f001 f871 	bl	8004748 <__assert_func>
        while (*n != NULL)
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d1cb      	bne.n	8003606 <cavlSearch+0x2a>
        }
        if (NULL == out)
 800366e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003670:	2b00      	cmp	r3, #0
 8003672:	d125      	bne.n	80036c0 <cavlSearch+0xe4>
        {
            out = (NULL == factory) ? NULL : factory(user_reference);
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d004      	beq.n	8003684 <cavlSearch+0xa8>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68b8      	ldr	r0, [r7, #8]
 800367e:	4798      	blx	r3
 8003680:	4603      	mov	r3, r0
 8003682:	e000      	b.n	8003686 <cavlSearch+0xaa>
 8003684:	2300      	movs	r3, #0
 8003686:	627b      	str	r3, [r7, #36]	@ 0x24
            if (out != NULL)
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	2b00      	cmp	r3, #0
 800368c:	d018      	beq.n	80036c0 <cavlSearch+0xe4>
            {
                *n             = out;  // Overwrite the pointer to the new node in the parent node.
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003692:	601a      	str	r2, [r3, #0]
                out->lr[0]     = NULL;
 8003694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003696:	2200      	movs	r2, #0
 8003698:	605a      	str	r2, [r3, #4]
                out->lr[1]     = NULL;
 800369a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800369c:	2200      	movs	r2, #0
 800369e:	609a      	str	r2, [r3, #8]
                out->up        = up;
 80036a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a2:	6a3a      	ldr	r2, [r7, #32]
 80036a4:	601a      	str	r2, [r3, #0]
                out->bf        = 0;
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2200      	movs	r2, #0
 80036aa:	731a      	strb	r2, [r3, #12]
                Cavl* const rt = cavlPrivateRetraceOnGrowth(out);
 80036ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80036ae:	f7ff ff37 	bl	8003520 <cavlPrivateRetraceOnGrowth>
 80036b2:	6178      	str	r0, [r7, #20]
                if (rt != NULL)
 80036b4:	697b      	ldr	r3, [r7, #20]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d002      	beq.n	80036c0 <cavlSearch+0xe4>
                {
                    *root = rt;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	697a      	ldr	r2, [r7, #20]
 80036be:	601a      	str	r2, [r3, #0]
                }
            }
        }
    }
    return out;
 80036c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3728      	adds	r7, #40	@ 0x28
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	08005cb8 	.word	0x08005cb8
 80036d0:	080069e0 	.word	0x080069e0
 80036d4:	08005bec 	.word	0x08005bec

080036d8 <cavlRemove>:

static inline void cavlRemove(Cavl** const root, const Cavl* const node)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b088      	sub	sp, #32
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
    if ((root != NULL) && (node != NULL))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	f000 8116 	beq.w	8003916 <cavlRemove+0x23e>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	f000 8112 	beq.w	8003916 <cavlRemove+0x23e>
    {
        CAVL_ASSERT(*root != NULL);  // Otherwise, the node would have to be NULL.
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d105      	bne.n	8003706 <cavlRemove+0x2e>
 80036fa:	4b89      	ldr	r3, [pc, #548]	@ (8003920 <cavlRemove+0x248>)
 80036fc:	4a89      	ldr	r2, [pc, #548]	@ (8003924 <cavlRemove+0x24c>)
 80036fe:	21f6      	movs	r1, #246	@ 0xf6
 8003700:	4889      	ldr	r0, [pc, #548]	@ (8003928 <cavlRemove+0x250>)
 8003702:	f001 f821 	bl	8004748 <__assert_func>
        CAVL_ASSERT((node->up != NULL) || (node == *root));
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <cavlRemove+0x4c>
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	429a      	cmp	r2, r3
 8003716:	d005      	beq.n	8003724 <cavlRemove+0x4c>
 8003718:	4b84      	ldr	r3, [pc, #528]	@ (800392c <cavlRemove+0x254>)
 800371a:	4a82      	ldr	r2, [pc, #520]	@ (8003924 <cavlRemove+0x24c>)
 800371c:	21f7      	movs	r1, #247	@ 0xf7
 800371e:	4882      	ldr	r0, [pc, #520]	@ (8003928 <cavlRemove+0x250>)
 8003720:	f001 f812 	bl	8004748 <__assert_func>
        Cavl* p = NULL;   // The lowest parent node that suffered a shortening of its subtree.
 8003724:	2300      	movs	r3, #0
 8003726:	61fb      	str	r3, [r7, #28]
        bool  r = false;  // Which side of the above was shortened.
 8003728:	2300      	movs	r3, #0
 800372a:	76fb      	strb	r3, [r7, #27]
        // The first step is to update the topology and remember the node where to start the retracing from later.
        // Balancing is not performed yet so we may end up with an unbalanced tree.
        if ((node->lr[0] != NULL) && (node->lr[1] != NULL))
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d073      	beq.n	800381c <cavlRemove+0x144>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d06f      	beq.n	800381c <cavlRemove+0x144>
        {
            Cavl* const re = cavlFindExtremum(node->lr[1], false);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f7ff fd72 	bl	800322c <cavlFindExtremum>
 8003748:	6178      	str	r0, [r7, #20]
            CAVL_ASSERT((re != NULL) && (NULL == re->lr[0]) && (re->up != NULL));
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d007      	beq.n	8003760 <cavlRemove+0x88>
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <cavlRemove+0x88>
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <cavlRemove+0x94>
 8003760:	4b73      	ldr	r3, [pc, #460]	@ (8003930 <cavlRemove+0x258>)
 8003762:	4a70      	ldr	r2, [pc, #448]	@ (8003924 <cavlRemove+0x24c>)
 8003764:	21ff      	movs	r1, #255	@ 0xff
 8003766:	4870      	ldr	r0, [pc, #448]	@ (8003928 <cavlRemove+0x250>)
 8003768:	f000 ffee 	bl	8004748 <__assert_func>
            re->bf        = node->bf;
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	f993 200c 	ldrsb.w	r2, [r3, #12]
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	731a      	strb	r2, [r3, #12]
            re->lr[0]     = node->lr[0];
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	685a      	ldr	r2, [r3, #4]
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	605a      	str	r2, [r3, #4]
            re->lr[0]->up = re;
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	697a      	ldr	r2, [r7, #20]
 8003784:	601a      	str	r2, [r3, #0]
            if (re->up != node)
 8003786:	697b      	ldr	r3, [r7, #20]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d025      	beq.n	80037dc <cavlRemove+0x104>
            {
                p = re->up;  // Retracing starts with the ex-parent of our replacement node.
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	61fb      	str	r3, [r7, #28]
                CAVL_ASSERT(p->lr[0] == re);
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	429a      	cmp	r2, r3
 800379e:	d006      	beq.n	80037ae <cavlRemove+0xd6>
 80037a0:	4b64      	ldr	r3, [pc, #400]	@ (8003934 <cavlRemove+0x25c>)
 80037a2:	4a60      	ldr	r2, [pc, #384]	@ (8003924 <cavlRemove+0x24c>)
 80037a4:	f44f 7183 	mov.w	r1, #262	@ 0x106
 80037a8:	485f      	ldr	r0, [pc, #380]	@ (8003928 <cavlRemove+0x250>)
 80037aa:	f000 ffcd 	bl	8004748 <__assert_func>
                p->lr[0] = re->lr[1];  // Reducing the height of the left subtree here.
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	605a      	str	r2, [r3, #4]
                if (p->lr[0] != NULL)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	685b      	ldr	r3, [r3, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d003      	beq.n	80037c6 <cavlRemove+0xee>
                {
                    p->lr[0]->up = p;
 80037be:	69fb      	ldr	r3, [r7, #28]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	69fa      	ldr	r2, [r7, #28]
 80037c4:	601a      	str	r2, [r3, #0]
                }
                re->lr[1]     = node->lr[1];
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	609a      	str	r2, [r3, #8]
                re->lr[1]->up = re;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	697a      	ldr	r2, [r7, #20]
 80037d4:	601a      	str	r2, [r3, #0]
                r             = false;
 80037d6:	2300      	movs	r3, #0
 80037d8:	76fb      	strb	r3, [r7, #27]
 80037da:	e003      	b.n	80037e4 <cavlRemove+0x10c>
            }
            else  // In this case, we are reducing the height of the right subtree, so r=1.
            {
                p = re;    // Retracing starts with the replacement node itself as we are deleting its parent.
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	61fb      	str	r3, [r7, #28]
                r = true;  // The right child of the replacement node remains the same so we don't bother relinking it.
 80037e0:	2301      	movs	r3, #1
 80037e2:	76fb      	strb	r3, [r7, #27]
            }
            re->up = node->up;
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	601a      	str	r2, [r3, #0]
            if (re->up != NULL)
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <cavlRemove+0x13c>
            {
                re->up->lr[re->up->lr[1] == node] = re;  // Replace link in the parent of node.
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	6839      	ldr	r1, [r7, #0]
 8003800:	4299      	cmp	r1, r3
 8003802:	bf0c      	ite	eq
 8003804:	2301      	moveq	r3, #1
 8003806:	2300      	movne	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	605a      	str	r2, [r3, #4]
        {
 8003812:	e046      	b.n	80038a2 <cavlRemove+0x1ca>
            }
            else
            {
                *root = re;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	601a      	str	r2, [r3, #0]
        {
 800381a:	e042      	b.n	80038a2 <cavlRemove+0x1ca>
            }
        }
        else  // Either or both of the children are NULL.
        {
            p             = node->up;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	61fb      	str	r3, [r7, #28]
            const bool rr = node->lr[1] != NULL;
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	bf14      	ite	ne
 800382a:	2301      	movne	r3, #1
 800382c:	2300      	moveq	r3, #0
 800382e:	74fb      	strb	r3, [r7, #19]
            if (node->lr[rr] != NULL)
 8003830:	7cfb      	ldrb	r3, [r7, #19]
 8003832:	683a      	ldr	r2, [r7, #0]
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	4413      	add	r3, r2
 8003838:	685b      	ldr	r3, [r3, #4]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d006      	beq.n	800384c <cavlRemove+0x174>
            {
                node->lr[rr]->up = p;
 800383e:	7cfb      	ldrb	r3, [r7, #19]
 8003840:	683a      	ldr	r2, [r7, #0]
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4413      	add	r3, r2
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	69fa      	ldr	r2, [r7, #28]
 800384a:	601a      	str	r2, [r3, #0]
            }
            if (p != NULL)
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d020      	beq.n	8003894 <cavlRemove+0x1bc>
            {
                r        = p->lr[1] == node;
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	bf0c      	ite	eq
 800385c:	2301      	moveq	r3, #1
 800385e:	2300      	movne	r3, #0
 8003860:	76fb      	strb	r3, [r7, #27]
                p->lr[r] = node->lr[rr];
 8003862:	7cfb      	ldrb	r3, [r7, #19]
 8003864:	7ef8      	ldrb	r0, [r7, #27]
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	4413      	add	r3, r2
 800386c:	685a      	ldr	r2, [r3, #4]
 800386e:	69f9      	ldr	r1, [r7, #28]
 8003870:	0083      	lsls	r3, r0, #2
 8003872:	440b      	add	r3, r1
 8003874:	605a      	str	r2, [r3, #4]
                if (p->lr[r] != NULL)
 8003876:	7efb      	ldrb	r3, [r7, #27]
 8003878:	69fa      	ldr	r2, [r7, #28]
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	4413      	add	r3, r2
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00e      	beq.n	80038a2 <cavlRemove+0x1ca>
                {
                    p->lr[r]->up = p;
 8003884:	7efb      	ldrb	r3, [r7, #27]
 8003886:	69fa      	ldr	r2, [r7, #28]
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	69fa      	ldr	r2, [r7, #28]
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	e006      	b.n	80038a2 <cavlRemove+0x1ca>
                }
            }
            else
            {
                *root = node->lr[rr];
 8003894:	7cfb      	ldrb	r3, [r7, #19]
 8003896:	683a      	ldr	r2, [r7, #0]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	4413      	add	r3, r2
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	601a      	str	r2, [r3, #0]
        }
        // Now that the topology is updated, perform the retracing to restore balance. We climb up adjusting the
        // balance factors until we reach the root or a parent whose balance factor becomes plus/minus one, which
        // means that that parent was able to absorb the balance delta; in other words, the height of the outer
        // subtree is unchanged, so upper balance factors shall be kept unchanged.
        if (p != NULL)
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d036      	beq.n	8003916 <cavlRemove+0x23e>
        {
            Cavl* c = NULL;
 80038a8:	2300      	movs	r3, #0
 80038aa:	60fb      	str	r3, [r7, #12]
            for (;;)
            {
                c = cavlPrivateAdjustBalance(p, !r);
 80038ac:	7efb      	ldrb	r3, [r7, #27]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	bf14      	ite	ne
 80038b2:	2301      	movne	r3, #1
 80038b4:	2300      	moveq	r3, #0
 80038b6:	b2db      	uxtb	r3, r3
 80038b8:	f083 0301 	eor.w	r3, r3, #1
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	b2db      	uxtb	r3, r3
 80038c4:	4619      	mov	r1, r3
 80038c6:	69f8      	ldr	r0, [r7, #28]
 80038c8:	f7ff fd48 	bl	800335c <cavlPrivateAdjustBalance>
 80038cc:	60f8      	str	r0, [r7, #12]
                p = c->up;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	61fb      	str	r3, [r7, #28]
                if ((c->bf != 0) || (NULL == p))  // Reached the root or the height difference is absorbed by c.
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f993 300c 	ldrsb.w	r3, [r3, #12]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d10b      	bne.n	80038f6 <cavlRemove+0x21e>
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <cavlRemove+0x21e>
                {
                    break;
                }
                r = p->lr[1] == c;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	429a      	cmp	r2, r3
 80038ec:	bf0c      	ite	eq
 80038ee:	2301      	moveq	r3, #1
 80038f0:	2300      	movne	r3, #0
 80038f2:	76fb      	strb	r3, [r7, #27]
                c = cavlPrivateAdjustBalance(p, !r);
 80038f4:	e7da      	b.n	80038ac <cavlRemove+0x1d4>
            }
            if (NULL == p)
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10c      	bne.n	8003916 <cavlRemove+0x23e>
            {
                CAVL_ASSERT(c != NULL);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <cavlRemove+0x238>
 8003902:	4b0d      	ldr	r3, [pc, #52]	@ (8003938 <cavlRemove+0x260>)
 8003904:	4a07      	ldr	r2, [pc, #28]	@ (8003924 <cavlRemove+0x24c>)
 8003906:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800390a:	4807      	ldr	r0, [pc, #28]	@ (8003928 <cavlRemove+0x250>)
 800390c:	f000 ff1c 	bl	8004748 <__assert_func>
                *root = c;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	601a      	str	r2, [r3, #0]
            }
        }
    }
}
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	08005ce0 	.word	0x08005ce0
 8003924:	08006a68 	.word	0x08006a68
 8003928:	08005bec 	.word	0x08005bec
 800392c:	08005cf8 	.word	0x08005cf8
 8003930:	08005d28 	.word	0x08005d28
 8003934:	08005d78 	.word	0x08005d78
 8003938:	08005ca4 	.word	0x08005ca4

0800393c <avlTrivialFactory>:

#define INITIAL_TOGGLE_STATE true

/// Used for inserting new items into AVL trees.
CANARD_PRIVATE CanardTreeNode* avlTrivialFactory(void* const user_reference)
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
    return (CanardTreeNode*) user_reference;
 8003944:	687b      	ldr	r3, [r7, #4]
}
 8003946:	4618      	mov	r0, r3
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <crcAddByte>:
    0x9FF8U, 0x6E17U, 0x7E36U, 0x4E55U, 0x5E74U, 0x2E93U, 0x3EB2U, 0x0ED1U, 0x1EF0U,
};
#endif

CANARD_PRIVATE TransferCRC crcAddByte(const TransferCRC crc, const uint8_t byte)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	460a      	mov	r2, r1
 800395e:	80fb      	strh	r3, [r7, #6]
 8003960:	4613      	mov	r3, r2
 8003962:	717b      	strb	r3, [r7, #5]
#if (CANARD_CRC_TABLE != 0)
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8003964:	88fb      	ldrh	r3, [r7, #6]
 8003966:	021b      	lsls	r3, r3, #8
 8003968:	b29a      	uxth	r2, r3
                       CRCTable[(uint16_t) ((uint16_t) (crc >> BITS_PER_BYTE) ^ byte) & BYTE_MAX]);
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	0a1b      	lsrs	r3, r3, #8
 800396e:	b299      	uxth	r1, r3
 8003970:	797b      	ldrb	r3, [r7, #5]
 8003972:	b29b      	uxth	r3, r3
 8003974:	404b      	eors	r3, r1
 8003976:	b29b      	uxth	r3, r3
 8003978:	b2db      	uxtb	r3, r3
 800397a:	4905      	ldr	r1, [pc, #20]	@ (8003990 <crcAddByte+0x3c>)
 800397c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
    return (uint16_t) ((uint16_t) (crc << BITS_PER_BYTE) ^
 8003980:	4053      	eors	r3, r2
 8003982:	b29b      	uxth	r3, r3
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    out = (uint16_t) ((uint16_t) (out << 1U) ^ (((out & Top) != 0U) ? Poly : 0U));
    return out;
#endif
}
 8003984:	4618      	mov	r0, r3
 8003986:	370c      	adds	r7, #12
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr
 8003990:	080066b8 	.word	0x080066b8

08003994 <crcAdd>:

CANARD_PRIVATE TransferCRC crcAdd(const TransferCRC crc, const size_t size, const void* const data)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b088      	sub	sp, #32
 8003998:	af00      	add	r7, sp, #0
 800399a:	4603      	mov	r3, r0
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	81fb      	strh	r3, [r7, #14]
    CANARD_ASSERT((data != NULL) || (size == 0U));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d108      	bne.n	80039ba <crcAdd+0x26>
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d005      	beq.n	80039ba <crcAdd+0x26>
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <crcAdd+0x64>)
 80039b0:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <crcAdd+0x68>)
 80039b2:	2189      	movs	r1, #137	@ 0x89
 80039b4:	4812      	ldr	r0, [pc, #72]	@ (8003a00 <crcAdd+0x6c>)
 80039b6:	f000 fec7 	bl	8004748 <__assert_func>
    TransferCRC    out = crc;
 80039ba:	89fb      	ldrh	r3, [r7, #14]
 80039bc:	83fb      	strh	r3, [r7, #30]
    const uint8_t* p   = (const uint8_t*) data;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80039c2:	2300      	movs	r3, #0
 80039c4:	617b      	str	r3, [r7, #20]
 80039c6:	e00e      	b.n	80039e6 <crcAdd+0x52>
    {
        out = crcAddByte(out, *p);
 80039c8:	69bb      	ldr	r3, [r7, #24]
 80039ca:	781a      	ldrb	r2, [r3, #0]
 80039cc:	8bfb      	ldrh	r3, [r7, #30]
 80039ce:	4611      	mov	r1, r2
 80039d0:	4618      	mov	r0, r3
 80039d2:	f7ff ffbf 	bl	8003954 <crcAddByte>
 80039d6:	4603      	mov	r3, r0
 80039d8:	83fb      	strh	r3, [r7, #30]
        ++p;
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	3301      	adds	r3, #1
 80039de:	61bb      	str	r3, [r7, #24]
    for (size_t i = 0; i < size; i++)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	3301      	adds	r3, #1
 80039e4:	617b      	str	r3, [r7, #20]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d3ec      	bcc.n	80039c8 <crcAdd+0x34>
    }
    return out;
 80039ee:	8bfb      	ldrh	r3, [r7, #30]
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3720      	adds	r7, #32
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	08005d88 	.word	0x08005d88
 80039fc:	08006934 	.word	0x08006934
 8003a00:	08005db0 	.word	0x08005db0

08003a04 <txMakeMessageSessionSpecifier>:
    TxItem* tail;
    size_t  size;
} TxChain;

CANARD_PRIVATE uint32_t txMakeMessageSessionSpecifier(const CanardPortID subject_id, const CanardNodeID src_node_id)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	460a      	mov	r2, r1
 8003a0e:	80fb      	strh	r3, [r7, #6]
 8003a10:	4613      	mov	r3, r2
 8003a12:	717b      	strb	r3, [r7, #5]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8003a14:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	da05      	bge.n	8003a28 <txMakeMessageSessionSpecifier+0x24>
 8003a1c:	4b0e      	ldr	r3, [pc, #56]	@ (8003a58 <txMakeMessageSessionSpecifier+0x54>)
 8003a1e:	4a0f      	ldr	r2, [pc, #60]	@ (8003a5c <txMakeMessageSessionSpecifier+0x58>)
 8003a20:	21ab      	movs	r1, #171	@ 0xab
 8003a22:	480f      	ldr	r0, [pc, #60]	@ (8003a60 <txMakeMessageSessionSpecifier+0x5c>)
 8003a24:	f000 fe90 	bl	8004748 <__assert_func>
    CANARD_ASSERT(subject_id <= CANARD_SUBJECT_ID_MAX);
 8003a28:	88fb      	ldrh	r3, [r7, #6]
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2e:	d305      	bcc.n	8003a3c <txMakeMessageSessionSpecifier+0x38>
 8003a30:	4b0c      	ldr	r3, [pc, #48]	@ (8003a64 <txMakeMessageSessionSpecifier+0x60>)
 8003a32:	4a0a      	ldr	r2, [pc, #40]	@ (8003a5c <txMakeMessageSessionSpecifier+0x58>)
 8003a34:	21ac      	movs	r1, #172	@ 0xac
 8003a36:	480a      	ldr	r0, [pc, #40]	@ (8003a60 <txMakeMessageSessionSpecifier+0x5c>)
 8003a38:	f000 fe86 	bl	8004748 <__assert_func>
    const uint32_t tmp = subject_id | (CANARD_SUBJECT_ID_MAX + 1) | ((CANARD_SUBJECT_ID_MAX + 1) * 2);
 8003a3c:	88fb      	ldrh	r3, [r7, #6]
 8003a3e:	f443 43c0 	orr.w	r3, r3, #24576	@ 0x6000
 8003a42:	b29b      	uxth	r3, r3
 8003a44:	60fb      	str	r3, [r7, #12]
    return src_node_id | (tmp << OFFSET_SUBJECT_ID);
 8003a46:	797a      	ldrb	r2, [r7, #5]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	021b      	lsls	r3, r3, #8
 8003a4c:	4313      	orrs	r3, r2
}
 8003a4e:	4618      	mov	r0, r3
 8003a50:	3710      	adds	r7, #16
 8003a52:	46bd      	mov	sp, r7
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	08005dc8 	.word	0x08005dc8
 8003a5c:	0800693c 	.word	0x0800693c
 8003a60:	08005db0 	.word	0x08005db0
 8003a64:	08005ddc 	.word	0x08005ddc

08003a68 <txMakeServiceSessionSpecifier>:

CANARD_PRIVATE uint32_t txMakeServiceSessionSpecifier(const CanardPortID service_id,
                                                      const bool         request_not_response,
                                                      const CanardNodeID src_node_id,
                                                      const CanardNodeID dst_node_id)
{
 8003a68:	b590      	push	{r4, r7, lr}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4604      	mov	r4, r0
 8003a70:	4608      	mov	r0, r1
 8003a72:	4611      	mov	r1, r2
 8003a74:	461a      	mov	r2, r3
 8003a76:	4623      	mov	r3, r4
 8003a78:	80fb      	strh	r3, [r7, #6]
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	717b      	strb	r3, [r7, #5]
 8003a7e:	460b      	mov	r3, r1
 8003a80:	713b      	strb	r3, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(src_node_id <= CANARD_NODE_ID_MAX);
 8003a86:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	da05      	bge.n	8003a9a <txMakeServiceSessionSpecifier+0x32>
 8003a8e:	4b17      	ldr	r3, [pc, #92]	@ (8003aec <txMakeServiceSessionSpecifier+0x84>)
 8003a90:	4a17      	ldr	r2, [pc, #92]	@ (8003af0 <txMakeServiceSessionSpecifier+0x88>)
 8003a92:	21b6      	movs	r1, #182	@ 0xb6
 8003a94:	4817      	ldr	r0, [pc, #92]	@ (8003af4 <txMakeServiceSessionSpecifier+0x8c>)
 8003a96:	f000 fe57 	bl	8004748 <__assert_func>
    CANARD_ASSERT(dst_node_id <= CANARD_NODE_ID_MAX);
 8003a9a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	da05      	bge.n	8003aae <txMakeServiceSessionSpecifier+0x46>
 8003aa2:	4b15      	ldr	r3, [pc, #84]	@ (8003af8 <txMakeServiceSessionSpecifier+0x90>)
 8003aa4:	4a12      	ldr	r2, [pc, #72]	@ (8003af0 <txMakeServiceSessionSpecifier+0x88>)
 8003aa6:	21b7      	movs	r1, #183	@ 0xb7
 8003aa8:	4812      	ldr	r0, [pc, #72]	@ (8003af4 <txMakeServiceSessionSpecifier+0x8c>)
 8003aaa:	f000 fe4d 	bl	8004748 <__assert_func>
    CANARD_ASSERT(service_id <= CANARD_SERVICE_ID_MAX);
 8003aae:	88fb      	ldrh	r3, [r7, #6]
 8003ab0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003ab4:	d305      	bcc.n	8003ac2 <txMakeServiceSessionSpecifier+0x5a>
 8003ab6:	4b11      	ldr	r3, [pc, #68]	@ (8003afc <txMakeServiceSessionSpecifier+0x94>)
 8003ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8003af0 <txMakeServiceSessionSpecifier+0x88>)
 8003aba:	21b8      	movs	r1, #184	@ 0xb8
 8003abc:	480d      	ldr	r0, [pc, #52]	@ (8003af4 <txMakeServiceSessionSpecifier+0x8c>)
 8003abe:	f000 fe43 	bl	8004748 <__assert_func>
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8003ac2:	793a      	ldrb	r2, [r7, #4]
 8003ac4:	78fb      	ldrb	r3, [r7, #3]
 8003ac6:	01db      	lsls	r3, r3, #7
 8003ac8:	431a      	orrs	r2, r3
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8003aca:	88fb      	ldrh	r3, [r7, #6]
 8003acc:	039b      	lsls	r3, r3, #14
    return src_node_id | (((uint32_t) dst_node_id) << OFFSET_DST_NODE_ID) |  //
 8003ace:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003ad0:	797a      	ldrb	r2, [r7, #5]
 8003ad2:	2a00      	cmp	r2, #0
 8003ad4:	d002      	beq.n	8003adc <txMakeServiceSessionSpecifier+0x74>
 8003ad6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ada:	e000      	b.n	8003ade <txMakeServiceSessionSpecifier+0x76>
 8003adc:	2200      	movs	r2, #0
           (((uint32_t) service_id) << OFFSET_SERVICE_ID) |                  //
 8003ade:	4313      	orrs	r3, r2
           (request_not_response ? FLAG_REQUEST_NOT_RESPONSE : 0U) | FLAG_SERVICE_NOT_MESSAGE;
 8003ae0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	370c      	adds	r7, #12
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}
 8003aec:	08005dc8 	.word	0x08005dc8
 8003af0:	0800695c 	.word	0x0800695c
 8003af4:	08005db0 	.word	0x08005db0
 8003af8:	08005df0 	.word	0x08005df0
 8003afc:	08005e04 	.word	0x08005e04

08003b00 <adjustPresentationLayerMTU>:

/// This is the transport MTU rounded up to next full DLC minus the tail byte.
CANARD_PRIVATE size_t adjustPresentationLayerMTU(const size_t mtu_bytes)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
    const size_t max_index = (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])) - 1U;
 8003b08:	2340      	movs	r3, #64	@ 0x40
 8003b0a:	60bb      	str	r3, [r7, #8]
    size_t       mtu       = 0U;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	60fb      	str	r3, [r7, #12]
    if (mtu_bytes < CANARD_MTU_CAN_CLASSIC)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b07      	cmp	r3, #7
 8003b14:	d802      	bhi.n	8003b1c <adjustPresentationLayerMTU+0x1c>
    {
        mtu = CANARD_MTU_CAN_CLASSIC;
 8003b16:	2308      	movs	r3, #8
 8003b18:	60fb      	str	r3, [r7, #12]
 8003b1a:	e014      	b.n	8003b46 <adjustPresentationLayerMTU+0x46>
    }
    else if (mtu_bytes <= max_index)
 8003b1c:	687a      	ldr	r2, [r7, #4]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d808      	bhi.n	8003b36 <adjustPresentationLayerMTU+0x36>
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[mtu_bytes]];  // Round up to nearest valid length.
 8003b24:	4a0c      	ldr	r2, [pc, #48]	@ (8003b58 <adjustPresentationLayerMTU+0x58>)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	4413      	add	r3, r2
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b5c <adjustPresentationLayerMTU+0x5c>)
 8003b30:	5c9b      	ldrb	r3, [r3, r2]
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e007      	b.n	8003b46 <adjustPresentationLayerMTU+0x46>
    }
    else
    {
        mtu = CanardCANDLCToLength[CanardCANLengthToDLC[max_index]];
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <adjustPresentationLayerMTU+0x58>)
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4413      	add	r3, r2
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	4b06      	ldr	r3, [pc, #24]	@ (8003b5c <adjustPresentationLayerMTU+0x5c>)
 8003b42:	5c9b      	ldrb	r3, [r3, r2]
 8003b44:	60fb      	str	r3, [r7, #12]
    }
    return mtu - 1U;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	3b01      	subs	r3, #1
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	080068c8 	.word	0x080068c8
 8003b5c:	080068b8 	.word	0x080068b8

08003b60 <txMakeCANID>:
CANARD_PRIVATE int32_t txMakeCANID(const CanardTransferMetadata* const tr,
                                   const size_t                        payload_size,
                                   const void* const                   payload,
                                   const CanardNodeID                  local_node_id,
                                   const size_t                        presentation_layer_mtu)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08a      	sub	sp, #40	@ 0x28
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	60f8      	str	r0, [r7, #12]
 8003b68:	60b9      	str	r1, [r7, #8]
 8003b6a:	607a      	str	r2, [r7, #4]
 8003b6c:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(tr != NULL);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d105      	bne.n	8003b80 <txMakeCANID+0x20>
 8003b74:	4b60      	ldr	r3, [pc, #384]	@ (8003cf8 <txMakeCANID+0x198>)
 8003b76:	4a61      	ldr	r2, [pc, #388]	@ (8003cfc <txMakeCANID+0x19c>)
 8003b78:	21d8      	movs	r1, #216	@ 0xd8
 8003b7a:	4861      	ldr	r0, [pc, #388]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003b7c:	f000 fde4 	bl	8004748 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0);
 8003b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d105      	bne.n	8003b92 <txMakeCANID+0x32>
 8003b86:	4b5f      	ldr	r3, [pc, #380]	@ (8003d04 <txMakeCANID+0x1a4>)
 8003b88:	4a5c      	ldr	r2, [pc, #368]	@ (8003cfc <txMakeCANID+0x19c>)
 8003b8a:	21d9      	movs	r1, #217	@ 0xd9
 8003b8c:	485c      	ldr	r0, [pc, #368]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003b8e:	f000 fddb 	bl	8004748 <__assert_func>
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 8003b92:	f06f 0301 	mvn.w	r3, #1
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	785b      	ldrb	r3, [r3, #1]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d157      	bne.n	8003c50 <txMakeCANID+0xf0>
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	791b      	ldrb	r3, [r3, #4]
 8003ba4:	2bff      	cmp	r3, #255	@ 0xff
 8003ba6:	d153      	bne.n	8003c50 <txMakeCANID+0xf0>
        (tr->port_id <= CANARD_SUBJECT_ID_MAX))
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	885b      	ldrh	r3, [r3, #2]
    if ((tr->transfer_kind == CanardTransferKindMessage) && (CANARD_NODE_ID_UNSET == tr->remote_node_id) &&
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003bb0:	d24e      	bcs.n	8003c50 <txMakeCANID+0xf0>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003bb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	db11      	blt.n	8003bde <txMakeCANID+0x7e>
        {
            out = (int32_t) txMakeMessageSessionSpecifier(tr->port_id, local_node_id);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	885b      	ldrh	r3, [r3, #2]
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	4611      	mov	r1, r2
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7ff ff1e 	bl	8003a04 <txMakeMessageSessionSpecifier>
 8003bc8:	4603      	mov	r3, r0
 8003bca:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8003bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	da75      	bge.n	8003cbe <txMakeCANID+0x15e>
 8003bd2:	4b4d      	ldr	r3, [pc, #308]	@ (8003d08 <txMakeCANID+0x1a8>)
 8003bd4:	4a49      	ldr	r2, [pc, #292]	@ (8003cfc <txMakeCANID+0x19c>)
 8003bd6:	21e1      	movs	r1, #225	@ 0xe1
 8003bd8:	4849      	ldr	r0, [pc, #292]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003bda:	f000 fdb5 	bl	8004748 <__assert_func>
        }
        else if (payload_size <= presentation_layer_mtu)
 8003bde:	68ba      	ldr	r2, [r7, #8]
 8003be0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003be2:	429a      	cmp	r2, r3
 8003be4:	d830      	bhi.n	8003c48 <txMakeCANID+0xe8>
        {
            CANARD_ASSERT((payload != NULL) || (payload_size == 0U));
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d108      	bne.n	8003bfe <txMakeCANID+0x9e>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d005      	beq.n	8003bfe <txMakeCANID+0x9e>
 8003bf2:	4b46      	ldr	r3, [pc, #280]	@ (8003d0c <txMakeCANID+0x1ac>)
 8003bf4:	4a41      	ldr	r2, [pc, #260]	@ (8003cfc <txMakeCANID+0x19c>)
 8003bf6:	21e5      	movs	r1, #229	@ 0xe5
 8003bf8:	4841      	ldr	r0, [pc, #260]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003bfa:	f000 fda5 	bl	8004748 <__assert_func>
            const CanardNodeID c    = (CanardNodeID) (crcAdd(CRC_INITIAL, payload_size, payload) & CANARD_NODE_ID_MAX);
 8003bfe:	687a      	ldr	r2, [r7, #4]
 8003c00:	68b9      	ldr	r1, [r7, #8]
 8003c02:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8003c06:	f7ff fec5 	bl	8003994 <crcAdd>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            const uint32_t     spec = txMakeMessageSessionSpecifier(tr->port_id, c) | FLAG_ANONYMOUS_MESSAGE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	885b      	ldrh	r3, [r3, #2]
 8003c1a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8003c1e:	4611      	mov	r1, r2
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7ff feef 	bl	8003a04 <txMakeMessageSessionSpecifier>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003c2c:	61fb      	str	r3, [r7, #28]
            CANARD_ASSERT(spec <= CAN_EXT_ID_MASK);
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c34:	d305      	bcc.n	8003c42 <txMakeCANID+0xe2>
 8003c36:	4b36      	ldr	r3, [pc, #216]	@ (8003d10 <txMakeCANID+0x1b0>)
 8003c38:	4a30      	ldr	r2, [pc, #192]	@ (8003cfc <txMakeCANID+0x19c>)
 8003c3a:	21e8      	movs	r1, #232	@ 0xe8
 8003c3c:	4830      	ldr	r0, [pc, #192]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003c3e:	f000 fd83 	bl	8004748 <__assert_func>
            out = (int32_t) spec;
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003c46:	e03a      	b.n	8003cbe <txMakeCANID+0x15e>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous multi-frame message trs are not allowed.
 8003c48:	f06f 0301 	mvn.w	r3, #1
 8003c4c:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003c4e:	e036      	b.n	8003cbe <txMakeCANID+0x15e>
        }
    }
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	785b      	ldrb	r3, [r3, #1]
 8003c54:	2b02      	cmp	r3, #2
 8003c56:	d003      	beq.n	8003c60 <txMakeCANID+0x100>
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	785b      	ldrb	r3, [r3, #1]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d12a      	bne.n	8003cb6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	791b      	ldrb	r3, [r3, #4]
 8003c64:	b25b      	sxtb	r3, r3
    else if (((tr->transfer_kind == CanardTransferKindRequest) || (tr->transfer_kind == CanardTransferKindResponse)) &&
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	db25      	blt.n	8003cb6 <txMakeCANID+0x156>
             (tr->remote_node_id <= CANARD_NODE_ID_MAX) && (tr->port_id <= CANARD_SERVICE_ID_MAX))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	885b      	ldrh	r3, [r3, #2]
 8003c6e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c72:	d220      	bcs.n	8003cb6 <txMakeCANID+0x156>
    {
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	db18      	blt.n	8003cae <txMakeCANID+0x14e>
        {
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8858      	ldrh	r0, [r3, #2]
                                                          tr->transfer_kind == CanardTransferKindRequest,
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	785b      	ldrb	r3, [r3, #1]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	bf0c      	ite	eq
 8003c88:	2301      	moveq	r3, #1
 8003c8a:	2300      	movne	r3, #0
 8003c8c:	b2d9      	uxtb	r1, r3
                                                          local_node_id,
                                                          tr->remote_node_id);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	791b      	ldrb	r3, [r3, #4]
            out = (int32_t) txMakeServiceSessionSpecifier(tr->port_id,
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	f7ff fee8 	bl	8003a68 <txMakeServiceSessionSpecifier>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	627b      	str	r3, [r7, #36]	@ 0x24
            CANARD_ASSERT(out >= 0);
 8003c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	da0f      	bge.n	8003cc2 <txMakeCANID+0x162>
 8003ca2:	4b19      	ldr	r3, [pc, #100]	@ (8003d08 <txMakeCANID+0x1a8>)
 8003ca4:	4a15      	ldr	r2, [pc, #84]	@ (8003cfc <txMakeCANID+0x19c>)
 8003ca6:	21f9      	movs	r1, #249	@ 0xf9
 8003ca8:	4815      	ldr	r0, [pc, #84]	@ (8003d00 <txMakeCANID+0x1a0>)
 8003caa:	f000 fd4d 	bl	8004748 <__assert_func>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;  // Anonymous service transfers are not allowed.
 8003cae:	f06f 0301 	mvn.w	r3, #1
 8003cb2:	627b      	str	r3, [r7, #36]	@ 0x24
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003cb4:	e005      	b.n	8003cc2 <txMakeCANID+0x162>
        }
    }
    else
    {
        out = -CANARD_ERROR_INVALID_ARGUMENT;
 8003cb6:	f06f 0301 	mvn.w	r3, #1
 8003cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cbc:	e002      	b.n	8003cc4 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <txMakeCANID+0x164>
        if (local_node_id <= CANARD_NODE_ID_MAX)
 8003cc2:	bf00      	nop
    }

    if (out >= 0)
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	db10      	blt.n	8003cec <txMakeCANID+0x18c>
    {
        const uint32_t prio = (uint32_t) tr->priority;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	61bb      	str	r3, [r7, #24]
        if (prio <= CANARD_PRIORITY_MAX)
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	2b07      	cmp	r3, #7
 8003cd4:	d807      	bhi.n	8003ce6 <txMakeCANID+0x186>
        {
            const uint32_t id = ((uint32_t) out) | (prio << OFFSET_PRIORITY);
 8003cd6:	69bb      	ldr	r3, [r7, #24]
 8003cd8:	069a      	lsls	r2, r3, #26
 8003cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	617b      	str	r3, [r7, #20]
            out               = (int32_t) id;
 8003ce0:	697b      	ldr	r3, [r7, #20]
 8003ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ce4:	e002      	b.n	8003cec <txMakeCANID+0x18c>
        }
        else
        {
            out = -CANARD_ERROR_INVALID_ARGUMENT;
 8003ce6:	f06f 0301 	mvn.w	r3, #1
 8003cea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }
    return out;
 8003cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3728      	adds	r7, #40	@ 0x28
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}
 8003cf6:	bf00      	nop
 8003cf8:	08005e18 	.word	0x08005e18
 8003cfc:	08006928 	.word	0x08006928
 8003d00:	08005db0 	.word	0x08005db0
 8003d04:	08005e2c 	.word	0x08005e2c
 8003d08:	08005e48 	.word	0x08005e48
 8003d0c:	08005e54 	.word	0x08005e54
 8003d10:	08005e88 	.word	0x08005e88

08003d14 <txMakeTailByte>:

CANARD_PRIVATE uint8_t txMakeTailByte(const bool             start_of_transfer,
                                      const bool             end_of_transfer,
                                      const bool             toggle,
                                      const CanardTransferID transfer_id)
{
 8003d14:	b590      	push	{r4, r7, lr}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	4604      	mov	r4, r0
 8003d1c:	4608      	mov	r0, r1
 8003d1e:	4611      	mov	r1, r2
 8003d20:	461a      	mov	r2, r3
 8003d22:	4623      	mov	r3, r4
 8003d24:	71fb      	strb	r3, [r7, #7]
 8003d26:	4603      	mov	r3, r0
 8003d28:	71bb      	strb	r3, [r7, #6]
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	717b      	strb	r3, [r7, #5]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	713b      	strb	r3, [r7, #4]
    CANARD_ASSERT(start_of_transfer ? (toggle == INITIAL_TOGGLE_STATE) : true);
 8003d32:	79fb      	ldrb	r3, [r7, #7]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d009      	beq.n	8003d4c <txMakeTailByte+0x38>
 8003d38:	797b      	ldrb	r3, [r7, #5]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d006      	beq.n	8003d4c <txMakeTailByte+0x38>
 8003d3e:	4b13      	ldr	r3, [pc, #76]	@ (8003d8c <txMakeTailByte+0x78>)
 8003d40:	4a13      	ldr	r2, [pc, #76]	@ (8003d90 <txMakeTailByte+0x7c>)
 8003d42:	f44f 718d 	mov.w	r1, #282	@ 0x11a
 8003d46:	4813      	ldr	r0, [pc, #76]	@ (8003d94 <txMakeTailByte+0x80>)
 8003d48:	f000 fcfe 	bl	8004748 <__assert_func>
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d001      	beq.n	8003d56 <txMakeTailByte+0x42>
 8003d52:	2280      	movs	r2, #128	@ 0x80
 8003d54:	e000      	b.n	8003d58 <txMakeTailByte+0x44>
 8003d56:	2200      	movs	r2, #0
 8003d58:	79bb      	ldrb	r3, [r7, #6]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d001      	beq.n	8003d62 <txMakeTailByte+0x4e>
 8003d5e:	2340      	movs	r3, #64	@ 0x40
 8003d60:	e000      	b.n	8003d64 <txMakeTailByte+0x50>
 8003d62:	2300      	movs	r3, #0
 8003d64:	4313      	orrs	r3, r2
 8003d66:	b2db      	uxtb	r3, r3
                      (end_of_transfer ? TAIL_END_OF_TRANSFER : 0U) | (toggle ? TAIL_TOGGLE : 0U) |
 8003d68:	797a      	ldrb	r2, [r7, #5]
 8003d6a:	2a00      	cmp	r2, #0
 8003d6c:	d001      	beq.n	8003d72 <txMakeTailByte+0x5e>
 8003d6e:	2220      	movs	r2, #32
 8003d70:	e000      	b.n	8003d74 <txMakeTailByte+0x60>
 8003d72:	2200      	movs	r2, #0
 8003d74:	4313      	orrs	r3, r2
 8003d76:	b2da      	uxtb	r2, r3
                      (transfer_id & CANARD_TRANSFER_ID_MAX));
 8003d78:	793b      	ldrb	r3, [r7, #4]
 8003d7a:	f003 031f 	and.w	r3, r3, #31
 8003d7e:	b2db      	uxtb	r3, r3
    return (uint8_t) ((start_of_transfer ? TAIL_START_OF_TRANSFER : 0U) |
 8003d80:	4313      	orrs	r3, r2
 8003d82:	b2db      	uxtb	r3, r3
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	370c      	adds	r7, #12
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd90      	pop	{r4, r7, pc}
 8003d8c:	08005ea4 	.word	0x08005ea4
 8003d90:	080069d0 	.word	0x080069d0
 8003d94:	08005db0 	.word	0x08005db0

08003d98 <txRoundFramePayloadSizeUp>:

/// Takes a frame payload size, returns a new size that is >=x and is rounded up to the nearest valid DLC.
CANARD_PRIVATE size_t txRoundFramePayloadSizeUp(const size_t x)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(x < (sizeof(CanardCANLengthToDLC) / sizeof(CanardCANLengthToDLC[0])));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2b40      	cmp	r3, #64	@ 0x40
 8003da4:	d906      	bls.n	8003db4 <txRoundFramePayloadSizeUp+0x1c>
 8003da6:	4b0f      	ldr	r3, [pc, #60]	@ (8003de4 <txRoundFramePayloadSizeUp+0x4c>)
 8003da8:	4a0f      	ldr	r2, [pc, #60]	@ (8003de8 <txRoundFramePayloadSizeUp+0x50>)
 8003daa:	f240 1123 	movw	r1, #291	@ 0x123
 8003dae:	480f      	ldr	r0, [pc, #60]	@ (8003dec <txRoundFramePayloadSizeUp+0x54>)
 8003db0:	f000 fcca 	bl	8004748 <__assert_func>
    // Suppressing a false-positive out-of-bounds access error from Sonar. Its control flow analyser is misbehaving.
    const size_t y = CanardCANLengthToDLC[x];  // NOSONAR
 8003db4:	4a0e      	ldr	r2, [pc, #56]	@ (8003df0 <txRoundFramePayloadSizeUp+0x58>)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4413      	add	r3, r2
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	60fb      	str	r3, [r7, #12]
    CANARD_ASSERT(y < (sizeof(CanardCANDLCToLength) / sizeof(CanardCANDLCToLength[0])));
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2b0f      	cmp	r3, #15
 8003dc2:	d906      	bls.n	8003dd2 <txRoundFramePayloadSizeUp+0x3a>
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	@ (8003df4 <txRoundFramePayloadSizeUp+0x5c>)
 8003dc6:	4a08      	ldr	r2, [pc, #32]	@ (8003de8 <txRoundFramePayloadSizeUp+0x50>)
 8003dc8:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8003dcc:	4807      	ldr	r0, [pc, #28]	@ (8003dec <txRoundFramePayloadSizeUp+0x54>)
 8003dce:	f000 fcbb 	bl	8004748 <__assert_func>
    return CanardCANDLCToLength[y];
 8003dd2:	4a09      	ldr	r2, [pc, #36]	@ (8003df8 <txRoundFramePayloadSizeUp+0x60>)
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	4413      	add	r3, r2
 8003dd8:	781b      	ldrb	r3, [r3, #0]
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	08005ecc 	.word	0x08005ecc
 8003de8:	080069a0 	.word	0x080069a0
 8003dec:	08005db0 	.word	0x08005db0
 8003df0:	080068c8 	.word	0x080068c8
 8003df4:	08005f14 	.word	0x08005f14
 8003df8:	080068b8 	.word	0x080068b8

08003dfc <txAllocateQueueItem>:
/// The item is only allocated and initialized, but NOT included into the queue! The caller needs to do that.
CANARD_PRIVATE TxItem* txAllocateQueueItem(CanardInstance* const   ins,
                                           const uint32_t          id,
                                           const CanardMicrosecond deadline_usec,
                                           const size_t            payload_size)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d106      	bne.n	8003e1e <txAllocateQueueItem+0x22>
 8003e10:	4b1f      	ldr	r3, [pc, #124]	@ (8003e90 <txAllocateQueueItem+0x94>)
 8003e12:	4a20      	ldr	r2, [pc, #128]	@ (8003e94 <txAllocateQueueItem+0x98>)
 8003e14:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8003e18:	481f      	ldr	r0, [pc, #124]	@ (8003e98 <txAllocateQueueItem+0x9c>)
 8003e1a:	f000 fc95 	bl	8004748 <__assert_func>
    CANARD_ASSERT(payload_size > 0U);
 8003e1e:	6a3b      	ldr	r3, [r7, #32]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d106      	bne.n	8003e32 <txAllocateQueueItem+0x36>
 8003e24:	4b1d      	ldr	r3, [pc, #116]	@ (8003e9c <txAllocateQueueItem+0xa0>)
 8003e26:	4a1b      	ldr	r2, [pc, #108]	@ (8003e94 <txAllocateQueueItem+0x98>)
 8003e28:	f240 1131 	movw	r1, #305	@ 0x131
 8003e2c:	481a      	ldr	r0, [pc, #104]	@ (8003e98 <txAllocateQueueItem+0x9c>)
 8003e2e:	f000 fc8b 	bl	8004748 <__assert_func>
    TxItem* const out = (TxItem*) ins->memory_allocate(ins, (sizeof(TxItem) - CANARD_MTU_MAX) + payload_size);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	3230      	adds	r2, #48	@ 0x30
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	4798      	blx	r3
 8003e40:	6178      	str	r0, [r7, #20]
    if (out != NULL)
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d01e      	beq.n	8003e86 <txAllocateQueueItem+0x8a>
    {
        out->base.base.up    = NULL;
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	601a      	str	r2, [r3, #0]
        out->base.base.lr[0] = NULL;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	2200      	movs	r2, #0
 8003e52:	605a      	str	r2, [r3, #4]
        out->base.base.lr[1] = NULL;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	2200      	movs	r2, #0
 8003e58:	609a      	str	r2, [r3, #8]
        out->base.base.bf    = 0;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	731a      	strb	r2, [r3, #12]

        out->base.next_in_transfer = NULL;  // Last by default.
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	611a      	str	r2, [r3, #16]
        out->base.tx_deadline_usec = deadline_usec;
 8003e66:	6979      	ldr	r1, [r7, #20]
 8003e68:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e6c:	e9c1 2306 	strd	r2, r3, [r1, #24]

        out->base.frame.payload_size    = payload_size;
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	625a      	str	r2, [r3, #36]	@ 0x24
        out->base.frame.payload         = out->payload_buffer;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	629a      	str	r2, [r3, #40]	@ 0x28
        out->base.frame.extended_can_id = id;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	621a      	str	r2, [r3, #32]
    }
    return out;
 8003e86:	697b      	ldr	r3, [r7, #20]
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	08005f5c 	.word	0x08005f5c
 8003e94:	080069bc 	.word	0x080069bc
 8003e98:	08005db0 	.word	0x08005db0
 8003e9c:	08005f70 	.word	0x08005f70

08003ea0 <txAVLPredicate>:
/// Frames with identical CAN ID that are added later always compare greater than their counterparts with same CAN ID.
/// This ensures that CAN frames with the same CAN ID are transmitted in the FIFO order.
/// Frames that should be transmitted earlier compare smaller (i.e., put on the left side of the tree).
CANARD_PRIVATE int8_t txAVLPredicate(void* const user_reference,  // NOSONAR Cavl API requires pointer to non-const.
                                     const CanardTreeNode* const node)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
    const CanardTxQueueItem* const target = (const CanardTxQueueItem*) user_reference;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60fb      	str	r3, [r7, #12]
    const CanardTxQueueItem* const other  = (const CanardTxQueueItem*) (const void*) node;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	60bb      	str	r3, [r7, #8]
    CANARD_ASSERT((target != NULL) && (other != NULL));
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <txAVLPredicate+0x1e>
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d106      	bne.n	8003ecc <txAVLPredicate+0x2c>
 8003ebe:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee8 <txAVLPredicate+0x48>)
 8003ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <txAVLPredicate+0x4c>)
 8003ec2:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8003ec6:	480a      	ldr	r0, [pc, #40]	@ (8003ef0 <txAVLPredicate+0x50>)
 8003ec8:	f000 fc3e 	bl	8004748 <__assert_func>
    return (target->frame.extended_can_id >= other->frame.extended_can_id) ? +1 : -1;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1a      	ldr	r2, [r3, #32]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	6a1b      	ldr	r3, [r3, #32]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d301      	bcc.n	8003edc <txAVLPredicate+0x3c>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e001      	b.n	8003ee0 <txAVLPredicate+0x40>
 8003edc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	3710      	adds	r7, #16
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	08005f84 	.word	0x08005f84
 8003eec:	08006990 	.word	0x08006990
 8003ef0:	08005db0 	.word	0x08005db0

08003ef4 <txPushSingleFrame>:
                                         const CanardMicrosecond deadline_usec,
                                         const uint32_t          can_id,
                                         const CanardTransferID  transfer_id,
                                         const size_t            payload_size,
                                         const void* const       payload)
{
 8003ef4:	b590      	push	{r4, r7, lr}
 8003ef6:	b08d      	sub	sp, #52	@ 0x34
 8003ef8:	af02      	add	r7, sp, #8
 8003efa:	60f8      	str	r0, [r7, #12]
 8003efc:	60b9      	str	r1, [r7, #8]
 8003efe:	e9c7 2300 	strd	r2, r3, [r7]
    CANARD_ASSERT(ins != NULL);
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <txPushSingleFrame+0x22>
 8003f08:	4b5c      	ldr	r3, [pc, #368]	@ (800407c <txPushSingleFrame+0x188>)
 8003f0a:	4a5d      	ldr	r2, [pc, #372]	@ (8004080 <txPushSingleFrame+0x18c>)
 8003f0c:	f240 1159 	movw	r1, #345	@ 0x159
 8003f10:	485c      	ldr	r0, [pc, #368]	@ (8004084 <txPushSingleFrame+0x190>)
 8003f12:	f000 fc19 	bl	8004748 <__assert_func>
    CANARD_ASSERT((payload != NULL) || (payload_size == 0));
 8003f16:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d109      	bne.n	8003f30 <txPushSingleFrame+0x3c>
 8003f1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d006      	beq.n	8003f30 <txPushSingleFrame+0x3c>
 8003f22:	4b59      	ldr	r3, [pc, #356]	@ (8004088 <txPushSingleFrame+0x194>)
 8003f24:	4a56      	ldr	r2, [pc, #344]	@ (8004080 <txPushSingleFrame+0x18c>)
 8003f26:	f44f 71ad 	mov.w	r1, #346	@ 0x15a
 8003f2a:	4856      	ldr	r0, [pc, #344]	@ (8004084 <txPushSingleFrame+0x190>)
 8003f2c:	f000 fc0c 	bl	8004748 <__assert_func>
    const size_t frame_payload_size = txRoundFramePayloadSizeUp(payload_size + 1U);
 8003f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f32:	3301      	adds	r3, #1
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7ff ff2f 	bl	8003d98 <txRoundFramePayloadSizeUp>
 8003f3a:	6238      	str	r0, [r7, #32]
    CANARD_ASSERT(frame_payload_size > payload_size);
 8003f3c:	6a3a      	ldr	r2, [r7, #32]
 8003f3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d806      	bhi.n	8003f52 <txPushSingleFrame+0x5e>
 8003f44:	4b51      	ldr	r3, [pc, #324]	@ (800408c <txPushSingleFrame+0x198>)
 8003f46:	4a4e      	ldr	r2, [pc, #312]	@ (8004080 <txPushSingleFrame+0x18c>)
 8003f48:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003f4c:	484d      	ldr	r0, [pc, #308]	@ (8004084 <txPushSingleFrame+0x190>)
 8003f4e:	f000 fbfb 	bl	8004748 <__assert_func>
    const size_t padding_size = frame_payload_size - payload_size - 1U;
 8003f52:	6a3a      	ldr	r2, [r7, #32]
 8003f54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	61fb      	str	r3, [r7, #28]
    CANARD_ASSERT((padding_size + payload_size + 1U) == frame_payload_size);
 8003f5c:	69fa      	ldr	r2, [r7, #28]
 8003f5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003f60:	4413      	add	r3, r2
 8003f62:	3301      	adds	r3, #1
 8003f64:	6a3a      	ldr	r2, [r7, #32]
 8003f66:	429a      	cmp	r2, r3
 8003f68:	d006      	beq.n	8003f78 <txPushSingleFrame+0x84>
 8003f6a:	4b49      	ldr	r3, [pc, #292]	@ (8004090 <txPushSingleFrame+0x19c>)
 8003f6c:	4a44      	ldr	r2, [pc, #272]	@ (8004080 <txPushSingleFrame+0x18c>)
 8003f6e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003f72:	4844      	ldr	r0, [pc, #272]	@ (8004084 <txPushSingleFrame+0x190>)
 8003f74:	f000 fbe8 	bl	8004748 <__assert_func>
    int32_t       out = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxItem* const tqi =
        (que->size < que->capacity) ? txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size) : NULL;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	689a      	ldr	r2, [r3, #8]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d209      	bcs.n	8003f9c <txPushSingleFrame+0xa8>
 8003f88:	6a3b      	ldr	r3, [r7, #32]
 8003f8a:	9300      	str	r3, [sp, #0]
 8003f8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f90:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003f92:	68b8      	ldr	r0, [r7, #8]
 8003f94:	f7ff ff32 	bl	8003dfc <txAllocateQueueItem>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	e000      	b.n	8003f9e <txPushSingleFrame+0xaa>
 8003f9c:	2300      	movs	r3, #0
    TxItem* const tqi =
 8003f9e:	61bb      	str	r3, [r7, #24]
    if (tqi != NULL)
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d054      	beq.n	8004050 <txPushSingleFrame+0x15c>
    {
        if (payload_size > 0U)  // The check is needed to avoid calling memcpy() with a NULL pointer, it's an UB.
 8003fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d010      	beq.n	8003fce <txPushSingleFrame+0xda>
        {
            CANARD_ASSERT(payload != NULL);
 8003fac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d106      	bne.n	8003fc0 <txPushSingleFrame+0xcc>
 8003fb2:	4b38      	ldr	r3, [pc, #224]	@ (8004094 <txPushSingleFrame+0x1a0>)
 8003fb4:	4a32      	ldr	r2, [pc, #200]	@ (8004080 <txPushSingleFrame+0x18c>)
 8003fb6:	f44f 71b3 	mov.w	r1, #358	@ 0x166
 8003fba:	4832      	ldr	r0, [pc, #200]	@ (8004084 <txPushSingleFrame+0x190>)
 8003fbc:	f000 fbc4 	bl	8004748 <__assert_func>
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            (void) memcpy(&tqi->payload_buffer[0], payload, payload_size);  // NOLINT
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	3330      	adds	r3, #48	@ 0x30
 8003fc4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003fc6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fe56 	bl	8004c7a <memcpy>
        }
        // Clang-Tidy raises an error recommending the use of memset_s() instead.
        // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
        (void) memset(&tqi->payload_buffer[payload_size], PADDING_BYTE_VALUE, padding_size);  // NOLINT
 8003fce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003fd0:	3330      	adds	r3, #48	@ 0x30
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	69fa      	ldr	r2, [r7, #28]
 8003fd8:	2100      	movs	r1, #0
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f000 fdc1 	bl	8004b62 <memset>
        tqi->payload_buffer[frame_payload_size - 1U] = txMakeTailByte(true, true, true, transfer_id);
 8003fe0:	6a3b      	ldr	r3, [r7, #32]
 8003fe2:	1e5c      	subs	r4, r3, #1
 8003fe4:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8003fe8:	2201      	movs	r2, #1
 8003fea:	2101      	movs	r1, #1
 8003fec:	2001      	movs	r0, #1
 8003fee:	f7ff fe91 	bl	8003d14 <txMakeTailByte>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4423      	add	r3, r4
 8003ffa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        // Insert the newly created TX item into the queue.
        const CanardTreeNode* const res = cavlSearch(&que->root, &tqi->base.base, &txAVLPredicate, &avlTrivialFactory);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f103 000c 	add.w	r0, r3, #12
 8004004:	69b9      	ldr	r1, [r7, #24]
 8004006:	4b24      	ldr	r3, [pc, #144]	@ (8004098 <txPushSingleFrame+0x1a4>)
 8004008:	4a24      	ldr	r2, [pc, #144]	@ (800409c <txPushSingleFrame+0x1a8>)
 800400a:	f7ff fae7 	bl	80035dc <cavlSearch>
 800400e:	6178      	str	r0, [r7, #20]
        (void) res;
        CANARD_ASSERT(res == &tqi->base.base);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	697a      	ldr	r2, [r7, #20]
 8004014:	429a      	cmp	r2, r3
 8004016:	d006      	beq.n	8004026 <txPushSingleFrame+0x132>
 8004018:	4b21      	ldr	r3, [pc, #132]	@ (80040a0 <txPushSingleFrame+0x1ac>)
 800401a:	4a19      	ldr	r2, [pc, #100]	@ (8004080 <txPushSingleFrame+0x18c>)
 800401c:	f44f 71b9 	mov.w	r1, #370	@ 0x172
 8004020:	4818      	ldr	r0, [pc, #96]	@ (8004084 <txPushSingleFrame+0x190>)
 8004022:	f000 fb91 	bl	8004748 <__assert_func>
        que->size++;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	689b      	ldr	r3, [r3, #8]
 800402a:	1c5a      	adds	r2, r3, #1
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	609a      	str	r2, [r3, #8]
        CANARD_ASSERT(que->size <= que->capacity);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	689a      	ldr	r2, [r3, #8]
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	429a      	cmp	r2, r3
 800403a:	d906      	bls.n	800404a <txPushSingleFrame+0x156>
 800403c:	4b19      	ldr	r3, [pc, #100]	@ (80040a4 <txPushSingleFrame+0x1b0>)
 800403e:	4a10      	ldr	r2, [pc, #64]	@ (8004080 <txPushSingleFrame+0x18c>)
 8004040:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8004044:	480f      	ldr	r0, [pc, #60]	@ (8004084 <txPushSingleFrame+0x190>)
 8004046:	f000 fb7f 	bl	8004748 <__assert_func>
        out = 1;  // One frame enqueued.
 800404a:	2301      	movs	r3, #1
 800404c:	627b      	str	r3, [r7, #36]	@ 0x24
 800404e:	e002      	b.n	8004056 <txPushSingleFrame+0x162>
    }
    else
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 8004050:	f06f 0302 	mvn.w	r3, #2
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    CANARD_ASSERT((out < 0) || (out == 1));
 8004056:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004058:	2b00      	cmp	r3, #0
 800405a:	db09      	blt.n	8004070 <txPushSingleFrame+0x17c>
 800405c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800405e:	2b01      	cmp	r3, #1
 8004060:	d006      	beq.n	8004070 <txPushSingleFrame+0x17c>
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <txPushSingleFrame+0x1b4>)
 8004064:	4a06      	ldr	r2, [pc, #24]	@ (8004080 <txPushSingleFrame+0x18c>)
 8004066:	f240 117b 	movw	r1, #379	@ 0x17b
 800406a:	4806      	ldr	r0, [pc, #24]	@ (8004084 <txPushSingleFrame+0x190>)
 800406c:	f000 fb6c 	bl	8004748 <__assert_func>
    return out;
 8004070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004072:	4618      	mov	r0, r3
 8004074:	372c      	adds	r7, #44	@ 0x2c
 8004076:	46bd      	mov	sp, r7
 8004078:	bd90      	pop	{r4, r7, pc}
 800407a:	bf00      	nop
 800407c:	08005f5c 	.word	0x08005f5c
 8004080:	0800697c 	.word	0x0800697c
 8004084:	08005db0 	.word	0x08005db0
 8004088:	08005fb8 	.word	0x08005fb8
 800408c:	08005fe8 	.word	0x08005fe8
 8004090:	0800600c 	.word	0x0800600c
 8004094:	08006048 	.word	0x08006048
 8004098:	0800393d 	.word	0x0800393d
 800409c:	08003ea1 	.word	0x08003ea1
 80040a0:	08006060 	.word	0x08006060
 80040a4:	08006078 	.word	0x08006078
 80040a8:	08006094 	.word	0x08006094

080040ac <txGenerateMultiFrameChain>:
                                                 const CanardMicrosecond deadline_usec,
                                                 const uint32_t          can_id,
                                                 const CanardTransferID  transfer_id,
                                                 const size_t            payload_size,
                                                 const void* const       payload)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b093      	sub	sp, #76	@ 0x4c
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(ins != NULL);
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d106      	bne.n	80040cc <txGenerateMultiFrameChain+0x20>
 80040be:	4b93      	ldr	r3, [pc, #588]	@ (800430c <txGenerateMultiFrameChain+0x260>)
 80040c0:	4a93      	ldr	r2, [pc, #588]	@ (8004310 <txGenerateMultiFrameChain+0x264>)
 80040c2:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 80040c6:	4893      	ldr	r0, [pc, #588]	@ (8004314 <txGenerateMultiFrameChain+0x268>)
 80040c8:	f000 fb3e 	bl	8004748 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d106      	bne.n	80040e0 <txGenerateMultiFrameChain+0x34>
 80040d2:	4b91      	ldr	r3, [pc, #580]	@ (8004318 <txGenerateMultiFrameChain+0x26c>)
 80040d4:	4a8e      	ldr	r2, [pc, #568]	@ (8004310 <txGenerateMultiFrameChain+0x264>)
 80040d6:	f240 1189 	movw	r1, #393	@ 0x189
 80040da:	488e      	ldr	r0, [pc, #568]	@ (8004314 <txGenerateMultiFrameChain+0x268>)
 80040dc:	f000 fb34 	bl	8004748 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 80040e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d806      	bhi.n	80040f6 <txGenerateMultiFrameChain+0x4a>
 80040e8:	4b8c      	ldr	r3, [pc, #560]	@ (800431c <txGenerateMultiFrameChain+0x270>)
 80040ea:	4a89      	ldr	r2, [pc, #548]	@ (8004310 <txGenerateMultiFrameChain+0x264>)
 80040ec:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80040f0:	4888      	ldr	r0, [pc, #544]	@ (8004314 <txGenerateMultiFrameChain+0x268>)
 80040f2:	f000 fb29 	bl	8004748 <__assert_func>
    CANARD_ASSERT(payload != NULL);
 80040f6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d106      	bne.n	800410a <txGenerateMultiFrameChain+0x5e>
 80040fc:	4b88      	ldr	r3, [pc, #544]	@ (8004320 <txGenerateMultiFrameChain+0x274>)
 80040fe:	4a84      	ldr	r2, [pc, #528]	@ (8004310 <txGenerateMultiFrameChain+0x264>)
 8004100:	f240 118b 	movw	r1, #395	@ 0x18b
 8004104:	4883      	ldr	r0, [pc, #524]	@ (8004314 <txGenerateMultiFrameChain+0x268>)
 8004106:	f000 fb1f 	bl	8004748 <__assert_func>

    TxChain        out                   = {NULL, NULL, 0};
 800410a:	2300      	movs	r3, #0
 800410c:	613b      	str	r3, [r7, #16]
 800410e:	2300      	movs	r3, #0
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	2300      	movs	r3, #0
 8004114:	61bb      	str	r3, [r7, #24]
    const size_t   payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 8004116:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004118:	3302      	adds	r3, #2
 800411a:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t         offset                = 0U;
 800411c:	2300      	movs	r3, #0
 800411e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    TransferCRC    crc                   = crcAdd(CRC_INITIAL, payload_size, payload);
 8004120:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004122:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8004124:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8004128:	f7ff fc34 	bl	8003994 <crcAdd>
 800412c:	4603      	mov	r3, r0
 800412e:	877b      	strh	r3, [r7, #58]	@ 0x3a
    bool           toggle                = INITIAL_TOGGLE_STATE;
 8004130:	2301      	movs	r3, #1
 8004132:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    const uint8_t* payload_ptr           = (const uint8_t*) payload;
 8004136:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004138:	637b      	str	r3, [r7, #52]	@ 0x34
    while (offset < payload_size_with_crc)
 800413a:	e0d4      	b.n	80042e6 <txGenerateMultiFrameChain+0x23a>
    {
        out.size++;
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	3301      	adds	r3, #1
 8004140:	61bb      	str	r3, [r7, #24]
        const size_t frame_payload_size_with_tail =
            ((payload_size_with_crc - offset) < presentation_layer_mtu)
 8004142:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004144:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004146:	1ad3      	subs	r3, r2, r3
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
                : (presentation_layer_mtu + 1U);
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	429a      	cmp	r2, r3
 800414c:	d908      	bls.n	8004160 <txGenerateMultiFrameChain+0xb4>
                ? txRoundFramePayloadSizeUp((payload_size_with_crc - offset) + 1U)  // Padding in the last frame only.
 800414e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	3301      	adds	r3, #1
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff fe1e 	bl	8003d98 <txRoundFramePayloadSizeUp>
 800415c:	4603      	mov	r3, r0
 800415e:	e001      	b.n	8004164 <txGenerateMultiFrameChain+0xb8>
                : (presentation_layer_mtu + 1U);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	3301      	adds	r3, #1
        const size_t frame_payload_size_with_tail =
 8004164:	627b      	str	r3, [r7, #36]	@ 0x24
        TxItem* const tqi = txAllocateQueueItem(ins, can_id, deadline_usec, frame_payload_size_with_tail);
 8004166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800416e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8004170:	68b8      	ldr	r0, [r7, #8]
 8004172:	f7ff fe43 	bl	8003dfc <txAllocateQueueItem>
 8004176:	6238      	str	r0, [r7, #32]
        if (NULL == out.head)
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d102      	bne.n	8004184 <txGenerateMultiFrameChain+0xd8>
        {
            out.head = tqi;
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e002      	b.n	800418a <txGenerateMultiFrameChain+0xde>
        }
        else
        {
            // C std, 6.7.2.1.15: A pointer to a structure object <...> points to its initial member, and vice versa.
            // Can't just read tqi->base because tqi may be NULL; https://github.com/OpenCyphal/libcanard/issues/203.
            out.tail->base.next_in_transfer = (CanardTxQueueItem*) tqi;
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	6a3a      	ldr	r2, [r7, #32]
 8004188:	611a      	str	r2, [r3, #16]
        }
        out.tail = tqi;
 800418a:	6a3b      	ldr	r3, [r7, #32]
 800418c:	617b      	str	r3, [r7, #20]
        if (NULL == out.tail)
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	2b00      	cmp	r3, #0
 8004192:	f000 80ae 	beq.w	80042f2 <txGenerateMultiFrameChain+0x246>
        {
            break;
        }

        // Copy the payload into the frame.
        const size_t frame_payload_size = frame_payload_size_with_tail - 1U;
 8004196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004198:	3b01      	subs	r3, #1
 800419a:	61fb      	str	r3, [r7, #28]
        size_t       frame_offset       = 0U;
 800419c:	2300      	movs	r3, #0
 800419e:	633b      	str	r3, [r7, #48]	@ 0x30
        if (offset < payload_size)
 80041a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d21c      	bcs.n	80041e2 <txGenerateMultiFrameChain+0x136>
        {
            size_t move_size = payload_size - offset;
 80041a8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            if (move_size > frame_payload_size)
 80041b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d901      	bls.n	80041bc <txGenerateMultiFrameChain+0x110>
            {
                move_size = frame_payload_size;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
            }
            // Clang-Tidy raises an error recommending the use of memcpy_s() instead.
            // We ignore it because the safe functions are poorly supported; reliance on them may limit the portability.
            // SonarQube incorrectly detects a buffer overflow here.
            (void) memcpy(&out.tail->payload_buffer[0], payload_ptr, move_size);  // NOLINT NOSONAR
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	3330      	adds	r3, #48	@ 0x30
 80041c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80041c2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80041c4:	4618      	mov	r0, r3
 80041c6:	f000 fd58 	bl	8004c7a <memcpy>
            frame_offset = frame_offset + move_size;
 80041ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041ce:	4413      	add	r3, r2
 80041d0:	633b      	str	r3, [r7, #48]	@ 0x30
            offset += move_size;
 80041d2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041d6:	4413      	add	r3, r2
 80041d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            payload_ptr += move_size;
 80041da:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041de:	4413      	add	r3, r2
 80041e0:	637b      	str	r3, [r7, #52]	@ 0x34
        }

        // Handle the last frame of the transfer: it is special because it also contains padding and CRC.
        if (offset >= payload_size)
 80041e2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80041e4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d343      	bcc.n	8004272 <txGenerateMultiFrameChain+0x1c6>
        {
            // Insert padding -- only in the last frame. Don't forget to include padding into the CRC.
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 80041ea:	e00f      	b.n	800420c <txGenerateMultiFrameChain+0x160>
            {
                out.tail->payload_buffer[frame_offset] = PADDING_BYTE_VALUE;
 80041ec:	697a      	ldr	r2, [r7, #20]
 80041ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041f0:	4413      	add	r3, r2
 80041f2:	3330      	adds	r3, #48	@ 0x30
 80041f4:	2200      	movs	r2, #0
 80041f6:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 80041f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fa:	3301      	adds	r3, #1
 80041fc:	633b      	str	r3, [r7, #48]	@ 0x30
                crc = crcAddByte(crc, PADDING_BYTE_VALUE);
 80041fe:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004200:	2100      	movs	r1, #0
 8004202:	4618      	mov	r0, r3
 8004204:	f7ff fba6 	bl	8003954 <crcAddByte>
 8004208:	4603      	mov	r3, r0
 800420a:	877b      	strh	r3, [r7, #58]	@ 0x3a
            while ((frame_offset + CRC_SIZE_BYTES) < frame_payload_size)
 800420c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800420e:	3302      	adds	r3, #2
 8004210:	69fa      	ldr	r2, [r7, #28]
 8004212:	429a      	cmp	r2, r3
 8004214:	d8ea      	bhi.n	80041ec <txGenerateMultiFrameChain+0x140>
            }

            // Insert the CRC.
            if ((frame_offset < frame_payload_size) && (offset == payload_size))
 8004216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	429a      	cmp	r2, r3
 800421c:	d213      	bcs.n	8004246 <txGenerateMultiFrameChain+0x19a>
 800421e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004220:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004222:	429a      	cmp	r2, r3
 8004224:	d10f      	bne.n	8004246 <txGenerateMultiFrameChain+0x19a>
            {
                // SonarQube incorrectly detects a buffer overflow here.
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc >> BITS_PER_BYTE);  // NOSONAR
 8004226:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004228:	0a1b      	lsrs	r3, r3, #8
 800422a:	b29b      	uxth	r3, r3
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	b2d9      	uxtb	r1, r3
 8004230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004232:	4413      	add	r3, r2
 8004234:	3330      	adds	r3, #48	@ 0x30
 8004236:	460a      	mov	r2, r1
 8004238:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 800423a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800423c:	3301      	adds	r3, #1
 800423e:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 8004240:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004242:	3301      	adds	r3, #1
 8004244:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
            if ((frame_offset < frame_payload_size) && (offset > payload_size))
 8004246:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	429a      	cmp	r2, r3
 800424c:	d211      	bcs.n	8004272 <txGenerateMultiFrameChain+0x1c6>
 800424e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004252:	429a      	cmp	r2, r3
 8004254:	d90d      	bls.n	8004272 <txGenerateMultiFrameChain+0x1c6>
            {
                out.tail->payload_buffer[frame_offset] = (uint8_t) (crc & BYTE_MAX);
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800425a:	b2d9      	uxtb	r1, r3
 800425c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800425e:	4413      	add	r3, r2
 8004260:	3330      	adds	r3, #48	@ 0x30
 8004262:	460a      	mov	r2, r1
 8004264:	701a      	strb	r2, [r3, #0]
                ++frame_offset;
 8004266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004268:	3301      	adds	r3, #1
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
                ++offset;
 800426c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800426e:	3301      	adds	r3, #1
 8004270:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }
        }

        // Finalize the frame.
        CANARD_ASSERT((frame_offset + 1U) == out.tail->base.frame.payload_size);
 8004272:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427a:	429a      	cmp	r2, r3
 800427c:	d006      	beq.n	800428c <txGenerateMultiFrameChain+0x1e0>
 800427e:	4b29      	ldr	r3, [pc, #164]	@ (8004324 <txGenerateMultiFrameChain+0x278>)
 8004280:	4a23      	ldr	r2, [pc, #140]	@ (8004310 <txGenerateMultiFrameChain+0x264>)
 8004282:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8004286:	4823      	ldr	r0, [pc, #140]	@ (8004314 <txGenerateMultiFrameChain+0x268>)
 8004288:	f000 fa5e 	bl	8004748 <__assert_func>
        // SonarQube incorrectly detects a buffer overflow here.
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 800428c:	693a      	ldr	r2, [r7, #16]
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	429a      	cmp	r2, r3
 8004292:	bf0c      	ite	eq
 8004294:	2301      	moveq	r3, #1
 8004296:	2300      	movne	r3, #0
 8004298:	b2d8      	uxtb	r0, r3
 800429a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800429c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800429e:	429a      	cmp	r2, r3
 80042a0:	bf2c      	ite	cs
 80042a2:	2301      	movcs	r3, #1
 80042a4:	2300      	movcc	r3, #0
 80042a6:	b2d9      	uxtb	r1, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80042a8:	697c      	ldr	r4, [r7, #20]
            txMakeTailByte(out.head == out.tail, offset >= payload_size_with_crc, toggle, transfer_id);
 80042aa:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80042ae:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 80042b2:	f7ff fd2f 	bl	8003d14 <txMakeTailByte>
 80042b6:	4603      	mov	r3, r0
 80042b8:	461a      	mov	r2, r3
        out.tail->payload_buffer[frame_offset] =  // NOSONAR
 80042ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042bc:	4423      	add	r3, r4
 80042be:	3330      	adds	r3, #48	@ 0x30
 80042c0:	701a      	strb	r2, [r3, #0]
        toggle = !toggle;
 80042c2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	bf14      	ite	ne
 80042ca:	2301      	movne	r3, #1
 80042cc:	2300      	moveq	r3, #0
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	f083 0301 	eor.w	r3, r3, #1
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
 80042da:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
    while (offset < payload_size_with_crc)
 80042e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80042e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042ea:	429a      	cmp	r2, r3
 80042ec:	f4ff af26 	bcc.w	800413c <txGenerateMultiFrameChain+0x90>
 80042f0:	e000      	b.n	80042f4 <txGenerateMultiFrameChain+0x248>
            break;
 80042f2:	bf00      	nop
    }
    return out;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	461c      	mov	r4, r3
 80042f8:	f107 0310 	add.w	r3, r7, #16
 80042fc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004300:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004304:	68f8      	ldr	r0, [r7, #12]
 8004306:	3744      	adds	r7, #68	@ 0x44
 8004308:	46bd      	mov	sp, r7
 800430a:	bd90      	pop	{r4, r7, pc}
 800430c:	08005f5c 	.word	0x08005f5c
 8004310:	08006a4c 	.word	0x08006a4c
 8004314:	08005db0 	.word	0x08005db0
 8004318:	080060ac 	.word	0x080060ac
 800431c:	080060c8 	.word	0x080060c8
 8004320:	08006048 	.word	0x08006048
 8004324:	080060f0 	.word	0x080060f0

08004328 <txPushMultiFrame>:
                                        const CanardMicrosecond deadline_usec,
                                        const uint32_t          can_id,
                                        const CanardTransferID  transfer_id,
                                        const size_t            payload_size,
                                        const void* const       payload)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b094      	sub	sp, #80	@ 0x50
 800432c:	af06      	add	r7, sp, #24
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT((ins != NULL) && (que != NULL));
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d002      	beq.n	8004340 <txPushMultiFrame+0x18>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d106      	bne.n	800434e <txPushMultiFrame+0x26>
 8004340:	4b65      	ldr	r3, [pc, #404]	@ (80044d8 <txPushMultiFrame+0x1b0>)
 8004342:	4a66      	ldr	r2, [pc, #408]	@ (80044dc <txPushMultiFrame+0x1b4>)
 8004344:	f240 11ed 	movw	r1, #493	@ 0x1ed
 8004348:	4865      	ldr	r0, [pc, #404]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 800434a:	f000 f9fd 	bl	8004748 <__assert_func>
    CANARD_ASSERT(presentation_layer_mtu > 0U);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d106      	bne.n	8004362 <txPushMultiFrame+0x3a>
 8004354:	4b63      	ldr	r3, [pc, #396]	@ (80044e4 <txPushMultiFrame+0x1bc>)
 8004356:	4a61      	ldr	r2, [pc, #388]	@ (80044dc <txPushMultiFrame+0x1b4>)
 8004358:	f44f 71f7 	mov.w	r1, #494	@ 0x1ee
 800435c:	4860      	ldr	r0, [pc, #384]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 800435e:	f000 f9f3 	bl	8004748 <__assert_func>
    CANARD_ASSERT(payload_size > presentation_layer_mtu);  // Otherwise, a single-frame transfer should be used.
 8004362:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	429a      	cmp	r2, r3
 8004368:	d806      	bhi.n	8004378 <txPushMultiFrame+0x50>
 800436a:	4b5f      	ldr	r3, [pc, #380]	@ (80044e8 <txPushMultiFrame+0x1c0>)
 800436c:	4a5b      	ldr	r2, [pc, #364]	@ (80044dc <txPushMultiFrame+0x1b4>)
 800436e:	f240 11ef 	movw	r1, #495	@ 0x1ef
 8004372:	485b      	ldr	r0, [pc, #364]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 8004374:	f000 f9e8 	bl	8004748 <__assert_func>

    int32_t      out                   = 0;  // The number of frames enqueued or negated error.
 8004378:	2300      	movs	r3, #0
 800437a:	637b      	str	r3, [r7, #52]	@ 0x34
    const size_t payload_size_with_crc = payload_size + CRC_SIZE_BYTES;
 800437c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800437e:	3302      	adds	r3, #2
 8004380:	62bb      	str	r3, [r7, #40]	@ 0x28
    const size_t num_frames = ((payload_size_with_crc + presentation_layer_mtu) - 1U) / presentation_layer_mtu;
 8004382:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4413      	add	r3, r2
 8004388:	1e5a      	subs	r2, r3, #1
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004390:	627b      	str	r3, [r7, #36]	@ 0x24
    CANARD_ASSERT(num_frames >= 2);
 8004392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004394:	2b01      	cmp	r3, #1
 8004396:	d806      	bhi.n	80043a6 <txPushMultiFrame+0x7e>
 8004398:	4b54      	ldr	r3, [pc, #336]	@ (80044ec <txPushMultiFrame+0x1c4>)
 800439a:	4a50      	ldr	r2, [pc, #320]	@ (80044dc <txPushMultiFrame+0x1b4>)
 800439c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80043a0:	484f      	ldr	r0, [pc, #316]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 80043a2:	f000 f9d1 	bl	8004748 <__assert_func>
    if ((que->size + num_frames) <= que->capacity)  // Bail early if we can see that we won't fit anyway.
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689a      	ldr	r2, [r3, #8]
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	441a      	add	r2, r3
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	429a      	cmp	r2, r3
 80043b4:	d87b      	bhi.n	80044ae <txPushMultiFrame+0x186>
    {
        const TxChain sq = txGenerateMultiFrameChain(ins,
 80043b6:	f107 0010 	add.w	r0, r7, #16
 80043ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80043bc:	9305      	str	r3, [sp, #20]
 80043be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043c0:	9304      	str	r3, [sp, #16]
 80043c2:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 80043c6:	9303      	str	r3, [sp, #12]
 80043c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043ca:	9302      	str	r3, [sp, #8]
 80043cc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80043d0:	e9cd 2300 	strd	r2, r3, [sp]
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	f7ff fe68 	bl	80040ac <txGenerateMultiFrameChain>
                                                     deadline_usec,
                                                     can_id,
                                                     transfer_id,
                                                     payload_size,
                                                     payload);
        if (sq.tail != NULL)
 80043dc:	697b      	ldr	r3, [r7, #20]
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d051      	beq.n	8004486 <txPushMultiFrame+0x15e>
        {
            CanardTxQueueItem* next = &sq.head->base;
 80043e2:	693b      	ldr	r3, [r7, #16]
 80043e4:	633b      	str	r3, [r7, #48]	@ 0x30
            do
            {
                const CanardTreeNode* const res =
                    cavlSearch(&que->root, &next->base, &txAVLPredicate, &avlTrivialFactory);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f103 000c 	add.w	r0, r3, #12
 80043ec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043ee:	4b40      	ldr	r3, [pc, #256]	@ (80044f0 <txPushMultiFrame+0x1c8>)
 80043f0:	4a40      	ldr	r2, [pc, #256]	@ (80044f4 <txPushMultiFrame+0x1cc>)
 80043f2:	f7ff f8f3 	bl	80035dc <cavlSearch>
 80043f6:	61f8      	str	r0, [r7, #28]
                (void) res;
                CANARD_ASSERT(res == &next->base);
 80043f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d006      	beq.n	800440e <txPushMultiFrame+0xe6>
 8004400:	4b3d      	ldr	r3, [pc, #244]	@ (80044f8 <txPushMultiFrame+0x1d0>)
 8004402:	4a36      	ldr	r2, [pc, #216]	@ (80044dc <txPushMultiFrame+0x1b4>)
 8004404:	f240 2106 	movw	r1, #518	@ 0x206
 8004408:	4835      	ldr	r0, [pc, #212]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 800440a:	f000 f99d 	bl	8004748 <__assert_func>
                CANARD_ASSERT(que->root != NULL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d106      	bne.n	8004424 <txPushMultiFrame+0xfc>
 8004416:	4b39      	ldr	r3, [pc, #228]	@ (80044fc <txPushMultiFrame+0x1d4>)
 8004418:	4a30      	ldr	r2, [pc, #192]	@ (80044dc <txPushMultiFrame+0x1b4>)
 800441a:	f240 2107 	movw	r1, #519	@ 0x207
 800441e:	4830      	ldr	r0, [pc, #192]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 8004420:	f000 f992 	bl	8004748 <__assert_func>
                next = next->next_in_transfer;
 8004424:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	633b      	str	r3, [r7, #48]	@ 0x30
            } while (next != NULL);
 800442a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1da      	bne.n	80043e6 <txPushMultiFrame+0xbe>
            CANARD_ASSERT(num_frames == sq.size);
 8004430:	69bb      	ldr	r3, [r7, #24]
 8004432:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004434:	429a      	cmp	r2, r3
 8004436:	d006      	beq.n	8004446 <txPushMultiFrame+0x11e>
 8004438:	4b31      	ldr	r3, [pc, #196]	@ (8004500 <txPushMultiFrame+0x1d8>)
 800443a:	4a28      	ldr	r2, [pc, #160]	@ (80044dc <txPushMultiFrame+0x1b4>)
 800443c:	f240 210a 	movw	r1, #522	@ 0x20a
 8004440:	4827      	ldr	r0, [pc, #156]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 8004442:	f000 f981 	bl	8004748 <__assert_func>
            que->size += sq.size;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	689a      	ldr	r2, [r3, #8]
 800444a:	69bb      	ldr	r3, [r7, #24]
 800444c:	441a      	add	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	609a      	str	r2, [r3, #8]
            CANARD_ASSERT(que->size <= que->capacity);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	429a      	cmp	r2, r3
 800445c:	d906      	bls.n	800446c <txPushMultiFrame+0x144>
 800445e:	4b29      	ldr	r3, [pc, #164]	@ (8004504 <txPushMultiFrame+0x1dc>)
 8004460:	4a1e      	ldr	r2, [pc, #120]	@ (80044dc <txPushMultiFrame+0x1b4>)
 8004462:	f44f 7103 	mov.w	r1, #524	@ 0x20c
 8004466:	481e      	ldr	r0, [pc, #120]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 8004468:	f000 f96e 	bl	8004748 <__assert_func>
            CANARD_ASSERT((sq.size + 0ULL) <= INT32_MAX);  // +0 is to suppress warning.
 800446c:	69bb      	ldr	r3, [r7, #24]
 800446e:	2b00      	cmp	r3, #0
 8004470:	da06      	bge.n	8004480 <txPushMultiFrame+0x158>
 8004472:	4b25      	ldr	r3, [pc, #148]	@ (8004508 <txPushMultiFrame+0x1e0>)
 8004474:	4a19      	ldr	r2, [pc, #100]	@ (80044dc <txPushMultiFrame+0x1b4>)
 8004476:	f240 210d 	movw	r1, #525	@ 0x20d
 800447a:	4819      	ldr	r0, [pc, #100]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 800447c:	f000 f964 	bl	8004748 <__assert_func>
            out = (int32_t) sq.size;
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	637b      	str	r3, [r7, #52]	@ 0x34
 8004484:	e016      	b.n	80044b4 <txPushMultiFrame+0x18c>
        }
        else
        {
            out                     = -CANARD_ERROR_OUT_OF_MEMORY;
 8004486:	f06f 0302 	mvn.w	r3, #2
 800448a:	637b      	str	r3, [r7, #52]	@ 0x34
            CanardTxQueueItem* head = &sq.head->base;
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 8004490:	e009      	b.n	80044a6 <txPushMultiFrame+0x17e>
            {
                CanardTxQueueItem* const next = head->next_in_transfer;
 8004492:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	623b      	str	r3, [r7, #32]
                ins->memory_free(ins, head);
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800449e:	68b8      	ldr	r0, [r7, #8]
 80044a0:	4798      	blx	r3
                head = next;
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while (head != NULL)
 80044a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f2      	bne.n	8004492 <txPushMultiFrame+0x16a>
 80044ac:	e002      	b.n	80044b4 <txPushMultiFrame+0x18c>
            }
        }
    }
    else  // We predict that we're going to run out of queue, don't bother serializing the transfer.
    {
        out = -CANARD_ERROR_OUT_OF_MEMORY;
 80044ae:	f06f 0302 	mvn.w	r3, #2
 80044b2:	637b      	str	r3, [r7, #52]	@ 0x34
    }
    CANARD_ASSERT((out < 0) || (out >= 2));
 80044b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	db09      	blt.n	80044ce <txPushMultiFrame+0x1a6>
 80044ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044bc:	2b01      	cmp	r3, #1
 80044be:	dc06      	bgt.n	80044ce <txPushMultiFrame+0x1a6>
 80044c0:	4b12      	ldr	r3, [pc, #72]	@ (800450c <txPushMultiFrame+0x1e4>)
 80044c2:	4a06      	ldr	r2, [pc, #24]	@ (80044dc <txPushMultiFrame+0x1b4>)
 80044c4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80044c8:	4805      	ldr	r0, [pc, #20]	@ (80044e0 <txPushMultiFrame+0x1b8>)
 80044ca:	f000 f93d 	bl	8004748 <__assert_func>
    return out;
 80044ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3738      	adds	r7, #56	@ 0x38
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	0800612c 	.word	0x0800612c
 80044dc:	08006a38 	.word	0x08006a38
 80044e0:	08005db0 	.word	0x08005db0
 80044e4:	080060ac 	.word	0x080060ac
 80044e8:	080060c8 	.word	0x080060c8
 80044ec:	0800615c 	.word	0x0800615c
 80044f0:	0800393d 	.word	0x0800393d
 80044f4:	08003ea1 	.word	0x08003ea1
 80044f8:	0800616c 	.word	0x0800616c
 80044fc:	08006180 	.word	0x08006180
 8004500:	0800619c 	.word	0x0800619c
 8004504:	08006078 	.word	0x08006078
 8004508:	080061b4 	.word	0x080061b4
 800450c:	080061d8 	.word	0x080061d8

08004510 <canardInit>:
    14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14,  // 33-48
    15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15,  // 49-64
};

CanardInstance canardInit(const CanardMemoryAllocate memory_allocate, const CanardMemoryFree memory_free)
{
 8004510:	b5b0      	push	{r4, r5, r7, lr}
 8004512:	b08c      	sub	sp, #48	@ 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
    CANARD_ASSERT(memory_allocate != NULL);
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d106      	bne.n	8004530 <canardInit+0x20>
 8004522:	4b16      	ldr	r3, [pc, #88]	@ (800457c <canardInit+0x6c>)
 8004524:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <canardInit+0x70>)
 8004526:	f240 4104 	movw	r1, #1028	@ 0x404
 800452a:	4816      	ldr	r0, [pc, #88]	@ (8004584 <canardInit+0x74>)
 800452c:	f000 f90c 	bl	8004748 <__assert_func>
    CANARD_ASSERT(memory_free != NULL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d106      	bne.n	8004544 <canardInit+0x34>
 8004536:	4b14      	ldr	r3, [pc, #80]	@ (8004588 <canardInit+0x78>)
 8004538:	4a11      	ldr	r2, [pc, #68]	@ (8004580 <canardInit+0x70>)
 800453a:	f240 4105 	movw	r1, #1029	@ 0x405
 800453e:	4811      	ldr	r0, [pc, #68]	@ (8004584 <canardInit+0x74>)
 8004540:	f000 f902 	bl	8004748 <__assert_func>
    const CanardInstance out = {
 8004544:	2300      	movs	r3, #0
 8004546:	617b      	str	r3, [r7, #20]
 8004548:	23ff      	movs	r3, #255	@ 0xff
 800454a:	763b      	strb	r3, [r7, #24]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	623b      	str	r3, [r7, #32]
 8004554:	2300      	movs	r3, #0
 8004556:	627b      	str	r3, [r7, #36]	@ 0x24
 8004558:	2300      	movs	r3, #0
 800455a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800455c:	2300      	movs	r3, #0
 800455e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        .node_id          = CANARD_NODE_ID_UNSET,
        .memory_allocate  = memory_allocate,
        .memory_free      = memory_free,
        .rx_subscriptions = {NULL, NULL, NULL},
    };
    return out;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	461d      	mov	r5, r3
 8004564:	f107 0414 	add.w	r4, r7, #20
 8004568:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800456a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800456c:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8004570:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 8004574:	68f8      	ldr	r0, [r7, #12]
 8004576:	3730      	adds	r7, #48	@ 0x30
 8004578:	46bd      	mov	sp, r7
 800457a:	bdb0      	pop	{r4, r5, r7, pc}
 800457c:	08006540 	.word	0x08006540
 8004580:	0800690c 	.word	0x0800690c
 8004584:	08005db0 	.word	0x08005db0
 8004588:	08006560 	.word	0x08006560

0800458c <canardTxInit>:

CanardTxQueue canardTxInit(const size_t capacity, const size_t mtu_bytes)
{
 800458c:	b4b0      	push	{r4, r5, r7}
 800458e:	b08b      	sub	sp, #44	@ 0x2c
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
    CanardTxQueue out = {
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	61bb      	str	r3, [r7, #24]
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
 80045a4:	2300      	movs	r3, #0
 80045a6:	623b      	str	r3, [r7, #32]
 80045a8:	2300      	movs	r3, #0
 80045aa:	627b      	str	r3, [r7, #36]	@ 0x24
        .mtu_bytes      = mtu_bytes,
        .size           = 0,
        .root           = NULL,
        .user_reference = NULL,
    };
    return out;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	461d      	mov	r5, r3
 80045b0:	f107 0414 	add.w	r4, r7, #20
 80045b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045b8:	6823      	ldr	r3, [r4, #0]
 80045ba:	602b      	str	r3, [r5, #0]
}
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	372c      	adds	r7, #44	@ 0x2c
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bcb0      	pop	{r4, r5, r7}
 80045c4:	4770      	bx	lr
	...

080045c8 <canardTxPush>:
                     CanardInstance* const               ins,
                     const CanardMicrosecond             tx_deadline_usec,
                     const CanardTransferMetadata* const metadata,
                     const size_t                        payload_size,
                     const void* const                   payload)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08e      	sub	sp, #56	@ 0x38
 80045cc:	af06      	add	r7, sp, #24
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	e9c7 2300 	strd	r2, r3, [r7]
    int32_t out = -CANARD_ERROR_INVALID_ARGUMENT;
 80045d6:	f06f 0301 	mvn.w	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
    if ((ins != NULL) && (que != NULL) && (metadata != NULL) && ((payload != NULL) || (0U == payload_size)))
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d062      	beq.n	80046a8 <canardTxPush+0xe0>
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d05f      	beq.n	80046a8 <canardTxPush+0xe0>
 80045e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d05c      	beq.n	80046a8 <canardTxPush+0xe0>
 80045ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d102      	bne.n	80045fa <canardTxPush+0x32>
 80045f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d156      	bne.n	80046a8 <canardTxPush+0xe0>
    {
        const size_t  pl_mtu       = adjustPresentationLayerMTU(que->mtu_bytes);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	685b      	ldr	r3, [r3, #4]
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fa7e 	bl	8003b00 <adjustPresentationLayerMTU>
 8004604:	61b8      	str	r0, [r7, #24]
        const int32_t maybe_can_id = txMakeCANID(metadata, payload_size, payload, ins->node_id, pl_mtu);
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	791a      	ldrb	r2, [r3, #4]
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4613      	mov	r3, r2
 8004610:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004612:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004614:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004616:	f7ff faa3 	bl	8003b60 <txMakeCANID>
 800461a:	6178      	str	r0, [r7, #20]
        if (maybe_can_id >= 0)
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	2b00      	cmp	r3, #0
 8004620:	db40      	blt.n	80046a4 <canardTxPush+0xdc>
        {
            if (payload_size <= pl_mtu)
 8004622:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004624:	69bb      	ldr	r3, [r7, #24]
 8004626:	429a      	cmp	r2, r3
 8004628:	d81c      	bhi.n	8004664 <canardTxPush+0x9c>
            {
                out = txPushSingleFrame(que,
 800462a:	697b      	ldr	r3, [r7, #20]
                                        ins,
                                        tx_deadline_usec,
                                        (uint32_t) maybe_can_id,
                                        metadata->transfer_id,
 800462c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800462e:	7952      	ldrb	r2, [r2, #5]
                out = txPushSingleFrame(que,
 8004630:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004632:	9103      	str	r1, [sp, #12]
 8004634:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004636:	9102      	str	r1, [sp, #8]
 8004638:	9201      	str	r2, [sp, #4]
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004640:	68b9      	ldr	r1, [r7, #8]
 8004642:	68f8      	ldr	r0, [r7, #12]
 8004644:	f7ff fc56 	bl	8003ef4 <txPushSingleFrame>
 8004648:	61f8      	str	r0, [r7, #28]
                                        payload_size,
                                        payload);
                CANARD_ASSERT((out < 0) || (out == 1));
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	2b00      	cmp	r3, #0
 800464e:	db2b      	blt.n	80046a8 <canardTxPush+0xe0>
 8004650:	69fb      	ldr	r3, [r7, #28]
 8004652:	2b01      	cmp	r3, #1
 8004654:	d028      	beq.n	80046a8 <canardTxPush+0xe0>
 8004656:	4b1c      	ldr	r3, [pc, #112]	@ (80046c8 <canardTxPush+0x100>)
 8004658:	4a1c      	ldr	r2, [pc, #112]	@ (80046cc <canardTxPush+0x104>)
 800465a:	f240 4133 	movw	r1, #1075	@ 0x433
 800465e:	481c      	ldr	r0, [pc, #112]	@ (80046d0 <canardTxPush+0x108>)
 8004660:	f000 f872 	bl	8004748 <__assert_func>
            }
            else
            {
                out = txPushMultiFrame(que,
 8004664:	697b      	ldr	r3, [r7, #20]
                                       ins,
                                       pl_mtu,
                                       tx_deadline_usec,
                                       (uint32_t) maybe_can_id,
                                       metadata->transfer_id,
 8004666:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004668:	7952      	ldrb	r2, [r2, #5]
                out = txPushMultiFrame(que,
 800466a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800466c:	9105      	str	r1, [sp, #20]
 800466e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004670:	9104      	str	r1, [sp, #16]
 8004672:	9203      	str	r2, [sp, #12]
 8004674:	9302      	str	r3, [sp, #8]
 8004676:	e9d7 2300 	ldrd	r2, r3, [r7]
 800467a:	e9cd 2300 	strd	r2, r3, [sp]
 800467e:	69ba      	ldr	r2, [r7, #24]
 8004680:	68b9      	ldr	r1, [r7, #8]
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f7ff fe50 	bl	8004328 <txPushMultiFrame>
 8004688:	61f8      	str	r0, [r7, #28]
                                       payload_size,
                                       payload);
                CANARD_ASSERT((out < 0) || (out >= 2));
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	2b00      	cmp	r3, #0
 800468e:	db0b      	blt.n	80046a8 <canardTxPush+0xe0>
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b01      	cmp	r3, #1
 8004694:	dc08      	bgt.n	80046a8 <canardTxPush+0xe0>
 8004696:	4b0f      	ldr	r3, [pc, #60]	@ (80046d4 <canardTxPush+0x10c>)
 8004698:	4a0c      	ldr	r2, [pc, #48]	@ (80046cc <canardTxPush+0x104>)
 800469a:	f240 413f 	movw	r1, #1087	@ 0x43f
 800469e:	480c      	ldr	r0, [pc, #48]	@ (80046d0 <canardTxPush+0x108>)
 80046a0:	f000 f852 	bl	8004748 <__assert_func>
            }
        }
        else
        {
            out = maybe_can_id;
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	61fb      	str	r3, [r7, #28]
        }
    }
    CANARD_ASSERT(out != 0);
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d106      	bne.n	80046bc <canardTxPush+0xf4>
 80046ae:	4b0a      	ldr	r3, [pc, #40]	@ (80046d8 <canardTxPush+0x110>)
 80046b0:	4a06      	ldr	r2, [pc, #24]	@ (80046cc <canardTxPush+0x104>)
 80046b2:	f240 4147 	movw	r1, #1095	@ 0x447
 80046b6:	4806      	ldr	r0, [pc, #24]	@ (80046d0 <canardTxPush+0x108>)
 80046b8:	f000 f846 	bl	8004748 <__assert_func>
    return out;
 80046bc:	69fb      	ldr	r3, [r7, #28]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3720      	adds	r7, #32
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	08006094 	.word	0x08006094
 80046cc:	08006918 	.word	0x08006918
 80046d0:	08005db0 	.word	0x08005db0
 80046d4:	080061d8 	.word	0x080061d8
 80046d8:	0800657c 	.word	0x0800657c

080046dc <canardTxPeek>:

const CanardTxQueueItem* canardTxPeek(const CanardTxQueue* const que)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
    const CanardTxQueueItem* out = NULL;
 80046e4:	2300      	movs	r3, #0
 80046e6:	60fb      	str	r3, [r7, #12]
    if (que != NULL)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d006      	beq.n	80046fc <canardTxPeek+0x20>
    {
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        out = (const CanardTxQueueItem*) (void*) cavlFindExtremum(que->root, false);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	2100      	movs	r1, #0
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fe fd99 	bl	800322c <cavlFindExtremum>
 80046fa:	60f8      	str	r0, [r7, #12]
    }
    return out;
 80046fc:	68fb      	ldr	r3, [r7, #12]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <canardTxPop>:

CanardTxQueueItem* canardTxPop(CanardTxQueue* const que, const CanardTxQueueItem* const item)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
    CanardTxQueueItem* out = NULL;
 8004710:	2300      	movs	r3, #0
 8004712:	60fb      	str	r3, [r7, #12]
    if ((que != NULL) && (item != NULL))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d010      	beq.n	800473c <canardTxPop+0x36>
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00d      	beq.n	800473c <canardTxPop+0x36>
    {
        // Intentional violation of MISRA: casting away const qualifier. This is considered safe because the API
        // contract dictates that the pointer shall point to a mutable entity in RAM previously allocated by the
        // memory manager. It is difficult to avoid this cast in this context.
        out = (CanardTxQueueItem*) item;  // NOSONAR casting away const qualifier.
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	60fb      	str	r3, [r7, #12]
        // Paragraph 6.7.2.1.15 of the C standard says:
        //     A pointer to a structure object, suitably converted, points to its initial member, and vice versa.
        // Note that the highest-priority frame is always a leaf node in the AVL tree, which means that it is very
        // cheap to remove.
        cavlRemove(&que->root, &item->base);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	330c      	adds	r3, #12
 8004728:	683a      	ldr	r2, [r7, #0]
 800472a:	4611      	mov	r1, r2
 800472c:	4618      	mov	r0, r3
 800472e:	f7fe ffd3 	bl	80036d8 <cavlRemove>
        que->size--;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	1e5a      	subs	r2, r3, #1
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]
    }
    return out;
 800473c:	68fb      	ldr	r3, [r7, #12]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}
	...

08004748 <__assert_func>:
 8004748:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800474a:	4614      	mov	r4, r2
 800474c:	461a      	mov	r2, r3
 800474e:	4b09      	ldr	r3, [pc, #36]	@ (8004774 <__assert_func+0x2c>)
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4605      	mov	r5, r0
 8004754:	68d8      	ldr	r0, [r3, #12]
 8004756:	b954      	cbnz	r4, 800476e <__assert_func+0x26>
 8004758:	4b07      	ldr	r3, [pc, #28]	@ (8004778 <__assert_func+0x30>)
 800475a:	461c      	mov	r4, r3
 800475c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004760:	9100      	str	r1, [sp, #0]
 8004762:	462b      	mov	r3, r5
 8004764:	4905      	ldr	r1, [pc, #20]	@ (800477c <__assert_func+0x34>)
 8004766:	f000 f96f 	bl	8004a48 <fiprintf>
 800476a:	f000 fa94 	bl	8004c96 <abort>
 800476e:	4b04      	ldr	r3, [pc, #16]	@ (8004780 <__assert_func+0x38>)
 8004770:	e7f4      	b.n	800475c <__assert_func+0x14>
 8004772:	bf00      	nop
 8004774:	2000001c 	.word	0x2000001c
 8004778:	08006aae 	.word	0x08006aae
 800477c:	08006a80 	.word	0x08006a80
 8004780:	08006a73 	.word	0x08006a73

08004784 <malloc>:
 8004784:	4b02      	ldr	r3, [pc, #8]	@ (8004790 <malloc+0xc>)
 8004786:	4601      	mov	r1, r0
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	f000 b82d 	b.w	80047e8 <_malloc_r>
 800478e:	bf00      	nop
 8004790:	2000001c 	.word	0x2000001c

08004794 <free>:
 8004794:	4b02      	ldr	r3, [pc, #8]	@ (80047a0 <free+0xc>)
 8004796:	4601      	mov	r1, r0
 8004798:	6818      	ldr	r0, [r3, #0]
 800479a:	f000 ba83 	b.w	8004ca4 <_free_r>
 800479e:	bf00      	nop
 80047a0:	2000001c 	.word	0x2000001c

080047a4 <sbrk_aligned>:
 80047a4:	b570      	push	{r4, r5, r6, lr}
 80047a6:	4e0f      	ldr	r6, [pc, #60]	@ (80047e4 <sbrk_aligned+0x40>)
 80047a8:	460c      	mov	r4, r1
 80047aa:	6831      	ldr	r1, [r6, #0]
 80047ac:	4605      	mov	r5, r0
 80047ae:	b911      	cbnz	r1, 80047b6 <sbrk_aligned+0x12>
 80047b0:	f000 fa14 	bl	8004bdc <_sbrk_r>
 80047b4:	6030      	str	r0, [r6, #0]
 80047b6:	4621      	mov	r1, r4
 80047b8:	4628      	mov	r0, r5
 80047ba:	f000 fa0f 	bl	8004bdc <_sbrk_r>
 80047be:	1c43      	adds	r3, r0, #1
 80047c0:	d103      	bne.n	80047ca <sbrk_aligned+0x26>
 80047c2:	f04f 34ff 	mov.w	r4, #4294967295
 80047c6:	4620      	mov	r0, r4
 80047c8:	bd70      	pop	{r4, r5, r6, pc}
 80047ca:	1cc4      	adds	r4, r0, #3
 80047cc:	f024 0403 	bic.w	r4, r4, #3
 80047d0:	42a0      	cmp	r0, r4
 80047d2:	d0f8      	beq.n	80047c6 <sbrk_aligned+0x22>
 80047d4:	1a21      	subs	r1, r4, r0
 80047d6:	4628      	mov	r0, r5
 80047d8:	f000 fa00 	bl	8004bdc <_sbrk_r>
 80047dc:	3001      	adds	r0, #1
 80047de:	d1f2      	bne.n	80047c6 <sbrk_aligned+0x22>
 80047e0:	e7ef      	b.n	80047c2 <sbrk_aligned+0x1e>
 80047e2:	bf00      	nop
 80047e4:	200000fc 	.word	0x200000fc

080047e8 <_malloc_r>:
 80047e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80047ec:	1ccd      	adds	r5, r1, #3
 80047ee:	f025 0503 	bic.w	r5, r5, #3
 80047f2:	3508      	adds	r5, #8
 80047f4:	2d0c      	cmp	r5, #12
 80047f6:	bf38      	it	cc
 80047f8:	250c      	movcc	r5, #12
 80047fa:	2d00      	cmp	r5, #0
 80047fc:	4606      	mov	r6, r0
 80047fe:	db01      	blt.n	8004804 <_malloc_r+0x1c>
 8004800:	42a9      	cmp	r1, r5
 8004802:	d904      	bls.n	800480e <_malloc_r+0x26>
 8004804:	230c      	movs	r3, #12
 8004806:	6033      	str	r3, [r6, #0]
 8004808:	2000      	movs	r0, #0
 800480a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800480e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80048e4 <_malloc_r+0xfc>
 8004812:	f000 f869 	bl	80048e8 <__malloc_lock>
 8004816:	f8d8 3000 	ldr.w	r3, [r8]
 800481a:	461c      	mov	r4, r3
 800481c:	bb44      	cbnz	r4, 8004870 <_malloc_r+0x88>
 800481e:	4629      	mov	r1, r5
 8004820:	4630      	mov	r0, r6
 8004822:	f7ff ffbf 	bl	80047a4 <sbrk_aligned>
 8004826:	1c43      	adds	r3, r0, #1
 8004828:	4604      	mov	r4, r0
 800482a:	d158      	bne.n	80048de <_malloc_r+0xf6>
 800482c:	f8d8 4000 	ldr.w	r4, [r8]
 8004830:	4627      	mov	r7, r4
 8004832:	2f00      	cmp	r7, #0
 8004834:	d143      	bne.n	80048be <_malloc_r+0xd6>
 8004836:	2c00      	cmp	r4, #0
 8004838:	d04b      	beq.n	80048d2 <_malloc_r+0xea>
 800483a:	6823      	ldr	r3, [r4, #0]
 800483c:	4639      	mov	r1, r7
 800483e:	4630      	mov	r0, r6
 8004840:	eb04 0903 	add.w	r9, r4, r3
 8004844:	f000 f9ca 	bl	8004bdc <_sbrk_r>
 8004848:	4581      	cmp	r9, r0
 800484a:	d142      	bne.n	80048d2 <_malloc_r+0xea>
 800484c:	6821      	ldr	r1, [r4, #0]
 800484e:	1a6d      	subs	r5, r5, r1
 8004850:	4629      	mov	r1, r5
 8004852:	4630      	mov	r0, r6
 8004854:	f7ff ffa6 	bl	80047a4 <sbrk_aligned>
 8004858:	3001      	adds	r0, #1
 800485a:	d03a      	beq.n	80048d2 <_malloc_r+0xea>
 800485c:	6823      	ldr	r3, [r4, #0]
 800485e:	442b      	add	r3, r5
 8004860:	6023      	str	r3, [r4, #0]
 8004862:	f8d8 3000 	ldr.w	r3, [r8]
 8004866:	685a      	ldr	r2, [r3, #4]
 8004868:	bb62      	cbnz	r2, 80048c4 <_malloc_r+0xdc>
 800486a:	f8c8 7000 	str.w	r7, [r8]
 800486e:	e00f      	b.n	8004890 <_malloc_r+0xa8>
 8004870:	6822      	ldr	r2, [r4, #0]
 8004872:	1b52      	subs	r2, r2, r5
 8004874:	d420      	bmi.n	80048b8 <_malloc_r+0xd0>
 8004876:	2a0b      	cmp	r2, #11
 8004878:	d917      	bls.n	80048aa <_malloc_r+0xc2>
 800487a:	1961      	adds	r1, r4, r5
 800487c:	42a3      	cmp	r3, r4
 800487e:	6025      	str	r5, [r4, #0]
 8004880:	bf18      	it	ne
 8004882:	6059      	strne	r1, [r3, #4]
 8004884:	6863      	ldr	r3, [r4, #4]
 8004886:	bf08      	it	eq
 8004888:	f8c8 1000 	streq.w	r1, [r8]
 800488c:	5162      	str	r2, [r4, r5]
 800488e:	604b      	str	r3, [r1, #4]
 8004890:	4630      	mov	r0, r6
 8004892:	f000 f82f 	bl	80048f4 <__malloc_unlock>
 8004896:	f104 000b 	add.w	r0, r4, #11
 800489a:	1d23      	adds	r3, r4, #4
 800489c:	f020 0007 	bic.w	r0, r0, #7
 80048a0:	1ac2      	subs	r2, r0, r3
 80048a2:	bf1c      	itt	ne
 80048a4:	1a1b      	subne	r3, r3, r0
 80048a6:	50a3      	strne	r3, [r4, r2]
 80048a8:	e7af      	b.n	800480a <_malloc_r+0x22>
 80048aa:	6862      	ldr	r2, [r4, #4]
 80048ac:	42a3      	cmp	r3, r4
 80048ae:	bf0c      	ite	eq
 80048b0:	f8c8 2000 	streq.w	r2, [r8]
 80048b4:	605a      	strne	r2, [r3, #4]
 80048b6:	e7eb      	b.n	8004890 <_malloc_r+0xa8>
 80048b8:	4623      	mov	r3, r4
 80048ba:	6864      	ldr	r4, [r4, #4]
 80048bc:	e7ae      	b.n	800481c <_malloc_r+0x34>
 80048be:	463c      	mov	r4, r7
 80048c0:	687f      	ldr	r7, [r7, #4]
 80048c2:	e7b6      	b.n	8004832 <_malloc_r+0x4a>
 80048c4:	461a      	mov	r2, r3
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	42a3      	cmp	r3, r4
 80048ca:	d1fb      	bne.n	80048c4 <_malloc_r+0xdc>
 80048cc:	2300      	movs	r3, #0
 80048ce:	6053      	str	r3, [r2, #4]
 80048d0:	e7de      	b.n	8004890 <_malloc_r+0xa8>
 80048d2:	230c      	movs	r3, #12
 80048d4:	6033      	str	r3, [r6, #0]
 80048d6:	4630      	mov	r0, r6
 80048d8:	f000 f80c 	bl	80048f4 <__malloc_unlock>
 80048dc:	e794      	b.n	8004808 <_malloc_r+0x20>
 80048de:	6005      	str	r5, [r0, #0]
 80048e0:	e7d6      	b.n	8004890 <_malloc_r+0xa8>
 80048e2:	bf00      	nop
 80048e4:	20000100 	.word	0x20000100

080048e8 <__malloc_lock>:
 80048e8:	4801      	ldr	r0, [pc, #4]	@ (80048f0 <__malloc_lock+0x8>)
 80048ea:	f000 b9c4 	b.w	8004c76 <__retarget_lock_acquire_recursive>
 80048ee:	bf00      	nop
 80048f0:	20000244 	.word	0x20000244

080048f4 <__malloc_unlock>:
 80048f4:	4801      	ldr	r0, [pc, #4]	@ (80048fc <__malloc_unlock+0x8>)
 80048f6:	f000 b9bf 	b.w	8004c78 <__retarget_lock_release_recursive>
 80048fa:	bf00      	nop
 80048fc:	20000244 	.word	0x20000244

08004900 <std>:
 8004900:	2300      	movs	r3, #0
 8004902:	b510      	push	{r4, lr}
 8004904:	4604      	mov	r4, r0
 8004906:	e9c0 3300 	strd	r3, r3, [r0]
 800490a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800490e:	6083      	str	r3, [r0, #8]
 8004910:	8181      	strh	r1, [r0, #12]
 8004912:	6643      	str	r3, [r0, #100]	@ 0x64
 8004914:	81c2      	strh	r2, [r0, #14]
 8004916:	6183      	str	r3, [r0, #24]
 8004918:	4619      	mov	r1, r3
 800491a:	2208      	movs	r2, #8
 800491c:	305c      	adds	r0, #92	@ 0x5c
 800491e:	f000 f920 	bl	8004b62 <memset>
 8004922:	4b0d      	ldr	r3, [pc, #52]	@ (8004958 <std+0x58>)
 8004924:	6263      	str	r3, [r4, #36]	@ 0x24
 8004926:	4b0d      	ldr	r3, [pc, #52]	@ (800495c <std+0x5c>)
 8004928:	62a3      	str	r3, [r4, #40]	@ 0x28
 800492a:	4b0d      	ldr	r3, [pc, #52]	@ (8004960 <std+0x60>)
 800492c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800492e:	4b0d      	ldr	r3, [pc, #52]	@ (8004964 <std+0x64>)
 8004930:	6323      	str	r3, [r4, #48]	@ 0x30
 8004932:	4b0d      	ldr	r3, [pc, #52]	@ (8004968 <std+0x68>)
 8004934:	6224      	str	r4, [r4, #32]
 8004936:	429c      	cmp	r4, r3
 8004938:	d006      	beq.n	8004948 <std+0x48>
 800493a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800493e:	4294      	cmp	r4, r2
 8004940:	d002      	beq.n	8004948 <std+0x48>
 8004942:	33d0      	adds	r3, #208	@ 0xd0
 8004944:	429c      	cmp	r4, r3
 8004946:	d105      	bne.n	8004954 <std+0x54>
 8004948:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800494c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004950:	f000 b990 	b.w	8004c74 <__retarget_lock_init_recursive>
 8004954:	bd10      	pop	{r4, pc}
 8004956:	bf00      	nop
 8004958:	08004aa9 	.word	0x08004aa9
 800495c:	08004acb 	.word	0x08004acb
 8004960:	08004b03 	.word	0x08004b03
 8004964:	08004b27 	.word	0x08004b27
 8004968:	20000104 	.word	0x20000104

0800496c <stdio_exit_handler>:
 800496c:	4a02      	ldr	r2, [pc, #8]	@ (8004978 <stdio_exit_handler+0xc>)
 800496e:	4903      	ldr	r1, [pc, #12]	@ (800497c <stdio_exit_handler+0x10>)
 8004970:	4803      	ldr	r0, [pc, #12]	@ (8004980 <stdio_exit_handler+0x14>)
 8004972:	f000 b87b 	b.w	8004a6c <_fwalk_sglue>
 8004976:	bf00      	nop
 8004978:	20000010 	.word	0x20000010
 800497c:	080053e1 	.word	0x080053e1
 8004980:	20000020 	.word	0x20000020

08004984 <cleanup_stdio>:
 8004984:	6841      	ldr	r1, [r0, #4]
 8004986:	4b0c      	ldr	r3, [pc, #48]	@ (80049b8 <cleanup_stdio+0x34>)
 8004988:	4299      	cmp	r1, r3
 800498a:	b510      	push	{r4, lr}
 800498c:	4604      	mov	r4, r0
 800498e:	d001      	beq.n	8004994 <cleanup_stdio+0x10>
 8004990:	f000 fd26 	bl	80053e0 <_fflush_r>
 8004994:	68a1      	ldr	r1, [r4, #8]
 8004996:	4b09      	ldr	r3, [pc, #36]	@ (80049bc <cleanup_stdio+0x38>)
 8004998:	4299      	cmp	r1, r3
 800499a:	d002      	beq.n	80049a2 <cleanup_stdio+0x1e>
 800499c:	4620      	mov	r0, r4
 800499e:	f000 fd1f 	bl	80053e0 <_fflush_r>
 80049a2:	68e1      	ldr	r1, [r4, #12]
 80049a4:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <cleanup_stdio+0x3c>)
 80049a6:	4299      	cmp	r1, r3
 80049a8:	d004      	beq.n	80049b4 <cleanup_stdio+0x30>
 80049aa:	4620      	mov	r0, r4
 80049ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049b0:	f000 bd16 	b.w	80053e0 <_fflush_r>
 80049b4:	bd10      	pop	{r4, pc}
 80049b6:	bf00      	nop
 80049b8:	20000104 	.word	0x20000104
 80049bc:	2000016c 	.word	0x2000016c
 80049c0:	200001d4 	.word	0x200001d4

080049c4 <global_stdio_init.part.0>:
 80049c4:	b510      	push	{r4, lr}
 80049c6:	4b0b      	ldr	r3, [pc, #44]	@ (80049f4 <global_stdio_init.part.0+0x30>)
 80049c8:	4c0b      	ldr	r4, [pc, #44]	@ (80049f8 <global_stdio_init.part.0+0x34>)
 80049ca:	4a0c      	ldr	r2, [pc, #48]	@ (80049fc <global_stdio_init.part.0+0x38>)
 80049cc:	601a      	str	r2, [r3, #0]
 80049ce:	4620      	mov	r0, r4
 80049d0:	2200      	movs	r2, #0
 80049d2:	2104      	movs	r1, #4
 80049d4:	f7ff ff94 	bl	8004900 <std>
 80049d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80049dc:	2201      	movs	r2, #1
 80049de:	2109      	movs	r1, #9
 80049e0:	f7ff ff8e 	bl	8004900 <std>
 80049e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80049e8:	2202      	movs	r2, #2
 80049ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049ee:	2112      	movs	r1, #18
 80049f0:	f7ff bf86 	b.w	8004900 <std>
 80049f4:	2000023c 	.word	0x2000023c
 80049f8:	20000104 	.word	0x20000104
 80049fc:	0800496d 	.word	0x0800496d

08004a00 <__sfp_lock_acquire>:
 8004a00:	4801      	ldr	r0, [pc, #4]	@ (8004a08 <__sfp_lock_acquire+0x8>)
 8004a02:	f000 b938 	b.w	8004c76 <__retarget_lock_acquire_recursive>
 8004a06:	bf00      	nop
 8004a08:	20000245 	.word	0x20000245

08004a0c <__sfp_lock_release>:
 8004a0c:	4801      	ldr	r0, [pc, #4]	@ (8004a14 <__sfp_lock_release+0x8>)
 8004a0e:	f000 b933 	b.w	8004c78 <__retarget_lock_release_recursive>
 8004a12:	bf00      	nop
 8004a14:	20000245 	.word	0x20000245

08004a18 <__sinit>:
 8004a18:	b510      	push	{r4, lr}
 8004a1a:	4604      	mov	r4, r0
 8004a1c:	f7ff fff0 	bl	8004a00 <__sfp_lock_acquire>
 8004a20:	6a23      	ldr	r3, [r4, #32]
 8004a22:	b11b      	cbz	r3, 8004a2c <__sinit+0x14>
 8004a24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a28:	f7ff bff0 	b.w	8004a0c <__sfp_lock_release>
 8004a2c:	4b04      	ldr	r3, [pc, #16]	@ (8004a40 <__sinit+0x28>)
 8004a2e:	6223      	str	r3, [r4, #32]
 8004a30:	4b04      	ldr	r3, [pc, #16]	@ (8004a44 <__sinit+0x2c>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d1f5      	bne.n	8004a24 <__sinit+0xc>
 8004a38:	f7ff ffc4 	bl	80049c4 <global_stdio_init.part.0>
 8004a3c:	e7f2      	b.n	8004a24 <__sinit+0xc>
 8004a3e:	bf00      	nop
 8004a40:	08004985 	.word	0x08004985
 8004a44:	2000023c 	.word	0x2000023c

08004a48 <fiprintf>:
 8004a48:	b40e      	push	{r1, r2, r3}
 8004a4a:	b503      	push	{r0, r1, lr}
 8004a4c:	4601      	mov	r1, r0
 8004a4e:	ab03      	add	r3, sp, #12
 8004a50:	4805      	ldr	r0, [pc, #20]	@ (8004a68 <fiprintf+0x20>)
 8004a52:	f853 2b04 	ldr.w	r2, [r3], #4
 8004a56:	6800      	ldr	r0, [r0, #0]
 8004a58:	9301      	str	r3, [sp, #4]
 8004a5a:	f000 f997 	bl	8004d8c <_vfiprintf_r>
 8004a5e:	b002      	add	sp, #8
 8004a60:	f85d eb04 	ldr.w	lr, [sp], #4
 8004a64:	b003      	add	sp, #12
 8004a66:	4770      	bx	lr
 8004a68:	2000001c 	.word	0x2000001c

08004a6c <_fwalk_sglue>:
 8004a6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a70:	4607      	mov	r7, r0
 8004a72:	4688      	mov	r8, r1
 8004a74:	4614      	mov	r4, r2
 8004a76:	2600      	movs	r6, #0
 8004a78:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004a7c:	f1b9 0901 	subs.w	r9, r9, #1
 8004a80:	d505      	bpl.n	8004a8e <_fwalk_sglue+0x22>
 8004a82:	6824      	ldr	r4, [r4, #0]
 8004a84:	2c00      	cmp	r4, #0
 8004a86:	d1f7      	bne.n	8004a78 <_fwalk_sglue+0xc>
 8004a88:	4630      	mov	r0, r6
 8004a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a8e:	89ab      	ldrh	r3, [r5, #12]
 8004a90:	2b01      	cmp	r3, #1
 8004a92:	d907      	bls.n	8004aa4 <_fwalk_sglue+0x38>
 8004a94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004a98:	3301      	adds	r3, #1
 8004a9a:	d003      	beq.n	8004aa4 <_fwalk_sglue+0x38>
 8004a9c:	4629      	mov	r1, r5
 8004a9e:	4638      	mov	r0, r7
 8004aa0:	47c0      	blx	r8
 8004aa2:	4306      	orrs	r6, r0
 8004aa4:	3568      	adds	r5, #104	@ 0x68
 8004aa6:	e7e9      	b.n	8004a7c <_fwalk_sglue+0x10>

08004aa8 <__sread>:
 8004aa8:	b510      	push	{r4, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ab0:	f000 f882 	bl	8004bb8 <_read_r>
 8004ab4:	2800      	cmp	r0, #0
 8004ab6:	bfab      	itete	ge
 8004ab8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004aba:	89a3      	ldrhlt	r3, [r4, #12]
 8004abc:	181b      	addge	r3, r3, r0
 8004abe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004ac2:	bfac      	ite	ge
 8004ac4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004ac6:	81a3      	strhlt	r3, [r4, #12]
 8004ac8:	bd10      	pop	{r4, pc}

08004aca <__swrite>:
 8004aca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004ace:	461f      	mov	r7, r3
 8004ad0:	898b      	ldrh	r3, [r1, #12]
 8004ad2:	05db      	lsls	r3, r3, #23
 8004ad4:	4605      	mov	r5, r0
 8004ad6:	460c      	mov	r4, r1
 8004ad8:	4616      	mov	r6, r2
 8004ada:	d505      	bpl.n	8004ae8 <__swrite+0x1e>
 8004adc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	f000 f856 	bl	8004b94 <_lseek_r>
 8004ae8:	89a3      	ldrh	r3, [r4, #12]
 8004aea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004aee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	4632      	mov	r2, r6
 8004af6:	463b      	mov	r3, r7
 8004af8:	4628      	mov	r0, r5
 8004afa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004afe:	f000 b87d 	b.w	8004bfc <_write_r>

08004b02 <__sseek>:
 8004b02:	b510      	push	{r4, lr}
 8004b04:	460c      	mov	r4, r1
 8004b06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b0a:	f000 f843 	bl	8004b94 <_lseek_r>
 8004b0e:	1c43      	adds	r3, r0, #1
 8004b10:	89a3      	ldrh	r3, [r4, #12]
 8004b12:	bf15      	itete	ne
 8004b14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004b16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004b1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004b1e:	81a3      	strheq	r3, [r4, #12]
 8004b20:	bf18      	it	ne
 8004b22:	81a3      	strhne	r3, [r4, #12]
 8004b24:	bd10      	pop	{r4, pc}

08004b26 <__sclose>:
 8004b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b2a:	f000 b823 	b.w	8004b74 <_close_r>

08004b2e <memmove>:
 8004b2e:	4288      	cmp	r0, r1
 8004b30:	b510      	push	{r4, lr}
 8004b32:	eb01 0402 	add.w	r4, r1, r2
 8004b36:	d902      	bls.n	8004b3e <memmove+0x10>
 8004b38:	4284      	cmp	r4, r0
 8004b3a:	4623      	mov	r3, r4
 8004b3c:	d807      	bhi.n	8004b4e <memmove+0x20>
 8004b3e:	1e43      	subs	r3, r0, #1
 8004b40:	42a1      	cmp	r1, r4
 8004b42:	d008      	beq.n	8004b56 <memmove+0x28>
 8004b44:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b48:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4c:	e7f8      	b.n	8004b40 <memmove+0x12>
 8004b4e:	4402      	add	r2, r0
 8004b50:	4601      	mov	r1, r0
 8004b52:	428a      	cmp	r2, r1
 8004b54:	d100      	bne.n	8004b58 <memmove+0x2a>
 8004b56:	bd10      	pop	{r4, pc}
 8004b58:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b60:	e7f7      	b.n	8004b52 <memmove+0x24>

08004b62 <memset>:
 8004b62:	4402      	add	r2, r0
 8004b64:	4603      	mov	r3, r0
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d100      	bne.n	8004b6c <memset+0xa>
 8004b6a:	4770      	bx	lr
 8004b6c:	f803 1b01 	strb.w	r1, [r3], #1
 8004b70:	e7f9      	b.n	8004b66 <memset+0x4>
	...

08004b74 <_close_r>:
 8004b74:	b538      	push	{r3, r4, r5, lr}
 8004b76:	4d06      	ldr	r5, [pc, #24]	@ (8004b90 <_close_r+0x1c>)
 8004b78:	2300      	movs	r3, #0
 8004b7a:	4604      	mov	r4, r0
 8004b7c:	4608      	mov	r0, r1
 8004b7e:	602b      	str	r3, [r5, #0]
 8004b80:	f7fc fbfe 	bl	8001380 <_close>
 8004b84:	1c43      	adds	r3, r0, #1
 8004b86:	d102      	bne.n	8004b8e <_close_r+0x1a>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	b103      	cbz	r3, 8004b8e <_close_r+0x1a>
 8004b8c:	6023      	str	r3, [r4, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
 8004b90:	20000240 	.word	0x20000240

08004b94 <_lseek_r>:
 8004b94:	b538      	push	{r3, r4, r5, lr}
 8004b96:	4d07      	ldr	r5, [pc, #28]	@ (8004bb4 <_lseek_r+0x20>)
 8004b98:	4604      	mov	r4, r0
 8004b9a:	4608      	mov	r0, r1
 8004b9c:	4611      	mov	r1, r2
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	602a      	str	r2, [r5, #0]
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f7fc fc13 	bl	80013ce <_lseek>
 8004ba8:	1c43      	adds	r3, r0, #1
 8004baa:	d102      	bne.n	8004bb2 <_lseek_r+0x1e>
 8004bac:	682b      	ldr	r3, [r5, #0]
 8004bae:	b103      	cbz	r3, 8004bb2 <_lseek_r+0x1e>
 8004bb0:	6023      	str	r3, [r4, #0]
 8004bb2:	bd38      	pop	{r3, r4, r5, pc}
 8004bb4:	20000240 	.word	0x20000240

08004bb8 <_read_r>:
 8004bb8:	b538      	push	{r3, r4, r5, lr}
 8004bba:	4d07      	ldr	r5, [pc, #28]	@ (8004bd8 <_read_r+0x20>)
 8004bbc:	4604      	mov	r4, r0
 8004bbe:	4608      	mov	r0, r1
 8004bc0:	4611      	mov	r1, r2
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	602a      	str	r2, [r5, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f7fc fba1 	bl	800130e <_read>
 8004bcc:	1c43      	adds	r3, r0, #1
 8004bce:	d102      	bne.n	8004bd6 <_read_r+0x1e>
 8004bd0:	682b      	ldr	r3, [r5, #0]
 8004bd2:	b103      	cbz	r3, 8004bd6 <_read_r+0x1e>
 8004bd4:	6023      	str	r3, [r4, #0]
 8004bd6:	bd38      	pop	{r3, r4, r5, pc}
 8004bd8:	20000240 	.word	0x20000240

08004bdc <_sbrk_r>:
 8004bdc:	b538      	push	{r3, r4, r5, lr}
 8004bde:	4d06      	ldr	r5, [pc, #24]	@ (8004bf8 <_sbrk_r+0x1c>)
 8004be0:	2300      	movs	r3, #0
 8004be2:	4604      	mov	r4, r0
 8004be4:	4608      	mov	r0, r1
 8004be6:	602b      	str	r3, [r5, #0]
 8004be8:	f7fc fbfe 	bl	80013e8 <_sbrk>
 8004bec:	1c43      	adds	r3, r0, #1
 8004bee:	d102      	bne.n	8004bf6 <_sbrk_r+0x1a>
 8004bf0:	682b      	ldr	r3, [r5, #0]
 8004bf2:	b103      	cbz	r3, 8004bf6 <_sbrk_r+0x1a>
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	bd38      	pop	{r3, r4, r5, pc}
 8004bf8:	20000240 	.word	0x20000240

08004bfc <_write_r>:
 8004bfc:	b538      	push	{r3, r4, r5, lr}
 8004bfe:	4d07      	ldr	r5, [pc, #28]	@ (8004c1c <_write_r+0x20>)
 8004c00:	4604      	mov	r4, r0
 8004c02:	4608      	mov	r0, r1
 8004c04:	4611      	mov	r1, r2
 8004c06:	2200      	movs	r2, #0
 8004c08:	602a      	str	r2, [r5, #0]
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f7fc fb9c 	bl	8001348 <_write>
 8004c10:	1c43      	adds	r3, r0, #1
 8004c12:	d102      	bne.n	8004c1a <_write_r+0x1e>
 8004c14:	682b      	ldr	r3, [r5, #0]
 8004c16:	b103      	cbz	r3, 8004c1a <_write_r+0x1e>
 8004c18:	6023      	str	r3, [r4, #0]
 8004c1a:	bd38      	pop	{r3, r4, r5, pc}
 8004c1c:	20000240 	.word	0x20000240

08004c20 <__errno>:
 8004c20:	4b01      	ldr	r3, [pc, #4]	@ (8004c28 <__errno+0x8>)
 8004c22:	6818      	ldr	r0, [r3, #0]
 8004c24:	4770      	bx	lr
 8004c26:	bf00      	nop
 8004c28:	2000001c 	.word	0x2000001c

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	4d0d      	ldr	r5, [pc, #52]	@ (8004c64 <__libc_init_array+0x38>)
 8004c30:	4c0d      	ldr	r4, [pc, #52]	@ (8004c68 <__libc_init_array+0x3c>)
 8004c32:	1b64      	subs	r4, r4, r5
 8004c34:	10a4      	asrs	r4, r4, #2
 8004c36:	2600      	movs	r6, #0
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	4d0b      	ldr	r5, [pc, #44]	@ (8004c6c <__libc_init_array+0x40>)
 8004c3e:	4c0c      	ldr	r4, [pc, #48]	@ (8004c70 <__libc_init_array+0x44>)
 8004c40:	f000 fd52 	bl	80056e8 <_init>
 8004c44:	1b64      	subs	r4, r4, r5
 8004c46:	10a4      	asrs	r4, r4, #2
 8004c48:	2600      	movs	r6, #0
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	08006aec 	.word	0x08006aec
 8004c68:	08006aec 	.word	0x08006aec
 8004c6c:	08006aec 	.word	0x08006aec
 8004c70:	08006af0 	.word	0x08006af0

08004c74 <__retarget_lock_init_recursive>:
 8004c74:	4770      	bx	lr

08004c76 <__retarget_lock_acquire_recursive>:
 8004c76:	4770      	bx	lr

08004c78 <__retarget_lock_release_recursive>:
 8004c78:	4770      	bx	lr

08004c7a <memcpy>:
 8004c7a:	440a      	add	r2, r1
 8004c7c:	4291      	cmp	r1, r2
 8004c7e:	f100 33ff 	add.w	r3, r0, #4294967295
 8004c82:	d100      	bne.n	8004c86 <memcpy+0xc>
 8004c84:	4770      	bx	lr
 8004c86:	b510      	push	{r4, lr}
 8004c88:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004c90:	4291      	cmp	r1, r2
 8004c92:	d1f9      	bne.n	8004c88 <memcpy+0xe>
 8004c94:	bd10      	pop	{r4, pc}

08004c96 <abort>:
 8004c96:	b508      	push	{r3, lr}
 8004c98:	2006      	movs	r0, #6
 8004c9a:	f000 fc85 	bl	80055a8 <raise>
 8004c9e:	2001      	movs	r0, #1
 8004ca0:	f7fc fb2a 	bl	80012f8 <_exit>

08004ca4 <_free_r>:
 8004ca4:	b538      	push	{r3, r4, r5, lr}
 8004ca6:	4605      	mov	r5, r0
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	d041      	beq.n	8004d30 <_free_r+0x8c>
 8004cac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cb0:	1f0c      	subs	r4, r1, #4
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	bfb8      	it	lt
 8004cb6:	18e4      	addlt	r4, r4, r3
 8004cb8:	f7ff fe16 	bl	80048e8 <__malloc_lock>
 8004cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8004d34 <_free_r+0x90>)
 8004cbe:	6813      	ldr	r3, [r2, #0]
 8004cc0:	b933      	cbnz	r3, 8004cd0 <_free_r+0x2c>
 8004cc2:	6063      	str	r3, [r4, #4]
 8004cc4:	6014      	str	r4, [r2, #0]
 8004cc6:	4628      	mov	r0, r5
 8004cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004ccc:	f7ff be12 	b.w	80048f4 <__malloc_unlock>
 8004cd0:	42a3      	cmp	r3, r4
 8004cd2:	d908      	bls.n	8004ce6 <_free_r+0x42>
 8004cd4:	6820      	ldr	r0, [r4, #0]
 8004cd6:	1821      	adds	r1, r4, r0
 8004cd8:	428b      	cmp	r3, r1
 8004cda:	bf01      	itttt	eq
 8004cdc:	6819      	ldreq	r1, [r3, #0]
 8004cde:	685b      	ldreq	r3, [r3, #4]
 8004ce0:	1809      	addeq	r1, r1, r0
 8004ce2:	6021      	streq	r1, [r4, #0]
 8004ce4:	e7ed      	b.n	8004cc2 <_free_r+0x1e>
 8004ce6:	461a      	mov	r2, r3
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	b10b      	cbz	r3, 8004cf0 <_free_r+0x4c>
 8004cec:	42a3      	cmp	r3, r4
 8004cee:	d9fa      	bls.n	8004ce6 <_free_r+0x42>
 8004cf0:	6811      	ldr	r1, [r2, #0]
 8004cf2:	1850      	adds	r0, r2, r1
 8004cf4:	42a0      	cmp	r0, r4
 8004cf6:	d10b      	bne.n	8004d10 <_free_r+0x6c>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	1850      	adds	r0, r2, r1
 8004cfe:	4283      	cmp	r3, r0
 8004d00:	6011      	str	r1, [r2, #0]
 8004d02:	d1e0      	bne.n	8004cc6 <_free_r+0x22>
 8004d04:	6818      	ldr	r0, [r3, #0]
 8004d06:	685b      	ldr	r3, [r3, #4]
 8004d08:	6053      	str	r3, [r2, #4]
 8004d0a:	4408      	add	r0, r1
 8004d0c:	6010      	str	r0, [r2, #0]
 8004d0e:	e7da      	b.n	8004cc6 <_free_r+0x22>
 8004d10:	d902      	bls.n	8004d18 <_free_r+0x74>
 8004d12:	230c      	movs	r3, #12
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	e7d6      	b.n	8004cc6 <_free_r+0x22>
 8004d18:	6820      	ldr	r0, [r4, #0]
 8004d1a:	1821      	adds	r1, r4, r0
 8004d1c:	428b      	cmp	r3, r1
 8004d1e:	bf04      	itt	eq
 8004d20:	6819      	ldreq	r1, [r3, #0]
 8004d22:	685b      	ldreq	r3, [r3, #4]
 8004d24:	6063      	str	r3, [r4, #4]
 8004d26:	bf04      	itt	eq
 8004d28:	1809      	addeq	r1, r1, r0
 8004d2a:	6021      	streq	r1, [r4, #0]
 8004d2c:	6054      	str	r4, [r2, #4]
 8004d2e:	e7ca      	b.n	8004cc6 <_free_r+0x22>
 8004d30:	bd38      	pop	{r3, r4, r5, pc}
 8004d32:	bf00      	nop
 8004d34:	20000100 	.word	0x20000100

08004d38 <__sfputc_r>:
 8004d38:	6893      	ldr	r3, [r2, #8]
 8004d3a:	3b01      	subs	r3, #1
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	b410      	push	{r4}
 8004d40:	6093      	str	r3, [r2, #8]
 8004d42:	da08      	bge.n	8004d56 <__sfputc_r+0x1e>
 8004d44:	6994      	ldr	r4, [r2, #24]
 8004d46:	42a3      	cmp	r3, r4
 8004d48:	db01      	blt.n	8004d4e <__sfputc_r+0x16>
 8004d4a:	290a      	cmp	r1, #10
 8004d4c:	d103      	bne.n	8004d56 <__sfputc_r+0x1e>
 8004d4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d52:	f000 bb6d 	b.w	8005430 <__swbuf_r>
 8004d56:	6813      	ldr	r3, [r2, #0]
 8004d58:	1c58      	adds	r0, r3, #1
 8004d5a:	6010      	str	r0, [r2, #0]
 8004d5c:	7019      	strb	r1, [r3, #0]
 8004d5e:	4608      	mov	r0, r1
 8004d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <__sfputs_r>:
 8004d66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d68:	4606      	mov	r6, r0
 8004d6a:	460f      	mov	r7, r1
 8004d6c:	4614      	mov	r4, r2
 8004d6e:	18d5      	adds	r5, r2, r3
 8004d70:	42ac      	cmp	r4, r5
 8004d72:	d101      	bne.n	8004d78 <__sfputs_r+0x12>
 8004d74:	2000      	movs	r0, #0
 8004d76:	e007      	b.n	8004d88 <__sfputs_r+0x22>
 8004d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d7c:	463a      	mov	r2, r7
 8004d7e:	4630      	mov	r0, r6
 8004d80:	f7ff ffda 	bl	8004d38 <__sfputc_r>
 8004d84:	1c43      	adds	r3, r0, #1
 8004d86:	d1f3      	bne.n	8004d70 <__sfputs_r+0xa>
 8004d88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004d8c <_vfiprintf_r>:
 8004d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d90:	460d      	mov	r5, r1
 8004d92:	b09d      	sub	sp, #116	@ 0x74
 8004d94:	4614      	mov	r4, r2
 8004d96:	4698      	mov	r8, r3
 8004d98:	4606      	mov	r6, r0
 8004d9a:	b118      	cbz	r0, 8004da4 <_vfiprintf_r+0x18>
 8004d9c:	6a03      	ldr	r3, [r0, #32]
 8004d9e:	b90b      	cbnz	r3, 8004da4 <_vfiprintf_r+0x18>
 8004da0:	f7ff fe3a 	bl	8004a18 <__sinit>
 8004da4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004da6:	07d9      	lsls	r1, r3, #31
 8004da8:	d405      	bmi.n	8004db6 <_vfiprintf_r+0x2a>
 8004daa:	89ab      	ldrh	r3, [r5, #12]
 8004dac:	059a      	lsls	r2, r3, #22
 8004dae:	d402      	bmi.n	8004db6 <_vfiprintf_r+0x2a>
 8004db0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004db2:	f7ff ff60 	bl	8004c76 <__retarget_lock_acquire_recursive>
 8004db6:	89ab      	ldrh	r3, [r5, #12]
 8004db8:	071b      	lsls	r3, r3, #28
 8004dba:	d501      	bpl.n	8004dc0 <_vfiprintf_r+0x34>
 8004dbc:	692b      	ldr	r3, [r5, #16]
 8004dbe:	b99b      	cbnz	r3, 8004de8 <_vfiprintf_r+0x5c>
 8004dc0:	4629      	mov	r1, r5
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	f000 fb72 	bl	80054ac <__swsetup_r>
 8004dc8:	b170      	cbz	r0, 8004de8 <_vfiprintf_r+0x5c>
 8004dca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dcc:	07dc      	lsls	r4, r3, #31
 8004dce:	d504      	bpl.n	8004dda <_vfiprintf_r+0x4e>
 8004dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd4:	b01d      	add	sp, #116	@ 0x74
 8004dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	0598      	lsls	r0, r3, #22
 8004dde:	d4f7      	bmi.n	8004dd0 <_vfiprintf_r+0x44>
 8004de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004de2:	f7ff ff49 	bl	8004c78 <__retarget_lock_release_recursive>
 8004de6:	e7f3      	b.n	8004dd0 <_vfiprintf_r+0x44>
 8004de8:	2300      	movs	r3, #0
 8004dea:	9309      	str	r3, [sp, #36]	@ 0x24
 8004dec:	2320      	movs	r3, #32
 8004dee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004df2:	f8cd 800c 	str.w	r8, [sp, #12]
 8004df6:	2330      	movs	r3, #48	@ 0x30
 8004df8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004fa8 <_vfiprintf_r+0x21c>
 8004dfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e00:	f04f 0901 	mov.w	r9, #1
 8004e04:	4623      	mov	r3, r4
 8004e06:	469a      	mov	sl, r3
 8004e08:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e0c:	b10a      	cbz	r2, 8004e12 <_vfiprintf_r+0x86>
 8004e0e:	2a25      	cmp	r2, #37	@ 0x25
 8004e10:	d1f9      	bne.n	8004e06 <_vfiprintf_r+0x7a>
 8004e12:	ebba 0b04 	subs.w	fp, sl, r4
 8004e16:	d00b      	beq.n	8004e30 <_vfiprintf_r+0xa4>
 8004e18:	465b      	mov	r3, fp
 8004e1a:	4622      	mov	r2, r4
 8004e1c:	4629      	mov	r1, r5
 8004e1e:	4630      	mov	r0, r6
 8004e20:	f7ff ffa1 	bl	8004d66 <__sfputs_r>
 8004e24:	3001      	adds	r0, #1
 8004e26:	f000 80a7 	beq.w	8004f78 <_vfiprintf_r+0x1ec>
 8004e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e2c:	445a      	add	r2, fp
 8004e2e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e30:	f89a 3000 	ldrb.w	r3, [sl]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 809f 	beq.w	8004f78 <_vfiprintf_r+0x1ec>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e44:	f10a 0a01 	add.w	sl, sl, #1
 8004e48:	9304      	str	r3, [sp, #16]
 8004e4a:	9307      	str	r3, [sp, #28]
 8004e4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e50:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e52:	4654      	mov	r4, sl
 8004e54:	2205      	movs	r2, #5
 8004e56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5a:	4853      	ldr	r0, [pc, #332]	@ (8004fa8 <_vfiprintf_r+0x21c>)
 8004e5c:	f7fb f9b8 	bl	80001d0 <memchr>
 8004e60:	9a04      	ldr	r2, [sp, #16]
 8004e62:	b9d8      	cbnz	r0, 8004e9c <_vfiprintf_r+0x110>
 8004e64:	06d1      	lsls	r1, r2, #27
 8004e66:	bf44      	itt	mi
 8004e68:	2320      	movmi	r3, #32
 8004e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e6e:	0713      	lsls	r3, r2, #28
 8004e70:	bf44      	itt	mi
 8004e72:	232b      	movmi	r3, #43	@ 0x2b
 8004e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e78:	f89a 3000 	ldrb.w	r3, [sl]
 8004e7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e7e:	d015      	beq.n	8004eac <_vfiprintf_r+0x120>
 8004e80:	9a07      	ldr	r2, [sp, #28]
 8004e82:	4654      	mov	r4, sl
 8004e84:	2000      	movs	r0, #0
 8004e86:	f04f 0c0a 	mov.w	ip, #10
 8004e8a:	4621      	mov	r1, r4
 8004e8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004e90:	3b30      	subs	r3, #48	@ 0x30
 8004e92:	2b09      	cmp	r3, #9
 8004e94:	d94b      	bls.n	8004f2e <_vfiprintf_r+0x1a2>
 8004e96:	b1b0      	cbz	r0, 8004ec6 <_vfiprintf_r+0x13a>
 8004e98:	9207      	str	r2, [sp, #28]
 8004e9a:	e014      	b.n	8004ec6 <_vfiprintf_r+0x13a>
 8004e9c:	eba0 0308 	sub.w	r3, r0, r8
 8004ea0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	9304      	str	r3, [sp, #16]
 8004ea8:	46a2      	mov	sl, r4
 8004eaa:	e7d2      	b.n	8004e52 <_vfiprintf_r+0xc6>
 8004eac:	9b03      	ldr	r3, [sp, #12]
 8004eae:	1d19      	adds	r1, r3, #4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	9103      	str	r1, [sp, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	bfbb      	ittet	lt
 8004eb8:	425b      	neglt	r3, r3
 8004eba:	f042 0202 	orrlt.w	r2, r2, #2
 8004ebe:	9307      	strge	r3, [sp, #28]
 8004ec0:	9307      	strlt	r3, [sp, #28]
 8004ec2:	bfb8      	it	lt
 8004ec4:	9204      	strlt	r2, [sp, #16]
 8004ec6:	7823      	ldrb	r3, [r4, #0]
 8004ec8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004eca:	d10a      	bne.n	8004ee2 <_vfiprintf_r+0x156>
 8004ecc:	7863      	ldrb	r3, [r4, #1]
 8004ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ed0:	d132      	bne.n	8004f38 <_vfiprintf_r+0x1ac>
 8004ed2:	9b03      	ldr	r3, [sp, #12]
 8004ed4:	1d1a      	adds	r2, r3, #4
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	9203      	str	r2, [sp, #12]
 8004eda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004ede:	3402      	adds	r4, #2
 8004ee0:	9305      	str	r3, [sp, #20]
 8004ee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004fb8 <_vfiprintf_r+0x22c>
 8004ee6:	7821      	ldrb	r1, [r4, #0]
 8004ee8:	2203      	movs	r2, #3
 8004eea:	4650      	mov	r0, sl
 8004eec:	f7fb f970 	bl	80001d0 <memchr>
 8004ef0:	b138      	cbz	r0, 8004f02 <_vfiprintf_r+0x176>
 8004ef2:	9b04      	ldr	r3, [sp, #16]
 8004ef4:	eba0 000a 	sub.w	r0, r0, sl
 8004ef8:	2240      	movs	r2, #64	@ 0x40
 8004efa:	4082      	lsls	r2, r0
 8004efc:	4313      	orrs	r3, r2
 8004efe:	3401      	adds	r4, #1
 8004f00:	9304      	str	r3, [sp, #16]
 8004f02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f06:	4829      	ldr	r0, [pc, #164]	@ (8004fac <_vfiprintf_r+0x220>)
 8004f08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f0c:	2206      	movs	r2, #6
 8004f0e:	f7fb f95f 	bl	80001d0 <memchr>
 8004f12:	2800      	cmp	r0, #0
 8004f14:	d03f      	beq.n	8004f96 <_vfiprintf_r+0x20a>
 8004f16:	4b26      	ldr	r3, [pc, #152]	@ (8004fb0 <_vfiprintf_r+0x224>)
 8004f18:	bb1b      	cbnz	r3, 8004f62 <_vfiprintf_r+0x1d6>
 8004f1a:	9b03      	ldr	r3, [sp, #12]
 8004f1c:	3307      	adds	r3, #7
 8004f1e:	f023 0307 	bic.w	r3, r3, #7
 8004f22:	3308      	adds	r3, #8
 8004f24:	9303      	str	r3, [sp, #12]
 8004f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f28:	443b      	add	r3, r7
 8004f2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f2c:	e76a      	b.n	8004e04 <_vfiprintf_r+0x78>
 8004f2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f32:	460c      	mov	r4, r1
 8004f34:	2001      	movs	r0, #1
 8004f36:	e7a8      	b.n	8004e8a <_vfiprintf_r+0xfe>
 8004f38:	2300      	movs	r3, #0
 8004f3a:	3401      	adds	r4, #1
 8004f3c:	9305      	str	r3, [sp, #20]
 8004f3e:	4619      	mov	r1, r3
 8004f40:	f04f 0c0a 	mov.w	ip, #10
 8004f44:	4620      	mov	r0, r4
 8004f46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f4a:	3a30      	subs	r2, #48	@ 0x30
 8004f4c:	2a09      	cmp	r2, #9
 8004f4e:	d903      	bls.n	8004f58 <_vfiprintf_r+0x1cc>
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d0c6      	beq.n	8004ee2 <_vfiprintf_r+0x156>
 8004f54:	9105      	str	r1, [sp, #20]
 8004f56:	e7c4      	b.n	8004ee2 <_vfiprintf_r+0x156>
 8004f58:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f5c:	4604      	mov	r4, r0
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e7f0      	b.n	8004f44 <_vfiprintf_r+0x1b8>
 8004f62:	ab03      	add	r3, sp, #12
 8004f64:	9300      	str	r3, [sp, #0]
 8004f66:	462a      	mov	r2, r5
 8004f68:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <_vfiprintf_r+0x228>)
 8004f6a:	a904      	add	r1, sp, #16
 8004f6c:	4630      	mov	r0, r6
 8004f6e:	f3af 8000 	nop.w
 8004f72:	4607      	mov	r7, r0
 8004f74:	1c78      	adds	r0, r7, #1
 8004f76:	d1d6      	bne.n	8004f26 <_vfiprintf_r+0x19a>
 8004f78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004f7a:	07d9      	lsls	r1, r3, #31
 8004f7c:	d405      	bmi.n	8004f8a <_vfiprintf_r+0x1fe>
 8004f7e:	89ab      	ldrh	r3, [r5, #12]
 8004f80:	059a      	lsls	r2, r3, #22
 8004f82:	d402      	bmi.n	8004f8a <_vfiprintf_r+0x1fe>
 8004f84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004f86:	f7ff fe77 	bl	8004c78 <__retarget_lock_release_recursive>
 8004f8a:	89ab      	ldrh	r3, [r5, #12]
 8004f8c:	065b      	lsls	r3, r3, #25
 8004f8e:	f53f af1f 	bmi.w	8004dd0 <_vfiprintf_r+0x44>
 8004f92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004f94:	e71e      	b.n	8004dd4 <_vfiprintf_r+0x48>
 8004f96:	ab03      	add	r3, sp, #12
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	462a      	mov	r2, r5
 8004f9c:	4b05      	ldr	r3, [pc, #20]	@ (8004fb4 <_vfiprintf_r+0x228>)
 8004f9e:	a904      	add	r1, sp, #16
 8004fa0:	4630      	mov	r0, r6
 8004fa2:	f000 f879 	bl	8005098 <_printf_i>
 8004fa6:	e7e4      	b.n	8004f72 <_vfiprintf_r+0x1e6>
 8004fa8:	08006aaf 	.word	0x08006aaf
 8004fac:	08006ab9 	.word	0x08006ab9
 8004fb0:	00000000 	.word	0x00000000
 8004fb4:	08004d67 	.word	0x08004d67
 8004fb8:	08006ab5 	.word	0x08006ab5

08004fbc <_printf_common>:
 8004fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004fc0:	4616      	mov	r6, r2
 8004fc2:	4698      	mov	r8, r3
 8004fc4:	688a      	ldr	r2, [r1, #8]
 8004fc6:	690b      	ldr	r3, [r1, #16]
 8004fc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	bfb8      	it	lt
 8004fd0:	4613      	movlt	r3, r2
 8004fd2:	6033      	str	r3, [r6, #0]
 8004fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004fd8:	4607      	mov	r7, r0
 8004fda:	460c      	mov	r4, r1
 8004fdc:	b10a      	cbz	r2, 8004fe2 <_printf_common+0x26>
 8004fde:	3301      	adds	r3, #1
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	6823      	ldr	r3, [r4, #0]
 8004fe4:	0699      	lsls	r1, r3, #26
 8004fe6:	bf42      	ittt	mi
 8004fe8:	6833      	ldrmi	r3, [r6, #0]
 8004fea:	3302      	addmi	r3, #2
 8004fec:	6033      	strmi	r3, [r6, #0]
 8004fee:	6825      	ldr	r5, [r4, #0]
 8004ff0:	f015 0506 	ands.w	r5, r5, #6
 8004ff4:	d106      	bne.n	8005004 <_printf_common+0x48>
 8004ff6:	f104 0a19 	add.w	sl, r4, #25
 8004ffa:	68e3      	ldr	r3, [r4, #12]
 8004ffc:	6832      	ldr	r2, [r6, #0]
 8004ffe:	1a9b      	subs	r3, r3, r2
 8005000:	42ab      	cmp	r3, r5
 8005002:	dc26      	bgt.n	8005052 <_printf_common+0x96>
 8005004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005008:	6822      	ldr	r2, [r4, #0]
 800500a:	3b00      	subs	r3, #0
 800500c:	bf18      	it	ne
 800500e:	2301      	movne	r3, #1
 8005010:	0692      	lsls	r2, r2, #26
 8005012:	d42b      	bmi.n	800506c <_printf_common+0xb0>
 8005014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005018:	4641      	mov	r1, r8
 800501a:	4638      	mov	r0, r7
 800501c:	47c8      	blx	r9
 800501e:	3001      	adds	r0, #1
 8005020:	d01e      	beq.n	8005060 <_printf_common+0xa4>
 8005022:	6823      	ldr	r3, [r4, #0]
 8005024:	6922      	ldr	r2, [r4, #16]
 8005026:	f003 0306 	and.w	r3, r3, #6
 800502a:	2b04      	cmp	r3, #4
 800502c:	bf02      	ittt	eq
 800502e:	68e5      	ldreq	r5, [r4, #12]
 8005030:	6833      	ldreq	r3, [r6, #0]
 8005032:	1aed      	subeq	r5, r5, r3
 8005034:	68a3      	ldr	r3, [r4, #8]
 8005036:	bf0c      	ite	eq
 8005038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800503c:	2500      	movne	r5, #0
 800503e:	4293      	cmp	r3, r2
 8005040:	bfc4      	itt	gt
 8005042:	1a9b      	subgt	r3, r3, r2
 8005044:	18ed      	addgt	r5, r5, r3
 8005046:	2600      	movs	r6, #0
 8005048:	341a      	adds	r4, #26
 800504a:	42b5      	cmp	r5, r6
 800504c:	d11a      	bne.n	8005084 <_printf_common+0xc8>
 800504e:	2000      	movs	r0, #0
 8005050:	e008      	b.n	8005064 <_printf_common+0xa8>
 8005052:	2301      	movs	r3, #1
 8005054:	4652      	mov	r2, sl
 8005056:	4641      	mov	r1, r8
 8005058:	4638      	mov	r0, r7
 800505a:	47c8      	blx	r9
 800505c:	3001      	adds	r0, #1
 800505e:	d103      	bne.n	8005068 <_printf_common+0xac>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005068:	3501      	adds	r5, #1
 800506a:	e7c6      	b.n	8004ffa <_printf_common+0x3e>
 800506c:	18e1      	adds	r1, r4, r3
 800506e:	1c5a      	adds	r2, r3, #1
 8005070:	2030      	movs	r0, #48	@ 0x30
 8005072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005076:	4422      	add	r2, r4
 8005078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800507c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005080:	3302      	adds	r3, #2
 8005082:	e7c7      	b.n	8005014 <_printf_common+0x58>
 8005084:	2301      	movs	r3, #1
 8005086:	4622      	mov	r2, r4
 8005088:	4641      	mov	r1, r8
 800508a:	4638      	mov	r0, r7
 800508c:	47c8      	blx	r9
 800508e:	3001      	adds	r0, #1
 8005090:	d0e6      	beq.n	8005060 <_printf_common+0xa4>
 8005092:	3601      	adds	r6, #1
 8005094:	e7d9      	b.n	800504a <_printf_common+0x8e>
	...

08005098 <_printf_i>:
 8005098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800509c:	7e0f      	ldrb	r7, [r1, #24]
 800509e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050a0:	2f78      	cmp	r7, #120	@ 0x78
 80050a2:	4691      	mov	r9, r2
 80050a4:	4680      	mov	r8, r0
 80050a6:	460c      	mov	r4, r1
 80050a8:	469a      	mov	sl, r3
 80050aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050ae:	d807      	bhi.n	80050c0 <_printf_i+0x28>
 80050b0:	2f62      	cmp	r7, #98	@ 0x62
 80050b2:	d80a      	bhi.n	80050ca <_printf_i+0x32>
 80050b4:	2f00      	cmp	r7, #0
 80050b6:	f000 80d2 	beq.w	800525e <_printf_i+0x1c6>
 80050ba:	2f58      	cmp	r7, #88	@ 0x58
 80050bc:	f000 80b9 	beq.w	8005232 <_printf_i+0x19a>
 80050c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050c8:	e03a      	b.n	8005140 <_printf_i+0xa8>
 80050ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050ce:	2b15      	cmp	r3, #21
 80050d0:	d8f6      	bhi.n	80050c0 <_printf_i+0x28>
 80050d2:	a101      	add	r1, pc, #4	@ (adr r1, 80050d8 <_printf_i+0x40>)
 80050d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80050d8:	08005131 	.word	0x08005131
 80050dc:	08005145 	.word	0x08005145
 80050e0:	080050c1 	.word	0x080050c1
 80050e4:	080050c1 	.word	0x080050c1
 80050e8:	080050c1 	.word	0x080050c1
 80050ec:	080050c1 	.word	0x080050c1
 80050f0:	08005145 	.word	0x08005145
 80050f4:	080050c1 	.word	0x080050c1
 80050f8:	080050c1 	.word	0x080050c1
 80050fc:	080050c1 	.word	0x080050c1
 8005100:	080050c1 	.word	0x080050c1
 8005104:	08005245 	.word	0x08005245
 8005108:	0800516f 	.word	0x0800516f
 800510c:	080051ff 	.word	0x080051ff
 8005110:	080050c1 	.word	0x080050c1
 8005114:	080050c1 	.word	0x080050c1
 8005118:	08005267 	.word	0x08005267
 800511c:	080050c1 	.word	0x080050c1
 8005120:	0800516f 	.word	0x0800516f
 8005124:	080050c1 	.word	0x080050c1
 8005128:	080050c1 	.word	0x080050c1
 800512c:	08005207 	.word	0x08005207
 8005130:	6833      	ldr	r3, [r6, #0]
 8005132:	1d1a      	adds	r2, r3, #4
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	6032      	str	r2, [r6, #0]
 8005138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800513c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005140:	2301      	movs	r3, #1
 8005142:	e09d      	b.n	8005280 <_printf_i+0x1e8>
 8005144:	6833      	ldr	r3, [r6, #0]
 8005146:	6820      	ldr	r0, [r4, #0]
 8005148:	1d19      	adds	r1, r3, #4
 800514a:	6031      	str	r1, [r6, #0]
 800514c:	0606      	lsls	r6, r0, #24
 800514e:	d501      	bpl.n	8005154 <_printf_i+0xbc>
 8005150:	681d      	ldr	r5, [r3, #0]
 8005152:	e003      	b.n	800515c <_printf_i+0xc4>
 8005154:	0645      	lsls	r5, r0, #25
 8005156:	d5fb      	bpl.n	8005150 <_printf_i+0xb8>
 8005158:	f9b3 5000 	ldrsh.w	r5, [r3]
 800515c:	2d00      	cmp	r5, #0
 800515e:	da03      	bge.n	8005168 <_printf_i+0xd0>
 8005160:	232d      	movs	r3, #45	@ 0x2d
 8005162:	426d      	negs	r5, r5
 8005164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005168:	4859      	ldr	r0, [pc, #356]	@ (80052d0 <_printf_i+0x238>)
 800516a:	230a      	movs	r3, #10
 800516c:	e011      	b.n	8005192 <_printf_i+0xfa>
 800516e:	6821      	ldr	r1, [r4, #0]
 8005170:	6833      	ldr	r3, [r6, #0]
 8005172:	0608      	lsls	r0, r1, #24
 8005174:	f853 5b04 	ldr.w	r5, [r3], #4
 8005178:	d402      	bmi.n	8005180 <_printf_i+0xe8>
 800517a:	0649      	lsls	r1, r1, #25
 800517c:	bf48      	it	mi
 800517e:	b2ad      	uxthmi	r5, r5
 8005180:	2f6f      	cmp	r7, #111	@ 0x6f
 8005182:	4853      	ldr	r0, [pc, #332]	@ (80052d0 <_printf_i+0x238>)
 8005184:	6033      	str	r3, [r6, #0]
 8005186:	bf14      	ite	ne
 8005188:	230a      	movne	r3, #10
 800518a:	2308      	moveq	r3, #8
 800518c:	2100      	movs	r1, #0
 800518e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005192:	6866      	ldr	r6, [r4, #4]
 8005194:	60a6      	str	r6, [r4, #8]
 8005196:	2e00      	cmp	r6, #0
 8005198:	bfa2      	ittt	ge
 800519a:	6821      	ldrge	r1, [r4, #0]
 800519c:	f021 0104 	bicge.w	r1, r1, #4
 80051a0:	6021      	strge	r1, [r4, #0]
 80051a2:	b90d      	cbnz	r5, 80051a8 <_printf_i+0x110>
 80051a4:	2e00      	cmp	r6, #0
 80051a6:	d04b      	beq.n	8005240 <_printf_i+0x1a8>
 80051a8:	4616      	mov	r6, r2
 80051aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80051ae:	fb03 5711 	mls	r7, r3, r1, r5
 80051b2:	5dc7      	ldrb	r7, [r0, r7]
 80051b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051b8:	462f      	mov	r7, r5
 80051ba:	42bb      	cmp	r3, r7
 80051bc:	460d      	mov	r5, r1
 80051be:	d9f4      	bls.n	80051aa <_printf_i+0x112>
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d10b      	bne.n	80051dc <_printf_i+0x144>
 80051c4:	6823      	ldr	r3, [r4, #0]
 80051c6:	07df      	lsls	r7, r3, #31
 80051c8:	d508      	bpl.n	80051dc <_printf_i+0x144>
 80051ca:	6923      	ldr	r3, [r4, #16]
 80051cc:	6861      	ldr	r1, [r4, #4]
 80051ce:	4299      	cmp	r1, r3
 80051d0:	bfde      	ittt	le
 80051d2:	2330      	movle	r3, #48	@ 0x30
 80051d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80051d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80051dc:	1b92      	subs	r2, r2, r6
 80051de:	6122      	str	r2, [r4, #16]
 80051e0:	f8cd a000 	str.w	sl, [sp]
 80051e4:	464b      	mov	r3, r9
 80051e6:	aa03      	add	r2, sp, #12
 80051e8:	4621      	mov	r1, r4
 80051ea:	4640      	mov	r0, r8
 80051ec:	f7ff fee6 	bl	8004fbc <_printf_common>
 80051f0:	3001      	adds	r0, #1
 80051f2:	d14a      	bne.n	800528a <_printf_i+0x1f2>
 80051f4:	f04f 30ff 	mov.w	r0, #4294967295
 80051f8:	b004      	add	sp, #16
 80051fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051fe:	6823      	ldr	r3, [r4, #0]
 8005200:	f043 0320 	orr.w	r3, r3, #32
 8005204:	6023      	str	r3, [r4, #0]
 8005206:	4833      	ldr	r0, [pc, #204]	@ (80052d4 <_printf_i+0x23c>)
 8005208:	2778      	movs	r7, #120	@ 0x78
 800520a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800520e:	6823      	ldr	r3, [r4, #0]
 8005210:	6831      	ldr	r1, [r6, #0]
 8005212:	061f      	lsls	r7, r3, #24
 8005214:	f851 5b04 	ldr.w	r5, [r1], #4
 8005218:	d402      	bmi.n	8005220 <_printf_i+0x188>
 800521a:	065f      	lsls	r7, r3, #25
 800521c:	bf48      	it	mi
 800521e:	b2ad      	uxthmi	r5, r5
 8005220:	6031      	str	r1, [r6, #0]
 8005222:	07d9      	lsls	r1, r3, #31
 8005224:	bf44      	itt	mi
 8005226:	f043 0320 	orrmi.w	r3, r3, #32
 800522a:	6023      	strmi	r3, [r4, #0]
 800522c:	b11d      	cbz	r5, 8005236 <_printf_i+0x19e>
 800522e:	2310      	movs	r3, #16
 8005230:	e7ac      	b.n	800518c <_printf_i+0xf4>
 8005232:	4827      	ldr	r0, [pc, #156]	@ (80052d0 <_printf_i+0x238>)
 8005234:	e7e9      	b.n	800520a <_printf_i+0x172>
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	f023 0320 	bic.w	r3, r3, #32
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	e7f6      	b.n	800522e <_printf_i+0x196>
 8005240:	4616      	mov	r6, r2
 8005242:	e7bd      	b.n	80051c0 <_printf_i+0x128>
 8005244:	6833      	ldr	r3, [r6, #0]
 8005246:	6825      	ldr	r5, [r4, #0]
 8005248:	6961      	ldr	r1, [r4, #20]
 800524a:	1d18      	adds	r0, r3, #4
 800524c:	6030      	str	r0, [r6, #0]
 800524e:	062e      	lsls	r6, r5, #24
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	d501      	bpl.n	8005258 <_printf_i+0x1c0>
 8005254:	6019      	str	r1, [r3, #0]
 8005256:	e002      	b.n	800525e <_printf_i+0x1c6>
 8005258:	0668      	lsls	r0, r5, #25
 800525a:	d5fb      	bpl.n	8005254 <_printf_i+0x1bc>
 800525c:	8019      	strh	r1, [r3, #0]
 800525e:	2300      	movs	r3, #0
 8005260:	6123      	str	r3, [r4, #16]
 8005262:	4616      	mov	r6, r2
 8005264:	e7bc      	b.n	80051e0 <_printf_i+0x148>
 8005266:	6833      	ldr	r3, [r6, #0]
 8005268:	1d1a      	adds	r2, r3, #4
 800526a:	6032      	str	r2, [r6, #0]
 800526c:	681e      	ldr	r6, [r3, #0]
 800526e:	6862      	ldr	r2, [r4, #4]
 8005270:	2100      	movs	r1, #0
 8005272:	4630      	mov	r0, r6
 8005274:	f7fa ffac 	bl	80001d0 <memchr>
 8005278:	b108      	cbz	r0, 800527e <_printf_i+0x1e6>
 800527a:	1b80      	subs	r0, r0, r6
 800527c:	6060      	str	r0, [r4, #4]
 800527e:	6863      	ldr	r3, [r4, #4]
 8005280:	6123      	str	r3, [r4, #16]
 8005282:	2300      	movs	r3, #0
 8005284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005288:	e7aa      	b.n	80051e0 <_printf_i+0x148>
 800528a:	6923      	ldr	r3, [r4, #16]
 800528c:	4632      	mov	r2, r6
 800528e:	4649      	mov	r1, r9
 8005290:	4640      	mov	r0, r8
 8005292:	47d0      	blx	sl
 8005294:	3001      	adds	r0, #1
 8005296:	d0ad      	beq.n	80051f4 <_printf_i+0x15c>
 8005298:	6823      	ldr	r3, [r4, #0]
 800529a:	079b      	lsls	r3, r3, #30
 800529c:	d413      	bmi.n	80052c6 <_printf_i+0x22e>
 800529e:	68e0      	ldr	r0, [r4, #12]
 80052a0:	9b03      	ldr	r3, [sp, #12]
 80052a2:	4298      	cmp	r0, r3
 80052a4:	bfb8      	it	lt
 80052a6:	4618      	movlt	r0, r3
 80052a8:	e7a6      	b.n	80051f8 <_printf_i+0x160>
 80052aa:	2301      	movs	r3, #1
 80052ac:	4632      	mov	r2, r6
 80052ae:	4649      	mov	r1, r9
 80052b0:	4640      	mov	r0, r8
 80052b2:	47d0      	blx	sl
 80052b4:	3001      	adds	r0, #1
 80052b6:	d09d      	beq.n	80051f4 <_printf_i+0x15c>
 80052b8:	3501      	adds	r5, #1
 80052ba:	68e3      	ldr	r3, [r4, #12]
 80052bc:	9903      	ldr	r1, [sp, #12]
 80052be:	1a5b      	subs	r3, r3, r1
 80052c0:	42ab      	cmp	r3, r5
 80052c2:	dcf2      	bgt.n	80052aa <_printf_i+0x212>
 80052c4:	e7eb      	b.n	800529e <_printf_i+0x206>
 80052c6:	2500      	movs	r5, #0
 80052c8:	f104 0619 	add.w	r6, r4, #25
 80052cc:	e7f5      	b.n	80052ba <_printf_i+0x222>
 80052ce:	bf00      	nop
 80052d0:	08006ac0 	.word	0x08006ac0
 80052d4:	08006ad1 	.word	0x08006ad1

080052d8 <__sflush_r>:
 80052d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80052dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052e0:	0716      	lsls	r6, r2, #28
 80052e2:	4605      	mov	r5, r0
 80052e4:	460c      	mov	r4, r1
 80052e6:	d454      	bmi.n	8005392 <__sflush_r+0xba>
 80052e8:	684b      	ldr	r3, [r1, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	dc02      	bgt.n	80052f4 <__sflush_r+0x1c>
 80052ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	dd48      	ble.n	8005386 <__sflush_r+0xae>
 80052f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80052f6:	2e00      	cmp	r6, #0
 80052f8:	d045      	beq.n	8005386 <__sflush_r+0xae>
 80052fa:	2300      	movs	r3, #0
 80052fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005300:	682f      	ldr	r7, [r5, #0]
 8005302:	6a21      	ldr	r1, [r4, #32]
 8005304:	602b      	str	r3, [r5, #0]
 8005306:	d030      	beq.n	800536a <__sflush_r+0x92>
 8005308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800530a:	89a3      	ldrh	r3, [r4, #12]
 800530c:	0759      	lsls	r1, r3, #29
 800530e:	d505      	bpl.n	800531c <__sflush_r+0x44>
 8005310:	6863      	ldr	r3, [r4, #4]
 8005312:	1ad2      	subs	r2, r2, r3
 8005314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005316:	b10b      	cbz	r3, 800531c <__sflush_r+0x44>
 8005318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800531a:	1ad2      	subs	r2, r2, r3
 800531c:	2300      	movs	r3, #0
 800531e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005320:	6a21      	ldr	r1, [r4, #32]
 8005322:	4628      	mov	r0, r5
 8005324:	47b0      	blx	r6
 8005326:	1c43      	adds	r3, r0, #1
 8005328:	89a3      	ldrh	r3, [r4, #12]
 800532a:	d106      	bne.n	800533a <__sflush_r+0x62>
 800532c:	6829      	ldr	r1, [r5, #0]
 800532e:	291d      	cmp	r1, #29
 8005330:	d82b      	bhi.n	800538a <__sflush_r+0xb2>
 8005332:	4a2a      	ldr	r2, [pc, #168]	@ (80053dc <__sflush_r+0x104>)
 8005334:	410a      	asrs	r2, r1
 8005336:	07d6      	lsls	r6, r2, #31
 8005338:	d427      	bmi.n	800538a <__sflush_r+0xb2>
 800533a:	2200      	movs	r2, #0
 800533c:	6062      	str	r2, [r4, #4]
 800533e:	04d9      	lsls	r1, r3, #19
 8005340:	6922      	ldr	r2, [r4, #16]
 8005342:	6022      	str	r2, [r4, #0]
 8005344:	d504      	bpl.n	8005350 <__sflush_r+0x78>
 8005346:	1c42      	adds	r2, r0, #1
 8005348:	d101      	bne.n	800534e <__sflush_r+0x76>
 800534a:	682b      	ldr	r3, [r5, #0]
 800534c:	b903      	cbnz	r3, 8005350 <__sflush_r+0x78>
 800534e:	6560      	str	r0, [r4, #84]	@ 0x54
 8005350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005352:	602f      	str	r7, [r5, #0]
 8005354:	b1b9      	cbz	r1, 8005386 <__sflush_r+0xae>
 8005356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800535a:	4299      	cmp	r1, r3
 800535c:	d002      	beq.n	8005364 <__sflush_r+0x8c>
 800535e:	4628      	mov	r0, r5
 8005360:	f7ff fca0 	bl	8004ca4 <_free_r>
 8005364:	2300      	movs	r3, #0
 8005366:	6363      	str	r3, [r4, #52]	@ 0x34
 8005368:	e00d      	b.n	8005386 <__sflush_r+0xae>
 800536a:	2301      	movs	r3, #1
 800536c:	4628      	mov	r0, r5
 800536e:	47b0      	blx	r6
 8005370:	4602      	mov	r2, r0
 8005372:	1c50      	adds	r0, r2, #1
 8005374:	d1c9      	bne.n	800530a <__sflush_r+0x32>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d0c6      	beq.n	800530a <__sflush_r+0x32>
 800537c:	2b1d      	cmp	r3, #29
 800537e:	d001      	beq.n	8005384 <__sflush_r+0xac>
 8005380:	2b16      	cmp	r3, #22
 8005382:	d11e      	bne.n	80053c2 <__sflush_r+0xea>
 8005384:	602f      	str	r7, [r5, #0]
 8005386:	2000      	movs	r0, #0
 8005388:	e022      	b.n	80053d0 <__sflush_r+0xf8>
 800538a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800538e:	b21b      	sxth	r3, r3
 8005390:	e01b      	b.n	80053ca <__sflush_r+0xf2>
 8005392:	690f      	ldr	r7, [r1, #16]
 8005394:	2f00      	cmp	r7, #0
 8005396:	d0f6      	beq.n	8005386 <__sflush_r+0xae>
 8005398:	0793      	lsls	r3, r2, #30
 800539a:	680e      	ldr	r6, [r1, #0]
 800539c:	bf08      	it	eq
 800539e:	694b      	ldreq	r3, [r1, #20]
 80053a0:	600f      	str	r7, [r1, #0]
 80053a2:	bf18      	it	ne
 80053a4:	2300      	movne	r3, #0
 80053a6:	eba6 0807 	sub.w	r8, r6, r7
 80053aa:	608b      	str	r3, [r1, #8]
 80053ac:	f1b8 0f00 	cmp.w	r8, #0
 80053b0:	dde9      	ble.n	8005386 <__sflush_r+0xae>
 80053b2:	6a21      	ldr	r1, [r4, #32]
 80053b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053b6:	4643      	mov	r3, r8
 80053b8:	463a      	mov	r2, r7
 80053ba:	4628      	mov	r0, r5
 80053bc:	47b0      	blx	r6
 80053be:	2800      	cmp	r0, #0
 80053c0:	dc08      	bgt.n	80053d4 <__sflush_r+0xfc>
 80053c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053d4:	4407      	add	r7, r0
 80053d6:	eba8 0800 	sub.w	r8, r8, r0
 80053da:	e7e7      	b.n	80053ac <__sflush_r+0xd4>
 80053dc:	dfbffffe 	.word	0xdfbffffe

080053e0 <_fflush_r>:
 80053e0:	b538      	push	{r3, r4, r5, lr}
 80053e2:	690b      	ldr	r3, [r1, #16]
 80053e4:	4605      	mov	r5, r0
 80053e6:	460c      	mov	r4, r1
 80053e8:	b913      	cbnz	r3, 80053f0 <_fflush_r+0x10>
 80053ea:	2500      	movs	r5, #0
 80053ec:	4628      	mov	r0, r5
 80053ee:	bd38      	pop	{r3, r4, r5, pc}
 80053f0:	b118      	cbz	r0, 80053fa <_fflush_r+0x1a>
 80053f2:	6a03      	ldr	r3, [r0, #32]
 80053f4:	b90b      	cbnz	r3, 80053fa <_fflush_r+0x1a>
 80053f6:	f7ff fb0f 	bl	8004a18 <__sinit>
 80053fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d0f3      	beq.n	80053ea <_fflush_r+0xa>
 8005402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005404:	07d0      	lsls	r0, r2, #31
 8005406:	d404      	bmi.n	8005412 <_fflush_r+0x32>
 8005408:	0599      	lsls	r1, r3, #22
 800540a:	d402      	bmi.n	8005412 <_fflush_r+0x32>
 800540c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800540e:	f7ff fc32 	bl	8004c76 <__retarget_lock_acquire_recursive>
 8005412:	4628      	mov	r0, r5
 8005414:	4621      	mov	r1, r4
 8005416:	f7ff ff5f 	bl	80052d8 <__sflush_r>
 800541a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800541c:	07da      	lsls	r2, r3, #31
 800541e:	4605      	mov	r5, r0
 8005420:	d4e4      	bmi.n	80053ec <_fflush_r+0xc>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	059b      	lsls	r3, r3, #22
 8005426:	d4e1      	bmi.n	80053ec <_fflush_r+0xc>
 8005428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800542a:	f7ff fc25 	bl	8004c78 <__retarget_lock_release_recursive>
 800542e:	e7dd      	b.n	80053ec <_fflush_r+0xc>

08005430 <__swbuf_r>:
 8005430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005432:	460e      	mov	r6, r1
 8005434:	4614      	mov	r4, r2
 8005436:	4605      	mov	r5, r0
 8005438:	b118      	cbz	r0, 8005442 <__swbuf_r+0x12>
 800543a:	6a03      	ldr	r3, [r0, #32]
 800543c:	b90b      	cbnz	r3, 8005442 <__swbuf_r+0x12>
 800543e:	f7ff faeb 	bl	8004a18 <__sinit>
 8005442:	69a3      	ldr	r3, [r4, #24]
 8005444:	60a3      	str	r3, [r4, #8]
 8005446:	89a3      	ldrh	r3, [r4, #12]
 8005448:	071a      	lsls	r2, r3, #28
 800544a:	d501      	bpl.n	8005450 <__swbuf_r+0x20>
 800544c:	6923      	ldr	r3, [r4, #16]
 800544e:	b943      	cbnz	r3, 8005462 <__swbuf_r+0x32>
 8005450:	4621      	mov	r1, r4
 8005452:	4628      	mov	r0, r5
 8005454:	f000 f82a 	bl	80054ac <__swsetup_r>
 8005458:	b118      	cbz	r0, 8005462 <__swbuf_r+0x32>
 800545a:	f04f 37ff 	mov.w	r7, #4294967295
 800545e:	4638      	mov	r0, r7
 8005460:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	6922      	ldr	r2, [r4, #16]
 8005466:	1a98      	subs	r0, r3, r2
 8005468:	6963      	ldr	r3, [r4, #20]
 800546a:	b2f6      	uxtb	r6, r6
 800546c:	4283      	cmp	r3, r0
 800546e:	4637      	mov	r7, r6
 8005470:	dc05      	bgt.n	800547e <__swbuf_r+0x4e>
 8005472:	4621      	mov	r1, r4
 8005474:	4628      	mov	r0, r5
 8005476:	f7ff ffb3 	bl	80053e0 <_fflush_r>
 800547a:	2800      	cmp	r0, #0
 800547c:	d1ed      	bne.n	800545a <__swbuf_r+0x2a>
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	3b01      	subs	r3, #1
 8005482:	60a3      	str	r3, [r4, #8]
 8005484:	6823      	ldr	r3, [r4, #0]
 8005486:	1c5a      	adds	r2, r3, #1
 8005488:	6022      	str	r2, [r4, #0]
 800548a:	701e      	strb	r6, [r3, #0]
 800548c:	6962      	ldr	r2, [r4, #20]
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	429a      	cmp	r2, r3
 8005492:	d004      	beq.n	800549e <__swbuf_r+0x6e>
 8005494:	89a3      	ldrh	r3, [r4, #12]
 8005496:	07db      	lsls	r3, r3, #31
 8005498:	d5e1      	bpl.n	800545e <__swbuf_r+0x2e>
 800549a:	2e0a      	cmp	r6, #10
 800549c:	d1df      	bne.n	800545e <__swbuf_r+0x2e>
 800549e:	4621      	mov	r1, r4
 80054a0:	4628      	mov	r0, r5
 80054a2:	f7ff ff9d 	bl	80053e0 <_fflush_r>
 80054a6:	2800      	cmp	r0, #0
 80054a8:	d0d9      	beq.n	800545e <__swbuf_r+0x2e>
 80054aa:	e7d6      	b.n	800545a <__swbuf_r+0x2a>

080054ac <__swsetup_r>:
 80054ac:	b538      	push	{r3, r4, r5, lr}
 80054ae:	4b29      	ldr	r3, [pc, #164]	@ (8005554 <__swsetup_r+0xa8>)
 80054b0:	4605      	mov	r5, r0
 80054b2:	6818      	ldr	r0, [r3, #0]
 80054b4:	460c      	mov	r4, r1
 80054b6:	b118      	cbz	r0, 80054c0 <__swsetup_r+0x14>
 80054b8:	6a03      	ldr	r3, [r0, #32]
 80054ba:	b90b      	cbnz	r3, 80054c0 <__swsetup_r+0x14>
 80054bc:	f7ff faac 	bl	8004a18 <__sinit>
 80054c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054c4:	0719      	lsls	r1, r3, #28
 80054c6:	d422      	bmi.n	800550e <__swsetup_r+0x62>
 80054c8:	06da      	lsls	r2, r3, #27
 80054ca:	d407      	bmi.n	80054dc <__swsetup_r+0x30>
 80054cc:	2209      	movs	r2, #9
 80054ce:	602a      	str	r2, [r5, #0]
 80054d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80054d4:	81a3      	strh	r3, [r4, #12]
 80054d6:	f04f 30ff 	mov.w	r0, #4294967295
 80054da:	e033      	b.n	8005544 <__swsetup_r+0x98>
 80054dc:	0758      	lsls	r0, r3, #29
 80054de:	d512      	bpl.n	8005506 <__swsetup_r+0x5a>
 80054e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80054e2:	b141      	cbz	r1, 80054f6 <__swsetup_r+0x4a>
 80054e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80054e8:	4299      	cmp	r1, r3
 80054ea:	d002      	beq.n	80054f2 <__swsetup_r+0x46>
 80054ec:	4628      	mov	r0, r5
 80054ee:	f7ff fbd9 	bl	8004ca4 <_free_r>
 80054f2:	2300      	movs	r3, #0
 80054f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80054f6:	89a3      	ldrh	r3, [r4, #12]
 80054f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80054fc:	81a3      	strh	r3, [r4, #12]
 80054fe:	2300      	movs	r3, #0
 8005500:	6063      	str	r3, [r4, #4]
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	6023      	str	r3, [r4, #0]
 8005506:	89a3      	ldrh	r3, [r4, #12]
 8005508:	f043 0308 	orr.w	r3, r3, #8
 800550c:	81a3      	strh	r3, [r4, #12]
 800550e:	6923      	ldr	r3, [r4, #16]
 8005510:	b94b      	cbnz	r3, 8005526 <__swsetup_r+0x7a>
 8005512:	89a3      	ldrh	r3, [r4, #12]
 8005514:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005518:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800551c:	d003      	beq.n	8005526 <__swsetup_r+0x7a>
 800551e:	4621      	mov	r1, r4
 8005520:	4628      	mov	r0, r5
 8005522:	f000 f883 	bl	800562c <__smakebuf_r>
 8005526:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800552a:	f013 0201 	ands.w	r2, r3, #1
 800552e:	d00a      	beq.n	8005546 <__swsetup_r+0x9a>
 8005530:	2200      	movs	r2, #0
 8005532:	60a2      	str	r2, [r4, #8]
 8005534:	6962      	ldr	r2, [r4, #20]
 8005536:	4252      	negs	r2, r2
 8005538:	61a2      	str	r2, [r4, #24]
 800553a:	6922      	ldr	r2, [r4, #16]
 800553c:	b942      	cbnz	r2, 8005550 <__swsetup_r+0xa4>
 800553e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005542:	d1c5      	bne.n	80054d0 <__swsetup_r+0x24>
 8005544:	bd38      	pop	{r3, r4, r5, pc}
 8005546:	0799      	lsls	r1, r3, #30
 8005548:	bf58      	it	pl
 800554a:	6962      	ldrpl	r2, [r4, #20]
 800554c:	60a2      	str	r2, [r4, #8]
 800554e:	e7f4      	b.n	800553a <__swsetup_r+0x8e>
 8005550:	2000      	movs	r0, #0
 8005552:	e7f7      	b.n	8005544 <__swsetup_r+0x98>
 8005554:	2000001c 	.word	0x2000001c

08005558 <_raise_r>:
 8005558:	291f      	cmp	r1, #31
 800555a:	b538      	push	{r3, r4, r5, lr}
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	d904      	bls.n	800556c <_raise_r+0x14>
 8005562:	2316      	movs	r3, #22
 8005564:	6003      	str	r3, [r0, #0]
 8005566:	f04f 30ff 	mov.w	r0, #4294967295
 800556a:	bd38      	pop	{r3, r4, r5, pc}
 800556c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800556e:	b112      	cbz	r2, 8005576 <_raise_r+0x1e>
 8005570:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005574:	b94b      	cbnz	r3, 800558a <_raise_r+0x32>
 8005576:	4628      	mov	r0, r5
 8005578:	f000 f830 	bl	80055dc <_getpid_r>
 800557c:	4622      	mov	r2, r4
 800557e:	4601      	mov	r1, r0
 8005580:	4628      	mov	r0, r5
 8005582:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005586:	f000 b817 	b.w	80055b8 <_kill_r>
 800558a:	2b01      	cmp	r3, #1
 800558c:	d00a      	beq.n	80055a4 <_raise_r+0x4c>
 800558e:	1c59      	adds	r1, r3, #1
 8005590:	d103      	bne.n	800559a <_raise_r+0x42>
 8005592:	2316      	movs	r3, #22
 8005594:	6003      	str	r3, [r0, #0]
 8005596:	2001      	movs	r0, #1
 8005598:	e7e7      	b.n	800556a <_raise_r+0x12>
 800559a:	2100      	movs	r1, #0
 800559c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80055a0:	4620      	mov	r0, r4
 80055a2:	4798      	blx	r3
 80055a4:	2000      	movs	r0, #0
 80055a6:	e7e0      	b.n	800556a <_raise_r+0x12>

080055a8 <raise>:
 80055a8:	4b02      	ldr	r3, [pc, #8]	@ (80055b4 <raise+0xc>)
 80055aa:	4601      	mov	r1, r0
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	f7ff bfd3 	b.w	8005558 <_raise_r>
 80055b2:	bf00      	nop
 80055b4:	2000001c 	.word	0x2000001c

080055b8 <_kill_r>:
 80055b8:	b538      	push	{r3, r4, r5, lr}
 80055ba:	4d07      	ldr	r5, [pc, #28]	@ (80055d8 <_kill_r+0x20>)
 80055bc:	2300      	movs	r3, #0
 80055be:	4604      	mov	r4, r0
 80055c0:	4608      	mov	r0, r1
 80055c2:	4611      	mov	r1, r2
 80055c4:	602b      	str	r3, [r5, #0]
 80055c6:	f7fb fe87 	bl	80012d8 <_kill>
 80055ca:	1c43      	adds	r3, r0, #1
 80055cc:	d102      	bne.n	80055d4 <_kill_r+0x1c>
 80055ce:	682b      	ldr	r3, [r5, #0]
 80055d0:	b103      	cbz	r3, 80055d4 <_kill_r+0x1c>
 80055d2:	6023      	str	r3, [r4, #0]
 80055d4:	bd38      	pop	{r3, r4, r5, pc}
 80055d6:	bf00      	nop
 80055d8:	20000240 	.word	0x20000240

080055dc <_getpid_r>:
 80055dc:	f7fb be74 	b.w	80012c8 <_getpid>

080055e0 <__swhatbuf_r>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	460c      	mov	r4, r1
 80055e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055e8:	2900      	cmp	r1, #0
 80055ea:	b096      	sub	sp, #88	@ 0x58
 80055ec:	4615      	mov	r5, r2
 80055ee:	461e      	mov	r6, r3
 80055f0:	da0d      	bge.n	800560e <__swhatbuf_r+0x2e>
 80055f2:	89a3      	ldrh	r3, [r4, #12]
 80055f4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80055f8:	f04f 0100 	mov.w	r1, #0
 80055fc:	bf14      	ite	ne
 80055fe:	2340      	movne	r3, #64	@ 0x40
 8005600:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005604:	2000      	movs	r0, #0
 8005606:	6031      	str	r1, [r6, #0]
 8005608:	602b      	str	r3, [r5, #0]
 800560a:	b016      	add	sp, #88	@ 0x58
 800560c:	bd70      	pop	{r4, r5, r6, pc}
 800560e:	466a      	mov	r2, sp
 8005610:	f000 f848 	bl	80056a4 <_fstat_r>
 8005614:	2800      	cmp	r0, #0
 8005616:	dbec      	blt.n	80055f2 <__swhatbuf_r+0x12>
 8005618:	9901      	ldr	r1, [sp, #4]
 800561a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800561e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005622:	4259      	negs	r1, r3
 8005624:	4159      	adcs	r1, r3
 8005626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800562a:	e7eb      	b.n	8005604 <__swhatbuf_r+0x24>

0800562c <__smakebuf_r>:
 800562c:	898b      	ldrh	r3, [r1, #12]
 800562e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005630:	079d      	lsls	r5, r3, #30
 8005632:	4606      	mov	r6, r0
 8005634:	460c      	mov	r4, r1
 8005636:	d507      	bpl.n	8005648 <__smakebuf_r+0x1c>
 8005638:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800563c:	6023      	str	r3, [r4, #0]
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	2301      	movs	r3, #1
 8005642:	6163      	str	r3, [r4, #20]
 8005644:	b003      	add	sp, #12
 8005646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005648:	ab01      	add	r3, sp, #4
 800564a:	466a      	mov	r2, sp
 800564c:	f7ff ffc8 	bl	80055e0 <__swhatbuf_r>
 8005650:	9f00      	ldr	r7, [sp, #0]
 8005652:	4605      	mov	r5, r0
 8005654:	4639      	mov	r1, r7
 8005656:	4630      	mov	r0, r6
 8005658:	f7ff f8c6 	bl	80047e8 <_malloc_r>
 800565c:	b948      	cbnz	r0, 8005672 <__smakebuf_r+0x46>
 800565e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005662:	059a      	lsls	r2, r3, #22
 8005664:	d4ee      	bmi.n	8005644 <__smakebuf_r+0x18>
 8005666:	f023 0303 	bic.w	r3, r3, #3
 800566a:	f043 0302 	orr.w	r3, r3, #2
 800566e:	81a3      	strh	r3, [r4, #12]
 8005670:	e7e2      	b.n	8005638 <__smakebuf_r+0xc>
 8005672:	89a3      	ldrh	r3, [r4, #12]
 8005674:	6020      	str	r0, [r4, #0]
 8005676:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800567a:	81a3      	strh	r3, [r4, #12]
 800567c:	9b01      	ldr	r3, [sp, #4]
 800567e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005682:	b15b      	cbz	r3, 800569c <__smakebuf_r+0x70>
 8005684:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005688:	4630      	mov	r0, r6
 800568a:	f000 f81d 	bl	80056c8 <_isatty_r>
 800568e:	b128      	cbz	r0, 800569c <__smakebuf_r+0x70>
 8005690:	89a3      	ldrh	r3, [r4, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	f043 0301 	orr.w	r3, r3, #1
 800569a:	81a3      	strh	r3, [r4, #12]
 800569c:	89a3      	ldrh	r3, [r4, #12]
 800569e:	431d      	orrs	r5, r3
 80056a0:	81a5      	strh	r5, [r4, #12]
 80056a2:	e7cf      	b.n	8005644 <__smakebuf_r+0x18>

080056a4 <_fstat_r>:
 80056a4:	b538      	push	{r3, r4, r5, lr}
 80056a6:	4d07      	ldr	r5, [pc, #28]	@ (80056c4 <_fstat_r+0x20>)
 80056a8:	2300      	movs	r3, #0
 80056aa:	4604      	mov	r4, r0
 80056ac:	4608      	mov	r0, r1
 80056ae:	4611      	mov	r1, r2
 80056b0:	602b      	str	r3, [r5, #0]
 80056b2:	f7fb fe71 	bl	8001398 <_fstat>
 80056b6:	1c43      	adds	r3, r0, #1
 80056b8:	d102      	bne.n	80056c0 <_fstat_r+0x1c>
 80056ba:	682b      	ldr	r3, [r5, #0]
 80056bc:	b103      	cbz	r3, 80056c0 <_fstat_r+0x1c>
 80056be:	6023      	str	r3, [r4, #0]
 80056c0:	bd38      	pop	{r3, r4, r5, pc}
 80056c2:	bf00      	nop
 80056c4:	20000240 	.word	0x20000240

080056c8 <_isatty_r>:
 80056c8:	b538      	push	{r3, r4, r5, lr}
 80056ca:	4d06      	ldr	r5, [pc, #24]	@ (80056e4 <_isatty_r+0x1c>)
 80056cc:	2300      	movs	r3, #0
 80056ce:	4604      	mov	r4, r0
 80056d0:	4608      	mov	r0, r1
 80056d2:	602b      	str	r3, [r5, #0]
 80056d4:	f7fb fe70 	bl	80013b8 <_isatty>
 80056d8:	1c43      	adds	r3, r0, #1
 80056da:	d102      	bne.n	80056e2 <_isatty_r+0x1a>
 80056dc:	682b      	ldr	r3, [r5, #0]
 80056de:	b103      	cbz	r3, 80056e2 <_isatty_r+0x1a>
 80056e0:	6023      	str	r3, [r4, #0]
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20000240 	.word	0x20000240

080056e8 <_init>:
 80056e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ea:	bf00      	nop
 80056ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ee:	bc08      	pop	{r3}
 80056f0:	469e      	mov	lr, r3
 80056f2:	4770      	bx	lr

080056f4 <_fini>:
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f6:	bf00      	nop
 80056f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056fa:	bc08      	pop	{r3}
 80056fc:	469e      	mov	lr, r3
 80056fe:	4770      	bx	lr
